-- ./mad ex-fodo-dbg.mad

local deltap = 0
local ncell  = 1

--------------------------------------------------------------------------------

local beam, beta0, sequence, survey, track, cofind, twiss, match in MAD
local sbend, quadrupole, sextupole in MAD.element
local printf in MAD.utility
local dp2pt in MAD.gphys
local pi in math

---------------------------------------

local function mk_seq ()
  -- classes
  local mb = sbend      { l=2 }
  local mq = quadrupole { l=1 }
  local ms = sextupole  { l=0.5 }

  -- prepare beam depending on the user's charge sign...
  local sb = beam { particle = 'positron', energy=2 }

  printf("particle: '%s', charge = %d, energy = %g, mass = %.8e\n",
             sb.particle,   sb.charge,   sb.energy,     sb.mass)

  -- parametric fodo cell (for fun, could use deferred expressions)
  local cell = \ang, chg -> sequence 'cell' {
      l=10, refer='entry',
      mq 'qf' { at=0, k1=0.3 },
      ms 'sf' {       k2=0       },
      mb 'b1' { at=2, k0=ang/mb.l, angle=ang },

      mq 'qd' { at=5, k1=-0.3 },
      ms 'sd' {       k2=0        },
      mb 'b2' { at=7, k0=ang/mb.l, angle=ang },
    }

  -- build full ring, attach beam
  return sequence 'seq' { beam=sb, ncell*cell(pi/ncell, sb.charge) }
end

--------------------------------------------------------------------------------
-- program starts here
--------------------------------------------------------------------------------

-- create sequence -----
local seq = mk_seq()

-- initial conditions --
local X0 = {-1e-3,1e-4, -1e-4,1e-3, 0,0}

-- columns selection
local tk_col = {'name', 's', 'x', 'px', 'y', 'py', 't', 'pt' }
local tw_col = {'name', 's', 'x', 'px', 'y', 'py', 't', 'pt',
                'beta11', 'beta22', 'mu1', 'mu2', 'alfa11', 'alfa22',
                'dx', 'dpx', 'dy', 'dpy'}

-- initial deltap
printf("deltap to pt= %.16g\n", dp2pt(deltap, seq.beam.beta))

-- survey --------------
local srv = survey { sequence=seq } :write('survey_n')

-- track ---------------
local trk, mfl = track { sequence=seq,
  X0=X0, deltap=deltap, method=4, observe=0, !debug=6, mapdef=1,
}
trk:write('track_n', tk_col)

os.exit()

-- cofind --------------
local trk, mfl = cofind { sequence=seq,
  X0=X0, deltap=deltap, method=4, observe=0, save=true
}
trk:write('cofind_n', tk_col)

-- twiss ---------------
local tws, mfl = twiss { sequence=seq,
  X0=beta0(X0), deltap=deltap, method=4, info=2, debug=5
}
tws:write('twtrk_n' , tk_col)
tws:write('twiss0_n', tw_col)

-- twiss+cofind --------
local tws, mfl = twiss { sequence=seq,
  X0=X0, deltap=deltap, method=4, info=2, debug=5 !, chrom=true
}
tws:write('twiss1_n', tw_col)
