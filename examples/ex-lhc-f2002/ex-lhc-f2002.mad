-- time ../mad -Oloopunroll=500 -Oinstunroll=100 -jp=vl ex-lhc-f2002.mad > ex-lhc-f2002.out 2>&1

local beam, track, twiss, match, damap, option in MAD
local mchklost, melmcol, normal                in MAD.gphys
local abs, real, imag                          in MAD.gmath
local printf, tblcat                           in MAD.utility

MADX:load("lhcb1_saved.seq", "lhcb1_saved.mad") -- convert on need
MADX:load("lhcb1_vars0.mad")

local lhcb1 in MADX

-- need to create a "new" particle for MAD-X compatibility (old pmass?)
lhcb1.beam = beam {particle="xproton", charge=1, mass=0.938272046, energy=450}

-- select observed elements
local observed in MAD.element.flags

lhcb1:deselect(observed)
lhcb1:  select(observed, {pattern="BPM"})
lhcb1:  select(observed, {pattern="IP"})
lhcb1:  select(observed, {pattern="MO"})

-- track and twiss columns
local tkcols = {'name','s','l','x','px','y','py'}
local twcols = {'name','s','beta11','beta22','mu1','mu2','dx','dy','x','y'}

-------------------------------------------------------------------------------o
-- small checks                                                              --o
-------------------------------------------------------------------------------o

if false then -- set to true to run twiss checks

local tw = twiss {sequence=lhcb1, method=4, observe=1}

tw:write("twiss_t_n.tfs", twcols)

os.exit()
end

-------------------------------------------------------------------------------o
-- set variables in MADX env                                                 --o
-------------------------------------------------------------------------------o

MADX:open_env()

! Tune change and chroma

dQx_b1_op=-0.035;
dQy_b1_op=-0.025;
dQpx_b1_op=15;
dQpy_b1_op=15;

! Phase change

a1 = -1.22598e-05;
a2 = -1.24548e-05;
b1 = -2.89785e-05;
b2 = -2.88736e-05;

kqf_a12 = kqf_a12 + a1 ;
kqf_a23 = kqf_a23 + a1 ;
kqf_a34 = kqf_a34 + a1 ;
kqf_a45 = kqf_a45 + a1 ;
kqf_a56 = kqf_a56 - a2 ;
kqf_a67 = kqf_a67 - a2 ;
kqf_a78 = kqf_a78 - a2 ;
kqf_a81 = kqf_a81 - a2 ;
kqd_a12 = kqd_a12 + b1 ;
kqd_a23 = kqd_a23 + b1 ;
kqd_a34 = kqd_a34 + b1 ;
kqd_a45 = kqd_a45 + b1 ;
kqd_a56 = kqd_a56 - b2 ;
kqd_a67 = kqd_a67 - b2 ;
kqd_a78 = kqd_a78 - b2 ;
kqd_a81 = kqd_a81 - b2 ;

a1=  1.50366e-04;
a2=  1.44269e-04;
b1= -8.08072e-04;
b2= -8.02084e-04;

kqtf_a12b1 = kqtf_a12b1 + a1 ;
kqtf_a23b1 = kqtf_a23b1 + a1 ;
kqtf_a34b1 = kqtf_a34b1 + a1 ;
kqtf_a45b1 = kqtf_a45b1 + a1 ;
kqtf_a56b1 = kqtf_a56b1 - a2 ;
kqtf_a67b1 = kqtf_a67b1 - a2 ;
kqtf_a78b1 = kqtf_a78b1 - a2 ;
kqtf_a81b1 = kqtf_a81b1 - a2*2 ;
kqtd_a12b1 = kqtd_a12b1 + b1 ;
kqtd_a23b1 = kqtd_a23b1 + b1 ;
kqtd_a34b1 = kqtd_a34b1 + b1 ;
kqtd_a45b1 = kqtd_a45b1 + b1 ;
kqtd_a56b1 = kqtd_a56b1 - b2 ;
kqtd_a67b1 = kqtd_a67b1 - b2 ;
kqtd_a78b1 = kqtd_a78b1 - b2 ;
kqtd_a81b1 = kqtd_a81b1 - b2 ;

! Octupole knob

!ko= kmax_MO/Imax_MO * 40 / (450*3.33);
ko= 18;

kof_a81b1 = ko;
kof_a12b1 = ko;
kof_a23b1 = ko;
kof_a34b1 = ko;
kof_a45b1 = ko;
kof_a56b1 = ko;
kof_a67b1 = ko;
kof_a78b1 = ko;
kod_a81b1 = ko;
kod_a12b1 = ko;
kod_a23b1 = ko;
kod_a34b1 = ko;
kod_a45b1 = ko;
kod_a56b1 = ko;
kod_a67b1 = ko;
kod_a78b1 = ko;

!kqtf_a12b1 =  1.8475964748136660e-03
!kqtf_a23b1 = -6.6746106330028428e-05
!kqtf_a34b1 = -8.2962380212616641e-04
!kqtf_a45b1 = -1.2705509191234679e-03
!kqtf_a56b1 = -4.5717164771632505e-04
!kqtf_a67b1 =  7.4123885099377726e-04
!kqtf_a78b1 = -5.2984190642260773e-04
!kqtf_a81b1 = -1.1090458553299919e-03
!kqtd_a12b1 = -4.9498975510774785e-04
!kqtd_a23b1 =  5.5543137667949175e-04
!kqtd_a34b1 = -9.7819016510107960e-04
!kqtd_a45b1 = -1.1294696394502598e-03
!kqtd_a56b1 =  2.2146219853635199e-03
!kqtd_a67b1 =  1.4015018884123854e-03
!kqtd_a78b1 = -1.2368853947338154e-03
!kqtd_a81b1 =  4.9270634843699191e-04
!kof_a12b1 =  1.7999979668256309e+01
!kof_a23b1 =  1.7999967478464381e+01
!kof_a34b1 =  1.7999979835812240e+01
!kof_a45b1 =  1.7999966738721245e+01
!kof_a56b1 =  1.7999979670788147e+01
!kof_a67b1 =  1.7999966755898797e+01
!kof_a78b1 =  1.7999979505838926e+01
!kof_a81b1 =  1.7999967180633373e+01
!kod_a12b1 =  1.7999999145343899e+01
!kod_a23b1 =  1.7999999454752846e+01
!kod_a34b1 =  1.7999998932083400e+01
!kod_a45b1 =  1.7999999338361839e+01
!kod_a56b1 =  1.7999999173434428e+01
!kod_a67b1 =  1.7999999544929221e+01
!kod_a78b1 =  1.7999999150496251e+01
!kod_a81b1 =  1.7999999530471062e+01

MADX:close_env()

-------------------------------------------------------------------------------o
-- small checks                                                              --o
-------------------------------------------------------------------------------o

if true then -- set to true to run twiss checks

local tw = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}

tw:write("twiss_phase_n.tfs", twcols)

--[[ ref values
q1  = 62.27504896
q2  = 60.29512787
dq1 = 15.1778898
dq2 = 15.21652238

values after matching without controling q and dq
q1  = 62.12603947
q2  = 60.40530637
dq1 = 16.01746834
dq2 = 15.67221777
--]]

-- os.exit()
end

local q1_ref, q2_ref = 0.27504896, 0.29512787 -- (62 and 60)

-------------------------------------------------------------------------------o
-- match                                                                     --o
-------------------------------------------------------------------------------o

-- magnet families and sectors names
local knam = {'kqtf', 'kqtd', 'kof', 'kod'} -- 'kqf', 'kqd'
local snam = {'a12', 'a23', 'a34', 'a45', 'a56', 'a67', 'a78', 'a81'}
local b1_i = 0 -- 17 -- threshold to add 'b1'

-- list of all knobs
local ki, kn = 0, {}
for _,ks in ipairs(knam) do
for _,ss in ipairs(snam) do
  ki = ki+1
  kn[ki] = ks .. '_' .. ss .. (ki < b1_i and '' or 'b1')
end end

-- create phase space damap
local X0 = damap{nv=6, np=ki, mo=5, po=1,
                 vn=tblcat({'x','px','y','py','t','pt'}, kn)}

-- set strengths as knobs, prepare variables and monomial strings
local vars = {rtol=1e-6} -- 1 ppm -- rtol=1e-10
local knbs = {[0]=string.rep("0",ki)} -- all zeros
local kj   = 0
for _, ks in ipairs(kn) do
  kj = kj+1
  vars[kj] = { name=ks, var='MADX.'..ks, step=-MADX[ks]/1000}
  knbs[kj] = string.rep("0",kj-1) .. "1" .. string.rep("0",ki-(kj-1)-1)
  MADX[ks] = MADX[ks] + X0[ks] -- transform Ks into GTPSA
  -- MADX[ks]:print(ks)
end

-- check magnet strengths vs knobs = same TPSA (samples)
!printf("MQT.15R1.B1->k1=% -.5e, kqtf_a12b1=% -.5e\n", lhcb1['MQT.15R1.B1'].k1:get0(), MADX.kqtf_a12b1:get0())
!printf("MQT.14R2.B1->k1=% -.5e, kqtf_a23b1=% -.5e\n", lhcb1['MQT.14R2.B1'].k1:get0(), MADX.kqtf_a23b1:get0())
!printf("MQT.15R3.B1->k1=% -.5e, kqtf_a34b1=% -.5e\n", lhcb1['MQT.15R3.B1'].k1:get0(), MADX.kqtf_a34b1:get0())
!printf("MQT.14R4.B1->k1=% -.5e, kqtf_a45b1=% -.5e\n", lhcb1['MQT.14R4.B1'].k1:get0(), MADX.kqtf_a45b1:get0())

--[[
MADX-PTC
MQT.15R1.B1->k1= 1.50366e-04, kqtf.a12b1= 1.50366e-04
MQT.14R2.B1->k1=-9.08345e-04, kqtf.a23b1=-9.08345e-04
MQT.15R3.B1->k1=-9.08345e-04, kqtf.a34b1=-9.08345e-04
MQT.14R4.B1->k1= 1.50366e-04, kqtf.a45b1= 1.50366e-04
MADNG
MQT.15R1.B1->k1= 1.50366e-04, kqtf_a12b1= 1.50366e-04
MQT.14R2.B1->k1=-9.08345e-04, kqtf_a23b1=-9.08345e-04
MQT.15R3.B1->k1=-9.08345e-04, kqtf_a34b1=-9.08345e-04
MQT.14R4.B1->k1= 1.50366e-04, kqtf_a45b1= 1.50366e-04
--]]

local function prt_rdt (nf, kind)
  local a = assert(nf[kind], "invalid kind '"..kind.."'")
  for i,k in ipairs(a) do
    local v = nf[kind][k]
    printf("%4d: %s[%s] C=% .6e, S=% .6e, A=% .6e\n",i,kind,k,real(v),imag(v),abs(v))
  end
end

local function get_dq(doprt)
  local _, mflw = track{sequence=lhcb1, method=6, save=false, X0=X0}
  -- mflw[1]:get0():print("Orbit", 'line')
  local nf = normal(mflw[1]):analyse();
  if (doprt) then prt_rdt(nf, 'anh') ; prt_rdt(nf, 'gnf') end
  return nf
end

-- run once for reference values
local nf = get_dq()
local q1j1_ref = nf.anh["210000"..knbs[0]]
local q2j2_ref = nf.anh["002100"..knbs[0]]
local f2002r_ref = real(nf.gnf["200200"..knbs[0]])
local f2002i_ref = imag(nf.gnf["200200"..knbs[0]])

printf("q1_ini     = % -.6e (% -.6e)\n", q1_ref, nf.q1)
printf("q2_ini     = % -.6e (% -.6e)\n", q2_ref, nf.q2)
printf("q1j1_ini   = % -.6e\n", q1j1_ref)
printf("q2j2_ini   = % -.6e\n", q2j2_ref)
printf("f2002r_ini = % -.6e\n", f2002r_ref)
printf("f2002i_ini = % -.6e\n", f2002i_ref)

-- run once and quit
-- os.exit()

--[[ 1st pass results for cross-check
../madx64 ex-lhc-f2002.madx  1160.50s user 4.09s system 99% cpu 19:26.12 total
GNF_2_0_0_2: A=100585.3, C=-88119.94, S=48500.25 (PTC_TWISS and NORMAL)

../mad ex-lhc-f2002.mad  28.92s user 0.82s system 102% cpu 29.102 total
gnf["2002"]: A=100585.3, C=-88119.91, S=48500.32 (MAD-NG)

q1j1_ref = 3.048576e+05 -- PTC: 152429.135*2 = 304858.269 (2! missing)
q2j2_ref = 2.980216e+05 -- PTC: 149011.733*2 = 298023.465 (2! missing)
--]]

match {
  command := get_dq(),
  
  jacobian = \nf,_,jac => -- gradient not used, fill only jacobian
    assert(nf, "nf is nil in match.jacobian")

    --> parameters
    for i=1,ki do                                        --     |
      jac:set(1,i,      nf.anh["100000"..knbs[i]] or 0)  --     |
      jac:set(2,i,      nf.anh["001000"..knbs[i]] or 0)  --     |
      jac:set(3,i,      nf.anh["210000"..knbs[i]])       --     |
      jac:set(4,i,      nf.anh["002100"..knbs[i]])       --     v
      jac:set(5,i, real(nf.gnf["200200"..knbs[i]]))      -- constraints
      jac:set(6,i, imag(nf.gnf["200200"..knbs[i]]))      --
    end
    -- jac:print("JAC")
  end,
  variables = vars,
  equalities = {
    { name='q1'    , expr = \nf ->      nf.q1                      - q1_ref  , tol=1, weight=1},
    { name='q2'    , expr = \nf ->      nf.q2                      - q2_ref  , tol=1, weight=1},
    { name='q1j1'  , expr = \nf ->      nf.anh["210000"..knbs[0]]  - q1j1_ref, tol=1, weight=1},
    { name='q2j2'  , expr = \nf ->      nf.anh["002100"..knbs[0]]  - q2j2_ref, tol=1, weight=1},
    { name='f2002r', expr = \nf -> real(nf.gnf["200200"..knbs[0]]) - 0       , tol=1, weight=1},
    { name='f2002i', expr = \nf -> imag(nf.gnf["200200"..knbs[0]]) - 0       , tol=1, weight=1},
  },
  -- objective = { bisec=5 },
  maxcall=500, info=4, -- debug=3
}

-- restore strengths as scalars, print parameters to full precision (for restart/refinement)
for _, ks in ipairs(kn) do
  MADX[ks] = MADX[ks]:get0()
  printf("%s = % -.16e\n", ks, MADX[ks])
end
