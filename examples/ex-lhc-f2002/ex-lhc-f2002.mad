-- time ../mad ex-lhc-f2002.mad > ex-lhc-f2002.out 2>&1

local beam, track, twiss, match, damap, option in MAD
local normal                                   in MAD.gphys
local abs, real, imag                          in MAD.gmath
local printf, tblcat                           in MAD.utility
local observed                                 in MAD.element.flags

-- track and twiss columns
local tkcols = {'name','s','l','x','px','y','py'}
local twcols = {'name','s','beta11','beta22','mu1','mu2','dx','dy','x','y'}

-- flag to run twiss checks
local twiss_check = 0 -- 1 do checks, -1 do checks and quit (no matching)

-------------------------------------------------------------------------------o
-- load LHCB1 and LHCB2                                                      --o
-------------------------------------------------------------------------------o

MADX:load("lhcb1_saved.seq", "lhcb1_saved.mad") -- convert on need
MADX:load("lhcb2_saved.seq", "lhcb2_saved.mad") -- convert on need
MADX:load("lhc_vars0.mad")                      -- avoid warnings

local lhcb1, lhcb2 in MADX

lhcb2.dir  = -1 -- lhcb2 is reversed, i.e. bv_flag = -1

-------------------------------------------------------------------------------o
-- preliminaries                                                             --o
-------------------------------------------------------------------------------o

-- need to create a "new" proton for MAD-X compatibility (old pmass?)
local lhc_beam = beam {particle="xproton", charge=1, mass=0.938272046, energy=450}

for _,lhc in ipairs{lhcb1,lhcb2} do
  -- attach beam to sequence
  lhc.beam = lhc_beam

  -- select observed elements for twiss
  lhc:deselect(observed)
  lhc:  select(observed, {pattern="BPM"})
  lhc:  select(observed, {pattern="IP" })
  lhc:  select(observed, {pattern="MO" })
end

-------------------------------------------------------------------------------o
-- twiss checks (optional)                                                   --o
-------------------------------------------------------------------------------o

local function prt_qs (seq, tw)
  printf("% 5s:  q1 = % -.6f,  q2 = % -.6f\n", seq.name, tw. q1, tw. q2)
  printf("      dq1 = % -.6f, dq2 = % -.6f\n",           tw.dq1, tw.dq2)
end

if twiss_check ~= 0 then

  local tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}
  local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true}

  prt_qs(lhcb1, tw1) ; tw1:write("twiss_b1_n.tfs", twcols)
  prt_qs(lhcb2, tw2) ; tw2:write("twiss_b2_n.tfs", twcols)

  -- if twiss_check < 0 then os.exit() end
end

-------------------------------------------------------------------------------o
-- set variables in MADX env                                                 --o
-------------------------------------------------------------------------------o

MADX:open_env()

! Tune change and chroma

dQx_b1_op=-0.035;
dQy_b1_op=-0.025;
dQpx_b1_op=15;
dQpy_b1_op=15;

dQx_b2_op=-0.035;
dQy_b2_op=-0.025;
dQpx_b2_op=15;
dQpy_b2_op=15;

! Phase change

a1 = -1.22598e-05;
a2 = -1.24548e-05;
b1 = -2.89785e-05;
b2 = -2.88736e-05;

kqf_a12 = kqf_a12 + a1 ;
kqf_a23 = kqf_a23 + a1 ;
kqf_a34 = kqf_a34 + a1 ;
kqf_a45 = kqf_a45 + a1 ;
kqf_a56 = kqf_a56 - a2 ;
kqf_a67 = kqf_a67 - a2 ;
kqf_a78 = kqf_a78 - a2 ;
kqf_a81 = kqf_a81 - a2 ;
kqd_a12 = kqd_a12 + b1 ;
kqd_a23 = kqd_a23 + b1 ;
kqd_a34 = kqd_a34 + b1 ;
kqd_a45 = kqd_a45 + b1 ;
kqd_a56 = kqd_a56 - b2 ;
kqd_a67 = kqd_a67 - b2 ;
kqd_a78 = kqd_a78 - b2 ;
kqd_a81 = kqd_a81 - b2 ;

a1 =  1.50366e-04;
a2 =  1.44269e-04;
b1 = -8.08072e-04;
b2 = -8.02084e-04;

kqtf_a12b1 = kqtf_a12b1 + a1 ;
kqtf_a23b1 = kqtf_a23b1 + a1 ;
kqtf_a34b1 = kqtf_a34b1 + a1 ;
kqtf_a45b1 = kqtf_a45b1 + a1 ;
kqtf_a56b1 = kqtf_a56b1 - a2 ;
kqtf_a67b1 = kqtf_a67b1 - a2 ;
kqtf_a78b1 = kqtf_a78b1 - a2 ;
kqtf_a81b1 = kqtf_a81b1 - a2*2 ;
kqtd_a12b1 = kqtd_a12b1 + b1 ;
kqtd_a23b1 = kqtd_a23b1 + b1 ;
kqtd_a34b1 = kqtd_a34b1 + b1 ;
kqtd_a45b1 = kqtd_a45b1 + b1 ;
kqtd_a56b1 = kqtd_a56b1 - b2 ;
kqtd_a67b1 = kqtd_a67b1 - b2 ;
kqtd_a78b1 = kqtd_a78b1 - b2 ;
kqtd_a81b1 = kqtd_a81b1 - b2 ;

kqtf_a12b2 = kqtf_a12b2 + a1 ;
kqtf_a23b2 = kqtf_a23b2 + a1 ;
kqtf_a34b2 = kqtf_a34b2 + a1 ;
kqtf_a45b2 = kqtf_a45b2 + a1 ;
kqtf_a56b2 = kqtf_a56b2 - a2 ;
kqtf_a67b2 = kqtf_a67b2 - a2 ;
kqtf_a78b2 = kqtf_a78b2 - a2 ;
kqtf_a81b2 = kqtf_a81b2 - a2*2 ;
kqtd_a12b2 = kqtd_a12b2 + b1 ;
kqtd_a23b2 = kqtd_a23b2 + b1 ;
kqtd_a34b2 = kqtd_a34b2 + b1 ;
kqtd_a45b2 = kqtd_a45b2 + b1 ;
kqtd_a56b2 = kqtd_a56b2 - b2 ;
kqtd_a67b2 = kqtd_a67b2 - b2 ;
kqtd_a78b2 = kqtd_a78b2 - b2 ;
kqtd_a81b2 = kqtd_a81b2 - b2 ;

! Octupole knob

!ko= kmax_MO/Imax_MO * 40 / (450*3.33);
ko= 18;

kof_a81b1 = ko;
kof_a12b1 = ko;
kof_a23b1 = ko;
kof_a34b1 = ko;
kof_a45b1 = ko;
kof_a56b1 = ko;
kof_a67b1 = ko;
kof_a78b1 = ko;
kod_a81b1 = ko;
kod_a12b1 = ko;
kod_a23b1 = ko;
kod_a34b1 = ko;
kod_a45b1 = ko;
kod_a56b1 = ko;
kod_a67b1 = ko;
kod_a78b1 = ko;

kof_a81b2 = ko;
kof_a12b2 = ko;
kof_a23b2 = ko;
kof_a34b2 = ko;
kof_a45b2 = ko;
kof_a56b2 = ko;
kof_a67b2 = ko;
kof_a78b2 = ko;
kod_a81b2 = ko;
kod_a12b2 = ko;
kod_a23b2 = ko;
kod_a34b2 = ko;
kod_a45b2 = ko;
kod_a56b2 = ko;
kod_a67b2 = ko;
kod_a78b2 = ko;

!kqtf_a12b1 =  3.4131318099565866e-04;
!kqtf_a23b1 = -1.5112892444742810e-03;
!kqtf_a34b1 =  1.5319984498692195e-04;
!kqtf_a45b1 = -1.4942386100111821e-03;
!kqtf_a56b1 =  5.7649481576830088e-04;
!kqtf_a67b1 =  1.3407329435034471e-03;
!kqtf_a78b1 = -5.7125852547283825e-04;
!kqtf_a81b1 =  9.2155001949529813e-05;
!kqtd_a12b1 =  1.0560775663595310e-03;
!kqtd_a23b1 =  1.6744145527451792e-03;
!kqtd_a34b1 = -1.0493450565872580e-03;
!kqtd_a45b1 = -1.5693124473099109e-03;
!kqtd_a56b1 =  1.9374186632435415e-03;
!kqtd_a67b1 =  8.0981418264842119e-04;
!kqtd_a78b1 = -2.5311927442946162e-03;
!kqtd_a81b1 =  5.0752979084449769e-04;
! kof_a12b1 =  1.7999957480397569e+01;
! kof_a23b1 =  1.7999932407197559e+01;
! kof_a34b1 =  1.7999957436228108e+01;
! kof_a45b1 =  1.7999929646928258e+01;
! kof_a56b1 =  1.7999957024559080e+01;
! kof_a67b1 =  1.7999930159897438e+01;
! kof_a78b1 =  1.7999956958425347e+01;
! kof_a81b1 =  1.7999931520375732e+01;
! kod_a12b1 =  1.7999997672506499e+01;
! kod_a23b1 =  1.7999998746184684e+01;
! kod_a34b1 =  1.7999997497980651e+01;
! kod_a45b1 =  1.7999998406513075e+01;
! kod_a56b1 =  1.7999998025078479e+01;
! kod_a67b1 =  1.7999998852711233e+01;
! kod_a78b1 =  1.7999997985204619e+01;
! kod_a81b1 =  1.7999998715186130e+01;

!kqtf_a12b2 =  4.1362471728984196e-03;
!kqtf_a23b2 = -1.3692918604206329e-03;
!kqtf_a34b2 = -3.6852784445332038e-03;
!kqtf_a45b2 = -2.5405475997734924e-03;
!kqtf_a56b2 =  3.2022915039154848e-03;
!kqtf_a67b2 = -7.8292410961495812e-04;
!kqtf_a78b2 = -2.9907379766850963e-03;
!kqtf_a81b2 =  2.9832821637438213e-03;
!kqtd_a12b2 =  2.6180817292850750e-03;
!kqtd_a23b2 = -2.1784451787869542e-03;
!kqtd_a34b2 = -1.8313744321669506e-03;
!kqtd_a45b2 = -2.7361640322949008e-03;
!kqtd_a56b2 =  4.6236843489706953e-04;
!kqtd_a67b2 =  3.5866454080238312e-03;
!kqtd_a78b2 = -8.0264557210441001e-04;
!kqtd_a81b2 =  1.5862207594527981e-03;
! kof_a12b2 =  1.7999811200387995e+01;
! kof_a23b2 =  1.7999885957725564e+01;
! kof_a34b2 =  1.7999813987238362e+01;
! kof_a45b2 =  1.7999882995830038e+01;
! kof_a56b2 =  1.7999810578369175e+01;
! kof_a67b2 =  1.7999883226843480e+01;
! kof_a78b2 =  1.7999811593908941e+01;
! kof_a81b2 =  1.7999884459952323e+01;
! kod_a12b2 =  1.7999988954631831e+01;
! kod_a23b2 =  1.7999981733490788e+01;
! kod_a34b2 =  1.7999989185370548e+01;
! kod_a45b2 =  1.7999981221299592e+01;
! kod_a56b2 =  1.7999988556510868e+01;
! kod_a67b2 =  1.7999982750749901e+01;
! kod_a78b2 =  1.7999989209467181e+01;
! kod_a81b2 =  1.7999982426968760e+01;

MADX:close_env()

-------------------------------------------------------------------------------o
-- twiss checks (optional)                                                   --o
-------------------------------------------------------------------------------o

if twiss_check ~= 0 then

  local tw1 = twiss {sequence=lhcb1, method=4, observe=1, chrom=true}
  local tw2 = twiss {sequence=lhcb2, method=4, observe=1, chrom=true}

  prt_qs(lhcb1, tw1) ; tw1:write("twiss_phase_b1_n.tfs", twcols)
  prt_qs(lhcb2, tw2) ; tw2:write("twiss_phase_b2_n.tfs", twcols)

  if twiss_check < 0 then os.exit() end
end


--[[ ref values
LHCB1
q1  = 62.27504896
q2  = 60.29512787
dq1 = 15.1778898
dq2 = 15.21652238

LHCB2
q1  = 62.27115164
q2  = 60.29725754
dq1 = 15.15613102
dq2 = 15.23680003
--]]

-------------------------------------------------------------------------------o
-- match                                                                     --o
-------------------------------------------------------------------------------o

-- knobs families and sectors names
local knam = {'kqtf', 'kqtd', 'kof', 'kod'}
local snam = {'a12', 'a23', 'a34', 'a45', 'a56', 'a67', 'a78', 'a81'}

-- loop over lhcb1 and lhcb2
for _,bn in ipairs{'b1','b2'} do

local lhc = MADX['lhc'..bn]

io.write("\n*** Running ", lhc.name, " ***\n")

-- list of all knobs
local ki, kn = 0, {}
for _,ks in ipairs(knam) do
for _,ss in ipairs(snam) do
  ki = ki+1                      -- knob count
  kn[ki] = ks .. '_' .. ss .. bn -- knob names
end end

-- create phase space damap
local X0 = damap{nv=6, np=ki, mo=5, po=1,
                 vn=tblcat({'x','px','y','py','t','pt'}, kn)}

-- set knobs as parameters
for _,ks in ipairs(kn) do
  MADX[ks] = MADX[ks] + X0[ks] ; -- MADX[ks]:print(ks)
end

local function prt_rdt (nf, kind)
  local a = assert(nf[kind], "invalid kind '"..kind.."'")
  for i,k in ipairs(a) do
    local v = nf[kind][k]
    printf("%4d: %s[%s] A=% .6e, C=% .6e, S=% .6e\n",i,kind,k,abs(v),real(v),imag(v))
  end
end

local function get_nf(doprt)
  local nf = {}

  lhc:cycle"IP1"
  local _, mflw = track{sequence=lhc, method=4, save=false, X0=X0}
  nf.ip1 = normal(mflw[1]):analyse();

  if (doprt) then
    mflw[1]:get0():print("Orbit", 'line')
    prt_rdt(nf.ip1, 'anh') ; prt_rdt(nf.ip1, 'gnf')
  end

  lhc:cycle"IP5"
  local _, mflw = track{sequence=lhc, method=4, save=false, X0=X0}
  nf.ip5 = normal(mflw[1]):analyse();

  if (doprt) then
    mflw[1]:get0():print("Orbit", 'line')
    prt_rdt(nf.ip5, 'anh') ; prt_rdt(nf.ip5, 'gnf')
  end

  return nf
end

-- prepare monomial strings
local knbs = {[0]=string.rep("0",ki)} -- all zeros
for kj, ks in ipairs(kn) do
  knbs[kj] = string.rep("0",kj-1) .. "1" .. string.rep("0",ki-(kj-1)-1)
end

-- run once for reference values
local nf = get_nf() -- (true)
local q1_ip1_ref     =      nf.ip1.q1
local q2_ip1_ref     =      nf.ip1.q2
local q1j1_ip1_ref   =      nf.ip1.anh["210000"..knbs[0]]
local q2j2_ip1_ref   =      nf.ip1.anh["002100"..knbs[0]]
local f2002r_ip1_ref = real(nf.ip1.gnf["200200"..knbs[0]])
local f2002i_ip1_ref = imag(nf.ip1.gnf["200200"..knbs[0]])
local f4000r_ip1_ref = real(nf.ip1.gnf["400000"..knbs[0]])
local f4000i_ip1_ref = imag(nf.ip1.gnf["400000"..knbs[0]])

local q1_ip5_ref     =      nf.ip5.q1
local q2_ip5_ref     =      nf.ip5.q2
local q1j1_ip5_ref   =      nf.ip5.anh["210000"..knbs[0]]
local q2j2_ip5_ref   =      nf.ip5.anh["002100"..knbs[0]]
local f2002r_ip5_ref = real(nf.ip5.gnf["200200"..knbs[0]])
local f2002i_ip5_ref = imag(nf.ip5.gnf["200200"..knbs[0]])
local f4000r_ip5_ref = real(nf.ip5.gnf["400000"..knbs[0]])
local f4000i_ip5_ref = imag(nf.ip5.gnf["400000"..knbs[0]])

printf("q1_ip1_ini     = % -.6e\n", q1_ip1_ref)
printf("q2_ip1_ini     = % -.6e\n", q2_ip1_ref)
printf("q1j1_ip1_ini   = % -.6e\n", q1j1_ip1_ref)
printf("q2j2_ip1_ini   = % -.6e\n", q2j2_ip1_ref)
printf("f2002r_ip1_ini = % -.6e\n", f2002r_ip1_ref)
printf("f2002i_ip1_ini = % -.6e\n", f2002i_ip1_ref)
printf("f4000r_ip1_ini = % -.6e\n", f4000r_ip1_ref)
printf("f4000i_ip1_ini = % -.6e\n", f4000i_ip1_ref)

printf("q1_ip5_ini     = % -.6e\n", q1_ip5_ref)
printf("q2_ip5_ini     = % -.6e\n", q2_ip5_ref)
printf("q1j1_ip5_ini   = % -.6e\n", q1j1_ip5_ref)
printf("q2j2_ip5_ini   = % -.6e\n", q2j2_ip5_ref)
printf("f2002r_ip5_ini = % -.6e\n", f2002r_ip5_ref)
printf("f2002i_ip5_ini = % -.6e\n", f2002i_ip5_ref)
printf("f4000r_ip5_ini = % -.6e\n", f4000r_ip5_ref)
printf("f4000i_ip5_ini = % -.6e\n", f4000i_ip5_ref)

-- run once and quit
-- os.exit()

local q1_ref   = q1_ip1_ref
local q2_ref   = q2_ip1_ref
local q1j1_ref = q1j1_ip1_ref
local q2j2_ref = q2j2_ip1_ref

-- prepare variables
local vars = {rtol=1e-6} -- 1 ppm -- rtol=1e-10
for kj, ks in ipairs(kn) do
  vars[kj] = { name=ks, var='MADX.'..ks} -- , step=-MADX[ks]/1000}

  -- add boundaries to mqt strengths
  if ks:sub(1,3) == 'kqt' then vars[kj].min, vars[kj].max = -0.01, 0.01 end
end

-- run matching
match {
  command := get_nf(),
  
  jacobian = \nf,_,jac => -- gradient not used, fill only jacobian
    assert(nf, "nf is nil in match.jacobian")

    --> parameters
    for i=1,ki do
      jac:set( 1,i,      nf.ip1.anh["100000"..knbs[i]] or 0)  --     |
      jac:set( 2,i,      nf.ip1.anh["001000"..knbs[i]] or 0)  --     |
      jac:set( 3,i,      nf.ip1.anh["210000"..knbs[i]])       --     v
      jac:set( 4,i,      nf.ip1.anh["002100"..knbs[i]])       -- constraints
      jac:set( 5,i, real(nf.ip1.gnf["200200"..knbs[i]]))
      jac:set( 6,i, imag(nf.ip1.gnf["200200"..knbs[i]]))
      jac:set( 7,i, real(nf.ip1.gnf["400000"..knbs[i]]))
      jac:set( 8,i, imag(nf.ip1.gnf["400000"..knbs[i]]))
      jac:set( 9,i, real(nf.ip5.gnf["200200"..knbs[i]]))
      jac:set(10,i, imag(nf.ip5.gnf["200200"..knbs[i]]))
      jac:set(11,i, real(nf.ip5.gnf["400000"..knbs[i]]))
      jac:set(12,i, imag(nf.ip5.gnf["400000"..knbs[i]]))
    end
    -- jac:print("JAC")
  end,
  variables = vars,
  equalities = { tol=1, weight=1,
    { name='q1'        , expr = \nf ->      nf.ip1.q1                      - q1_ref  , tol=1e-4},
    { name='q2'        , expr = \nf ->      nf.ip1.q2                      - q2_ref  , tol=1e-4},
    { name='q1j1'      , expr = \nf ->      nf.ip1.anh["210000"..knbs[0]]  - q1j1_ref, },
    { name='q2j2'      , expr = \nf ->      nf.ip1.anh["002100"..knbs[0]]  - q2j2_ref, },
    { name='f2002r_ip1', expr = \nf -> real(nf.ip1.gnf["200200"..knbs[0]]) - 0       , },
    { name='f2002i_ip1', expr = \nf -> imag(nf.ip1.gnf["200200"..knbs[0]]) - 0       , },
    { name='f4000r_ip1', expr = \nf -> real(nf.ip1.gnf["400000"..knbs[0]]) - 0       , },
    { name='f4000i_ip1', expr = \nf -> imag(nf.ip1.gnf["400000"..knbs[0]]) - 0       , },
    { name='f2002r_ip5', expr = \nf -> real(nf.ip5.gnf["200200"..knbs[0]]) - 0       , },
    { name='f2002i_ip5', expr = \nf -> imag(nf.ip5.gnf["200200"..knbs[0]]) - 0       , },
    { name='f4000r_ip5', expr = \nf -> real(nf.ip5.gnf["400000"..knbs[0]]) - 0       , },
    { name='f4000i_ip5', expr = \nf -> imag(nf.ip5.gnf["400000"..knbs[0]]) - 0       , },
  },
  -- objective = { bisec=5 },
  maxcall=100, info=2, -- debug=3
}

-- restore strengths as scalars
for _, ks in ipairs(kn) do
  MADX[ks] = MADX[ks]:get0()
end

-- print parameters to full precision for MAD-NG
for _, ks in ipairs(kn) do
  printf("% 10s = % -.16e\n", ks, MADX[ks])
end

io.write("\n")

-- print parameters to full precision for MADX
for _, ks in ipairs(kn) do
  printf("% 10s = % -.16e;\n", ks:gsub('_','.'), MADX[ks])
end

end -- loop over lhcb1 and lhcb2