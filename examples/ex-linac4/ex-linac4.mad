local verbose_load = false -- print loaded sequence
local forcecv_load = false -- force convertion

local function L4_load ()
  local beam in MAD
  local beta0 in MAD.gphys
  local is_sequence in MAD.typeid

  -- convert and save on need
  if not is_sequence(MADX:var_get'linac4') then  -- var_get avoids MADX warning
    MADX:load('input/linac4_unset_vars.mad') -- cleaner than disabling warnings.

    if verbose_load then print("loading linac.seq...") end
    MADX:load('input/linac.seq', 'input/linac.mad', forcecv_load)

    if verbose_load then print("loading l4t.seq...") end
    MADX:load('input/l4t.seq'  , 'input/l4t.mad'  , forcecv_load)

    if verbose_load then print("loading l4z.seq...") end
    MADX:load('input/l4z.seq'  , 'input/l4z.mad'  , forcecv_load)

    if verbose_load then print("loading lt.seq...") end
    MADX:load('input/lt.seq'   , 'input/lt.mad'   , forcecv_load)

    if verbose_load then print("loading ltb.seq...") end
    MADX:load('input/ltb.seq'  , 'input/ltb.mad'  , forcecv_load)

    if verbose_load then print("loading bi.seq...") end
    MADX:load('input/bi.seq'   , 'input/bi.mad'   , forcecv_load)

    if verbose_load then print("loading lbe.seq...") end
    MADX:load('input/lbe.seq'  , 'input/lbe.mad'  , forcecv_load)

    if verbose_load then print("loading stitched.seq...") end
    MADX:load('input/stitched.seq', 'input/stitched.mad', forcecv_load)

    local linac4, l4t in MADX

    -- attach beam to the sequence
    linac4.beam = beam {
      particle = "H-", -- ? antiproton
      mass = 0.939293, -- ? 0.93827208816
      charge = -1,
      energy = MADX.linac_mebt_energy, ! gamma = 1.0031938915759,
      exn = 0.4e-6,
      eyn = 0.4e-6,
      sigt = 1,
      sige = 1, -- sure?
    }

    -- attach initial conditions to the sequence
    linac4.initbeta0 = beta0 {
      betx := MADX.linac_betx0,
      alfx := MADX.linac_alfx0,
      bety := MADX.linac_bety0,
      alfy := MADX.linac_alfy0,
      mux  := MADX.linac_mux0 ,
      muy  := MADX.linac_muy0 ,
      x    := MADX.linac_x0   ,
      px   := MADX.linac_px0  ,
      y    := MADX.linac_y0   ,
      py   := MADX.linac_py0  ,
      t    := MADX.linac_t0   ,
      pt   := MADX.linac_pt0  ,
      dx   := MADX.linac_dx0  ,
      dpx  := MADX.linac_dpx0 ,
      dy   := MADX.linac_dy0
    }

    -- attach initial conditions to the sequence
    l4t.initbeta0 = beta0 {
      betx := l4t_betx0,
      alfx := l4t_alfx0,
      mux  := l4t_mux0,
      bety := l4t_bety0,
      alfy := l4t_alfy0,
      muy  := l4t_muy0,
      x    := l4t_x0,
      px   := l4t_px0,
      y    := l4t_y0,
      py   := l4t_py0,
      t    := l4t_t0,
      pt   := l4t_pt0,
      dx   := l4t_dx0,
      dpx  := l4t_dpx0,
      dy   := l4t_dy0,
      dpy  := l4t_dpy0,
    }
  end

  return MADX.linac4
end

L4_load()
