.\" Man page generated from reStructuredText.
.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.TH "FUNCTIONS" "4" "Aug 30, 2022" "" "MAD-NG"
.SH NAME
Functions \- Elementary functions
.sp
This chapter describes elementary functions provided by the module \fBgmath\fP\&. This module extends the standard module \fBmath\fP with \fIgeneric\fP functions working on any type that implements the methods with the same name. For example, the code \fBgmath.sin(a)\fP will call \fBmath.sin(a)\fP if \fBa\fP is a \fInumber\fP, otherwise it will calling the method \fBa:sin()\fP, i.e. delegate the call to \fBa\fP\&. This is how MAD\-NG handles few types like \fInumbers\fP, \fIcomplex\fP number, \fImatrix\fP and \fITPSA\fP within a single code.
.SH GENERIC OPERATORS
.sp
Generic operators are named functions that rely on associated operators, which themselves can be redefined by their associated metamethods.
.TS
center;
|l|l|l|.
_
T{
Operators
T}	T{
Return values
T}	T{
Metamethods
T}
_
T{
\fBunm(x)\fP
T}	T{
\fB\-x\fP
T}	T{
__unm(x,_)
T}
_
T{
\fBadd(x,y)\fP
T}	T{
\fBx + y\fP
T}	T{
__add(x,y)
T}
_
T{
\fBsub(x,y)\fP
T}	T{
\fBx \- y\fP
T}	T{
__sub(x,y)
T}
_
T{
\fBmul(x,y)\fP
T}	T{
\fBx * y\fP
T}	T{
__mul(x,y)
T}
_
T{
\fBdiv(x,y)\fP
T}	T{
\fBx / y\fP
T}	T{
__div(x,y)
T}
_
T{
\fBmod(x,y)\fP
T}	T{
\fBx % y\fP
T}	T{
__mod(x,y)
T}
_
T{
\fBpow(x,y)\fP
T}	T{
\fBx ^ y\fP
T}	T{
__pow(x,y)
T}
_
T{
\fBsqr(x)\fP
T}	T{
\fBx * x\fP
T}	T{
.INDENT 0.0
.IP \(bu 2
.UNINDENT
T}
_
T{
\fBinv(x)\fP
T}	T{
\fB1 / x\fP
T}	T{
.INDENT 0.0
.IP \(bu 2
.UNINDENT
T}
_
T{
\fBemul(x,y,r_)\fP
T}	T{
\fBx .* y\fP
T}	T{
__emul(x,y,r_)
T}
_
T{
\fBediv(x,y,r_)\fP
T}	T{
\fBx ./ y\fP
T}	T{
__ediv(x,y,r_)
T}
_
T{
\fBemod(x,y,r_)\fP
T}	T{
\fBx .% y\fP
T}	T{
__emod(x,y,r_)
T}
_
T{
\fBepow(x,y,r_)\fP
T}	T{
\fBx .^ y\fP
T}	T{
__epow(x,y,r_)
T}
_
.TE
.SH GENERIC FUNCTIONS (REAL-LIKE)
.sp
Real\-like generic functions forward the call to the method of the same name from the first argument when the later is not a \fInumber\fP\&.
.TS
center;
|l|l|l|.
_
T{
Functions
T}	T{
Return values
T}	T{
C functions
T}
_
T{
\fBabs    (x)\fP
T}	T{
|x|
T}	T{
T}
_
T{
\fBacos   (x)\fP
T}	T{
\ecos^{\-1}(x)
T}	T{
T}
_
T{
\fBacosh  (x)\fP
T}	T{
\ecosh^{\-1}(x)
T}	T{
\fBacosh()\fP
T}
_
T{
\fBacot   (x)\fP
T}	T{
\ecot^{\-1}(x)
T}	T{
T}
_
T{
\fBacoth  (x)\fP
T}	T{
\ecoth^{\-1}(x)
T}	T{
\fBatanh()\fP
T}
_
T{
\fBasin   (x)\fP
T}	T{
\esin^{\-1}(x)
T}	T{
T}
_
T{
\fBasinc  (x)\fP
T}	T{
\efrac{\esin^{\-1}(x)}{x}
T}	T{
T}
_
T{
\fBasinh  (x)\fP
T}	T{
\esinh^{\-1}(x)
T}	T{
\fBasinh()\fP
T}
_
T{
\fBasinhc (x)\fP
T}	T{
\efrac{\esinh^{\-1}(x)}{x}
T}	T{
T}
_
T{
\fBatan   (x)\fP
T}	T{
\etan^{\-1}(x)
T}	T{
T}
_
T{
\fBatan2  (x,y)\fP
T}	T{
\etan^{\-1}(\efrac{x}{y})
T}	T{
T}
_
T{
\fBatanh  (x)\fP
T}	T{
\etanh^{\-1}(x)
T}	T{
\fBatanh()\fP
T}
_
T{
\fBceil   (x)\fP
T}	T{
\eoperatorname{ceil}(x)
T}	T{
T}
_
T{
\fBcos    (x)\fP
T}	T{
\ecos(x)
T}	T{
T}
_
T{
\fBcosh   (x)\fP
T}	T{
\ecosh(x)
T}	T{
T}
_
T{
\fBcot    (x)\fP
T}	T{
\ecot(x)
T}	T{
T}
_
T{
\fBcoth   (x)\fP
T}	T{
\ecoth(x)
T}	T{
T}
_
T{
\fBdeg2rad(x)\fP
T}	T{
\efrac{\epi}{180} x
T}	T{
T}
_
T{
\fBexp    (x)\fP
T}	T{
\eexp(x)
T}	T{
T}
_
T{
\fBfloor  (x)\fP
T}	T{
\eoperatorname{floor}(x)
T}	T{
T}
_
T{
\fBfrac   (x)\fP
T}	T{
\eoperatorname{frac}(x)
T}	T{
T}
_
T{
\fBhypot  (x,y)\fP
T}	T{
\esqrt{x^2+y^2}
T}	T{
\fBhypot()\fP
T}
_
T{
\fBhypot3 (x,y,z)\fP
T}	T{
\esqrt{x^2+y^2+z^2}
T}	T{
\fBhypot()\fP
T}
_
T{
\fBinvsqrt(x,v_)\fP
T}	T{
\efrac{v}{\esqrt x}
T}	T{
T}
_
T{
\fBlog    (x)\fP
T}	T{
\elog(x)
T}	T{
T}
_
T{
\fBlog10  (x)\fP
T}	T{
\eoperatorname{log10}(x)
T}	T{
T}
_
T{
\fBpow    (x,y)\fP
T}	T{
x^y
T}	T{
T}
_
T{
\fBrad2deg(x)\fP
T}	T{
\efrac{180}{pi} x
T}	T{
T}
_
T{
\fBround  (x)\fP
T}	T{
\eoperatorname{round}(x)
T}	T{
\fBround()\fP
T}
_
T{
\fBsign   (x)\fP
T}	T{
\-1, 0\etext{ or }1
T}	T{
\fBmad_num_sign()\fP
T}
_
T{
\fBsign1  (x)\fP
T}	T{
\-1\etext{ or }1
T}	T{
\fBmad_num_sign1()\fP
T}
_
T{
\fBsin    (x)\fP
T}	T{
\esin(x)
T}	T{
T}
_
T{
\fBsinc   (x)\fP
T}	T{
\efrac{\esin(x)}{x}
T}	T{
T}
_
T{
\fBsinh   (x)\fP
T}	T{
\esinh(x)
T}	T{
T}
_
T{
\fBsinhc  (x)\fP
T}	T{
\efrac{\esinh(x)}{x}
T}	T{
T}
_
T{
\fBsqrt   (x)\fP
T}	T{
\esqrt{x}
T}	T{
T}
_
T{
\fBtan    (x)\fP
T}	T{
\etan(x)
T}	T{
T}
_
T{
\fBtanh   (x)\fP
T}	T{
\etanh(x)
T}	T{
T}
_
T{
\fBlgamma (x,tol)\fP
T}	T{
\eln|\eGamma(x)|
T}	T{
\fBlgamma()\fP
T}
_
T{
\fBtgamma (x,tol)\fP
T}	T{
\eGamma(x)
T}	T{
\fBtgamma()\fP
T}
_
T{
\fBtrunc  (x)\fP
T}	T{
\eoperatorname{trunc}(x)
T}	T{
T}
_
T{
\fBunit   (x)\fP
T}	T{
\efrac{x}{|x|}
T}	T{
T}
_
.TE
.SH GENERIC FUNCTIONS (COMPLEX-LIKE)
.sp
Complex\-like generic functions forward the call to the method of the same name from the first argument when the later is not a \fInumber\fP, otherwise it implements a real\-like compatibility layer using the equivalent representation x+0i\&.
.TS
center;
|l|l|.
_
T{
Functions
T}	T{
Return values
T}
_
T{
\fBcabs (z)\fP
T}	T{
|z|
T}
_
T{
\fBcarg (z)\fP
T}	T{
\earg(z)
T}
_
T{
\fBconj (z)\fP
T}	T{
z^*
T}
_
T{
\fBcplx (x,y)\fP
T}	T{
x+i\e,y
T}
_
T{
\fBimag (z)\fP
T}	T{
\eIm(z)
T}
_
T{
\fBpolar(z)\fP
T}	T{
|z|\e,e^{i\earg(z)}
T}
_
T{
\fBproj (z)\fP
T}	T{
\eoperatorname{Proj}(z)
T}
_
T{
\fBreal (z)\fP
T}	T{
\eRe(z)
T}
_
T{
\fBrect (z)\fP
T}	T{
\eRe(z)\ecos(\eIm(z))+i\e,\eRe(z)\esin(\eIm(z))
T}
_
T{
\fBreim (z)\fP
T}	T{
(\eRe(z), \eIm(z))
T}
_
.TE
.SH GENERIC FUNCTIONS (ERROR-LIKE)
.sp
Error\-like generic functions forward the call to the method of the same name from the first argument when the later is not a \fInumber\fP, otherwise it calls a C wrapper to corresponding function from the Faddeeva library from the MIT (see \fBmad_num.c\fP).
.TS
center;
|l|l|l|.
_
T{
Functions
T}	T{
C functions for reals
T}	T{
C functions for complex
T}
_
T{
\fBerf  (x,tol)\fP
T}	T{
\fBmad_num_erf\fP
T}	T{
\fBmad_cnum_erf\fP
T}
_
T{
\fBerfc (x,tol)\fP
T}	T{
\fBmad_num_erfc\fP
T}	T{
\fBmad_cnum_erfc\fP
T}
_
T{
\fBerfi (x,tol)\fP
T}	T{
\fBmad_num_erfi\fP
T}	T{
\fBmad_cnum_erfi\fP
T}
_
T{
\fBerfcx(x,tol)\fP
T}	T{
\fBmad_num_erfcx\fP
T}	T{
\fBmad_cnum_erfcx\fP
T}
_
T{
\fBwf   (x,tol)\fP
T}	T{
\fBmad_num_wf\fP
T}	T{
\fBmad_cnum_wf\fP
T}
_
.TE
.SH GENERIC FUNCTIONS (LENGTH-ANGLE BASED)
.sp
Length\-Angle base generic function relies on the following elementary relations between length and angle.
.sp
.ce
l_{\etext{arc}}  = a r = \efrac{l_{\etext{cord}}}{\eoperatorname{sinc}(\efrac{a}{2})}
l_{\etext{cord}} = 2 r \esin(\efrac{a}{2}) = l_{\etext{arc}} \eoperatorname{sinc}(\efrac{a}{2})


.ce 0
.TS
center;
|l|l|.
_
T{
Functions
T}	T{
Return values
T}
_
T{
\fBarc2cord(l,a)\fP
T}	T{
l \eoperatorname{sinc}(\efrac{a}{2})
T}
_
T{
\fBarc2len (l,a)\fP
T}	T{
l \eoperatorname{sinc}(\efrac{a}{2}) cos(a)
T}
_
T{
\fBcord2arc(l,a)\fP
T}	T{
\efrac{l}{\eoperatorname{sinc}(\efrac{a}{2})}
T}
_
T{
\fBcord2len(l,a)\fP
T}	T{
l cos(a)
T}
_
T{
\fBlen2arc (l,a)\fP
T}	T{
\efrac{l}{\eoperatorname{sinc}(\efrac{a}{2}) cos(a)}
T}
_
T{
\fBlen2cord(l,a)\fP
T}	T{
\efrac{l}{cos(a)}
T}
_
T{
\fBrangle  (a,r)\fP
T}	T{
a + 2\epi \eoperatorname{round}(\efrac{r\-a}{2\epi})
T}
_
.TE
.SH GENERIC FUNCTIONS (FOLDING-LEFT BASED)
.TS
center;
|l|l|.
_
T{
Functions
T}	T{
Return values
T}
_
T{
\fBsumsqr (x,y)\fP
T}	T{
x^2 + y^2
T}
_
T{
\fBsumabs (x,y)\fP
T}	T{
|x| + |y|
T}
_
T{
\fBminabs (x,y)\fP
T}	T{
\emin(|x|, |y|)
T}
_
T{
\fBmaxabs (x,y)\fP
T}	T{
\emax(|x|, |y|)
T}
_
T{
\fBsumysqr(x,y)\fP
T}	T{
x + y^2
T}
_
T{
\fBsumyabs(x,y)\fP
T}	T{
x + |y|
T}
_
T{
\fBminyabs(x,y)\fP
T}	T{
\emin(x, |y|)
T}
_
T{
\fBmaxyabs(x,y)\fP
T}	T{
\emax(x, |y|)
T}
_
.TE
.SH NON-GENERIC FUNCTIONS
.TS
center;
|l|l|.
_
T{
Functions
T}	T{
C or math functions
T}
_
T{
\fBdeg\fP
T}	T{
\fBmath.deg\fP
T}
_
T{
\fBfact\fP
T}	T{
\fBmad_num_fact\fP, n!
T}
_
T{
\fBfmod\fP
T}	T{
\fBmath.fmod\fP
T}
_
T{
\fBfrexp\fP
T}	T{
\fBmath.frexp\fP
T}
_
T{
\fBinvfact\fP
T}	T{
\fBmad_num_invfact\fP, 1/n!
T}
_
T{
\fBldexp\fP
T}	T{
\fBmath.ldexp\fP
T}
_
T{
\fBmax\fP
T}	T{
\fBmath.max\fP
T}
_
T{
\fBmin\fP
T}	T{
\fBmath.min\fP
T}
_
T{
\fBmodf\fP
T}	T{
\fBmath.modf\fP
T}
_
T{
\fBrad\fP
T}	T{
\fBmath.rad\fP
T}
_
.TE
.SH RANDOM NUMBER GENERATORS
.SH AUTHOR
Laurent Deniau
.SH COPYRIGHT
2022, Laurent Deniau
.\" Generated by docutils manpage writer.
.
