local assertEquals, assertAllAlmostEquals in MAD.utest

-- TODO: THIS IS A CRAPPY AD HOC SOLUTION FOR THE LACK OF KNOWLEDGE ABOUT
-- FILTER+MAP IN LUAFUN/MAD. IT WILL BE THROWN AWAY ASAP!
local function parse_table(lines)
  local result = {}
  local columns = {}
  for line in lines do
    if line:match('^%s*#') then
      -- comment specifies the column titles
      line = line:gsub('^%s*#%s*', '')
      for col in string.gmatch(line, "%S+") do
        table.insert(columns, col)
      end
    else
      local row = {}
      for num in string.gmatch(line, "%S+") do
        table.insert(row, tonumber(num))
      end
      table.insert(result, row)
    end
  end
  return result, columns
end

local function transpose(matrix, columns)
  local result = {}
  for i, col in ipairs(columns) do
    result[i] = {}
    result[col] = result[i]
  end
  for _, row in ipairs(matrix) do
    for i, num in ipairs(row) do
      table.insert(result[i], num)
    end
  end
  return result
end


Test${suite} = {
  setUp = function (self)
    self.expected = transpose(parse_table(io.lines("${expected}")))
    self.actual = transpose(parse_table(io.lines("${actual}")))

    -- same parameters -> data loaded correctly
    assertEquals(self.actual.i, self.expected.i)
    assertAllAlmostEquals(self.actual.${varname}, self.expected.${varname})
  end,

  testOrbit = function (self)
    expected = self.expected
    actual = self.actual

    -- same output
    assertAllAlmostEquals(actual.s,  expected.s,  ${margin})
    assertAllAlmostEquals(actual.x,  expected.x,  ${margin})
    assertAllAlmostEquals(actual.px, expected.px, ${margin})
    assertAllAlmostEquals(actual.y,  expected.y,  ${margin})
    assertAllAlmostEquals(actual.py, expected.py, ${margin})
    assertAllAlmostEquals(actual.t,  expected.t,  ${margin})
    assertAllAlmostEquals(actual.pt, expected.pt, ${margin})
  end,
}
