local assertEquals, assertAllAlmostEquals in MAD.utest

-- TODO: THIS IS A CRAPPY AD HOC SOLUTION FOR THE LACK OF KNOWLEDGE ABOUT
-- FILTER+MAP IN LUAFUN/MAD. IT WILL BE THROWN AWAY ASAP!
local function parse_table(lines)
  local result = {}
  local columns = {}
  for line in lines do
    if line:match('^%s*#') then
      -- comment specifies the column titles
      line = line:gsub('^%s*#%s*', '')
      for col in string.gmatch(line, "%S+") do
        table.insert(columns, col)
      end
    else
      local row = {}
      for num in string.gmatch(line, "%S+") do
        table.insert(row, tonumber(num))
      end
      table.insert(result, row)
    end
  end
  return result, columns
end

local function transpose(matrix, columns)
  local result = {}
  for i, col in ipairs(columns) do
    result[i] = {}
    result[col] = result[i]
  end
  for _, row in ipairs(matrix) do
    for i, num in ipairs(row) do
      table.insert(result[i], num)
    end
  end
  return result
end

local data

Test_${suite} = {
  setUp = function (self)
    data = data or {
      mad = transpose(parse_table(io.lines("${mad_file}"))),
      ptc = transpose(parse_table(io.lines("${ptc_file}"))),
      madx = transpose(parse_table(io.lines("${madx_file}"))),
    }
  end,

  -- same output
  _testOrbit = function (self, actual, expected, margin)
    assertAllAlmostEquals(actual.s,  expected.s,  margin)
    assertAllAlmostEquals(actual.x,  expected.x,  margin)
    assertAllAlmostEquals(actual.px, expected.px, margin)
    assertAllAlmostEquals(actual.y,  expected.y,  margin)
    assertAllAlmostEquals(actual.py, expected.py, margin)
    assertAllAlmostEquals(actual.t,  expected.t,  margin)
    assertAllAlmostEquals(actual.pt, expected.pt, margin)
  end,

  test_PTC_v_MAD = function (self)
    self:_testOrbit(data.ptc, data.mad, ${margin})
  end,

  test_MADX_v_MAD = function (self)
    self:_testOrbit(data.madx, data.mad, ${margin})
  end,

  test_PTC_v_MADX = function (self)
    self:_testOrbit(data.ptc, data.madx, ${margin})
  end,
}
