--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic math module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Extends math module and provides object-oriented dispatch to math functions.
  - Defines the 'format' for printing numbers.

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  gmath -- generic math functions and constants

SYNOPSIS
  abs, acos, asin, atan, ceil, cos, cosh, deg, exp, floor, log,
  log10, max, min, rad, sin, sinh, sqrt, tan, tanh,          (generic functions)
  acosh, angle, asinh, atanh, erf, frac, tgamma, lgamma,
  round, sign, sinc, step, trunc,                      (extra generic functions)
  unm, add, sub, mul, div, mod, pow,
  eq, ne, lt, le, gt, ge,                               (operators as functions)
  carg, real, imag, conj, norm, rect, polar,         (generic complex functions)
  atan2, fmod, fpow, frexp, ldexp, modf, random,
  randomseed,                                            (non-generic functions)
  eps, huge, tiny, I, inf, Inf, nan, NaN, pi, Pi,                    (constants)
  option { format }.                                                     (setup)

DESCRIPTION

  The module gmath provides generic functions that wraps common math functions
  with object-oriented dispatch for non-numbers. It also adds few useful
  constants, functions, generic functions and options. The generic function
  angle(x,y) is equivalent to atan2(y,x) (for numbers only). The generic
  functions trunc and frac are equivalent to first(modf(x)) and second(modf(x))
  respectively (for numbers only). All operators have binary generic functions
  wrappers except unm (unary minus), and min and max that have variadic generic
  functions wrappers.

RETURN VALUE
  A table constaining these functions and constants.

ERROR
  See ISO/IEC 9899:1999 (and ISO/IEC 9899:2011).

SEE ALSO
  math, complex.
]=]

M.__help['Trigonometric mnemonics'] = [=[
Trigonometric mnemonics:
------------------------

deg      0      30     45     60     90
rad      0     pi/6   pi/4   pi/3   pi/2
sin     √0/2   √1/2   √2/2   √3/2   √4/2
cos     √4/2   √3/2   √2/2   √1/2   √0/2   sin(90 - angle)
tan     0/√3   1/√3    1     √3/1   √3/0   sin/cos

45   : square 1-1  , diag.  √2  , hypot 1 -> sides √2/2
30-60: equil. 1-1-1, height √3/2, hypot 1 -> sides 1/2 and √3/2
]=]

-- locals ---------------------------------------------------------------------o

local _C                       in require 'madl_cmad'
local is_number, first, second in require 'madl_utils'

local
  abs, acos, asin, atan, ceil, cos, cosh, deg, exp, floor, log, log10, max,
  min, rad, sin, sinh, sqrt, tan, tanh,                   -- (generic functions)
  atan2, frexp, ldexp, modf, random, randomseed,       -- (functions wo generic)
  fmod, pow,                                         -- (operators as functions)
  huge, pi in math                                                -- (constants)

-- t={}; for k in pairs(math) do t[#t+1]=k end;
-- table.sort(t); print(table.concat(t,', '))

-- implementation -------------------------------------------------------------o

-- options
M.option = {
  format = "%.16g",
}

-- constants
M.eps  = 2.2204460492503130e-16
M.huge = 1.7976931348623158e+308
M.tiny = 2.2250738585072012e-308

M.I    = 1i
M.inf  = 1/0
M.Inf  = 1/0
M.nan  = 0/0
M.NaN  = 0/0
M.pi   = pi
M.Pi   = pi

-- functions
M.randomseed = randomseed
M.random     = random
M.atan2      = atan2
M.ldexp      = ldexp
M.frexp      = frexp
M.fmod       = fmod
M.fpow       = pow
M.modf       = modf

-- generic binary functions
M.angle = \x,y -> is_number(x) and atan2(y,x) or x:angle(y)

-- generic variadic functions
M.max   = \x,... -> is_number(x) and max(x,...) or x:max(...)
M.min   = \x,... -> is_number(x) and min(x,...) or x:min(...)

-- extra generic functions
M.sign  = \x -> is_number(x) and (x>=0 and 1 or x<0 and -1 or x)  or x:sign()
M.step  = \x -> is_number(x) and (x>=0 and 1 or x<0 and  0 or x)  or x:step()
M.sinc  = \x -> is_number(x) and (abs(x)<1e-10 and 1 or sin(x)/x) or x:sinc()
M.frac  = \x -> is_number(x) and second(modf(x)) or x:frac()
M.trunc = \x -> is_number(x) and first (modf(x)) or x:trunc()
M.round = \x -> is_number(x) and (x>0 and floor(x+0.5) or x<0 and ceil(x-0.5) or x) or x:round()

-- operators
M.unm   = \x   -> -x
M.add   = \x,y ->  x + y
M.sub   = \x,y ->  x - y
M.mul   = \x,y ->  x * y
M.div   = \x,y ->  x / y
M.mod   = \x,y ->  x % y
M.pow   = \x,y ->  x ^ y

-- logical
M.eq    = \x,y -> x == y
M.ne    = \x,y -> x ~= y
M.lt    = \x,y -> x <  y
M.le    = \x,y -> x <= y
M.gt    = \x,y -> x >  y
M.ge    = \x,y -> x >= y

-- complex generic functions
M.carg  = \x -> is_number(x) and (x>=0 and 0 or x<0 and pi or x) or x:carg()
M.real  = \x -> is_number(x) and x                               or x:real()
M.imag  = \x -> is_number(x) and 0                               or x:imag()
M.conj  = \x -> is_number(x) and x                               or x:conj()
M.norm  = \x -> is_number(x) and abs(x)                          or x:norm()
M.rect  = \x -> is_number(x) and abs(x) or x:rect()
M.polar = \x -> is_number(x) and abs(x) or x:polar() -- TODO +M.carg(x)*1i

-- generic unary functions
M.abs   = \x -> is_number(x) and abs  (x)  or x:abs  ()
M.acos  = \x -> is_number(x) and acos (x)  or x:acos ()
M.asin  = \x -> is_number(x) and asin (x)  or x:asin ()
M.atan  = \x -> is_number(x) and atan (x)  or x:atan ()
M.ceil  = \x -> is_number(x) and ceil (x)  or x:ceil ()
M.cos   = \x -> is_number(x) and cos  (x)  or x:cos  ()
M.cosh  = \x -> is_number(x) and cosh (x)  or x:cosh ()
M.deg   = \x -> is_number(x) and deg  (x)  or x:deg  ()
M.exp   = \x -> is_number(x) and exp  (x)  or x:exp  ()
M.floor = \x -> is_number(x) and floor(x)  or x:floor()
M.log   = \x -> is_number(x) and log  (x)  or x:log  ()
M.log10 = \x -> is_number(x) and log10(x)  or x:log10()
M.rad   = \x -> is_number(x) and rad  (x)  or x:rad  ()
M.sin   = \x -> is_number(x) and sin  (x)  or x:sin  ()
M.sinh  = \x -> is_number(x) and sinh (x)  or x:sinh ()
M.sqrt  = \x -> is_number(x) and sqrt (x)  or x:sqrt ()
M.tan   = \x -> is_number(x) and tan  (x)  or x:tan  ()
M.tanh  = \x -> is_number(x) and tanh (x)  or x:tanh ()

M.asinh = \x -> is_number(x) and _C.mad_num_asinh(x)  or x:asinh()
M.acosh = \x -> is_number(x) and _C.mad_num_acosh(x)  or x:acosh()
M.atanh = \x -> is_number(x) and _C.mad_num_atanh(x)  or x:atanh()

M.erf   = \x -> is_number(x) and _C.mad_num_erf(x)    or x:erf()
M.tgamma= \x -> is_number(x) and _C.mad_num_tgamma(x) or x:tgamma()
M.lgamma= \x -> is_number(x) and _C.mad_num_lgamma(x) or x:lgamma()

-- end ------------------------------------------------------------------------o
return M
