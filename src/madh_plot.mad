--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A. Bloch , aurelien.bloch at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- plot help ------------------------------------------------------------------o

__help.plot = [=[
NAME
  plot

SYNOPSIS
  my_plot = plot 'myplot' { parameters... }

DESCRIPTION
  This module prides an high level interface to 'gnuplot' a cross-platform
  command-line graphing utility (See http://www.gnuplot.info/). It requires
  gnuplot 5+ to be installed to work and this documentation will heavily lean on
  the gnuplot documentation (available at
  http://www.gnuplot.info/docs_5.0/gnuplot.pdf).

  It works by generating a gnuplot script and passing it to an instance of
  gnuplot using gplot to manage this resources (See gplot).

  This command offers two main functionalities:
    - A user-friendly way to dump data to gnuplot (to generate plots)
    - The generation of a gnuplot script to create a layout from a sequence.

RETURN VALUE
  The plot command.

EXAMPLES
  -- Simple example that plot the "y1" column of tbl against the line indexes
  -- and show the layout of seq on top.
  -- See tests for more examples.
  plot {
    sequence = seq,
    table    = tbl,
    x1y1     = "y1",
  }

SEE ALSO
  gplot, mtable, sequence.
]=]

__help['plot.sid'] = [=[
NAME
  sid

SYNOPSIS
  plot.sid

DESCRIPTION
  The sid is used by the plot command to configure the gplot object
  (See gplot.sid for more). You might want to use multiple gnuplot instances for
  many reasons but here are a few possibilities :
    - If you want to have multiple pdf open for creation, then  use one sid per
    pdf because changing the name of the ouptut pdf will close the previous one
    and once closed, it can not be extended anymore.
    - If you want to have multiple interactive windows at the same time, then
    you should use one sid per window because inside a same gnuplot instances
    only the last one will be interactive.

RETURN VALUE
  The command sid.

SEE ALSO
  gplot.sid, plot.output
]=]

__help['plot.prolog'] = [=[
NAME
  prolog, epilog

SYNOPSIS
  plot.prolog
  plot.epilog

DESCRIPTION
  Allows to insert any string at the beginning and end of the gnuplot script.

RETURN VALUES
  The command prolog and epilog strings.

EXAMPLES
  -- example to activate and deactivate gnuplot multiplot mode at the end
  -- an the beginning of the script.
  plot {
    [...]
    prolog = "set multiplot",
    epilog = "unset multiplot",
  }

SEE ALSO
  None.
]=]
__help['plot.epilog'] = __help['plot.prolog']

__help['plot.term'] = [=[
NAME
  term, wsizex, wsizey
SYNOPSIS
  plot.term
  plot.wsizex
  plot.wsizey

DESCRIPTION
  term is the name of the gnuplot windows terminal used by the command. it's
  default value is "wxt". wsizex and wsizey are the width and hight of the
  graphical window in pixels.

RETURN VALUES
  term as a string
  wsizex, wsizey as number in pixels.

EXAMPLES
  -- example to use the qt terminal with a definition of 800x500 px.
  plot {
    [...]
    term   = "qt",
    wsizex = 800,
    wsizey = 500,
  }

SEE ALSO
  None.
]=]
__help['plot.wsizex'] = __help['plot.term']
__help['plot.wsizey'] = __help['plot.term']

__help['plot.output'] = [=[
NAME
  output, scrdump

SYNOPSIS
  plot.output
  plot.scrdump

DESCRIPTION
  output set the output mode.
    - A number value will use the windows terminal set by the "term" parameter
  and create a windows with this number as id. A single gnuplot instances can
  have multiple windows designated by the output number.
    - A string value will use the "pdfcairo" terminal and generate a pdf
  file with this string as name.

  scrdump is the name of the file where the gnuplot script will be saved.
  a nil value means that the scrdump is not saved (default)

RETURN VALUES
  the output mode as a number or a string.
  the scrdump filename as a string.

EXAMPLES
  -- example to create a "wxt" window with an id of 2 and not save the script.
  plot {
    [...]
    output  = 2,
    scrdump = nil,
  }
  -- example to generate a pdf named "plot.pdf"
  -- and save the script in the "plot.gp" file
  plot {
    output  = "plot.pdf",
    scrdump = "plot.gp",
  }

SEE ALSO
  None.
]=]
__help['plot.scrdump'] = __help['plot.output']

__help['plot.data'] = [=[
NAME
  data, table, tablerange

SYNOPSIS
  plot.data
  plot.table
  plot.tablerange

DESCRIPTION
  Both data and table contains columns of data to be plotted. Those columns can
  be themselves of type table or vector. Columns to be plotted are selected by
  name (i.e. see plot.x1y1). the columns are first searched in data then if not
  found, in table. Columns in data have to be provided with correct length,
  while a range can be provided in tablerange for columns in table.

RETURN VALUES
  data as a table of columns of data to be plotted.
  table as a mtable containing columns of data to be plotted.
  tablerange compatible with range of mtable.

EXAMPLES
  -- This example will plot "y1" against "x1" an "y2" against "x2".
  -- where "x√Ü1 is a vector and "y2" a table will be found in data.
  -- and x2, y2 will be searched as columns in the mtable "mtbl" and only
  -- values in lines within range will be used.
  local vec = vector(n):fill{ [...] }
  local tbl = { [...] }
  plot {
    [...]
    data  = { x1 = vec , y2 = tbl  }
    table = mtbl,
    x1y1  = { x1 = "y1", x2 = "y2" }
    range = { 10, 110 }
  }

SEE ALSO
  mtable.range, plot.x1y1, plot.x1y2, plot.x2y1, plot.x2y2.
]=]
__help['plot.table'     ] = __help['plot.data']
__help['plot.tablerange'] = __help['plot.data']

__help['plot.'] = [=[
NAME
  sequence, range, seqdisty, seqdistx, seqshift, nturn, X0, A0

SYNOPSIS
  plot.sequence
  plot.range
  plot.seqdisty
  plot.seqdistx
  plot.seqshift
  plot.nturn
  plot.X0
  plot.A0

DESCRIPTION
  sequence is the sequence or table of sequences from which the layout will be
  plotted. range is the range or table of range from which the layout will be
  plotted. seqdisty allows to position the different sequences along the y axis
  relatively to the first sequence of the list. If seqdisty is a number then all
  subsequent sequences will position at seqdisty to the first one. if seqdisty
  is a table then each i-th value correspond to the distance between the 1st
  and the (i+1)-th sequence. seqdistx is similar to seqdisty but along the x
  axis. seqshift shift all sequences along the x axis (needed to have correct
  spos for subsequence layout as layout always start at spos=0). nturn, x0, A0
  are compatible with survey and represent the number of turn of the sequence
  to be plotted and the initial position and rotation for the surveys.

RETURN VALUES
  sequence has a sequence or table of sequences.
  range compatible with sequence range.
  seqdisty as a number or table of numbers.
  seqdistx as a number or table of numbers.
  seqshift as a number.
  nturn as a number.
  X0 and A0 as table compatible with survey X0 and A0.

EXAMPLES
  -- plot the layout of the two lhc beam around IP5. seqdisty use the mechanical
  -- separation to ajust the distance between the two beam allong the y axis.
  -- seqshift shift the two beam to the correct spos (layout start at 0 by
  -- default).
  plot {
    [...]
    sequence = { lhcb1, lhcb2 },
    range    = { {"E.DS.L5.B1", "S.DS.R5.B1"}, {"E.DS.L5.B2", "S.DS.R5.B2"} },
    seqdisty = lhcb2["E.DS.L5.B2"].mech_sep,
    seqshift = lhcb1:spos(lhcb1:index_of("E.DS.L5.B1")),
  }
  -- plot the survey of lhcb1 from IP2 to IP4 with X0 and A0 as initial survey
  -- condition.
  plot {
    [...]
    sequence  = lhcb1,
    laypos    = "in",
    range     = { "IP2"   , "IP4"      },
    X0        = { -1231.18, 0, 2970.46 },
    A0        = { -pi/4   , 0, 0       },
  }

SEE ALSO
  sequence.range, sequence.nturn, survey.nturn, survey.A0, survey.X0.
]=]
__help['plot.range'   ] = __help['plot.sequence']
__help['plot.seqdisty'] = __help['plot.sequence']
__help['plot.seqdistx'] = __help['plot.sequence']
__help['plot.seqshift'] = __help['plot.sequence']
__help['plot.nturn'   ] = __help['plot.sequence']
__help['plot.X0'      ] = __help['plot.sequence']
__help['plot.A0'      ] = __help['plot.sequence']

-- gplot help -----------------------------------------------------------------o

__help.gplot = [=[
NAME
  gplot

SYNOPSIS
  my_gplot = gplot 'mygplot' {}

DESCRIPTION
  gplot is used to manages gnuplot instances by creating it, and writing to it.
  Its unique state is the stream id (sid) of the instance it currently handles.

RETURN VALUE
  An instance of the gplot object.

EXAMPLES
  gplot:set_sid(3)
  gplot:write("reset")
  gplot:printf("set xrange [%e:%e]", xmin, xmax)

SEE ALSO
  plot.
]=]

__help['gplot.sid'] = [=[
NAME
  sid

SYNOPSIS
  gplot.sid

DESCRIPTION
  The sid is the number of the gnuplot instance that the gplot object is
  currently managing.

RETURN VALUE
  The current sid.

EXAMPLES
  gplot.sid          -- 1
  gplot:set_sid(2)
  gplot.sid          -- 2

SEE ALSO
  plot.sid.
]=]

__help['gplot:write'] = [=[
NAME
  write, printf

SYNOPSIS
  gplot:write(str)
  gplot:printf(str, ...)

DESCRIPTION
  The write method writes the given string to the gnuplot instance managed by
  gplot (corresponding sid). The printf method does the same thing but format
  the string using the variadic arguments before writing it.

RETURN VALUE
  None.

EXAMPLES

SEE ALSO
  None.
]=]
__help['gplot:printf'] = __help['gplot:write']

__help['gplot:set_sid'] = [=[
NAME
  set_sid

SYNOPSIS
  gplot:set_sid(number)

DESCRIPTION
  The set_sid method change the sid number of the gnuplot instance managed by
  the gplot object.

RETURN VALUE
  None.

ERRORS
  set_sid triggers an error if the provided sid is not within the allowed range
  (currently 1 <= sid <= 25).

EXAMPLES
  gplot.sid          -- =1
  gplot:set_sid(2)
  gplot.sid          -- =2

SEE ALSO
  None.
]=]

__help['gplot:is_busy'] = [=[
NAME
  is_busy

SYNOPSIS
  gplot:is_busy()

DESCRIPTION
  The is_busy method tells if the corresponding gnuplot is still processing the
  script provided by a previous plot command. NB: it doesn't take into account
  the command sent through gplot directly. It can be use to test if the previous
  command is done before executing a new one (avoiding a blocking wait if the
  maximum number of tmp file is reached : see clean_tmpFile).

RETURN VALUE
  It returns a boolean indicating if the corresponding gnuplot is busy.

EXAMPLES
  gplot:is_busy()                       -- =false
  plot { prolog = "pause 5" }           -- pause during 5 seconds
  gplot:is_busy()                       -- =true

SEE ALSO
  None.
]=]

__help['gplot:clean_tmpfile'] = [=[
NAME
  clean_tmpfile

SYNOPSIS
  gplot:clean_tmpfile()

DESCRIPTION
  Remove all unused temporary files (tmp) from the tmp folder. Those file
  contains the gnuplot scripts not yet processed by gnuplot. This function can
  be used to remove all files that have not been properly removed
  (after a crash for example). The tmp files are used by the plot command and
  written in the "TMP_MAD_PLOT" folder created in the current working directory.
  This folder shouldn't be remove while MAD is running but can be manually
  removed afterward.

RETURN VALUE
  None.

SEE ALSO
  None.
]=]


-- end ------------------------------------------------------------------------o
return __help
