--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A. Bloch , aurelien.bloch at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.plot = [=[
NAME
  plot

SYNOPSIS
  my_plot = plot 'myplot' { parameters... }

DESCRIPTION
  This module prides an high level interface to 'gnuplot' a cross-platform
  command-line graphing utility (See http://www.gnuplot.info/). It requires
  gnuplot 5+ to be installed to work and this documentation will heavily lean on
  the gnuplot documentation (available at
  http://www.gnuplot.info/docs_5.0/gnuplot.pdf).

  It works by generating a gnuplot script and passing it to an instance of
  gnuplot using gplot to manage this resources (See gplot).

  This command offers two main functionalities:
    - A user-friendly way to dump data to gnuplot (to generate plots)
    - The generation of a gnuplot script to create a layout from a sequence.

RETURN VALUE
  The plot command.

EXAMPLES
  -- Simple example that plot the "y1" column of tbl against the line indexes
  -- and show the layout of seq on top.
  -- See tests for more examples.
  plot {
    sequence = seq,
    table    = tbl,
    x1y1     = "y1",
  }

SEE ALSO
  gplot, mtable, sequence.
]=]

__help.gplot = [=[
NAME
  gplot

SYNOPSIS
  my_gplot = gplot 'mygplot' {}

DESCRIPTION
  gplot is used to manages gnuplot instances by creating it, and writing to it.
  Its unique state is the stream id (sid) of the instance it currently handles.

RETURN VALUE
  An instance of the gplot object.

EXAMPLES
  gplot:set_sid(3)
  gplot:write("reset")
  gplot:printf("set xrange [%e:%e]", xmin, xmax)

SEE ALSO
  plot.
]=]

__help['gplot.sid'] = [=[
NAME
  sid

SYNOPSIS
  gplot.sid

DESCRIPTION
  The sid is the number of the gnuplot instance that the gplot object is
  currently managing.

RETURN VALUE
  The current sid.

EXAMPLES
  gplot.sid          -- 1
  gplot:set_sid(2)
  gplot.sid          -- 2

SEE ALSO
  None.
]=]

__help['gplot:write'] = [=[
NAME
  write, printf

SYNOPSIS
  gplot:write(str)
  gplot:printf(str, ...)

DESCRIPTION
  The write method writes the given string to the gnuplot instance managed by
  gplot (corresponding sid). The printf method does the same thing but format
  the string using the variadic arguments before writing it.

RETURN VALUE
  None.

EXAMPLES

SEE ALSO
  None.
]=]
__help['gplot:printf'] = __help['gplot:write']

__help['gplot:set_sid'] = [=[
NAME
  set_sid

SYNOPSIS
  gplot:set_sid(number)

DESCRIPTION
  The set_sid method change the sid number of the gnuplot instance managed by
  the gplot object.

RETURN VALUE
  None.

ERRORS
  set_sid triggers an error if the provided sid is not within the allowed range
  (currently 1 <= sid <= 25).

EXAMPLES
  gplot.sid          -- =1
  gplot:set_sid(2)
  gplot.sid          -- =2

SEE ALSO
  None.
]=]

__help['gplot:is_busy'] = [=[
NAME
  is_busy

SYNOPSIS
  gplot:is_busy()

DESCRIPTION
  The is_busy method tells if the corresponding gnuplot is still processing the
  script provided by a previous plot command. NB: it doesn't take into account
  the command sent through gplot directly. It can be use to test if the previous
  command is done before executing a new one (avoiding a blocking wait if the
  maximum number of tmp file is reached : see clean_tmpFile).

RETURN VALUE
  It returns a boolean indicating if the corresponding gnuplot is busy.

EXAMPLES
  gplot:is_busy()                       -- =false
  plot { prolog = "pause 5" }           -- pause during 5 seconds
  gplot:is_busy()                       -- =true

SEE ALSO
  None.
]=]

__help['gplot:clean_tmpfile'] = [=[
NAME
  clean_tmpfile

SYNOPSIS
  gplot:clean_tmpfile()

DESCRIPTION
  Remove all unused temporary files (tmp) from the tmp folder. Those file
  contains the gnuplot scripts not yet processed by gnuplot. This function can
  be used to remove all files that have not been properly removed
  (after a crash for example). The tmp files are used by the plot command and
  written in the "TMP_MAD_PLOT" folder created in the current working directory.
  This folder shouldn't be remove while MAD is running but can be manually
  removed afterward.

RETURN VALUE
  None.

SEE ALSO
  None.
]=]

-- end ------------------------------------------------------------------------o
return __help
