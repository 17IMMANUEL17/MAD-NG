--[=[
 o-----------------------------------------------------------------------------o
 |
 | Symplectic integrators
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of symplectic integrators from 1st to 8th order
    Integrators have the following calling convention:
      integrate(elm, map, len, thick, thin)
    where thick and thin must have the following calling convention:
      thick(elm, mflow, len_weight)
       thin(elm, mflow, len_weight)

 o-----------------------------------------------------------------------------o
]=]

local M = {}

local max   in math
local fnone in MAD.gfunc

-- Yoshida schemes ------------------------------------------------------------o

-- [Yoshida90] eq 5.18 and p267
local function make_yoshida (w)
  local d, k, n, s = {}, {}, #w+1, 0
  for i=1,n-1 do k[i] = w[n-i] ; s = s+w[i] end
  d[1], k[n] = k[1]/2, 1-2*s
  for i=2,n do d[i] = (k[i]+k[i-1])/2 end
  -- local printf in MAD.utility
  -- for i=1,#d do
  --  printf("%d, % -.10f, % -.10f", i, d[i], k[i])
  -- end
  return d, k
end

local yosh4_w = { -- 4th order (eq. 2.11)
  A = {  1.35120719195965777 },
}

local yosh6_w = { -- 6th order (table1)
  A = { -0.117767998417887E1 ,  0.235573213359357E0 , 0.784513610477560E0 },
--  B = { -0.213228522200144E1 ,  0.426068187079180E-2, 0.143984816797678E1 },
--  C = {  0.152886228424922E-2, -0.214403531630539E1 , 0.144778256239930E1 },
}

local yosh8_w = { -- 8th order (table2)
--  A = { -0.161582374150097E1 , -0.244699182370524E1, -0.716989419708120E-2,
--         0.244002732616735E1 ,  0.157739928123617E0,  0.182020630970714E1 ,
--         0.104242620869991E1 },
--  B = { -0.169248587770116E-2,  0.289195744315849E1,  0.378039588360192E-2,
--        -0.289688250328827E1 ,  0.289105148970595E1, -0.233864815101035E1 ,
--         0.148819229202922E1 },
--  C = {  0.311790812418427E0 , -0.155946803821447E1, -0.167896928259640E1 ,
--         0.166335809963315E1 , -0.106458714789183E1,  0.136934946416871E1 ,
--         0.629030650210433E0 },
  D = {  0.102799849391985E0 , -0.196061023297549E1,  0.193813913762276E1 ,
        -0.158240635368243E0 , -0.144485223686048E1,  0.253693336566229E0 ,
         0.914844246229740E0 },
--  E = {  0.227738840094906E-1,  0.252778927322839E1, -0.719180053552772E-1,
--         0.536018921307285E-2, -0.204809795887393E1,  0.107990467703699E0 ,
--         0.130300165760014E1 },
}

local yosh4_d, yosh4_k = make_yoshida(yosh4_w.A)
local yosh6_d, yosh6_k = make_yoshida(yosh6_w.A)
local yosh8_d, yosh8_k = make_yoshida(yosh8_w.D)

--[[ for debug and comparison of solutions
print('A4') make_yoshida(yosh4_w.A)
print('A6') make_yoshida(yosh6_w.A)
print('B6') make_yoshida(yosh6_w.B)
print('C6') make_yoshida(yosh6_w.C)
print('A8') make_yoshida(yosh8_w.A)
print('B8') make_yoshida(yosh8_w.B)
print('C8') make_yoshida(yosh8_w.C)
print('D8') make_yoshida(yosh8_w.D)
print('E8') make_yoshida(yosh8_w.E)
--]]

-- integrators ----------------------------------------------------------------o

function M.thinonly (elm, mflw, lw_, thick_, thin)
  -- 1 thin
  thin(elm, mflw, lw_)
end

function M.driftonly (elm, mflw, lw, thick, thin_)
  local nsl = max(elm.nslice or mflw.nslice, 1)
  local fsl = mflw.atslice
  local lwd = lw/nsl
  local ds  = lwd*elm.l*mflw.sdir

  -- nsl*(1 thick)
  for i=1,nsl-1 do
    thick(elm, mflw, lwd)     mflw.spos = mflw.spos + ds
      fsl(elm, mflw, lwd, i)
  end
    thick(elm, mflw, lwd)
end

function M.thickonly (elm, mflw, lw, thick, thin_)
  local nsl = max(elm.nslice or mflw.nslice, 1)
  local fsl = mflw.atslice
  local lwd = lw/nsl
  local ds  = lwd*elm.l*mflw.sdir

  -- nsl*(1 thick)
      fsl(elm, mflw, lwd, 0)
  for i=1,nsl do
    thick(elm, mflw, lwd)     mflw.spos = mflw.spos + ds
      fsl(elm, mflw, lwd, i)
  end
end

function M.simple (elm, mflw, lw, thick, thin) -- 1st order
  local nsl = max(elm.nslice or mflw.nslice, 1)
  local fsl = mflw.atslice
  local lwk = lw/nsl
  local lwd = lwk/2
  local ds  = lwk*elm.l*mflw.sdir

  -- nsl*(1 thin + 1 thick) + 1 thick
 if fsl == fnone then         mflw.npos = 'first'
    thick(elm, mflw, lwd)     mflw.npos = nil
  for i=1,nsl-1 do
     thin(elm, mflw, lwk)
    thick(elm, mflw, lwk)
  end
     thin(elm, mflw, lwk)     mflw.npos = 'last'
    thick(elm, mflw, lwd)     mflw.npos = nil
  return
 end

  -- proper splitting for atslice, nsl*(1 thin + 2 thicks)
      fsl(elm, mflw, lwk, 0)
  for i=1,nsl do              mflw.npos = 'first'
    thick(elm, mflw, lwd)     mflw.npos = nil
     thin(elm, mflw, lwk)     mflw.npos = 'last'
    thick(elm, mflw, lwd)     mflw.spos, mflw.npos = mflw.spos + ds
      fsl(elm, mflw, lwk, i)
  end
end

function M.collim (elm, mflw, lw, thick, thin) -- 1st order
  local nsl = max(elm.nslice or mflw.nslice, 1)
  local fsl = mflw.atslice
  local lwd = lw/nsl
  local lwk = lwd/2
  local ds  = lwk*elm.l*mflw.sdir

  -- nsl*(2 thins + 1 thick)
      fsl(elm, mflw, lwd, 0)
  for i=1,nsl do
     thin(elm, mflw, lwk)
    thick(elm, mflw, lwd)
     thin(elm, mflw, lwk)     mflw.spos = mflw.spos + ds
      fsl(elm, mflw, lwd, i)
  end
end

-- [Burkhardt13] table 1, p. 946
function M.teapot (elm, mflw, lw, thick, thin) -- 2nd order
  local nsl = max(elm.nslice or mflw.nslice, 2)
  local fsl = mflw.atslice
  local lwk = lw/nsl
  local lwd = lwk/(2*(nsl+1))
  local lwD = lwk*nsl/(nsl^2-1)
  local dl  = elm.l*mflw.sdir

  -- nsl*(1 thin + 1 thick) + 1 thick
      fsl(elm, mflw, lwk, 0)  mflw.npos = 'first'
    thick(elm, mflw, lwd)     mflw.spos, mflw.npos = mflw.spos + dl*lwd
if fsl == fnone then
  for i=1,nsl-1 do
     thin(elm, mflw, lwk)
    thick(elm, mflw, lwD)
  end
else -- proper splitting for atslice, nsl*(1 thin + 2 thicks)
  for i=1,nsl-1 do
     thin(elm, mflw, lwk)
    thick(elm, mflw, lwD/2)
      fsl(elm, mflw, lwk, i)  mflw.spos = mflw.spos + dl*lwD/2
    thick(elm, mflw, lwD/2)
  end
end
     thin(elm, mflw, lwk)     mflw.npos = 'last'
    thick(elm, mflw, lwd)     mflw.spos, mflw.npos = mflw.spos + dl*lwd
      fsl(elm, mflw, lwk, nsl)
end

-- [Yoshida90] eq. 2.11, p. 263
function M.yoshida4 (elm, mflw, lw, thick, thin) -- 4th order
  local nsl = max(elm.nslice or mflw.nslice, 1)
  local fsl = mflw.atslice
  local lwn = lw/nsl
  local ds  = lwn*elm.l*mflw.sdir

  -- nsl*(3 thins + 4 thicks) ; k=4
      fsl(elm, mflw, lwn, 0)
  for i=1,nsl do                        mflw.npos = 'first'
    thick(elm, mflw, lwn * yosh4_d[1])  mflw.npos = nil
     thin(elm, mflw, lwn * yosh4_k[1])
    thick(elm, mflw, lwn * yosh4_d[2])
     thin(elm, mflw, lwn * yosh4_k[2]) -- middle
    thick(elm, mflw, lwn * yosh4_d[2])
     thin(elm, mflw, lwn * yosh4_k[1])  mflw.npos = 'last'
    thick(elm, mflw, lwn * yosh4_d[1])  mflw.spos, mflw.npos = mflw.spos + ds
    -- back to physics
      fsl(elm, mflw, lwn, i)
  end
end

-- [Yoshida90] table 1, p. 267
function M.yoshida6 (elm, mflw, lw, thick, thin) -- 6th order
  local nsl = max(elm.nslice or mflw.nslice, 1)
  local fsl = mflw.atslice
  local lwn = lw/nsl
  local ds  = lwn*elm.l*mflw.sdir

  -- nsl*(7 thins + 8 thicks) ; k=8
      fsl(elm, mflw, lwn, 0)
  for i=1,nsl do                        mflw.npos = 'first'
    thick(elm, mflw, lwn * yosh6_d[1])  mflw.npos = nil
     thin(elm, mflw, lwn * yosh6_k[1])
    thick(elm, mflw, lwn * yosh6_d[2])
     thin(elm, mflw, lwn * yosh6_k[2])
    thick(elm, mflw, lwn * yosh6_d[3])
     thin(elm, mflw, lwn * yosh6_k[3])
    thick(elm, mflw, lwn * yosh6_d[4])
     thin(elm, mflw, lwn * yosh6_k[4]) -- middle
    thick(elm, mflw, lwn * yosh6_d[4])
     thin(elm, mflw, lwn * yosh6_k[3])
    thick(elm, mflw, lwn * yosh6_d[3])
     thin(elm, mflw, lwn * yosh6_k[2])
    thick(elm, mflw, lwn * yosh6_d[2])
     thin(elm, mflw, lwn * yosh6_k[1])  mflw.npos = 'last'
    thick(elm, mflw, lwn * yosh6_d[1])  mflw.spos, mflw.npos = mflw.spos + ds
    -- back to physics
      fsl(elm, mflw, lwn, i)
  end
end

-- [Yoshida90] table 2, p. 267
function M.yoshida8 (elm, mflw, lw, thick, thin) -- 8th order
  local nsl = max(elm.nslice or mflw.nslice, 1)
  local fsl = mflw.atslice
  local lwn = lw/nsl
  local ds  = lwn*elm.l*mflw.sdir

  -- nsl*(15 thins + 16 thicks) ; k=16
      fsl(elm, mflw, lwn, 0)
  for i=1,nsl do                        mflw.npos = 'first'
    thick(elm, mflw, lwn * yosh8_d[1])  mflw.npos = nil
     thin(elm, mflw, lwn * yosh8_k[1])
    thick(elm, mflw, lwn * yosh8_d[2])
     thin(elm, mflw, lwn * yosh8_k[2])
    thick(elm, mflw, lwn * yosh8_d[3])
     thin(elm, mflw, lwn * yosh8_k[3])
    thick(elm, mflw, lwn * yosh8_d[4])
     thin(elm, mflw, lwn * yosh8_k[4])
    thick(elm, mflw, lwn * yosh8_d[5])
     thin(elm, mflw, lwn * yosh8_k[5])
    thick(elm, mflw, lwn * yosh8_d[6])
     thin(elm, mflw, lwn * yosh8_k[6])
    thick(elm, mflw, lwn * yosh8_d[7])
     thin(elm, mflw, lwn * yosh8_k[7])
    thick(elm, mflw, lwn * yosh8_d[8])
     thin(elm, mflw, lwn * yosh8_k[8]) -- middle
    thick(elm, mflw, lwn * yosh8_d[8])
     thin(elm, mflw, lwn * yosh8_k[7])
    thick(elm, mflw, lwn * yosh8_d[7])
     thin(elm, mflw, lwn * yosh8_k[6])
    thick(elm, mflw, lwn * yosh8_d[6])
     thin(elm, mflw, lwn * yosh8_k[5])
    thick(elm, mflw, lwn * yosh8_d[5])
     thin(elm, mflw, lwn * yosh8_k[4])
    thick(elm, mflw, lwn * yosh8_d[4])
     thin(elm, mflw, lwn * yosh8_k[3])
    thick(elm, mflw, lwn * yosh8_d[3])
     thin(elm, mflw, lwn * yosh8_k[2])
    thick(elm, mflw, lwn * yosh8_d[2])
     thin(elm, mflw, lwn * yosh8_k[1])  mflw.npos = 'last'
    thick(elm, mflw, lwn * yosh8_d[1])  mflw.spos, mflw.npos = mflw.spos + ds
    -- back to physics
      fsl(elm, mflw, lwn, i)
  end
end

-- Runge-Kutta-Nystrom schemes ------------------------------------------------o

-- TODO...

-- integration schemes by order -----------------------------------------------o

M[1] = M.simple
M[2] = M.teapot
M[3] = M.yoshida4
M[4] = M.yoshida4
M[5] = M.yoshida6
M[6] = M.yoshida6
M[7] = M.yoshida8
M[8] = M.yoshida8

-- end ------------------------------------------------------------------------o
return { symint = M }
