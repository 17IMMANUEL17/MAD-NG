--[=[
 o-----------------------------------------------------------------------------o
 |
 | Symplectic integrators
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of symplectic integrators from 1st to 8th order
    Integrators have the following calling convention:
      integrate(elm, map, len, thick, kick)
    where thick and kick must have the following calling convention:
      thick(elm, mflow, len_weight)
       kick(elm, mflow, len_weight)

 o-----------------------------------------------------------------------------o
]=]

local M = {DKD={}, TKT={}, MKM={}}

local max in math
local is_number  in MAD.typeid

-- Yoshida coefficients -------------------------------------------------------o

-- [Yoshida90] eq 5.18 and p267
local function make_yoshida (w, nam)
  local d, k, n, s = {}, {}, #w+1, 0
  for i=1,n-1 do k[i] = w[n-i] ; s = s+w[i] end
  d[1], k[n] = k[1]/2, 1-2*s
  for i=2,n do d[i] = (k[i]+k[i-1])/2 end
  -- local printf in MAD.utility
  -- printf("%-5s ", nam)
  -- for i=1,#d do printf("[%d]={% -.6f, % -.6f} ", i, d[i], k[i]) end
  -- printf("\n")
  return d, k
end

local yosh4_w = { -- 4th order (eq. 2.11)
  A = {  1.35120719195965777 },
}

local yosh6_w = { -- 6th order (table1)
  A = { -0.117767998417887E1 ,  0.235573213359357E0 , 0.784513610477560E0 },
--  B = { -0.213228522200144E1 ,  0.426068187079180E-2, 0.143984816797678E1 },
--  C = {  0.152886228424922E-2, -0.214403531630539E1 , 0.144778256239930E1 },
}

local yosh8_w = { -- 8th order (table2)
--  A = { -0.161582374150097E1 , -0.244699182370524E1, -0.716989419708120E-2,
--         0.244002732616735E1 ,  0.157739928123617E0,  0.182020630970714E1 ,
--         0.104242620869991E1 },
--  B = { -0.169248587770116E-2,  0.289195744315849E1,  0.378039588360192E-2,
--        -0.289688250328827E1 ,  0.289105148970595E1, -0.233864815101035E1 ,
--         0.148819229202922E1 },
--  C = {  0.311790812418427E0 , -0.155946803821447E1, -0.167896928259640E1 ,
--         0.166335809963315E1 , -0.106458714789183E1,  0.136934946416871E1 ,
--         0.629030650210433E0 },
  D = {  0.102799849391985E0 , -0.196061023297549E1,  0.193813913762276E1 ,
        -0.158240635368243E0 , -0.144485223686048E1,  0.253693336566229E0 ,
         0.914844246229740E0 },
--  E = {  0.227738840094906E-1,  0.252778927322839E1, -0.719180053552772E-1,
--         0.536018921307285E-2, -0.204809795887393E1,  0.107990467703699E0 ,
--         0.130300165760014E1 },
}

local yosh4_d, yosh4_k = make_yoshida(yosh4_w.A, 'A4')
local yosh6_d, yosh6_k = make_yoshida(yosh6_w.A, 'A6')
local yosh8_d, yosh8_k = make_yoshida(yosh8_w.D, 'D8')

-- helper ---------------------------------------------------------------------o

local function get_slc (elm, mflw, lw)
  local slc = elm.nslice or mflw.nslice

  if is_number(slc) then
    local nsl = max(slc, mflw.nslc)
    mflw.nsl = nsl
    return nsl, lw/nsl
  else
    local nsl, dir = #slc, mflw.sdir
    mflw.nsl = nsl
    return nsl, nil, slc, dir > 0 and 0 or nsl+1, dir
  end
end

-- single step integrators ----------------------------------------------------o

local function thinonly (elm, mflw, lw, _, thin)
  local fsl = mflw.atslice
  mflw.nsl = 1

  -- 1 thin
   fsl(elm, mflw, 0 , 0)
  thin(elm, mflw, lw, 0)
   fsl(elm, mflw, lw, 1)
end

local function driftonly (elm, mflw, lw, thick, _)
  local fsl = mflw.atslice
  mflw.nsl = 1

  -- 1 thick
    fsl(elm, mflw, 0 , 0)
  thick(elm, mflw, lw, 0)
    fsl(elm, mflw, lw, 1)
end

local function thickonly (elm, mflw, lw, thick, _)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(1 thick)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi, 0)
      fsl(elm, mflw, lwi, i)
  end
end

-- DKD special integrators ----------------------------------------------------o

-- 2nd order: [Burkhardt13] table 1, p. 946
local function teapot (elm, mflw, lw, thick, kick)
  local nsl = max(2, elm.nslice or mflw.nslice)
  local lwn = lw/nsl
  local lwd = lw/(2*(nsl+1))
  local lwD = lw*nsl/(nsl^2-1)/2
  local fsl = mflw.atslice
  mflw.nsl = nsl

 -- nsl*(1 kick + 2 thicks)
     fsl(elm, mflw, 0  ,  0)
   thick(elm, mflw, lwd, -1)
 for i=1,nsl-1 do
    kick(elm, mflw, lwn,  0)
   thick(elm, mflw, lwD,  0)
     fsl(elm, mflw, lwn,  i)
   thick(elm, mflw, lwD,  0)
 end
    kick(elm, mflw, lwn,  0)
   thick(elm, mflw, lwd,  1)
     fsl(elm, mflw, lwn, nsl)
end

-- DKD integrators [Yoshida90] ------------------------------------------------o

-- 2nd order: [Yoshida90] eq. 2.10, p. 263
local function DKD2 (elm, mflw, lw, thick, kick)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(1 kick + 2 thicks)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi*0.5, -1)
     kick(elm, mflw, lwi    ,  0) -- middle
    thick(elm, mflw, lwi*0.5,  1)
      fsl(elm, mflw, lwi, i)
  end
end

-- 4th order: [Yoshida90] eq. 2.11, p. 263
local function DKD4 (elm, mflw, lw, thick, kick)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(3 kicks + 4 thicks) ; k=4
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi * yosh4_d[1], -3)
     kick(elm, mflw, lwi * yosh4_k[1], -2)
    thick(elm, mflw, lwi * yosh4_d[2], -1)
     kick(elm, mflw, lwi * yosh4_k[2],  0) -- middle
    thick(elm, mflw, lwi * yosh4_d[2],  1)
     kick(elm, mflw, lwi * yosh4_k[1],  2)
    thick(elm, mflw, lwi * yosh4_d[1],  3)
      fsl(elm, mflw, lwi, i)
  end
end

-- 6th order: [Yoshida90] table 1, p. 267
local function DKD6 (elm, mflw, lw, thick, kick)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(7 kicks + 8 thicks) ; k=8
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi * yosh6_d[1], -7)
     kick(elm, mflw, lwi * yosh6_k[1], -6)
    thick(elm, mflw, lwi * yosh6_d[2], -5)
     kick(elm, mflw, lwi * yosh6_k[2], -4)
    thick(elm, mflw, lwi * yosh6_d[3], -3)
     kick(elm, mflw, lwi * yosh6_k[3], -2)
    thick(elm, mflw, lwi * yosh6_d[4], -1)
     kick(elm, mflw, lwi * yosh6_k[4],  0) -- middle
    thick(elm, mflw, lwi * yosh6_d[4],  1)
     kick(elm, mflw, lwi * yosh6_k[3],  2)
    thick(elm, mflw, lwi * yosh6_d[3],  3)
     kick(elm, mflw, lwi * yosh6_k[2],  4)
    thick(elm, mflw, lwi * yosh6_d[2],  5)
     kick(elm, mflw, lwi * yosh6_k[1],  6)
    thick(elm, mflw, lwi * yosh6_d[1],  7)
      fsl(elm, mflw, lwi , i)
  end
end

-- 8th order: [Yoshida90] table 2, p. 267
local function DKD8 (elm, mflw, lw, thick, kick)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(15 kicks + 16 thicks) ; k=16
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi * yosh8_d[1], -15)
     kick(elm, mflw, lwi * yosh8_k[1], -14)
    thick(elm, mflw, lwi * yosh8_d[2], -13)
     kick(elm, mflw, lwi * yosh8_k[2], -12)
    thick(elm, mflw, lwi * yosh8_d[3], -11)
     kick(elm, mflw, lwi * yosh8_k[3], -10)
    thick(elm, mflw, lwi * yosh8_d[4], - 9)
     kick(elm, mflw, lwi * yosh8_k[4], - 8)
    thick(elm, mflw, lwi * yosh8_d[5], - 7)
     kick(elm, mflw, lwi * yosh8_k[5], - 6)
    thick(elm, mflw, lwi * yosh8_d[6], - 5)
     kick(elm, mflw, lwi * yosh8_k[6], - 4)
    thick(elm, mflw, lwi * yosh8_d[7], - 3)
     kick(elm, mflw, lwi * yosh8_k[7], - 2)
    thick(elm, mflw, lwi * yosh8_d[8], - 1)
     kick(elm, mflw, lwi * yosh8_k[8],   0) -- middle
    thick(elm, mflw, lwi * yosh8_d[8],   1)
     kick(elm, mflw, lwi * yosh8_k[7],   2)
    thick(elm, mflw, lwi * yosh8_d[7],   3)
     kick(elm, mflw, lwi * yosh8_k[6],   4)
    thick(elm, mflw, lwi * yosh8_d[6],   5)
     kick(elm, mflw, lwi * yosh8_k[5],   6)
    thick(elm, mflw, lwi * yosh8_d[5],   7)
     kick(elm, mflw, lwi * yosh8_k[4],   8)
    thick(elm, mflw, lwi * yosh8_d[4],   9)
     kick(elm, mflw, lwi * yosh8_k[3],  10)
    thick(elm, mflw, lwi * yosh8_d[3],  11)
     kick(elm, mflw, lwi * yosh8_k[2],  12)
    thick(elm, mflw, lwi * yosh8_d[2],  13)
     kick(elm, mflw, lwi * yosh8_k[1],  14)
    thick(elm, mflw, lwi * yosh8_d[1],  15)
      fsl(elm, mflw, lwi , i)
  end
end

-- MKM integrators (Biased) [Boole's rule] ------------------------------------o

-- 2nd order: [Abramowitz72] p885 25.4.2
local function MKM2 (elm, mflw, lw, thick, kick)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(2 kicks + 1 thick)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     kick(elm, mflw, lwi*0.5, -1)
    thick(elm, mflw, lwi    ,  0) -- (no) middle
     kick(elm, mflw, lwi*0.5,  1)
      fsl(elm, mflw, lwi, i)
  end
end

-- 4th order: [Abramowitz72] p886 25.4.5
local boole4_k = {1/6, 4/6}

local function MKM4 (elm, mflw, lw, thick, kick)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(3 kicks + 2 thicks)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     kick(elm, mflw, lwi * boole4_k[1], -2)
    thick(elm, mflw, lwi * 0.5        , -1)
     kick(elm, mflw, lwi * boole4_k[2],  0) -- middle
    thick(elm, mflw, lwi * 0.5        ,  1)
     kick(elm, mflw, lwi * boole4_k[1],  2)
      fsl(elm, mflw, lwi, i)
  end
end

-- 6th order: [Abramowitz72] p886 25.4.14
local boole6_k = {7/90, 32/90, 12/90}

local function MKM6 (elm, mflw, lw, thick, kick)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(5 kicks + 4 thicks)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     kick(elm, mflw, lwi * boole6_k[1], -4)
    thick(elm, mflw, lwi * 0.25       , -3)
     kick(elm, mflw, lwi * boole6_k[2], -2)
    thick(elm, mflw, lwi * 0.25       , -1)
     kick(elm, mflw, lwi * boole6_k[3],  0) -- middle
    thick(elm, mflw, lwi * 0.25       ,  1)
     kick(elm, mflw, lwi * boole6_k[2],  2)
    thick(elm, mflw, lwi * 0.25       ,  3)
     kick(elm, mflw, lwi * boole6_k[1],  4)
      fsl(elm, mflw, lwi, i)
  end
end

-- 8th order: [Abramowitz72] p886 25.4.16
local boole8_k = {41/840, 216/840, 27/840, 272/840}
local boole8_d = 1/6

local function MKM8 (elm, mflw, lw, thick, kick)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(7 kicks + 6 thicks)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     kick(elm, mflw, lwi * boole8_k[1], -6)
    thick(elm, mflw, lwi * boole8_d   , -5)
     kick(elm, mflw, lwi * boole8_k[2], -4)
    thick(elm, mflw, lwi * boole8_d   , -3)
     kick(elm, mflw, lwi * boole8_k[3], -2)
    thick(elm, mflw, lwi * boole8_d   , -1)
     kick(elm, mflw, lwi * boole8_k[4],  0) -- middle
    thick(elm, mflw, lwi * boole8_d   ,  1)
     kick(elm, mflw, lwi * boole8_k[3],  2)
    thick(elm, mflw, lwi * boole8_d   ,  3)
     kick(elm, mflw, lwi * boole8_k[2],  4)
    thick(elm, mflw, lwi * boole8_d   ,  5)
     kick(elm, mflw, lwi * boole8_k[1],  6)
      fsl(elm, mflw, lwi, i)
  end
end

-- Runge-Kutta-Nystrom integrators --------------------------------------------o

-- TODO...

-- integrators by names -------------------------------------------------------o

M.thinonly  = thinonly
M.driftonly = driftonly
M.thickonly = thickonly

M.DKD.simple   = DKD2
M.DKD.collim   = MKM2
M.DKD.teapot   = teapot
M.DKD.yoshida2 = DKD2
M.DKD.yoshida4 = DKD4
M.DKD.yoshida6 = DKD6
M.DKD.yoshida8 = DKD8

-- integrators by order -------------------------------------------------------o

M.DKD[1], M.DKD[2] = DKD2, DKD2
M.DKD[3], M.DKD[4] = DKD4, DKD4
M.DKD[5], M.DKD[6] = DKD6, DKD6
M.DKD[7], M.DKD[8] = DKD8, DKD8

M.TKT[1], M.TKT[2] = DKD2, DKD2 -- TKT is mainly a map choice
M.TKT[3], M.TKT[4] = DKD4, DKD4
M.TKT[5], M.TKT[6] = DKD6, DKD6
M.TKT[7], M.TKT[8] = DKD8, DKD8

M.MKM[1], M.MKM[2] = DKD2, DKD2 -- for PTC compatibility...
M.MKM[3], M.MKM[4] = MKM4, MKM4
M.MKM[5], M.MKM[6] = MKM6, MKM6
M.MKM[7], M.MKM[8] = MKM8, MKM8

-- slices selectors -----------------------------------------------------------o

M.atbegin = \e,m,_,i ->           i == 0
M.atbody  = \e,m,_,i ->           i >  0
M.atmid   = \e,m,_,i ->         2*i == m.nsl
M.atmid1  = \e,m,_,i ->         2*i == m.nsl or i == m.nsl and i == 1
M.atins   = \e,m,_,i -> i > 0 and i <  m.nsl
M.atins1  = \e,m,_,i -> i > 0 and i <  m.nsl or i == m.nsl and i == 1
M.atend   = \e,m,_,i ->           i == m.nsl
M.atbound = \e,m,_,i -> i == 0 or i == m.nsl

-- aliases
M.atinside = M.atins

-- actions selectors ----------------------------------------------------------o

M.aperat   = \at     -> \e,m,w,i -> at(e,m,w,i) and m.ataper (e,m,w,i)
M.saveat   = \at     -> \e,m,w,i -> at(e,m,w,i) and m.atsave (e,m,w,i)
M.actionat = \at,act -> \e,m,w,i -> at(e,m,w,i) and m[act]   (e,m,w,i)
M.action   = \act    -> \e,m,w,i ->                 m[act]   (e,m,w,i)

-- end ------------------------------------------------------------------------o
return { symint = M }
