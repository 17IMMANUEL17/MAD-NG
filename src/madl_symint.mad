--[=[
 o-----------------------------------------------------------------------------o
 |
 | Symplectic integrators
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of symplectic integrators from 1st to 8th order
    Integrators have the following calling convention:
      integrate(elm, map, len, thick, kick)
    where thick and kick must have the following calling convention:
      thick(elm, mflow, len_weight)
       kick(elm, mflow, len_weight)

 o-----------------------------------------------------------------------------o
]=]

local M = {}

local max, sqrt in math
local fnone     in MAD.gfunc
local is_number in MAD.typeid

-- integrators ----------------------------------------------------------------o

function M.thinonly (elm, mflw, lw, _, thin)
  local fsl = mflw.atslice

  -- 1 thin
   fsl(elm, mflw, 0 , 0, 1)
  thin(elm, mflw, lw)
   fsl(elm, mflw, lw, 1, 1)
end

function M.thickonly (elm, mflw, lw, thick, _)
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and lw/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(1 thick)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lwn or lw*slc[i]
    thick(elm, mflw, lwi)
      fsl(elm, mflw, lwi, i, nsl)
  end
end

function M.simple (elm, mflw, lw, thick, kick) -- 1st order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and lw/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(1 kick + 2 thicks)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lwn or lw*slc[i]
    thick(elm, mflw, lwi*0.5)
     kick(elm, mflw, lwi)
    thick(elm, mflw, lwi*0.5)
      fsl(elm, mflw, lwi, i, nsl)
  end
end

function M.collim (elm, mflw, lw, thick, kick) -- 1st order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(2 kicks + 1 thick)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     kick(elm, mflw, lwi*0.5)
    thick(elm, mflw, lwi)
     kick(elm, mflw, lwi*0.5)
      fsl(elm, mflw, lwi, i, nsl)
  end
end

-- [Burkhardt13] table 1, p. 946
function M.teapot (elm, mflw, lw, thick, kick) -- 2nd order
  local nsl = max(2, elm.nslice or mflw.nslice)
  local lwn = lw/nsl
  local lwd = lw/(2*(nsl+1))
  local lwD = lw*nsl/(nsl^2-1)/2
  local fsl = mflw.atslice

 -- nsl*(1 kick + 2 thicks)
     fsl(elm, mflw, 0, 0, nsl)
   thick(elm, mflw, lwd)
 for i=1,nsl-1 do
    kick(elm, mflw, lwn)
   thick(elm, mflw, lwD)
     fsl(elm, mflw, lwn, i, nsl)
   thick(elm, mflw, lwD)
 end
    kick(elm, mflw, lwn)
   thick(elm, mflw, lwd)
     fsl(elm, mflw, lwn, nsl, nsl)
end

-- Yoshida integrators --------------------------------------------------------o

-- [Yoshida90] eq 5.18 and p267
local function make_yoshida (w)
  local d, k, n, s = {}, {}, #w+1, 0
  for i=1,n-1 do k[i] = w[n-i] ; s = s+w[i] end
  d[1], k[n] = k[1]/2, 1-2*s
  for i=2,n do d[i] = (k[i]+k[i-1])/2 end
  -- local printf in MAD.utility
  -- for i=1,#d do
  --  printf("%d, % -.10f, % -.10f", i, d[i], k[i])
  -- end
  return d, k
end

local yosh4_w = { -- 4th order (eq. 2.11)
  A = {  1.35120719195965777 },
}

local yosh6_w = { -- 6th order (table1)
  A = { -0.117767998417887E1 ,  0.235573213359357E0 , 0.784513610477560E0 },
--  B = { -0.213228522200144E1 ,  0.426068187079180E-2, 0.143984816797678E1 },
--  C = {  0.152886228424922E-2, -0.214403531630539E1 , 0.144778256239930E1 },
}

local yosh8_w = { -- 8th order (table2)
--  A = { -0.161582374150097E1 , -0.244699182370524E1, -0.716989419708120E-2,
--         0.244002732616735E1 ,  0.157739928123617E0,  0.182020630970714E1 ,
--         0.104242620869991E1 },
--  B = { -0.169248587770116E-2,  0.289195744315849E1,  0.378039588360192E-2,
--        -0.289688250328827E1 ,  0.289105148970595E1, -0.233864815101035E1 ,
--         0.148819229202922E1 },
--  C = {  0.311790812418427E0 , -0.155946803821447E1, -0.167896928259640E1 ,
--         0.166335809963315E1 , -0.106458714789183E1,  0.136934946416871E1 ,
--         0.629030650210433E0 },
  D = {  0.102799849391985E0 , -0.196061023297549E1,  0.193813913762276E1 ,
        -0.158240635368243E0 , -0.144485223686048E1,  0.253693336566229E0 ,
         0.914844246229740E0 },
--  E = {  0.227738840094906E-1,  0.252778927322839E1, -0.719180053552772E-1,
--         0.536018921307285E-2, -0.204809795887393E1,  0.107990467703699E0 ,
--         0.130300165760014E1 },
}

local yosh4_d, yosh4_k = make_yoshida(yosh4_w.A)
local yosh6_d, yosh6_k = make_yoshida(yosh6_w.A)
local yosh8_d, yosh8_k = make_yoshida(yosh8_w.D)

--[[ for debug and comparison of solutions
print('A4') make_yoshida(yosh4_w.A)
print('A6') make_yoshida(yosh6_w.A)
print('B6') make_yoshida(yosh6_w.B)
print('C6') make_yoshida(yosh6_w.C)
print('A8') make_yoshida(yosh8_w.A)
print('B8') make_yoshida(yosh8_w.B)
print('C8') make_yoshida(yosh8_w.C)
print('D8') make_yoshida(yosh8_w.D)
print('E8') make_yoshida(yosh8_w.E)
--]]

-- [Yoshida90] eq. 2.11, p. 263
function M.yoshida4 (elm, mflw, lw, thick, kick) -- 4th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(3 kicks + 4 thicks) ; k=4
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
    thick(elm, mflw, lwi * yosh4_d[1])
     kick(elm, mflw, lwi * yosh4_k[1])
    thick(elm, mflw, lwi * yosh4_d[2])
     kick(elm, mflw, lwi * yosh4_k[2]) -- middle
    thick(elm, mflw, lwi * yosh4_d[2])
     kick(elm, mflw, lwi * yosh4_k[1])
    thick(elm, mflw, lwi * yosh4_d[1])
      fsl(elm, mflw, lwi, i, nsl)
  end
end

-- [Yoshida90] table 1, p. 267
function M.yoshida6 (elm, mflw, lw, thick, kick) -- 6th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(7 kicks + 8 thicks) ; k=8
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
    thick(elm, mflw, lwi * yosh6_d[1])
     kick(elm, mflw, lwi * yosh6_k[1])
    thick(elm, mflw, lwi * yosh6_d[2])
     kick(elm, mflw, lwi * yosh6_k[2])
    thick(elm, mflw, lwi * yosh6_d[3])
     kick(elm, mflw, lwi * yosh6_k[3])
    thick(elm, mflw, lwi * yosh6_d[4])
     kick(elm, mflw, lwi * yosh6_k[4]) -- middle
    thick(elm, mflw, lwi * yosh6_d[4])
     kick(elm, mflw, lwi * yosh6_k[3])
    thick(elm, mflw, lwi * yosh6_d[3])
     kick(elm, mflw, lwi * yosh6_k[2])
    thick(elm, mflw, lwi * yosh6_d[2])
     kick(elm, mflw, lwi * yosh6_k[1])
    thick(elm, mflw, lwi * yosh6_d[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Yoshida90] table 2, p. 267
function M.yoshida8 (elm, mflw, lw, thick, kick) -- 8th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(15 kicks + 16 thicks) ; k=16
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
    thick(elm, mflw, lwi * yosh8_d[1])
     kick(elm, mflw, lwi * yosh8_k[1])
    thick(elm, mflw, lwi * yosh8_d[2])
     kick(elm, mflw, lwi * yosh8_k[2])
    thick(elm, mflw, lwi * yosh8_d[3])
     kick(elm, mflw, lwi * yosh8_k[3])
    thick(elm, mflw, lwi * yosh8_d[4])
     kick(elm, mflw, lwi * yosh8_k[4])
    thick(elm, mflw, lwi * yosh8_d[5])
     kick(elm, mflw, lwi * yosh8_k[5])
    thick(elm, mflw, lwi * yosh8_d[6])
     kick(elm, mflw, lwi * yosh8_k[6])
    thick(elm, mflw, lwi * yosh8_d[7])
     kick(elm, mflw, lwi * yosh8_k[7])
    thick(elm, mflw, lwi * yosh8_d[8])
     kick(elm, mflw, lwi * yosh8_k[8]) -- middle
    thick(elm, mflw, lwi * yosh8_d[8])
     kick(elm, mflw, lwi * yosh8_k[7])
    thick(elm, mflw, lwi * yosh8_d[7])
     kick(elm, mflw, lwi * yosh8_k[6])
    thick(elm, mflw, lwi * yosh8_d[6])
     kick(elm, mflw, lwi * yosh8_k[5])
    thick(elm, mflw, lwi * yosh8_d[5])
     kick(elm, mflw, lwi * yosh8_k[4])
    thick(elm, mflw, lwi * yosh8_d[4])
     kick(elm, mflw, lwi * yosh8_k[3])
    thick(elm, mflw, lwi * yosh8_d[3])
     kick(elm, mflw, lwi * yosh8_k[2])
    thick(elm, mflw, lwi * yosh8_d[2])
     kick(elm, mflw, lwi * yosh8_k[1])
    thick(elm, mflw, lwi * yosh8_d[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- Laskar integrators ---------------------------------------------------------o

-- [Laskar01] table 1 p.48 (col.1, drift) and (col.2, kick)
--            table 2 p.56 (col.1, corrector)

local sabac2_d  = { 0.211324865405187117745425609749021272,
                    0.577350269189625764509148780501957456, }
local sabac2_k  = { 1/2,                                    }
local sabac2_c  = { 0.011164549684630112769689735770588651, }

local sabac3_d  = { 0.112701665379258311482073460021760039,
                    0.387298334620741688517926539978239961, }
local sabac3_k  = { 5/18, 4/9,                              }
local sabac3_c  = { 0.005634593363122809402267823769797539, }

local sabac4_d  = { 0.069431844202973712388026755553595248,
                    0.260577634004598155210640364894782409,
                    0.339981043584856264802665759103244687, }
local sabac4_k  = { 0.173927422568726928686531974610999704,
                    0.326072577431273071313468025389000296, }
local sabac4_c  = { 0.003396775048208601331532157783492144, }

local sabac5_d  = { 0.046910077030668003601186560850303517,
                    0.183855267916490450880656228799592080,
                    0.269234655052841545518157210350104403, }
local sabac5_k  = { 0.118463442528094543757132020359958681,
                    0.239314335249683234020645757417819097,
                    0.284444444444444444444444444444444444, }
local sabac5_c  = { 0.002270543121419264819434955050039130, }

local sabac6_d  = { 0.033765242898423986093849222753002695,
                    0.135630063868443757075450979737044631,
                    0.211295100191533802515448936669596706,
                    0.238619186083196908630501721680711935, }
local sabac6_k  = { 0.085662246189585172520148071086366447,
                    0.180380786524069303784916756918858056,
                    0.233956967286345523694935171994775497, }
local sabac6_c  = { 0.001624459841624282521452258512463608, }

local sabac7_d  = { 0.025446043828620737736905157976074369,
                    0.103788363371682042331162455383531428,
                    0.167843017110998636478629180601913472,
                    0.202922575688698583453303206038480732, }
local sabac7_k  = { 0.064742483084434846635305716339541009,
                    0.139852695744638333950733885711889791,
                    0.190915025252559472475184887744487567,
                    0.208979591836734693877551020408163265, }
local sabac7_c  = { 0.001219643912760418472579211822331645, }

local sabac8_d  = { 0.019855071751231884158219565715263505,
                    0.081811689541954746046003466046821277,
                    0.135567033748648876886907443643292044,
                    0.171048883710339590439131453414531184,
                    0.183434642495649804939476142360183981, }
local sabac8_k  = { 0.050614268145188129576265677154981095,
                    0.111190517226687235272177997213120442,
                    0.156853322938943643668981100993300657,
                    0.181341891689180991482575224638597810, }
local sabac8_c  = { 0.000949308177745602234792177503535054, }

local sabac9_d  = { 0.015919880246186955082211898548163565,
                    0.066064566090495147768073207416968997,
                    0.111329837313022698495363874364130346,
                    0.144559004648390734135082012349068788,
                    0.162126711701904464519269007321668304, }
local sabac9_k  = { 0.040637194180787205985946079055261825,
                    0.090324080347428702029236015621456405,
                    0.130305348201467731159371434709316425,
                    0.156173538520001420034315203292221833,
                    0.165119677500629881582262534643487025, }
local sabac9_c  = { 0.000759846022860436646358196674176815, }

local sabac10_d = { 0.013046735741414139961017993957773973,
                    0.054421580914093604672933661830479502,
                    0.092826899194980052248884661654309736,
                    0.123007087084888607717530710974544707,
                    0.142260527573807989957219971018032089,
                    0.148874338981631210884826001129719985, }
local sabac10_k = { 0.033335672154344068796784404946665896,
                    0.074725674575290296572888169828848666,
                    0.109543181257991021997767467114081596,
                    0.134633359654998177545613460784734677,
                    0.147762112357376435086946497325669165, }
local sabac10_c = { 0.000621934331486166426497049845358646, }

-- [Laskar01]
function M.sabac2 (elm, mflw, lw, thick, kick, corr) -- 4th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(2 kicks + 3 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac2_c[1])
    thick(elm, mflw, lwi * sabac2_d[1])
     kick(elm, mflw, lwi * sabac2_k[1])
    thick(elm, mflw, lwi * sabac2_d[2]) -- middle
     kick(elm, mflw, lwi * sabac2_k[1])
    thick(elm, mflw, lwi * sabac2_d[1])
     corr(elm, mflw, lwi , sabac2_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Laskar01]
function M.sabac3 (elm, mflw, lw, thick, kick, corr) -- 5th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(3 kicks + 4 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac3_c[1])
    thick(elm, mflw, lwi * sabac3_d[1])
     kick(elm, mflw, lwi * sabac3_k[1])
    thick(elm, mflw, lwi * sabac3_d[2])
     kick(elm, mflw, lwi * sabac3_k[2]) -- middle
    thick(elm, mflw, lwi * sabac3_d[2])
     kick(elm, mflw, lwi * sabac3_k[1])
    thick(elm, mflw, lwi * sabac3_d[1])
     corr(elm, mflw, lwi , sabac3_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Laskar01]
function M.sabac4 (elm, mflw, lw, thick, kick, corr) -- 6th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(4 kicks + 5 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac4_c[1])
    thick(elm, mflw, lwi * sabac4_d[1])
     kick(elm, mflw, lwi * sabac4_k[1])
    thick(elm, mflw, lwi * sabac4_d[2])
     kick(elm, mflw, lwi * sabac4_k[2])
    thick(elm, mflw, lwi * sabac4_d[3]) -- middle
     kick(elm, mflw, lwi * sabac4_k[2])
    thick(elm, mflw, lwi * sabac4_d[2])
     kick(elm, mflw, lwi * sabac4_k[1])
    thick(elm, mflw, lwi * sabac4_d[1])
     corr(elm, mflw, lwi , sabac4_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Laskar01]
function M.sabac5 (elm, mflw, lw, thick, kick, corr) -- 7th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(5 kicks + 6 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac5_c[1])
    thick(elm, mflw, lwi * sabac5_d[1])
     kick(elm, mflw, lwi * sabac5_k[1])
    thick(elm, mflw, lwi * sabac5_d[2])
     kick(elm, mflw, lwi * sabac5_k[2])
    thick(elm, mflw, lwi * sabac5_d[3])
     kick(elm, mflw, lwi * sabac5_k[3]) -- middle
    thick(elm, mflw, lwi * sabac5_d[3])
     kick(elm, mflw, lwi * sabac5_k[2])
    thick(elm, mflw, lwi * sabac5_d[2])
     kick(elm, mflw, lwi * sabac5_k[1])
    thick(elm, mflw, lwi * sabac5_d[1])
     corr(elm, mflw, lwi , sabac5_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Laskar01]
function M.sabac6 (elm, mflw, lw, thick, kick, corr) -- 8th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(6 kicks + 7 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac6_c[1])
    thick(elm, mflw, lwi * sabac6_d[1])
     kick(elm, mflw, lwi * sabac6_k[1])
    thick(elm, mflw, lwi * sabac6_d[2])
     kick(elm, mflw, lwi * sabac6_k[2])
    thick(elm, mflw, lwi * sabac6_d[3])
     kick(elm, mflw, lwi * sabac6_k[3])
    thick(elm, mflw, lwi * sabac6_d[4]) -- middle
     kick(elm, mflw, lwi * sabac6_k[3])
    thick(elm, mflw, lwi * sabac6_d[3])
     kick(elm, mflw, lwi * sabac6_k[2])
    thick(elm, mflw, lwi * sabac6_d[2])
     kick(elm, mflw, lwi * sabac6_k[1])
    thick(elm, mflw, lwi * sabac6_d[1])
     corr(elm, mflw, lwi , sabac6_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Laskar01]
function M.sabac7 (elm, mflw, lw, thick, kick, corr) -- 9th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(7 kicks + 8 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac7_c[1])
    thick(elm, mflw, lwi * sabac7_d[1])
     kick(elm, mflw, lwi * sabac7_k[1])
    thick(elm, mflw, lwi * sabac7_d[2])
     kick(elm, mflw, lwi * sabac7_k[2])
    thick(elm, mflw, lwi * sabac7_d[3])
     kick(elm, mflw, lwi * sabac7_k[3])
    thick(elm, mflw, lwi * sabac7_d[4])
     kick(elm, mflw, lwi * sabac7_k[4]) -- middle
    thick(elm, mflw, lwi * sabac7_d[4])
     kick(elm, mflw, lwi * sabac7_k[3])
    thick(elm, mflw, lwi * sabac7_d[3])
     kick(elm, mflw, lwi * sabac7_k[2])
    thick(elm, mflw, lwi * sabac7_d[2])
     kick(elm, mflw, lwi * sabac7_k[1])
    thick(elm, mflw, lwi * sabac7_d[1])
     corr(elm, mflw, lwi , sabac7_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Laskar01]
function M.sabac8 (elm, mflw, lw, thick, kick, corr) -- 10th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(8 kicks + 9 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac8_c[1])
    thick(elm, mflw, lwi * sabac8_d[1])
     kick(elm, mflw, lwi * sabac8_k[1])
    thick(elm, mflw, lwi * sabac8_d[2])
     kick(elm, mflw, lwi * sabac8_k[2])
    thick(elm, mflw, lwi * sabac8_d[3])
     kick(elm, mflw, lwi * sabac8_k[3])
    thick(elm, mflw, lwi * sabac8_d[4])
     kick(elm, mflw, lwi * sabac8_k[4])
    thick(elm, mflw, lwi * sabac8_d[5]) -- middle
     kick(elm, mflw, lwi * sabac8_k[4])
    thick(elm, mflw, lwi * sabac8_d[4])
     kick(elm, mflw, lwi * sabac8_k[3])
    thick(elm, mflw, lwi * sabac8_d[3])
     kick(elm, mflw, lwi * sabac8_k[2])
    thick(elm, mflw, lwi * sabac8_d[2])
     kick(elm, mflw, lwi * sabac8_k[1])
    thick(elm, mflw, lwi * sabac8_d[1])
     corr(elm, mflw, lwi , sabac8_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Laskar01]
function M.sabac9 (elm, mflw, lw, thick, kick, corr) -- 11th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(9 kicks + 10 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac9_c[1])
    thick(elm, mflw, lwi * sabac9_d[1])
     kick(elm, mflw, lwi * sabac9_k[1])
    thick(elm, mflw, lwi * sabac9_d[2])
     kick(elm, mflw, lwi * sabac9_k[2])
    thick(elm, mflw, lwi * sabac9_d[3])
     kick(elm, mflw, lwi * sabac9_k[3])
    thick(elm, mflw, lwi * sabac9_d[4])
     kick(elm, mflw, lwi * sabac9_k[4])
    thick(elm, mflw, lwi * sabac9_d[5])
     kick(elm, mflw, lwi * sabac9_k[5]) -- middle
    thick(elm, mflw, lwi * sabac9_d[5])
     kick(elm, mflw, lwi * sabac9_k[4])
    thick(elm, mflw, lwi * sabac9_d[4])
     kick(elm, mflw, lwi * sabac9_k[3])
    thick(elm, mflw, lwi * sabac9_d[3])
     kick(elm, mflw, lwi * sabac9_k[2])
    thick(elm, mflw, lwi * sabac9_d[2])
     kick(elm, mflw, lwi * sabac9_k[1])
    thick(elm, mflw, lwi * sabac9_d[1])
     corr(elm, mflw, lwi , sabac9_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- [Laskar01]
function M.sabac10 (elm, mflw, lw, thick, kick, corr) -- 12th order
  local slc = elm.nslice or mflw.nslice
  local nsl = max(1, is_number(slc) and slc or #slc)
  local lwn = is_number(slc) and 1/nsl or nil
  local fsl = mflw.atslice

  -- nsl*(10 kicks + 11 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0, nsl)
  for i=1,nsl do
    local lwi = lw*(lwn or slc[i])
     corr(elm, mflw, lwi , sabac10_c[1])
    thick(elm, mflw, lwi * sabac10_d[1])
     kick(elm, mflw, lwi * sabac10_k[1])
    thick(elm, mflw, lwi * sabac10_d[2])
     kick(elm, mflw, lwi * sabac10_k[2])
    thick(elm, mflw, lwi * sabac10_d[3])
     kick(elm, mflw, lwi * sabac10_k[3])
    thick(elm, mflw, lwi * sabac10_d[4])
     kick(elm, mflw, lwi * sabac10_k[4])
    thick(elm, mflw, lwi * sabac10_d[5])
     kick(elm, mflw, lwi * sabac10_k[5])
    thick(elm, mflw, lwi * sabac10_d[6]) -- middle
     kick(elm, mflw, lwi * sabac10_k[5])
    thick(elm, mflw, lwi * sabac10_d[5])
     kick(elm, mflw, lwi * sabac10_k[4])
    thick(elm, mflw, lwi * sabac10_d[4])
     kick(elm, mflw, lwi * sabac10_k[3])
    thick(elm, mflw, lwi * sabac10_d[3])
     kick(elm, mflw, lwi * sabac10_k[2])
    thick(elm, mflw, lwi * sabac10_d[2])
     kick(elm, mflw, lwi * sabac10_k[1])
    thick(elm, mflw, lwi * sabac10_d[1])
     corr(elm, mflw, lwi , sabac10_c[1])
      fsl(elm, mflw, lwi , i, nsl)
  end
end

-- Runge-Kutta-Nystrom integrators --------------------------------------------o

-- TODO...

-- integrators by order -------------------------------------------------------o

M[1] = M.simple
M[2] = M.teapot
M[3] = M.yoshida4
M[4] = M.yoshida4
M[5] = M.yoshida6
M[6] = M.yoshida6
M[7] = M.yoshida8
M[8] = M.yoshida8

-- aliases

M.uniform = M.simple

-- slices selectors -----------------------------------------------------------o

M.atbeg  = \e,m,_,i,n ->           i == 0
M.atins  = \e,m,_,i,n ->           i >  0
M.atmid  = \e,m,_,i,n ->         2*i == n
M.atend  = \e,m,_,i,n ->           i == n
M.atbnd  = \e,m,_,i,n -> i == 0 or i == n
M.atbody = \e,m,_,i,n -> i > 0 and i <  n

-- end ------------------------------------------------------------------------o
return { symint = M }
