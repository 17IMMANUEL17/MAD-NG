--[=[
 o-----------------------------------------------------------------------------o
 |
 | Symplectic integrators
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of symplectic integrators from 1st to 8th order
    Integrators have the following calling convention:
      integrate(elm, map, len, thick, kick)
    where thick and kick must have the following calling convention:
      thick(elm, mflow, len_weight)
       kick(elm, mflow, len_weight)

 o-----------------------------------------------------------------------------o
]=]

local M = {}

local max       in math
local is_number in MAD.typeid

-- helper ---------------------------------------------------------------------o

local function get_slc (elm, mflw, lw)
  local slc = elm.nslice or mflw.nslice

  if is_number(slc) then
    local nsl = max(slc, mflw.nslc)
    mflw.eslc = nsl
    return nsl, lw/nsl
  else
    local nsl, dir = #slc, mflw.sdir
    mflw.eslc = nsl
    return nsl, nil, slc, dir > 0 and 0 or nsl+1, dir
  end
end

-- special integrators --------------------------------------------------------o

function M.thinonly (elm, mflw, lw, _, thin)
  local fsl = mflw.atslice
  mflw.eslc = 1

  -- 1 thin
   fsl(elm, mflw, 0 , 0)
  thin(elm, mflw, lw)
   fsl(elm, mflw, lw, 1)
end

function M.driftonly (elm, mflw, lw, thick, _)
  local fsl = mflw.atslice
  mflw.eslc = 1

  -- 1 thick
    fsl(elm, mflw, 0 , 0)
  thick(elm, mflw, lw)
    fsl(elm, mflw, lw, 1)
end

function M.thickonly (elm, mflw, lw, thick, _)
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(1 thick)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi)
      fsl(elm, mflw, lwi, i)
  end
end

function M.collim (elm, mflw, lw, thick, kick) -- 2nd order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(2 kicks + 1 thick)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     kick(elm, mflw, lwi*0.5)
    thick(elm, mflw, lwi)
     kick(elm, mflw, lwi*0.5)
      fsl(elm, mflw, lwi, i)
  end
end

-- [Burkhardt13] table 1, p. 946
function M.teapot (elm, mflw, lw, thick, kick) -- 2nd order
  local nsl = max(2, elm.nslice or mflw.nslice)
  local lwn = lw/nsl
  local lwd = lw/(2*(nsl+1))
  local lwD = lw*nsl/(nsl^2-1)/2
  local fsl = mflw.atslice
  mflw.eslc = nsl

 -- nsl*(1 kick + 2 thicks)
     fsl(elm, mflw, 0, 0)
   thick(elm, mflw, lwd)
 for i=1,nsl-1 do
    kick(elm, mflw, lwn)
   thick(elm, mflw, lwD)
     fsl(elm, mflw, lwn, i)
   thick(elm, mflw, lwD)
 end
    kick(elm, mflw, lwn)
   thick(elm, mflw, lwd)
     fsl(elm, mflw, lwn, nsl)
end

-- Yoshida integrators --------------------------------------------------------o

-- [Yoshida90] eq 5.18 and p267
local function make_yoshida (w)
  local d, k, n, s = {}, {}, #w+1, 0
  for i=1,n-1 do k[i] = w[n-i] ; s = s+w[i] end
  d[1], k[n] = k[1]/2, 1-2*s
  for i=2,n do d[i] = (k[i]+k[i-1])/2 end
  -- local printf in MAD.utility
  -- for i=1,#d do
  --  printf("%d, % -.10f, % -.10f", i, d[i], k[i])
  -- end
  return d, k
end

local yosh4_w = { -- 4th order (eq. 2.11)
  A = {  1.35120719195965777 },
}

local yosh6_w = { -- 6th order (table1)
  A = { -0.117767998417887E1 ,  0.235573213359357E0 , 0.784513610477560E0 },
--  B = { -0.213228522200144E1 ,  0.426068187079180E-2, 0.143984816797678E1 },
--  C = {  0.152886228424922E-2, -0.214403531630539E1 , 0.144778256239930E1 },
}

local yosh8_w = { -- 8th order (table2)
--  A = { -0.161582374150097E1 , -0.244699182370524E1, -0.716989419708120E-2,
--         0.244002732616735E1 ,  0.157739928123617E0,  0.182020630970714E1 ,
--         0.104242620869991E1 },
--  B = { -0.169248587770116E-2,  0.289195744315849E1,  0.378039588360192E-2,
--        -0.289688250328827E1 ,  0.289105148970595E1, -0.233864815101035E1 ,
--         0.148819229202922E1 },
--  C = {  0.311790812418427E0 , -0.155946803821447E1, -0.167896928259640E1 ,
--         0.166335809963315E1 , -0.106458714789183E1,  0.136934946416871E1 ,
--         0.629030650210433E0 },
  D = {  0.102799849391985E0 , -0.196061023297549E1,  0.193813913762276E1 ,
        -0.158240635368243E0 , -0.144485223686048E1,  0.253693336566229E0 ,
         0.914844246229740E0 },
--  E = {  0.227738840094906E-1,  0.252778927322839E1, -0.719180053552772E-1,
--         0.536018921307285E-2, -0.204809795887393E1,  0.107990467703699E0 ,
--         0.130300165760014E1 },
}

local yosh4_d, yosh4_k = make_yoshida(yosh4_w.A)
local yosh6_d, yosh6_k = make_yoshida(yosh6_w.A)
local yosh8_d, yosh8_k = make_yoshida(yosh8_w.D)

--[[ for debug and comparison of solutions
print('A4') make_yoshida(yosh4_w.A)
print('A6') make_yoshida(yosh6_w.A)
print('B6') make_yoshida(yosh6_w.B)
print('C6') make_yoshida(yosh6_w.C)
print('A8') make_yoshida(yosh8_w.A)
print('B8') make_yoshida(yosh8_w.B)
print('C8') make_yoshida(yosh8_w.C)
print('D8') make_yoshida(yosh8_w.D)
print('E8') make_yoshida(yosh8_w.E)
--]]

-- [Yoshida90] eq. 2.10, p. 263
function M.yoshida2 (elm, mflw, lw, thick, kick) -- 2nd order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(1 kick + 2 thicks)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi*0.5)
     kick(elm, mflw, lwi)
    thick(elm, mflw, lwi*0.5)
      fsl(elm, mflw, lwi, i)
  end
end

-- [Yoshida90] eq. 2.11, p. 263
function M.yoshida4 (elm, mflw, lw, thick, kick) -- 4th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(3 kicks + 4 thicks) ; k=4
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi * yosh4_d[1])
     kick(elm, mflw, lwi * yosh4_k[1])
    thick(elm, mflw, lwi * yosh4_d[2])
     kick(elm, mflw, lwi * yosh4_k[2]) -- middle
    thick(elm, mflw, lwi * yosh4_d[2])
     kick(elm, mflw, lwi * yosh4_k[1])
    thick(elm, mflw, lwi * yosh4_d[1])
      fsl(elm, mflw, lwi, i)
  end
end

-- [Yoshida90] table 1, p. 267
function M.yoshida6 (elm, mflw, lw, thick, kick) -- 6th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(7 kicks + 8 thicks) ; k=8
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi * yosh6_d[1])
     kick(elm, mflw, lwi * yosh6_k[1])
    thick(elm, mflw, lwi * yosh6_d[2])
     kick(elm, mflw, lwi * yosh6_k[2])
    thick(elm, mflw, lwi * yosh6_d[3])
     kick(elm, mflw, lwi * yosh6_k[3])
    thick(elm, mflw, lwi * yosh6_d[4])
     kick(elm, mflw, lwi * yosh6_k[4]) -- middle
    thick(elm, mflw, lwi * yosh6_d[4])
     kick(elm, mflw, lwi * yosh6_k[3])
    thick(elm, mflw, lwi * yosh6_d[3])
     kick(elm, mflw, lwi * yosh6_k[2])
    thick(elm, mflw, lwi * yosh6_d[2])
     kick(elm, mflw, lwi * yosh6_k[1])
    thick(elm, mflw, lwi * yosh6_d[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Yoshida90] table 2, p. 267
function M.yoshida8 (elm, mflw, lw, thick, kick) -- 8th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(15 kicks + 16 thicks) ; k=16
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
    thick(elm, mflw, lwi * yosh8_d[1])
     kick(elm, mflw, lwi * yosh8_k[1])
    thick(elm, mflw, lwi * yosh8_d[2])
     kick(elm, mflw, lwi * yosh8_k[2])
    thick(elm, mflw, lwi * yosh8_d[3])
     kick(elm, mflw, lwi * yosh8_k[3])
    thick(elm, mflw, lwi * yosh8_d[4])
     kick(elm, mflw, lwi * yosh8_k[4])
    thick(elm, mflw, lwi * yosh8_d[5])
     kick(elm, mflw, lwi * yosh8_k[5])
    thick(elm, mflw, lwi * yosh8_d[6])
     kick(elm, mflw, lwi * yosh8_k[6])
    thick(elm, mflw, lwi * yosh8_d[7])
     kick(elm, mflw, lwi * yosh8_k[7])
    thick(elm, mflw, lwi * yosh8_d[8])
     kick(elm, mflw, lwi * yosh8_k[8]) -- middle
    thick(elm, mflw, lwi * yosh8_d[8])
     kick(elm, mflw, lwi * yosh8_k[7])
    thick(elm, mflw, lwi * yosh8_d[7])
     kick(elm, mflw, lwi * yosh8_k[6])
    thick(elm, mflw, lwi * yosh8_d[6])
     kick(elm, mflw, lwi * yosh8_k[5])
    thick(elm, mflw, lwi * yosh8_d[5])
     kick(elm, mflw, lwi * yosh8_k[4])
    thick(elm, mflw, lwi * yosh8_d[4])
     kick(elm, mflw, lwi * yosh8_k[3])
    thick(elm, mflw, lwi * yosh8_d[3])
     kick(elm, mflw, lwi * yosh8_k[2])
    thick(elm, mflw, lwi * yosh8_d[2])
     kick(elm, mflw, lwi * yosh8_k[1])
    thick(elm, mflw, lwi * yosh8_d[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- Runge-Kutta-Nystrom integrators --------------------------------------------o

-- TODO...

-- integrators by order -------------------------------------------------------o

M[1] = M.yoshida2
M[2] = M.yoshida2
M[3] = M.yoshida4
M[4] = M.yoshida4
M[5] = M.yoshida6
M[6] = M.yoshida6
M[7] = M.yoshida8
M[8] = M.yoshida8

-- aliases

M.simple = M.yoshida2

-- slices selectors -----------------------------------------------------------o

M.atbegin = \e,m,_,i ->           i == 0
M.atbody  = \e,m,_,i ->           i >  0
M.atmid   = \e,m,_,i ->         2*i == m.eslc
M.atins   = \e,m,_,i -> i > 0 and i <  m.eslc
M.atend   = \e,m,_,i ->           i == m.eslc
M.atbound = \e,m,_,i -> i == 0 or i == m.eslc

-- aliases
M.atinside = M.atins

-- actions selectors ----------------------------------------------------------o

M.aperat   = \at     -> \e,m,w,i -> at(e,m,w,i) and m.ataper (e,m,w,i)
M.saveat   = \at     -> \e,m,w,i -> at(e,m,w,i) and m.atsave (e,m,w,i)
M.actionat = \at,act -> \e,m,w,i -> at(e,m,w,i) and m[act]   (e,m,w,i)
M.action   = \act    -> \e,m,w,i ->                 m[act]   (e,m,w,i)

-- end ------------------------------------------------------------------------o
return { symint = M }
