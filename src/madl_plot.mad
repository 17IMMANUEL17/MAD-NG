--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: F.R. Leiro
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides ploting

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.plot = [[
NAME
  plot -- Plot

SYNOPSIS
  TODO

DESCRIPTION
  The module plot provides...

RETURN VALUES
  The plot command

SEE ALSO
  element, sequence, track
]]

-- locals ---------------------------------------------------------------------o

local dat = require 'madl_plotdat'
local range, nrange, vector, element, totable, same              in MAD
local isa_matrix, is_range, is_table, is_number, is_string       in MAD.typeid
local min, max, abs, exp                                         in MAD.gmath
local pow      																									 in MAD.operator

-- implementation -------------------------------------------------------------o

local function keys_tbl(t1, t2, keys)
  local t = {}
  if   t1 then for j,k in ipairs(keys) do t[k] = t1[k] or t2[k] end
  else         for j,k in ipairs(keys) do t[k] = t2[k]          end end
  return t
end

local function table_concat(t, ...)
  local t = t or {}
  local n = select('#', ...)
  for i=1,n do
    local elem = select(i, ...)
    for j=1,#elem do table.insert(t, elem[j]) end
  end
  return t
end

--titles
local function axis_title(src)
  if src then
    local label = ""
    for _,key in pairs(src) do label = label..key.." " end
    return label
  end
end

local function mk_title(name, version, date, time)
  local src, out = { name = name, version = version , date = date, time = time, }
  if date then out = "$name MAD $version, $date, $time" % src
	  else out = "$name MAD $version"               % src end
    return out
end

local function script_name(filename)
  if filename then return string.match(filename, "(%w+)%.")..".gp"
	else             return "script.gp"                              end
end

--scalling
local function chksize(rng, start, stop)
  if rng:size() <= stop then start, stop = rng.start, rng.stop end
  return start, stop
end

local function scale_tbl(tbl, start, stop) -- check luafun usage
  local r = {}
  for j=1,stop-start do r[j] = tbl[start+j] end
  return r
end

local function scale_dat(src, keys, rng) -- check luafun usage
  local d_src = {}
  local start, stop = 1, #src[keys[1]]
  start, stop = chksize(rng, start, stop)
  for j,k in ipairs(keys) do
    if isa_matrix(src[k]) then d_src[k] = src[k]:getv(start..stop )
                          else d_src[k] = scale_tbl(src[k],start,stop) end
  end
  return d_src
end

local function scale_axis(src, keys, margin)
  local vmin, vmax = vector(#keys), vector(#keys)
  for i,key in ipairs(keys) do
    local min, max = src[key]:min(), src[key]:max()
    vmin:seti(i, min)
    vmax:seti(i, max)
  end
  local min, max, x = vmin:min(), vmax:max()
  if margin then
    if is_number(margin) then x = margin
			 else x = 0.1    end
    local marg = x*(max-min)
    if marg == 0 then marg = x end
    return min-marg, max+marg
  end
  return min, max
end

local function scale_rng(src, rng)
  if     is_range(rng) then return rng
  elseif is_table(rng) then
    local  start,  stop = 1     , #src
    local rstart, rstop = rng[1], rng[2]
    local vmin, vmax, c = {}, {}
    c=1; src:mapij(\x,i,j => if x>rstart then vmin[c]=i; c=c+1 end end, {})
    c=1; src:mapij(\x,i,j => if x>rstop  then vmax[c]=i; c=c+1 end end, {})
    start = vmin[1]
    if vmax[1]       then stop = vmax[1]-1 end                                  -- add WARNING(bigger then data)
    if rng [2] == -1 then stop = #src      end
    return start..stop
  end
end

--layout
local xadjst = \x,l,s -> x*l + s-l
local yadjst = \y,h   -> y*h
local hadjst = \y,h   -> y*(1-exp(-0.2*( pow(abs(h), 1/4)) ))

local function sh_get(sh)
  local x_sh, y_sh = {}, {}
  if is_table(sh.x[1]) then
    for i=1,#sh.x do
      x_sh[i] = vector(sh.x[i])
      y_sh[i] = vector(sh.y[i])
    end
  else
    x_sh, y_sh = {vector(sh.x)}, {vector(sh.y)}
  end
  return x_sh, y_sh
end

local function layout(seq, start, stop)
  local xl, yl, c = {}, {}, 1
  for i=start,stop do
    local elem, s = seq[i]   , seq:s_pos(i)
    local kind, l = elem.kind, elem.l
    if s and l then
      local h,sh = elem[dat[kind].str_k] or 1
      if dat[kind].shape then sh = dat[kind].shape
      elseif h > 0       then sh = dat[kind].shape_f
      else                    sh = dat[kind].shape_d end
      local x_sh, y_sh = sh_get(sh)
      for j=1,#x_sh do
        local x, y = x_sh[j], y_sh[j]
      	xl[c] = x:map( \x xadjst(x+1, l, s) )
        yl[c] = y:map( \y yadjst(y, 1   ) )
        --if     h ~= 1 and h > 0 then yl[c] = hadjst(yl[c], h)
        --elseif h ~= 1           then yl[c] =-hadjst(yl[c], h)
      	--end
        c = c+1
      end
    end
  end
  return { x=xl, y=yl }
end

-- saving to template
local function data_to_temp(src, keys)
  local s = src[keys[1]]
  local t = {"\n"}
  for i=2,#s+1 do
    for j,k in ipairs(keys) do
      if t[i]
      then t[i] = t[i]..src[k][i-1].." "
      else t[i] =       src[k][i-1].." "
      end
    end
    t[i] = t[i].."\n"
  end
  t[#s+2] = "e\n"
  return t
end

local function layout_to_temp(src, keys)
  local s = src[keys[1]]
  local t = {"\n"}
  local c = 2
  for i=1,#s do
    for ii=1,#s[i] do
      for j,k in ipairs(keys) do
	      if t[c] then t[c] = t[c]..src[k][i][ii].." "
		    else         t[c] =       src[k][i][ii].." " end
      end
      t[c] = t[c].."\n"; c=c+1
    end
    t[c] = "\n"; c=c+1
  end
  t[c] = "e\n"
  return t
end

-- template
local function find_key(inp, key)
  local indx
  for i,line in ipairs(inp) do if line:find(key) then indx = i end end
  return indx
end

local function copy(tbl)
  local out = {}
  for k,v in pairs(tbl) do out[k] = v end
  return out
end

local function temp_style(inp, out, keys) -- TO CLEAN, no overwrite
	local r = copy(out)
	if inp then
    for k,v in pairs(inp) do
      local indx = find_key(keys, k) - 1
      if indx then r[indx] = v end
    end
  end
  return r
end

local function temp_interp(temp, src)
  for i,line in ipairs(temp) do
    temp[i] = line % src      -- interpolate strings
  end
end

local function temp_fill(temp, inp, key)
  local c, n = 1
  for i,line in ipairs(temp) do
    temp[i], n = string.gsub( line, key, inp[c] )
    if n == 1 and c < #inp then c=c+1 end
  end
end

local function temp_print(temp, pipe)
  for i =1,#temp do pipe:write(temp[i]) end
end

local template = {
  "set multiplot \n"                 ,
  "set $grid \n"                     ,
  "set lmargin at screen $lmargin \n",
  "set rmargin at screen $rmargin \n",
  "set size 1,$sizeplot \n"          ,
  "set title '$title'  \n"           ,
}
local temp_end = {
  "set key $key \n"            ,
  "set xlabel '$xlabel' \n"    ,
  "set ylabel '$ylabel' \n"    ,
  "set xrange [$xmin:$xmax] \n",
  "set yrange [$ymin:$ymax] \n",
}
local temp_plot     = { "plot " }
local temp_vaxis    = { "'-' using 1:count every 1::0 $interpolate linecolor 'colors' title 'vkeys' axes setaxes,\\\n" }
local temp_preamble = { "#$preamble \n" }
local temp_unmult   = {"\nunset multiplot \n" }
local temp_window   = { "set terminal x11 persist $window font '$fontname, $fontsize'\n" }
local temp_tofile   = {
  "set terminal $terminaltype $window font '$fontname, $fontsize' enhanced color\n",
  "set output '|ps2pdf - $filename' \n",
}
local temp_unmult = {"\nunset multiplot \n" }
local temp_unaxes = {
	"unset x2label \n",
	"unset x2tics \n",
	"unset y2tics \n",
	"unset y2label \n",
}
local temp_multiv = {
  "set ytics nomirror \n"         ,
  "set y2tics \n"                 ,
  "set tics out \n"               ,
  "set y2label '$ylabel2' \n"     ,
  "set y2range [$ymin2:$ymax2] \n",
}
local temp_multih = {
  "set xtics nomirror \n"         ,
  "set x2tics \n"                 ,
  "set tics out \n"               ,
  "set x2label '$xlabel2' \n"     ,
  "set x2range [$xmin2:$xmax2] \n",
}
local temp_lay = {
  "unset tmargin \n"    ,
  "unset bmargin \n"    ,
  "unset title  \n"     ,
  "unset arrow \n"      ,
  "unset ylabel \n"     ,
  "unset xlabel \n"     ,
  "unset xtics \n"      ,
  "unset ytics \n"      ,
  "unset y2tics \n"     ,
  "unset y2label \n"    ,
  "unset key \n"        ,
  "set xzeroaxis \n"    ,
  "set border 0 \n"     ,
  "set size 1,0.15 \n"  ,
  "set origin 0,0.85 \n",
  "set yrange [-1:1] \n",
  "plot '-' u 1:2 w lines linestyle 1 linecolor rgb 'black' \n",
}
local temp_lay_off = {
  "set border \n"    ,
  "set origin 0,0 \n",
  "set xtics \n"     ,
  "set ytics \n"     ,
}

-- plotting command -----------------------------------------------------------o
local mtable, Command in MAD
local temp_save, name = {}, {}

local function temp_operations(self, name)
	local temp = {}
  if     self.filename == name       then temp = table_concat( {}  ,                             template )
  elseif self.filename               then temp = table_concat( {}  , temp_unmult  , temp_tofile, template )
  else                                    temp = table_concat( {}  , temp_unmult  , temp_window, template )
																	 			  temp_save = {}                                                               end
  if     self.preamble               then temp = table_concat( {}  , temp_preamble, temp                             ) end
  if     self.vaxis2 and self.haxis2 then temp = table_concat( temp, temp_multih  , temp_multiv, temp_end, temp_plot )
  elseif self.vaxis2                 then temp = table_concat( temp, temp_multiv  ,              temp_end, temp_plot )
  elseif self.haxis2                 then temp = table_concat( temp, temp_multih  ,              temp_end, temp_plot )
  else                                    temp = table_concat( temp,                             temp_end, temp_plot ) end
  if     self.continue               then temp = temp_plot                                                             end
  return temp, temp_save
end

local function interpol(str)
	local out
	if     str == 'lines'       then out = "with lines       dashtype  dtt"
  elseif str == 'linespoints' then out = "with linespoints pointtype ptt pointsize pts"
  elseif str == 'points'      then out = "with points      pointtype ptt pointsize pts"
  end
  return out
end

local function multi_axes(self, temp)
	local axes, s, s2 = {}
  if self.out  then
    s = #self.out
    for i=1,s do temp, axes[i] = table_concat( temp, temp_vaxis  ), "x1y1" end
  end
  if self.inp2 then
    self.keys = table_concat(self.inp , self.inp2, self.out  )
  end
  if self.out2 then
    s2 = #self.out2
    self.keys = table_concat(self.keys, self.out2            )
    self.out  = table_concat(self.out , self.out2            )
    for i=1,s2   do temp    = table_concat( temp, temp_vaxis ) end
    for i=s,s+s2 do axes[i] = "x1y2"                           end
  end
  return temp, axes
end

local function sequ(self, template)
	local seq = self.sequence
  assert(seq.kind == 'sequence' and seq.is_sequence == true, "invalid sequence")
  local start, stop = seq:range_index(self.range)
  local lay     = layout        ( seq, start, stop )
  local lay_dat = layout_to_temp( lay, {'x','y'}   )
  self.datrange = {lay.x[1][1], lay.x[#lay.x][1]}
  return table_concat( {}, temp_unmult, template, temp_lay, lay_dat, temp_lay_off, temp_unmult )
end

local function style_plots(self, temp, axes)
  local dashtypes, colors in dat
  local count      = 2..(#self.out)+1
  local pointtypes = totable(1..(#self.out))
  local pointsizes = totable(vector(#self.out):fill(1) )
  local yout       = table_concat(self.out)
  local vkeys = temp_style( self.vkeys     , yout          , self.keys )
  local color = temp_style( self.colors    , colors        , self.keys )
  local dasht = temp_style( self.dashtypes , dashtypes     , self.keys )
  axes        = temp_style( self.axes      , axes          , self.keys )
  pointtypes  = temp_style( self.pointtypes, pointtypes    , self.keys )
  pointsizes  = temp_style( self.pointsizes, pointsizes    , self.keys )
  temp_interp( temp, self      )
  temp_fill  ( temp, vkeys     , "vkeys"   )
  temp_fill  ( temp, color     , "colors"  )
  temp_fill  ( temp, dasht     , "dtt"     )
  temp_fill  ( temp, axes      , "setaxes" )
  temp_fill  ( temp, pointtypes, "ptt"     )
  temp_fill  ( temp, pointsizes, "pts"     )
  temp_fill  ( temp, count     , "count"   )
 	return temp
end

local gp = setmetatable({},{
  __index = \gp,id => gp[id] = io.popen("gnuplot", "w") ; return gp[id] end
})

function exec(self)
  local vkeys, axes, data_temp
	local temp, temp_save = temp_operations(self, name)
  self.interpolate = interpol    ( self.interpolate)
	temp, axes       = multi_axes  ( self    , temp      ) 		-- multiple axes
  data_temp        = data_to_temp( self.src, self.keys ) 		-- data to template
  for i = 1,#self.out do temp = table_concat({}, temp, data_temp) end

  if     self.sequence then	temp = sequ(self, temp) end     -- sequence plot
  if not self.continue and self.out2 or self.inp2 then
		temp = table_concat(temp, temp_unaxes)
  end
	temp = style_plots(self, temp, axes)									    -- style of plots
  temp_print ( temp, gp[self.id] )
  gp[self.id]:flush()

  if self.filename == name then temp_save = table_concat(temp_save, temp)
  else                          temp_save = temp
  end

  if self.filecopy then
    local gp_script = io.open(self.script, "w")
    temp_print( temp_save, gp_script )
    gp_script:close()
  end
  name = self.filename
  return self
end

local plot = Command 'plot' {
  id       = 1,
  preamble = false,
  continue = false,
  table    = false,
  data     = false,
  sequence = false,
  filename = false,
  filecopy = false,
  vaxis2   = false,
  window   = " ",
  haxis2   = false,
  vaxis    = 'y',
  haxis    = 'x',
  script   = \s script_name(s.filename),
  terminaltype = "postscript",
  fontname     = "Times-Roman",
  fontsize = 18 ,
  xsize    = 20,
  ysize    = 10.5,
  lmargin  = 0.1,
  rmargin  = 0.9,
  key      = "left top",
  grid     = 'grid',
  hmargin  = false,
  vmargin  = true ,
  sizeplot = \s => if s.sequence then return 0.85 else return 1 end end,

  range    = {1,-1},
  datrange = \s 1..#s.ktbl[s.inp[1]],
  hlimit   = \s { scale_axis( s.src, s.inp , s.hmargin ) },
  vlimit   = \s { scale_axis( s.src, s.out , s.vmargin ) },
  xlabel   = \s axis_title( s.inp ),
  ylabel   = \s axis_title( s.out ),
  xmin     = \s s.hlimit[1] , xmax  = \s s.hlimit[2] ,
  ymin     = \s s.vlimit[1] , ymax  = \s s.vlimit[2] ,
  interpolate = 'points',

  vlimit2 = {nil, nil},
  xlimit2 = {nil, nil},
  ylabel2 = "",
  xlabel2 = "",
  ymin2   = \s s.vlimit2[1], ymax2 = \s s.vlimit2[2],
  xmin2   = \s s.hlimit2[1], xmax2 = \s s.hlimit2[2],
  inp2    = \s => if s.haxis2 then return totable     ( s.haxis2 ) end end,
  out2    = \s => if s.vaxis2 then return totable     ( s.vaxis2 ) end end,
  ylabel2 = \s => if s.out2   then return axis_title  ( s.out2   ) end end,
  xlabel2 = \s => if s.inp2   then return axis_title  ( s.inp2   ) end end,
  vlimit2 = \s => if s.out2   then return { scale_axis( s.src, s.out2, s.vmargin ) } end end,
  hlimit2 = \s => if s.inp2   then return { scale_axis( s.src, s.inp2, s.hmargin ) } end end,

  axes       = false,
  colors     = false,
  pointtypes = false,
  pointsizes = false,
  dashtypes  = false,
  vkeys      = false,

  title   = \s mk_title(s.name, s.ver, s.date, s.time),
  version = tostring(MAD.env.version),
  namei   = \s => if s.table then return s.table.title else return s.name end end,
  date    = \s => if s.table then return s.table.date  else               end end,
  time    = \s => if s.table then return s.table.time  else               end end,
  title   = \s mk_title(s.namei, s.version, s.date, s.time),

-- non-user option
  inp  = \s totable  (s.haxis),
  out  = \s totable  (s.vaxis),
  keys = \s table_concat(s.inp   , s.out             ),
  ktbl = \s keys_tbl    (s.table , s.data, s.keys    ),
  drng = \s scale_rng   (s.ktbl[s.inp[1]], s.datrange),
  src  = \s scale_dat   (s.ktbl  , s.keys, s.drng    ),
  exec = exec,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  plot   = plot  ,
  __help = __help,
}
