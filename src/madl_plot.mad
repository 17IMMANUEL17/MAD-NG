--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: F.R. Leiro
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides ploting

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local dat = require 'madl_plotdat'
local range, nrange, vector, element, totable, same                in MAD
local isa_matrix, is_range, is_table, is_number, is_string, is_nil in MAD.typeid
local min, max, abs, exp                                           in MAD.gmath
local pow                                                          in MAD.operator

-- implementation -------------------------------------------------------------o

local function copy(tbl)
  local out = {}
  for k,v in pairs(tbl) do out[k] = v end
  return out
end

local function keys_tbl(t1, t2, keys)
  local t = {}
  if   t1
  then for j,k in ipairs(keys) do t[k] = t1[k] or t2[k] end
  else for j,k in ipairs(keys) do t[k] = t2[k]          end
  end
  return t
end

local function tbl_concat(t, ...)
  local t = t or {}
  local n = select('#', ...)
  for i=1,n do
    local elem = select(i, ...)
    for j=1,#elem do table.insert(t, elem[j]) end
  end
  return t
end

local function find_key(inp, key)
  local indx
  for i,line in ipairs(inp) do if line:find(key) then indx = i end end
  return indx
end

--scalling
local function chksize(rng, start, stop)
  if rng:size() <= stop then start, stop = rng.start, rng.stop end
  return start, stop
end

local function scale_tbl(tbl, start, stop)
  local r = {}
  for j=1,stop-start do r[j] = tbl[start+j] end
  return r
end

local function scale_dat(src, keys, rng)
  local d_src = {}
  local start, stop = 1, #src[keys[1]]
  start, stop = chksize(rng, start, stop)
  for j,k in ipairs(keys) do
    if isa_matrix(src[k])
    then d_src[k] = src[k]:getv(start..stop )
    else d_src[k] = scale_tbl(src[k],start,stop)
    end
  end
  return d_src
end

local function scale_axis(src, keys, margin)
  if is_nil(keys[1]) then return 0,0 end
  local vmin, vmax = vector(#keys), vector(#keys)
  for i,key in ipairs(keys) do
    local min, max = src[key]:min(), src[key]:max()
    vmin:seti(i, min)
    vmax:seti(i, max)
  end
  local min, max, x = vmin:min(), vmax:max()
  if margin then
    if is_number(margin)
    then x = margin
    else x = 0.1
    end
    local marg = x*(max-min)
    if marg == 0 then marg = x end
    return min-marg, max+marg
  end
  return min, max
end

local function scale_rng(src, rng)
  if     is_range(rng) then return rng
  elseif is_table(rng) then
    local  start,  stop = 1     , #src
    local rstart, rstop = rng[1], rng[2]
    local vmin, vmax, c = {}, {}
    c=1; src:mapij(\x,i,j => if x>=rstart then vmin[c]=i; c=c+1 end end, {})
    c=1; src:mapij(\x,i,j => if x> rstop  then vmax[c]=i; c=c+1 end end, {})
    start = vmin[1]
    if vmax[1]       then stop = vmax[1]-1 end                                  -- add WARNING(bigger then data)
    if rng [2] == -1 then stop = #src      end
    return start..stop
  end
end

--layout
local xadjst = \x,l,s -> x*l + s-l
local yadjst = \y,h   -> y*h
local hadjst = \y,h   -> y*(1-exp(-0.2*( pow(abs(h), 1/4)) ))

local function delta(refer, l)
  local d
  if     refer == 'exit'   then d = 0
  elseif refer == 'entry'  then d = l
  elseif refer == 'center' then d = l/2
  else                          d = 0
  end
  return d
end

local function sh_get(sh)
  local x_sh, y_sh = {}, {}
  if is_table(sh.x[1]) then
    for i=1,#sh.x do
      x_sh[i] = vector(sh.x[i])
      y_sh[i] = vector(sh.y[i])
    end
  else
    x_sh, y_sh = {vector(sh.x)}, {vector(sh.y)}
  end
  return x_sh, y_sh
end

local function layout(seq, range, refer)
  local xl, yl, c = {}, {}, 1
  local del = {}
  local flag, start = true
  for i,elem in seq:iter(range) do
    local s = seq:s_pos(i)
    local kind, l = elem.kind, elem.l
    if s and l then
      del[i] = delta(refer, l)
      if flag == true then start=i; flag=false  end
      s = s + del[start]
      local h,sh = elem[dat[kind].str_k] or 1
      if     dat[kind].shape then sh = dat[kind].shape
      elseif h > 0           then sh = dat[kind].shape_f
      else                        sh = dat[kind].shape_d
      end
      local x_sh, y_sh = sh_get(sh)
      for j=1,#x_sh do
        local x, y = x_sh[j], y_sh[j]
        xl[c] = x:map( \x xadjst(x+1, l, s) )
        yl[c] = y:map( \y yadjst(y, 1     ) )
        c = c+1
      end
    end
  end
  return { x=xl, y=yl }
end

-- plot options
local function axis_title(src)
  if src then
    local label = ""
    for _,key in pairs(src) do label = label..key.." " end
    return label
  end
end

local function mk_title(self)
  local table, title in self
  local src = {
    version = tostring(MAD.env.version),
    name    = self.name or is_table(table) and self.table.title or "",
    date    = self.date or is_table(table) and self.table.date  or "",
    time    = self.time or is_table(table) and self.table.time  or "",
  }
  return title % src
end

local function script_name(filename)
  if   filename then return string.match(filename, "(%w+)%.")..".gp"
  else               return "script.gp"                              end
end

local function interpol(str)
  local out
  if     str == 'lines'       then out = "with lines       dashtype  dtt"
  elseif str == 'linespoints' then out = "with linespoints pointtype ptt pointsize pts"
  elseif str == 'points'      then out = "with points      pointtype ptt pointsize pts"
  else                             out = str
  end
  return out
end

  --x1 y1       -> x1y1
  --x1 y1 y2    -> x1y1
  --x1 x2 y1 y2 -> x1y1 & x2y2
  --x2 y1 y2    -> x2y2
  --x2 y1       -> x2y2
  --x2 y2       -> x2y2

local function multi_axes(self, inp, inp2, out, out2)
  local axes = {}
  local s, s2 = #out, #out2
  if out  then for i=1  ,s    do axes[i] = "x1y1" end end
  if out2 then for i=1+s,s+s2 do axes[i] = "x1y2" end end

  if     inp and out then 'x1y1'
  elseif

  return axes
end

local function templ_style(inp, out, keys)
  local r = copy(out)
  if inp then
    for k,v in pairs(inp) do
      local indx = find_key(keys, k) - 1
      if indx then r[indx] = v end
    end
  end
  return r
end

-- saving to template

local function data_to_templ(src, keys)
  local s = src[keys[1]]
  local t = {"\n$DATA << EOD\n"}
  for i=2,#s+1 do
    for j,k in ipairs(keys) do
      if t[i] then t[i] = t[i]..src[k][i-1].." "
      else         t[i] =       src[k][i-1].." "
      end
    end
    t[i] = t[i].."\n"
  end
  t[#s+2] = "EOD\n"
  return t
end

local function layout_to_templ(src, keys)
  local s = src[keys[1]]
  local t = {"\n"}
  local c = 2
  for i=1,#s do
    for ii=1,#s[i] do
      for j,k in ipairs(keys) do
        if t[c]
        then t[c] = t[c]..src[k][i][ii].." "
        else t[c] =       src[k][i][ii].." "
        end
      end
      t[c] = t[c].."\n"; c=c+1
    end
    t[c] = "\n"; c=c+1
  end
  t[c] = "e\n"
  return t
end

-- template

local function templ_interp(temp, src)
  for i,line in ipairs(temp) do
    temp[i] = line % src      -- interpolate strings
  end
end

local function templ_fill(temp, inp, key)
  local c, n = 1
  for i,line in ipairs(temp) do
    temp[i], n = string.gsub( line, key, inp[c] )
    if n == 1 and c < #inp then c=c+1 end
  end
end

local function templ_print(temp, pipe)
  for i = 1,#temp do
    pipe:write(temp[i])
  end
end

local templ_preamble = { "#$preamble \n" }
local templ_font     = { "set font '$fontname, $fontsize' \n", }

local template = {
  "set multiplot \n"                 ,
  "set $grid \n"                     ,
  "set lmargin at screen $lmargin \n",
  "set rmargin at screen $rmargin \n",
  "set size 1,$sizeplot \n"          ,
  "set title '$title'  \n"           ,
}

local templ_end = {
  "set key $legendpos \n"      ,
  "set xlabel '$xlabel' \n"    ,
  "set ylabel '$ylabel' \n"    ,
  "set xrange [$xmin:$xmax] \n",
  "set yrange [$ymin:$ymax] \n",
}
local templ_plot     = { "plot " }
local templ_yaxis    = { "'$DATA' using 1:count every 1::0 $styles linecolor 'colors' title 'legendname' axes setaxes,\\\n" }

-- optional templates :
local templ_multiv = {
  "set ytics nomirror \n"         ,
  "set y2tics \n"                 ,
  "set tics out \n"               ,
  "set y2label '$ylabel2' \n"     ,
  "set y2range [$ymin2:$ymax2] \n",
}
local templ_multih = {
  "set xtics nomirror \n"         ,
  "set x2tics \n"                 ,
  "set tics out \n"               ,
  "set x2label '$xlabel2' \n"     ,
  "set x2range [$xmin2:$xmax2] \n",
}
local templ_unaxes = {
  "unset x2label \n"  ,
  "unset x2tics \n"   ,
  "unset y2tics \n"   ,
  "unset y2label \n"  ,
  "unset xzeroaxis \n",
}
-- sequence layout template
local templ_lay = {
  "unset tmargin \n"    ,
  "unset bmargin \n"    ,
  "unset title  \n"     ,
  "unset arrow \n"      ,
  "unset ylabel \n"     ,
  "unset xlabel \n"     ,
  "unset xtics \n"      ,
  "unset ytics \n"      ,
  "unset y2tics \n"     ,
  "unset y2label \n"    ,
  "unset key \n"        ,
  "set xzeroaxis \n"    ,
  "set border 0 \n"     ,
  "set size 1,0.15 \n"  ,
  "set origin 0,0.85 \n",
  "set yrange [-1:1] \n",
  "plot '-' u 1:2 w lines linestyle 1 linecolor rgb 'black' \n",
}
local templ_lay_off = {
  "set border \n"    ,
  "set origin 0,0 \n",
  "set xtics \n"     ,
  "set ytics \n"     ,
}
local templ_unmult  = {"\nunset multiplot \n" }

-- plotting command -----------------------------------------------------------o
local mtable, Command in MAD
local templ_save, pdfonefile, _gpd = {}, {}, {}
local default_terminal = nil

local gp_default = {
  aqua       = {
    "unset multiplot\n"                ,
    "set terminal aqua size 800, 500\n",
  },
  qt         = {
    "unset multiplot\n"               ,
    "set terminal wxt size 800, 500\n",
  },
  wxt        = {
    "unset multiplot\n"               ,
    "set terminal wxt size 800, 500\n",
  },
  x11        = {
    "unset multiplot\n"               ,
    "set terminal x11 size 800, 500\n",
  },
  windows     = {
    "unset multiplot\n"               ,
    "set terminal x11 size 800, 500\n",
  },
    postscript = {
    "unset multiplot\n"                       ,
    "set terminal postscript enhanced color\n",
    "set output '|ps2pdf - $filename' \n"     ,
  },
}

local function gnuplothasterm(term) -- from torch
  local tfni = os.tmpname()
  local tfno = os.tmpname()
  local fi = io.open(tfni,'w')
  fi:write('set terminal\n\n')
  fi:close()
  os.execute('gnuplot < '..tfni.. ' > '..tfno..' 2>&1 ')
  os.remove(tfni)
  local tf = io.open(tfno,'r')
  local s = tf:read('*l')
  while s do
    if s:match('^.*%s+  '..term..' ') then
      tf:close()
      os.remove(tfno)
      return true
    end
    s = tf:read('*l')
  end
  tf:close()
  os.remove(tfno)
  return false
end

local function default_term()
  local os = jit.os
  if     os == 'Linux'   then
    if     gnuplothasterm('wxt') then return 'x11'
    elseif gnuplothasterm('qt' ) then return 'qt'
    elseif gnuplothasterm('x11') then return 'x11'
    else error("gnuplot missing default terminals")
    end
  elseif os == 'OSX'     then
    if     gnuplothasterm('aqua') then return 'aqua'
    elseif gnuplothasterm('wxt' ) then return 'wxt'
    elseif gnuplothasterm('qt'  ) then return 'qt'
    elseif gnuplothasterm('x11' ) then return 'x11'
    else error("gnuplot missing default terminals")
    end
  elseif os == 'Windows' then
    if     gnuplothasterm('windows') then return 'windows'
    else error("gnuplot missing default terminals")
    end
  else   error("unsupported operating system")
  end
end

-- Gnuplot object
local function gp_setterm (gp, term, keep_setup_)
  if is_nil(keep_setup_) or is_nil(gp_default[term]) then
    for _,cmd in ipairs(gp_default[term]) do
      gp:write(cmd)
    end
    gp_default[term] = {}
  end
end

local function gp_create (gp)
  if is_nil(default_terminal) then default_terminal = default_term() end
  gp = assert(io.popen('gnuplot', 'w')) -- :setvbuf 'line'
  gp_setterm(gp, default_terminal)                         -- platform dependent
  return gp
end

local function gp_get (gp, id)
  local dat = gp[_gpd]
  if is_nil( dat[id] ) then dat[id] = gp_create( gp, id ) end
  if id ~= '__cur_id'  then dat.__cur_id = id end
  return dat[id]
end

local gplot = setmetatable({ [_gpd] = {__cur_id=1} },  {
  __index = gp_get,
  __call  = \gp,cmd -> gp[_gpd][gp[_gpd].__cur_id]:write(cmd)
})

local function templ_multiaxes(self, size)
  local templ = {}
  for i=1,size do templ = tbl_concat( templ, templ_yaxis ) end
  return templ
end

local function templ_operations(self, pdfonefile, templ_input)
  local preamble, yaxis2, xaxis2, multiplot  in self
  local templ = tbl_concat( {}, template )
  if     preamble          then templ = tbl_concat( {}   , templ_preamble, templ                   ) end
  if     yaxis2 and xaxis2 then templ = tbl_concat( templ, templ_multih  , templ_multiv, templ_end )
  elseif yaxis2            then templ = tbl_concat( templ, templ_multiv  ,               templ_end )
  elseif xaxis2            then templ = tbl_concat( templ, templ_multih  ,               templ_end )
  else                          templ = tbl_concat( templ,                               templ_end ) end
  if     multiplot         then templ, multiplot = {}, false                                         end

  templ = tbl_concat( templ, templ_input.data, templ_plot, templ_input.multiaxes ,{"\n"}, templ_input.sequ )
  if not multiplot and yaxis2 or xaxis2 then templ = tbl_concat( templ, templ_unaxes ) end
  return templ
end

local function sequ(self)
  local sequence, seqrange, refer in self
  local templ   = {}
  assert(sequence.kind == 'sequence' and sequence.is_sequence == true, "invalid sequence")
  local lay     = layout         ( sequence, seqrange, refer )
  local lay_dat = layout_to_templ( lay, {'x','y'}  )
  local min     = lay.x[1]     :min()
  local max     = lay.x[#lay.x]:max()
  self.datrange = {min, max}
  self.xrange   = {min, max}
  templ = tbl_concat( {}, templ_lay, lay_dat, templ_lay_off, templ_unmult )
  return templ
end

local function style_plots(self, out, out2, keys, templ)
  local dashtypes, colors in dat
  local output = tbl_concat( out, out2 )
  --local axes   = multi_axes( self, out, out2 )
  local axes   = multi_axes( self, inp, inp2, out, out2 )       -- multiple axes
  local ptt    = totable(1..(#output))
  local pts    = totable(vector(#output):fill(1))
  local yout   = tbl_concat({}, output)

  local style  = {
    legendname = templ_style( self.legendname, yout     , keys ),
    colors     = templ_style( self.colors    , colors   , keys ),
    dtt        = templ_style( self.dashtypes , dashtypes, keys ),
    setaxes    = templ_style( self.axes      , axes     , keys ),
    ptt        = templ_style( self.pointtypes, ptt      , keys ),
    pts        = templ_style( self.pointsizes, pts      , keys ),
    count      = 2..(#output)+1,
  }
  for k,v in pairs(style) do templ_fill( templ, v, k ) end
  return templ
end

local function creat_scrdump(templ, name)
  local script = script_name(name)
  local fp = io.open(script, "w")
  templ_print( templ, fp )
  fp:close()
end

function exec(self)
  -- data scalling
  local inp = totable( self.xaxis )
  local out = totable( self.yaxis )
  local inp2, out2
  if self.xaxis2 then inp2 = totable( self.xaxis2 ) else inp2 = {} end
  if self.yaxis2 then out2 = totable( self.yaxis2 ) else out2 = {} end

  local keys        = tbl_concat( {}, inp, inp2, out, out2 )
  local keysVectors = keys_tbl  ( self.data, self.table, keys )
  local datasize    = #keysVectors[inp[1]]
  self.datrange     = 1..datasize
  --self.datrange = self.datrange or 1..datasize
  local drng        = scale_rng( datasize   , self.datrange )
  local src         = scale_dat( keysVectors, keys, drng    )

  -- template operations
  local id in self
  local size = #out + #out2
  local templ_input = {
    data      = data_to_templ  ( src , keys )                   ,  -- data to plot
    multiaxes = templ_multiaxes( self, size )                   ,  -- multiple axes
    sequ      = self.sequence and sequ( self, self.refer ) or {},  -- sequence plot
  }
  local templ = templ_operations( self, pdfonefile[id], templ_input )

  local xlimit  = { scale_axis( src, inp , self.hmargin ) }
  local ylimit  = { scale_axis( src, out , self.vmargin ) }
  local xlimit2 = { scale_axis( src, inp2, self.hmargin ) }
  local ylimit2 = { scale_axis( src, out2, self.vmargin ) }
  -- template interpolation
  local to_interpolate = {
    DATA = "$DATA",
    terminaltype = self.terminaltype,
    filename     = self.filename,
    xsize        = self.size.x  ,
    ysize        = self.size.y  ,
    sizeplot     = self.sequence and 0.85 or 1,
    lmargin      = self.margins.left ,
    rmargin      = self.margins.right,

    title        = mk_title(self),
    grid         = self.grid     ,
    legendpos    = self.legendpos,
    preamble     = self.preamble ,
    fontname     = self.font.name,
    fontsize     = self.font.size,

    xlabel       = self.xlabel ~="" and self.xlabel  or axis_title(inp) ,
    xlabel2      = self.xlabel2~="" and self.xlabel2 or axis_title(out2),
    ylabel       = self.ylabel ~="" and self.ylabel  or axis_title(out) ,
    ylabel2      = self.ylabel2~="" and self.ylabel2 or axis_title(inp2),
    --ylabel3      = false,
    --ylabel4      = false,
    xmin         = self.xrange  and self.xrange [1] or xlimit[1],
    xmax         = self.xrange  and self.xrange [2] or xlimit[2],
    xmin2        = self.xrange2 and self.xrange2[1] or xlimit[1],
    xmax2        = self.xrange2 and self.xrange2[2] or xlimit[2],
    ymin         = self.yrange  and self.yrange [1] or ylimit[1],
    ymax         = self.yrange  and self.yrange [2] or ylimit[2],
    ymin2        = self.yrange2 and self.yrange2[1] or ylimit[1],
    ymax2        = self.yrange2 and self.yrange2[2] or ylimit[2],
    --ymin3        = self.yrange3 and self.yrange3[1] or ylimit[1],
    --ymax3        = self.yrange3 and self.yrange3[2] or ylimit[2],
    --ymin4        = self.yrange4 and self.yrange4[1] or ylimit[1],
    --ymax4        = self.yrange4 and self.yrange4[2] or ylimit[2],
    styles       = interpol(self.styles),
  }
  templ_interp( templ, to_interpolate )
  templ = style_plots( self, out, out2, keys, templ ) -- style of plots

  -- to pdf operation
  if self.filename then
    if filename == pdfonefile[id] then
      templ_interp( gp_default.postscript, to_interpolate )
    end
    gp_setterm( gplot[id], 'postscript' )
  end

  -- pipe print and flush
  templ_print( templ, gplot[id] )
  gplot[id]:flush()

  --if self.scrdump then creat_scrdump(templ_save, self.filename) end -- save .gp
  pdfonefile[id] = filename
  return self
end

local plot = Command 'plot' {
 ----TO BE CLEANED -------------------------------------------------------------

  font = {name = "Times-Roman", size = 18}, -- switch into multiple font choices
  hmargin  = false,                         -- to be removed
  vmargin  = true ,                         -- to be removed
  axes     = false,                         -- axespairs

  ------------------------------------------------------------------------------

  -- stream id
  id          = 1,      -- stream id (process) ***sid

  -- plot setup
  wid         = 1,      -- window id (it not file...)
  multiplot   = false,  -- true -> continue plotting on same window

  -- table or data input
  table       = false,
  data        = false,  -- { x=tbl.x, y=vec } (precedence over table)
  datrange    = {1,-1}, -- 1..100,

  -- sequence input
  sequence    = false,
  seqrange    = {1,-1},   -- {'E.DS.L5.B1','S.DS.R5.B1'} or {1,10}
  selected    = false,    -- selected elements, if false all selected
  refer       = 'exit',

  -- decoration
  title       = "$name MAD $version, $date, $time",
  titlefont   = {name = "Times-Roman", size = 18},
  legendname  = false,            -- { y = 'distance' }
  legendfont  = {name = "Times-Roman", size = 18},
  legendpos   = "left top",
  grid        = 'grid',

  -- files
  filename    = false,            -- 'filename.pdf'
  scrdump     = false,            -- dumpfilename or true and (filename.gp or script.gp)

  -- axis selection (and names)
  xaxis       = 'x',
  xaxis2      = false,            -- 'x2' or { 'x2', 'x3' }
  yaxis       = 'y',              -- {'betx', 'bety', etc...}
  yaxis2      = false,
  yaxis3      = false,
  yaxis4      = false,
  axespairs   = false,            -- { xaxis = {'yaxis', 'yaxis3'}, xaxis2 = {'yaxis2', 'yaxis4'} }

  -- axis labels
  xlabel      = false,            -- { betx = 'Beta x' }
  xlabel2     = false,
  ylabel      = false,
  ylabel2     = false,
  ylabel3     = false,
  ylabel4     = false,

  -- axis ranges and margin (bounding box)
  xrange      = false,            -- { min, max }
  xrange2     = false,            -- { min, max }
  yrange      = false,            -- { min, max }
  yrange2     = false,            -- { min, max }
  yrange3     = false,            -- { min, max }
  yrange4     = false,            -- { min, max }

  -- plot style
  styles      = 'linespoints',    -- { y = 'lines' }
  colors      = false,            -- { y = 'green' }
  pointtypes  = false,
  pointsizes  = false,
  linetypes   = false,
  linewidths  = false,

-- gnuplot setup -> GP object
  margins     = {left = 0.1, right = 0.9, top = 0.1, bottom = 0.9},
  size        = {x = 20, y =10.5},             -- >> wsize?

  -- build the command (do not execute)
  exec = exec,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  plot   = plot ,
  gplot  = gplot,

  __help = __help,
}