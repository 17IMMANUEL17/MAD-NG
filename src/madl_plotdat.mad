--[=[
 o-----------------------------------------------------------------------------o
 |
 | Shapes for plot module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide the set of shapes for plotting the elements

 o-----------------------------------------------------------------------------o
]=]

local dat = {}

-- shapes ---------------------------------------------------------------------o

dat.sbend = {
  shape = {
  x = { 0, 0  , 1  , 1  , 0  , 0 },
  y = { 0, 0.5, 0.5,-0.5,-0.5, 0 },
  }
}

dat.quadrupole = {
  str_k   = 'k1',
  shape_f = {
    x = { 0, 0, 1, 1, 0 },
    y = { 0, 1, 1, 0, 0 },
  },
  shape_d = {
  x = { 0., 1., 1. , 0. , 0. },
  y = { 0., 0.,-0.8,-0.8, 0. },
  },
}

dat.sextupole = {
  str_k   = 'k2',
  shape_f = {
  x = { 0, 0  , 0.5 , 1  , 1,  0.5 , 0,  0.5 , 1 },
  y = { 0, 0.5, 0.75, 0.5, 0, -0.25, 0, -0.25, 0 },
  },
  shape_d = {
  x = { 0. , 0. , 0.5, 1. , 1. , 0.5, 0.},
  y = { 0. ,-0.5,-0.8,-0.5, 0. , 0.3, 0 },
  },
}

dat.octupole = {
  str_k = 'k3',
  shape_f = {
  x = { 0.0, 0.0, 0.2, 0.8, 1.0, 1.0, 0.8, 0.2, 0.0 },
  y = { 0.0, 0.5, 0.8, 0.8, 0.5, 0.0,-0.3,-0.3, 0.0 },
  },
  shape_d = {
  x = { 0.0, 0.0, 0.2, 0.8, 1.0, 1.0, 0.8, 0.2, 0.0 },
  y = { 0.0,-0.5,-0.8,-0.8,-0.5,-0.0, 0.3, 0.3, 0.0 },
  },
}

dat.kicker = {
  shape = {
  x = { 0.0, 0.5, 1.0, 0.5, 0.0 },
  y = { 0.0, 0.5, 0.0,-0.5, 0.0 },
  }
}
dat.tkicker = dat.kicker

dat.hkicker = {
  shape = {
  x = { 0.0, 0.5, 1.0, 0.0, 1.0 },
  y = { 0.0, 0.5, 0.0, 0.0, 0.0 },
  }
}

dat.vkicker = {
  shape = {
  x = { 0.0, 0.5, 1.0, 0.0, 1.0 },
  y = { 0.0,-0.5, 0.0, 0.0, 0.0 },
  }
}

dat.solenoid = {
  shape = {
  x = {
    { 0.  , 1.   , 1. , 0. , 0.  },
    { 0.  , 0.25 },
    { 0.25, 0.50 },
    { 0.5 , 0.75 },
    { 0.75, 1.0  },
    },
  y = {
    { 0.6 , 0.6  ,-0.6,-0.6, 0.6 },
    {-0.6 , 0.6  },
    {-0.6 , 0.6  },
    {-0.6 , 0.6  },
    {-0.6 , 0.6  },
    },
  }
}

dat.elseparator = {
  shape = {
    x = {
      { 0. , 1.  },
      { 0.5, 0.5 },
      { 0. , 1.  },
      { 0.5, 0.5 },
    },
    y = {
      { 0.4, 0.4 },
      { 0.8, 0.4 },
      {-0.4,-0.4 },
      {-0.8,-0.4 },
    },
  },
}

dat.instrument = {
  shape = {
  x = {
    { 0. , 0.  },
    { 0. , 0.  },
    { 0. , 0.  },
    { 0. , 0.  },
    { 0. , 0.  },
    { 1. , 1.  },
    { 1. , 1.  },
    { 1. , 1.  },
    { 1. , 1.  },
    { 1. , 1.  },
    { 0.0, 0.2 },
    { 0.4, 0.6 },
    { 0.8, 1.0 },
    { 0.0, 0.2 },
    { 0.4, 0.6 },
    { 0.8, 1.0 },
    },
  y = {
    {-0.9,-0.7 },
    {-0.5,-0.3 },
    {-0.1, 0.1 },
    { 0.3, 0.5 },
    { 0.7, 0.9 },
    {-0.9,-0.7 },
    {-0.5,-0.3 },
    {-0.1, 0.1 },
    { 0.3, 0.5 },
    { 0.7, 0.9 },
    {-0.5,-0.5 },
    {-0.5,-0.5 },
    {-0.5,-0.5 },
    { 0.5, 0.5 },
    { 0.5, 0.5 },
    { 0.5, 0.5 },
    },
  }
}

dat.rfcavity = {
  shape = {
  x = {
    { 0. , 0.25, 0.25, 0.75, 0.75, 1.  },
    { 0. , 0.25, 0.25, 0.75, 0.75, 1.  },
    },
  y = {
    { 0.2, 0.2 , 0.8 , 0.8 , 0.2 , 0.2 },
    {-0.2,-0.2 ,-0.8 ,-0.8 ,-0.2 ,-0.2 },
    },
  }
}

dat.collimator = {
  shape = {
  x = {
    { 0. , 1. , 1. , 0. , 0.  },
    { 0. , 1. , 1. , 0. , 0.  },
    },
  y = {
    { 0.8, 0.8, 0.4, 0.4, 0.8 },
    {-0.8,-0.8,-0.4,-0.4,-0.8 },
    },
  }
}

dat.marker = {
  shape = {
  x = { 0. , 0.  },
  y = {-0.9, 0.9 },
  }
}

dat.crabcavity = {
  shape = {
  x = {
    { 0. , 0.25, 0.25, 0.75, 0.75, 1.  },
    { 0.25, 0.75 },
    { 0. , 0.25, 0.25, 0.75, 0.75, 1.  },
    { 0.25, 0.75 },
    },
  y = {
    { 0.2, 0.2 , 0.8 , 0.8 , 0.2 , 0.2 },
    { 0.2 , 0.8  },
    {-0.2,-0.2 ,-0.8 ,-0.8 ,-0.2 ,-0.2 },
    { -0.8, -0.2 },
    },
  }
}

--temp
dat.drift = {
  shape = {
  x = { 0 },
  y = { 0 },
  }
}

dat.placeholder = dat.drift
dat.monitor     = dat.drift
dat.rbend       = dat.sbend
dat.decapole    = dat.drift
dat.dodecapole  = dat.drift
dat.wiggler     = dat.drift
dat.multipole   = dat.drift
dat.rfmultipole = dat.drift
dat.srotation   = dat.drift
dat.xrotation   = dat.drift
dat.yrotation   = dat.drift
dat.translate   = dat.drift
dat.twcavity    = dat.drift
dat.hmonitor    = dat.drift
dat.vmonitor    = dat.drift
dat.bpm         = dat.drift
dat.blm         = dat.drift
dat.assembly    = dat.drift
dat.bline       = dat.drift
dat.patch       = dat.drift

 -- sanity checks
do
  local element in MAD
  local skip = {
    slink=true, spause=true,
    --temp missing skip added -TODO
    element = true,
    sequence = true,
  }

  for _,e in pairs(element) do
    if e.l ~= nil and not skip[e.kind] then
      assert(dat[e.kind], "plot: missing shape detected")
      assert(dat[e.kind], e.kind)
    end
  end
end

-- end ------------------------------------------------------------------------o
return dat