--[=[
 o-----------------------------------------------------------------------------o
 |
 | Twiss module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local command, track, cofind, option, warn, vector, matrix        in MAD
local normal1, map2bet, bet2map, chfn2bet, syn2bet, dp2pt, has_dpt,
      ofname, ofcname, ofhname, ofchname, cvindex, msort          in MAD.gphys
local sign                                                        in MAD.gmath
local chain, achain                                               in MAD.gfunc
local tblcat, tblcpy, tblrep, assertf, errorf, printf             in MAD.utility
local is_nil, is_true, is_boolean, is_number, is_iterable,
      is_mappable, is_callable, is_vector, is_damap               in MAD.typeid
local atins                                                       in MAD.symint
local abs, min, max, sqrt, floor                                  in math

local chromdp = 1e-6

local assert, error, getmetatable, setmetatable, table =
      assert, error, getmetatable, setmetatable, table

local r4 = 1..4
local I4 = matrix(4):eye()
local I6 = matrix(6):eye()

-- helpers --------------------------------------------------------------------o

local function twdump (mflw, msg_, str_)
  local fmt = option.numfmt
  local msg, str = msg_ or '', str_ or 'M'
  option.numfmt = "% 10.5f"
  for i=1,mflw.npar or #mflw do
    printf("%s%d: ", msg, i)
    mflw[i]:get0():print(str,1e-12,'line')
    if mflw.debug >= 3 then mflw[i]:get1():print(' "     ') end
  end
  option.numfmt = fmt
end

-- twiss mtable ---------------------------------------------------------------o

local cvtlst = {'deltap',
                'q1', 'q2', 'q3', 'dq1', 'dq2', 'dq3', 'alfap','etap','gammatr',
                'synch1','synch_1','synch_2','synch_3','synch_4','synch_5'}

local function fill_sum (mflw)
  local mtbl, __twdat in mflw

  -- cleanup deltap
  if __twdat.chrm then
    local deltap in mtbl
    local ndp = #deltap
    for i=ndp/2+1,ndp do deltap[i] = nil end
  end

  -- total length
  mtbl.length = mflw.spos + mflw.ds - mflw.s0

  -- momentum compaction & phase slip factors, gamma transition
  local npar, ofun, chrm, q1, q2, q3, dq1, dq2, dq3,
        synch_1, synch_2, synch_3, synch_4, synch_5,
        synch1, alfap, etap, gammatr in __twdat
  local beam, len = mflw.beam, mtbl.length
  local dpt = chrm and dp2pt(chrm, beam.beta) or nil

  for i=1,mflw.npar do
    local id = mflw[i].id
    if id <= npar then
      local beam = mflw[i].beam or beam
      local of = ofun[id]

      q1[id] = of.mu1
      q2[id] = of.mu2
      q3[id] = of.mu3

      if chrm then
        local dpt = beam and dp2pt(chrm, beam.beta) or dpt
        local ofdp = ofun[id+npar]

        dq1[id] = (ofdp.mu1 - of.mu1) / dpt
        dq2[id] = (ofdp.mu2 - of.mu2) / dpt
        dq3[id] = (ofdp.mu3 - of.mu3) / dpt

        synch_1[id] = of.synch_1
        synch_2[id] = of.synch_2
        synch_3[id] = of.synch_3
        synch_4[id] = of.synch_4
        synch_5[id] = of.synch_5
      end

      -- calculation from MAD-X
      local R  = mflw[i]:get1()
      local sd = R:get(5,6) + R:get(5,1)*of.dx + R:get(5,2)*of.dpx
                            + R:get(5,3)*of.dy + R:get(5,4)*of.dpy
      etap   [id] = -sd/beam.beta^2 / len
      alfap  [id] = 1/beam.gamma^2 + etap[id]
      gammatr[id] = sqrt(1/abs(alfap[id])) * sign(alfap[id])
      synch1 [id] = alfap[id]*len
    end
  end

  -- link data to mtbl
  for i=2,#cvtlst do -- skip deltap
    local k = cvtlst[i]
    mtbl[k] = __twdat[k]
  end

  -- mute list of 0 or 1 number into 0 or the number in header
  for _,k in ipairs(cvtlst) do
    local v = mtbl[k]
    if is_iterable(v) then
      local n = #v
          if n == 0 then mtbl[k] = 0
      elseif n == 1 then mtbl[k] = v[1]
      end
    end
  end
end

local function fill_row (elm, mflw, lw, islc)
!  printf("tw_fill: islc=%2d, elm=%s\n", islc, elm.name)

  local npar, mtbl, __twdat in mflw
  local nrow, ofun, onam in __twdat

-- print("twfill", elm.name, #mtbl, npar, nrow)

  for i=1,npar do
    local m = mflw[i]
    if not m.nosave then
      local id, of = m.id, ofun[m.id]

      nrow = nrow + 1
      -- save optical functions (keep order !)
      for _,k in ipairs(onam) do mtbl[k][nrow] = of[k] end
    end
  end

  __twdat.nrow = nrow
  return true
end

-- beta0 (action) -------------------------------------------------------------o

local function twissact (elm, mflw, lw, islc)
  if not mflw.__twdat then return end

! printf("tw_ofun: islc=%2d, elm=%s\n", islc, elm.name)

  local ofun, chrm in mflw.__twdat

  for i=1,mflw.npar do
    local m = mflw[i]
    map2bet(m, ofun[m.id])
  end

  if chrm then
--    print(elm.name)
    local npar in mflw.__twdat
    local beam in mflw
    local dpt = dp2pt(chrm, beam.beta)
    local e1, e2 in elm
    for i=1,mflw.npar do
      local id, beam in mflw[i]
      if id > npar then
        local beam in mflw[i]
        local dpt = beam and dp2pt(chrm, beam.beta) or dpt
        local id0 = mflw[mflw[i].nosave].id
--        print(id, id1, ofun[id].id, ofun[id1].id, mflw[i].nosave)
        assert(ofun[id].id == id, "unexpected corrupted optical function index (dp)")
        assert(id0+npar    == id, "unexpected corrupted optical function index")
        chfn2bet(ofun[id0], ofun[id], dpt)
      elseif mflw.eh ~= 0 and islc == -2 then
        assert(ofun[id].id == id, "unexpected corrupted optical function index")
        syn2bet(ofun[id], mflw, elm)
      end
    end
  end

--  __twdat.pclw = islc == -2 and 0 or clw
end

-- chrom option ---------------------------------------------------------------o

local function chrom_dps (self)
  local chrom, deltap = self.chrom, self.deltap or 0
  local cdp = (chrom == true or chrom == 0) and chromdp or chrom
  local dps = is_number(deltap) and {deltap} or deltap
  assert(is_number  (cdp), "invalid chrom attribute (number expected)")
  assert(is_iterable(dps), "invalid deltap attribute (iterable expected)")

  if cdp then
    -- double the list of deltap
    local ndp  = #dps
    local cdps = table.new(2*ndp,0)
    for i,v in ipairs(dps) do
      cdps[i], cdps[i+ndp] = v, v+cdp
    end

    -- update self
    self.chrom  = cdp
    self.deltap = cdps
  end
end

-- closed orbit ---------------------------------------------------------------o

local function twiss_cofind (self, mflw0)
  local npar in mflw0
  local X0, Xi = table.new(npar,0), table.new(npar,0)

  -- get initial guess(es)
  local j = 1
  for i=1,npar do
    local m = mflw0[i]
    if m.status == 'Xset' then
      X0[j], Xi[j]  = m:get0():totable(), i
      X0[j].beam, j = m.beam, j+1
    end
  end

  -- nothing to process (no particles)
  if j == 1 then return end

  local mapdef = not self.codiff -- nil or false codiff use {xy=1}
  local codiff = self.codiff == true and cofind.codiff or self.codiff

  -- retrieve closed orbit(s) [TODO: disable knobs]
  local _, mflw = cofind { exec=false } :copy_variables(self)
                         { X0=X0, deltap=0, save=false, nstep=-1,
                           mapdef=mapdef, codiff=codiff }

  -- update damaps with their closed orbit (tw: i, co: j)
  for j=1,mflw.tpar do
    local m, m0 = mflw[j], mflw0[Xi[mflw[j].id]]
    m0.status = m.status
    if m.status == 'stable' then
      m0:setvar(is_damap(m) and m:get0() or m)
      m0.coR = m.coR -- backup one-turn-map from last cofind iteration
    end
  end

  -- report
  if mflw.npar ~= mflw.tpar then
    warn("%d/%d particles are unstable/singular/lost after closed orbit search",
         mflw.tpar - mflw.npar, mflw.tpar)
    msort(mflw0)
  end
end

-- one-turn-map ---------------------------------------------------------------o

local function twiss_track (self, mflw0)
  local npar in mflw0
  local X0, Xi = table.new(npar,0), table.new(npar,0)

  -- track 'Xset' and 'stable' damaps
  local j = 1
  for i=1,npar do
    local m = mflw0[i]
    if m.status == 'Xset' or m.status == 'stable' then
      X0[j], Xi[j]  = m:get0():totable(), i
      X0[j].beam, j = m.beam, j+1
    end
  end

  -- nothing to process (no damaps)
  if j == 1 then return end

  -- get one-turn-maps to user-defined orders
  local _, mflw = track { exec=false } :copy_variables(self)
                        { X0=X0, deltap=0, save=false, nstep=-1 }

  -- update damaps with their one-turn-map on the closed orbit (tw: i, tk: j)
  for j=1,mflw.tpar do
    local m, m0 = mflw[j], mflw0[Xi[mflw[j].id]]
    if m.status == 'Xset'
    then m:copy(m0)
    else warn("unexpected damap (%d) status (%s) after tracking on closed orbit",
              m.id, m.status) end
  end

  -- report
  if mflw.npar ~= mflw.tpar then
    warn("%d/%d particles lost after during tracking on the closed orbit",
         mflw.tpar - mflw.npar, mflw.tpar)
    msort(mflw0)
  end
end

-- normal/closed forms --------------------------------------------------------o

local function check_normal (m, of)
  local fmt = option.numfmt
  option.numfmt = "% .5e"
  io.write("Checking normal form vs optical functions\n")
  m:get1():print('A') ; show(of); bet2map(of, m:copy()):get1():print('A(beta0)')
  option.numfmt = fmt
end

local function twiss_nform (self, mflw)
  local beta0, coupling in self
  local npar, sdir in mflw

  -- prepare mflw to twiss extensions
  mflw.__twdat = {ofun={}}
  local ofun in mflw.__twdat

  for i=1,npar do
    local m = mflw[i]
    local rnk, W

    if m.status ~= 'Bset' and m.status ~= 'Mset' then
      local X, R = m:get0(), m:get1()

      -- get rank
      rnk = has_dpt(R) and 6 or 4

      -- get linear normal form A from one-turn map R
      local A = normal1(R, rnk) -- TODO: high order normal form

      -- set damap
      m:setvar(X):set1(A)
    end

    -- get initial linear optical functions and phase advances
    local of = map2bet(m, rnk, coupling, sdir)

    -- check normal form
    if mflw.debug >= 2 then check_normal(m, of) end

    -- save beta0 block
    ofun[m.id] = of ; of.id = m.id
  end
end

-- extend track mflw and mtbl -------------------------------------------------o

local twheader = {
  'chrom', 'coupling', 'length',
  -- see also cvtlst above
  'q1', 'q2', 'q3', 'dq1', 'dq2', 'dq3', 'alfap', 'etap', 'gammatr',
  'synch1', 'synch_1', 'synch_2', 'synch_3', 'synch_4', 'synch_5',
}

local function twiss_init (self, mflw)
  local save, chrom, coupling in self
  local npar, beam, mtbl, __twdat in mflw
  local n = npar

  -- do not save extra rows created by chrom
  if chrom then
    n = npar/2
    for i=1,n do mflw[i+n].nosave = i end
  end

  -- add twiss data to mflw
  __twdat.npar = n
  __twdat.nrow = 0
  __twdat.pclw = 0
  __twdat.chrm = chrom
  __twdat.omat = matrix(6)
  __twdat.onam = coupling and (chrom and ofchname or ofcname) or
                               chrom and ofhname  or ofname

  -- tunes and chromaticities
  __twdat.q1, __twdat.dq1 = table.new(n,0), table.new(n,0)
  __twdat.q2, __twdat.dq2 = table.new(n,0), table.new(n,0)
  __twdat.q3, __twdat.dq3 = table.new(n,0), table.new(n,0)

  -- synch integ. 1, momentum compaction & phase slip factors, gamma transition
  __twdat.synch_1 = table.new(n,0)
  __twdat.synch_2 = table.new(n,0)
  __twdat.synch_3 = table.new(n,0)
  __twdat.synch_4 = table.new(n,0)
  __twdat.synch_5 = table.new(n,0)
  __twdat.synch1  = table.new(n,0)
  __twdat.alfap   = table.new(n,0)
  __twdat.etap    = table.new(n,0)
  __twdat.gammatr = table.new(n,0)

  if save then
    -- extend mtbl
    mtbl.type     = 'twiss'
    mtbl.header   = tblcat(mtbl.header, twheader)

    mtbl.chrom    = chrom
    mtbl.coupling = coupling

    -- add twiss columns and type to mtbl
    for _,k in ipairs(mflw.__twdat.onam) do mtbl:addcol(k,{}) end
  end

  return mflw
end

-- twiss mflow ----------------------------------------------------------------o

local function make_mflow (self)
  local save, chrom, mapdef, radiate in self

  -- wrap actions (see track)
  if save then
    local atsave = self:var_get 'atsave' -- prevent evaluation
    self.atsave = not atsave and fill_row or achain(fill_row, atsave)
  end
  -- action for optical function calculation
  local sliceact = achain(atins, twissact)
  local atslice  = self:var_get 'atslice' -- prevent evaluation
  local atexit   = self:var_get 'atexit'  -- prevent evaluation
  self. atslice  = not atslice and sliceact or chain(atslice, sliceact)
  self. atexit   = not atexit  and twissact or chain(atexit , twissact)

  -- double the deltaps of self
  if save and chrom then chrom_dps(self) end

  -- enforce damaps orders (default is 1)
  if not mapdef or is_true(mapdef) then self.mapdef = {xy=1} end

  -- block quantum radiation and photon tracking
  if radiate then radiate = "average" end

  -- prepare tracking template
  local _, mflw = track { exec=false } :copy_variables(self)
                        { nstep=0, radiate=radiate }
  if mflw.npar == 0 then return mflw end -- no more particles...
  if mflw.debug >= 3 then twdump(mflw,'da.') end

  -- search for closed orbits (update mflw, keep order)
  if self.cofind ~= false then
    twiss_cofind(self, mflw)
    if mflw.npar == 0 then return mflw end -- no more particles...
    if mflw.debug >= 3 then twdump(mflw,'co.') end
  end

  -- track one-turn-map (update mflw, keep order)
  twiss_track(self, mflw)
  if mflw.npar == 0 then return mflw end -- no more particles...
  if mflw.debug >= 3 then twdump(mflw,'tk.') end

  -- compute normal forms (update mflw, keep order)
  twiss_nform(self, mflw)
  if mflw.debug >= 3 then twdump(mflw,'nf.') end

  -- return extended mflw and mtbl (if save)
  return twiss_init(self, mflw)
end

-- twiss command --------------------------------------------------------------o

local _id = {} -- identity (unique)

local function exec (self)
  local mflw

  -- retrieve or build mflw (and extend mtbl)
  if self.mflow then
    assert(self.mflow.__twss == _id, "invalid mflow (twiss mflow expected)")
    mflw = self.mflow
  else
    mflw = make_mflow(self) -- the real work is done here!
    mflw.__twss = _id
    if not mflw.__twdat then
      warn("twiss not completed (all damaps were unstable/singular/lost)")
      return mflw.mtbl, mflw
    end
  end

  -- update fields
  local nstep, debug in self
  mflw.nstep, mflw.debug = nstep or mflw.nstep, debug or mflw.debug

  -- track the normal form(s)
  local mtbl, mflw, ei = track { mflow=mflw, nstep=nstep, debug=debug }

  -- finalise twiss calculation (tunes, chromas, etc)
  if not ei and mtbl then fill_sum(mflw) end

  return mflw.mtbl, mflw, ei
end

-- attributes set to nil will use the default from track by inheritance

local twiss = command 'twiss' {
  sequence=nil,      -- sequence (required)                               (trck)
  beam=nil,          -- beam (required or sequence.beam)                  (trck)
  range=nil,         -- range of tracking (or sequence.range)             (trck)
  dir=nil,           -- s-direction of tracking (1 or -1)                 (trck)

  s0=nil,            -- initial position offset s                         (trck)
  X0=nil,            -- initial X coordinates (or damap, or beta0)        (trck)
  O0=nil,            -- initial O coordinates of reference orbit          (trck)
  deltap=nil,        -- initial deltap(s)                                 (trck)
  chrom=false,       -- compute chromatic functions by finite difference  (twss)
  coupling=false,    -- compute optical functions for coupling modes      (twss)

  nturn=nil,         -- number of turns                                   (trck)
  nstep=nil,         -- number of elements to track for last phase        (trck)
  nslice=nil,        -- number of slices (or weights) for each element    (trck)
  mapdef=true,       -- always use damap formalism (true => {xy=1})       (twss)
  method=nil,        -- method or order for integration (1 to 8)          (trck)
  model=nil,         -- model for integration ('DKD' or 'TKT')            (trck)
  ptcmodel=nil,      -- use strict PTC thick model (override option)      (trck)
  implicit=nil,      -- slice implicit elements too                       (trck)
  misalign=nil,      -- consider misalignment errors                      (trck)
  fringe=nil,        -- activate fringe fields (0..7)                     (trck)
  radiate=nil,       -- radiate at slices                                 (trck)
  totalpath=nil,     -- 't' is the totalpath                              (trck)

  save=true,         -- create mtable and save results                    (mtbl)
  title=nil,         -- title of mtable (default seq.name)                (mtbl)
  observe=0,         -- save after all elements                           (mtbl)
  savesel=nil,       -- save selector (predicate)                         (mtbl)
  savemap=nil,       -- save damap in the mtable                          (twss)

  atentry=nil,       -- action called when entering an element  (ataper)  (trck)
  atslice=nil,       -- action called after each element slices (atsave)  (trck)
  atexit=nil,        -- action called when exiting an element   (atsave)  (trck)
  ataper=nil,        -- action called when checking for aperture          (trck)
  atsave=nil,        -- action called when saving in mtable               (trck)
  atdebug=nil,       -- action called when debugging the element maps     (trck)

  cofind=false,      -- search for closed orbit (default is false)        (cofn)
  cotol=nil,         -- closed orbit tolerance (i.e. |dX|)                (cofn)
  coiter=nil,        -- maximum number of iterations                      (cofn)
  codiff=nil,        -- finite differences step for jacobian (or true)    (cofn)
  comethod=nil,      -- default algorithm                                 (cofn)
  X1=nil,            -- optional final coordinates translation            (cofn)

  info=nil,          -- information level (output on terminal)            (cofn)
  debug=nil,         -- debugging information level (output on terminal)  (cofn)
  usrdef=nil,        -- user defined data attached to the mflow           (trck)

  mflow=nil,         -- mflow, exclusive with other attributes except nstep
  exec=exec,         -- command to execute upon children creation

  __attr = tblcat(   -- list of all setup attributes
    cofind.__attr,
    {'chrom', 'coupling'},
    {noeval=cofind.__attr.noeval}
  )
} :set_readonly() -- reference twiss command is readonly

-- end ------------------------------------------------------------------------o
return { twiss = twiss }
