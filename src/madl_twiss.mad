--[=[
 o-----------------------------------------------------------------------------o
 |
 | Twiss module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local matrix, command, track, cofind                              in MAD
local normal, optfun, betablk, has_dp, ofname                     in MAD.gphys
local fnone, bind1st                                              in MAD.gfunc
local is_true, is_damap                                           in MAD.typeid
local tblcpy                                                      in MAD.utility
local abs                                                         in math

-- twiss mtable ---------------------------------------------------------------o

local function save_twsum (mflw)
  -- TODO!!

  -- to remove
  -- print("show optfun0")
  -- show(optfun0)

  -- dump results
--  if true then
--    local printf in MAD.utility
--    local q1 , q2 , q3  = 0, 0, 0
--    local mu1, mu2, mu3 = 0, 0, 0
--    for i=1,#mtbl do
--      local A = mtbl[i].damap:get1()
--      local optfun = optfun(A, R)
--      q1 = q1 + optfun.mu1 - mu1
--      q2 = q2 + optfun.mu2 - mu2
--      q3 = q3 + optfun.mu3 - mu3
--      mu1, mu2, mu3 = optfun.mu1, optfun.mu2, optfun.mu3
--      printf('mu1=%14.8e, mu2=%14.8e\n', optfun.mu1, optfun.mu2)
--      printf('q1 =%14.8e, q2 =%14.8e\n', q1, q2)
--    end
--    show(optfun0)
--  end
end

local function save_twiss (save, elm, mflw, lw, slc)
  local mtbl, npar, R in mflw
  local n = #mtbl-npar

  for i=1,npar do
    local par = mflw[i]
    if is_damap(par) then -- skip particles (?)
      local A = par:get1()
      local ofun = optfun(A, mflw.optfun)
      for _,k in ipairs(ofname) do
        mtbl[k][n+i] = ofun[k]
      end
    end
  end
  -- user action
  save(elm, mflw, lw, slc)
end

-- close orbit ----------------------------------------------------------------o

local function twiss_cofind (self)

  -- retrieve closed orbit
  local X, R, rnk, typ, itr = cofind 'twcofind' {
    -- forward options to cofind
    beam     = self.beam,
    sequence = self.sequence,
    range    = self.range,
    dir      = self.dir,

    s0       = self.s0,
    X0       = self.X0,

    mapdef   = self.comapdef,
    R0       = self.R0,

    nturn    = self.nturn,
    nslice   = self.nslice,
    method   = self.method,

    atentry  = self:var_raw 'atentry', -- prevent evaluation
    atslice  = self:var_raw 'atslice',
    atexit   = self:var_raw 'atexit' ,
    ataper   = self:var_raw 'ataper' ,

    usrdef   = self.usrdef, -- user defined data

    cotol    = self.cotol,
    coiter   = self.coiter,
    codiff   = self.codiff,
    codptol  = self.codptol,
    comethod = self.comethod,
    cowarn   = self.cowarn,
    X1       = self.X1,
  }

  if typ == 'Singular' then
    error("unable to find closed orbit during twiss initialization")
  end

  return X, R, rnk
end

-- init track -----------------------------------------------------------------o

local function twiss_track0 (self, X, R, A, ofun0)
  local mapdef, save in self
  local atsave  = self:var_raw 'atsave' -- prevent evaluation

  -- wrap atsave
  if save then
    atsave = bind1st(save_twiss, atsave or track:var_raw 'atsave')
  end

  local mtbl, mflw = track 'twtrack0' {
    -- forwarded options
    beam      = self.beam,
    sequence  = self.sequence,
    range     = self.range,
    dir       = self.dir,

    s0        = self.s0,
    X0        = X,

    mapdef    = is_true(mapdef) and {xy=2} or mapdef,
    mapsave   = self.mapsave,
    R0        = A,

    nturn     = self.nturn,
    nstep     = 0,               -- do only initialisation
    nslice    = self.nslice,
    method    = self.method,
    totalpath = self.totalpath,

    save      = self.save,
    title     = self.title,
    implicit  = self.implicit,
    relative  = self.relative,
    observe   = self.observe,

    atentry   = self:var_raw 'atentry', -- prevent evaluation
    atslice   = self:var_raw 'atslice',
    atexit    = self:var_raw 'atexit' ,
    ataper    = self:var_raw 'ataper' ,
    atsave    = atsave,

    usrdef    = self.usrdef, -- user defined data
  }

  -- extend mflw and mtbl
  if save then
    mflw.optfun0 = ofun0
    mflw.optfun  = tblcpy(ofun0[1] or ofun0)
    -- add twiss columns and change table type
    for _,k in ipairs(ofname) do mtbl:addcol(k,{}) end
    mtbl.type  = 'twiss'
  end

  return mflw
end

-- twiss mflow ----------------------------------------------------------------o

local function make_mflow (self)
  -- TODO: process multiple maps/particles in //
  local X0, R0, beta0 in self
  local X, R, rnk

  -- convert beta block into R0 matrix
  if beta0 then R0 = betablk(beta0) end

  -- find closed orbit or use initial conditions
  if R0 then
    X, R, rnk = X0, R0, has_dp(R0, self.codptol) and 6 or 4
  else
    X, R, rnk = twiss_cofind(self)
  end

  -- 4D case
  if rnk == 4 then R = R:getsub(1..4,1..4) end

  -- get linear normal form A from one-turn map R
  local A, V, W, info = normal(R)

  -- get initial linear optical functions and phase advances
  local ofun0 = optfun(A, nil, W)

  -- (re)extend to 6D if needed
  if rnk == 4 then
    R = matrix(6):eye():setsub(1..4, 1..4, R)
    A = matrix(6):eye():setsub(1..4, 1..4, A)
  end

  -- DEBUG!
  if false then
    local fmt = MAD.option.format
    MAD.option.format = "% 10.5f"
    R :print('R1') ; A :print('A1')
    local R2, A2 = betablk(ofun0)
    R2:print('R2') ; A2:print('A2')
    MAD.option.format = fmt
  end

  -- init track with normal form A and compute optfun0
  return twiss_track0(self, X, R, A, ofun0)
end

-- twiss command --------------------------------------------------------------o

local _id = {} -- identity

local function exec (self)
  local mflw, mtbl, ei

  if self.mflow then
    assert(self.mflow.__twss == _id, "invalid mflow (twiss mflow expected)")
    mflw = self.mflow
  else
    mflw = make_mflow(self)
    mflw.__twss = _id
  end

  mtbl, mflw, ei = track 'twtrack' { mflow=mflw, nstep=self.nstep }

  if ei == nil then -- TODO
    -- fill table with summary
  end

  return mtbl, mflw, ei
end

local _na -- not applicable (see track and cofind)

local twiss = command 'twiss' {
  -- attributes (not required) set to nil will use the default from track
  beam=nil,          -- beam (required or sequence.beam)                  (trck)
  sequence=nil,      -- sequence (required)                               (trck)
  range=nil,         -- range of tracking                                 (trck)
  dir=nil,           -- s-direction of tracking (1 or -1)                 (trck)

  s0=nil,            -- initial s                                         (trck)
  X0=nil,            -- initial X coordinates (or damap, or list of)      (trck)

  mapdef=true,       -- always use damap formalism (true => {xy=2})       (trck)
  mapsave=nil,       -- save damap in the mtable                          (trck)
  R0=nil,            -- initial R matrix (compagnion of X0)               (trck)
  beta0=nil,         -- initial beta0 block to build uncoupled R0         (twss)

  nturn=nil,         -- number of turns                                   (trck)
  nstep=nil,         -- number of elements to track                       (trck)
  nslice=nil,        -- number of slice for each element                  (trck)
  method=nil,        -- method for integration                            (trck)
  totalpath=nil,     -- 't' is the totalpath                              (trck)

  save=true,         -- create mtable and save results                    (mtbl)
  title=nil,         -- title of mtable (default seq.name)                (mtbl)
  implicit=true,     -- save also in implicit elements                    (mtbl)
  relative=false,    -- save length of slices instead from element start  (mtbl)
  observe=false,     -- save only in observed elements (every n turns)    (mtbl)

  atentry=nil,       -- action to call when entering an element           (trck)
  atslice=nil,       -- action to call after each element slices          (trck)
  atexit=nil,        -- action to call when exiting an element            (trck)
  ataper=nil,        -- action called when checking for aperture          (trck)
  atsave=nil,        -- action called when saving a row in mtable         (trck)

  usrdef=nil,        -- user defined data attached to the mflow           (mflw)

  cotol=nil,         -- closed orbit tolerance                            (cofn)
  coiter=nil,        -- maximum number of iteration                       (cofn)
  codiff=nil,        -- finite differences steps                          (cofn)
  codptol=nil,       -- static vs dynamic tolerance                       (cofn)
  comethod=nil,      -- default optimizer                                 (cofn)
  comapdef=nil,      -- optional mapdef for cofind                        (cofn)
  cowarn=nil,        -- commute errors into warnings                      (cofn)
  X1=nil,            -- optional final coordinates translation            (cofn)

  mflow=nil,      -- current mflow, exclusive with other attributes except nstep

  exec=exec,      -- command to execute upon children creation
} :set_readonly() -- reference twiss command is readonly

-- end ------------------------------------------------------------------------o
return { twiss = twiss }
