--[=[
 o-----------------------------------------------------------------------------o
 |
 | Twiss module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Shreyber, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local warn, vector, matrix, command, track        in MAD
local is_positive                                 in MAD.typeid
local errorf, assertf                             in MAD.utility
local abs                                         in math

local vnam = {'x', 'px', 'y', 'py', 't', 'pt'}

-- helpers --------------------------------------------------------------------o

local function has_dp (R, dptol)
  local nr, nc = R:sizes()
  assert(nr == 6 and nc == 6, "invalid one-turn map (6D matrix expected)")

  local nodp = abs(R:get(6,6) - 1) <= dptol

  for i=1,5 do
    nodp = nodp and abs(R:get(6,i)) <= dptol
  end

  return not nodp
end

-- twiss command -------------------------------------------------------------o

local function exec (self)

end

local twiss = command 'Twiss' {
  beam=nil,          -- beam (required)                                   (trck)
  sequence=nil,      -- sequence (required)                               (trck)
  range=nil,         -- range of tracking                                 (trck)
  title=nil,         -- title of mtable                                   (mtbl)
  sdir=1,            -- s-direction of tracking (1 or -1)                 (trck)

  s0=0,              -- initial s                                         (trck)
  X0={0,0,0,0,0,0},  -- initial coordinates (or mapflow, or list of)      (trck)
  X1={0,0,0,0,0,0},  -- optional final coordinates translation            (cofn)

  mapdef=true,       -- setup for mapflow                                 (trck)
  mapsave=true,      -- save mapflow in the mtable                        (trck)

  nturn=1,           -- number of turns                                   (trck)
  nstep=-1,          -- number of elements to track                       (trck)
  nslice=1,          -- number of slice for each element                  (trck)
  method='simple',   -- default integrator                                (trck)
  totalpath=false,   -- 't' is the totalpath                              (trck)

  cotol=1e-8,        -- closed orbit tolerance                            (cofn)
  coiter=20,         -- maximum number of iteration                       (cofn)
  codiff=1e-10,      -- finite differences steps                          (cofn)
  codptol=1e-12,     -- static vs dynamic tolerance                       (cofn)
  comethod='newton', -- default optimizer                                 (cofn)
  cousemap=true,     -- use DA to compute the jacobian                    (cofn)

  save=true,         -- create mtable and set fill to save data           (mtbl)
  nofill=false,      -- disable filling at the end of an element          (trck)
  implicit=true,     -- save also implicit elements                       (mtbl)

  atentry=nil,       -- action to call when entering an element           (trck)
  atslice=nil,       -- action to call after each element slices          (trck)
  atexit=nil,        -- action to call when exiting an element            (trck)
  atfill=nil,        -- action to call when filling a mtable row          (trck)

  mflow=nil,      -- current mflow, exclusive with other attributes except nstep

  exec=exec,      -- command to execute upon children creation
} :set_readonly() -- reference twiss command is readonly

-- end ------------------------------------------------------------------------o
return { twiss = twiss }
