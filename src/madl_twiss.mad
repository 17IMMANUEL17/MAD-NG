--[=[
 o-----------------------------------------------------------------------------o
 |
 | Twiss module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local warn, vector, matrix, command, track, cofind                in MAD
local had_dp, order_eigen, norm_eigen, phas_eigen,
      linoptfun, chkeigsys                                        in MAD.gphys
local num2str                                                     in MAD.utility

local abs                                                         in math

-- close orbit ----------------------------------------------------------------o

local function twiss_cofind (self)

  -- retrieve closed orbit
  local X, R, rnk, typ, itr = cofind 'twiss cofind' {
    -- forward options to cofind
    beam     = self.beam,
    sequence = self.sequence,
    range    = self.range,
    sdir     = self.sdir,

    s0       = self.s0,
    X0       = self.X0,
    X1       = self.X1,

    nturn    = self.nturn,
    nslice   = self.nslice,
    method   = self.method,

    cotol    = self.cotol,
    coiter   = self.coiter,
    codiff   = self.codiff,
    codptol  = self.codptol,
    cousemap = self.cousemap,
    comethod = self.comethod,
  }

  if typ == 'Singular' then
    error("unable to find closed orbit during twiss initialization")
  end

  return X, R, rnk
end

-- twiss command --------------------------------------------------------------o

local function exec (self)
  -- find closed orbit
  local X, R, rnk = twiss_cofind(self)

  -- 4D case
  if rnk == 4 then R = R:getsub(1..4,1..4) end

-- to remove
MAD.option.format = "%18.8e"

  -- get eigenvalues and eigenvectors
  local W, _, V, info = R:eigen()
--  print("\ninfo=", info)
--  R:print('R')
--  W:print('W')
--  V:print('V')

  -- order eigenvalues and eigenvectors by planes
--  print("order eigen system")
  order_eigen(V, W)
--  W:print('W')
--  V:print('V')

  -- check eigen system: (R - I*Wi)*Vi == 0
  chkeigsys(V,W,R)

  -- normalize eigen system: [x,px]=1, [y,py]=1 and [t,pt]=1
--  print("normalize eigen system")
  norm_eigen(V, W)
--  W:print('W')
--  V:print('V')

  -- rephase eigen vectors
--  print("rephase eigen vectors")
  phas_eigen(V)
--  V:print('V')

  -- compute tunes and linear optical functions
  local optfun = linoptfun(V, W)

  -- TODO: track normalized V (i.e. A_script)
  --       collect optfun

  -- print debug information
--  io.write('rank=', optfun.rank,'\n')
--  for i=1,3 do io.write('q'..i,':\t', num2str(optfun['q'..i]),'\n') end
--  for _,v in ipairs(MAD.gphys.ofname) do io.write(v,':\t', num2str(optfun[v]),'\n') end

  return optfun, X, R, W, V, rnk
end

local twiss = command 'Twiss' {
  beam=nil,          -- beam (required)                                   (trck)
  sequence=nil,      -- sequence (required)                               (trck)
  range=nil,         -- range of tracking                                 (trck)
  title=nil,         -- title of mtable                                   (mtbl)
  sdir=1,            -- s-direction of tracking (1 or -1)                 (trck)

  s0=0,              -- initial s                                         (trck)
  X0={0,0,0,0,0,0},  -- initial coordinates (or damap, or list of)        (trck)
  X1={0,0,0,0,0,0},  -- optional final coordinates translation            (cofn)

  mapdef=true,       -- setup for damap                                   (trck)
  mapsave=true,      -- save damap in the mtable                          (trck)

  nturn=1,           -- number of turns                                   (trck)
  nstep=-1,          -- number of elements to track                       (trck)
  nslice=1,          -- number of slice for each element                  (trck)
  method='simple',   -- default integrator                                (trck)
  totalpath=false,   -- 't' is the totalpath                              (trck)

  cotol=1e-8,        -- closed orbit tolerance                            (cofn)
  coiter=20,         -- maximum number of iteration                       (cofn)
  codiff=1e-10,      -- finite differences steps                          (cofn)
  codptol=1e-12,     -- static vs dynamic tolerance                       (cofn)
  cousemap=true,     -- use damap to compute the jacobian                 (cofn)
  comethod='newton', -- default optimizer                                 (cofn)

  save=true,         -- create mtable and set fill to save data           (mtbl)
  nofill=false,      -- disable filling at the end of an element          (trck)
  implicit=true,     -- save also implicit elements                       (mtbl)

  atentry=nil,       -- action to call when entering an element           (trck)
  atslice=nil,       -- action to call after each element slices          (trck)
  atexit=nil,        -- action to call when exiting an element            (trck)
  atfill=nil,        -- action to call when filling a mtable row          (trck)

  mflow=nil,      -- current mflow, exclusive with other attributes except nstep

  exec=exec,      -- command to execute upon children creation
} :set_readonly() -- reference twiss command is readonly

-- end ------------------------------------------------------------------------o
return { twiss = twiss }
