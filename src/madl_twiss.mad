--[=[
 o-----------------------------------------------------------------------------o
 |
 | Twiss module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local command, track, cofind                                      in MAD
local vector, matrix, gphys, option, warn                         in MAD
local normal, optfun, phasadv, betablk, dp2pt, has_dpt,
      ofname, ofcname, cvindex, msort                             in gphys
local ffalse, ftrue, achain                                       in MAD.gfunc
local tblcat, tblrep, assertf, errorf, printf, rep                in MAD.utility
local is_nil, is_true, is_boolean, is_number, is_iterable,
      is_mappable, is_vector, is_damap, is_optfun                 in MAD.typeid

local abs, min, floor                                             in math

local chromdp = 1e-6

local assert, error, getmetatable, setmetatable, table =
      assert, error, getmetatable, setmetatable, table

-- helpers --------------------------------------------------------------------o

local function mdump (mflw, msg_, str_)
  local fmt = option.format
  local msg, str = msg_ or '', str_ or 'M'
  option.format = "% 10.5f"
  for i=1,mflw.npar or #mflw do
    printf("%s%d: ", msg, i)
    mflw[i]:get0():print(str,1e-12,'line')
    if option.debug >= 3 then
      mflw[i]:get1():print(' "     ')
    end
  end
  option.format = fmt
end

local function trace_normal (R1, A1, of)
  local fmt = option.format
  option.format = "% 10.5f"
  R1:print('R1') ; A1:print('A1')
  if option.debug >= 3 then
    local R2, A2 = betablk(of)
    R2:print('R2') ; A2:print('A2')
  end
  option.format = fmt
end

-- twiss mtable ---------------------------------------------------------------o

local function fill_sum (mflw)
  local mtbl in mflw

  -- TODO: momentum compaction factor, gamma transition

  -- chromaticity
  if mflw.__twdat.chrm then
    local q1, q2, q3, dq1, dq2, dq3, chromdp in mtbl
    local n = floor(#q1/2)

    -- tag lost damaps
    for i=mflw.npar+1,mflw.tpar do
      local id, st = mflw[i].id, mflw[i].status
      if id > n then id = id-n end
      dq1[id], dq2[id], dq3[id] = st, st, st
    end

    -- other damaps
    for i=1,mflw.npar do
      local id = mflw[i].id
      if id > n then id = id-n end
      if not dq1[id] then
        dq1[id] = (q1[id+n] - q1[id])/chromdp
        dq2[id] = (q2[id+n] - q2[id])/chromdp
        dq3[id] = (q3[id+n] - q3[id])/chromdp
!        printf("id=%d, q1=%.12e, q1dp=%.12e, dq1=%.12e\n\z
!                .     q2=%.12e, q2dp=%.12e, dq2=%.12e\n",
!                id, q1[id], q1[id+n], dq1[id], q2[id], q2[id+n], dq2[id])
      end
    end

    -- cleaning
    for i=n+1,2*n do
      q1[i], q2[i], q3[i] = nil, nil, nil
    end
  end
end

local function fill (elm, mflw, lw, islc)
  if mflw.__twdat == nil then return end -- not yet in twiss

  local mtbl, npar, __twdat in mflw
  local orow, ofun, ocpl, onam, omat in __twdat
  local q1, q2, q3 in mtbl

!print("twfill-0", elm.name, #mtbl, npar, orow)
  for i=1,npar do
    local m = mflw[i]
    local id, of = m.id, ofun[m.id]
    assertf(is_damap(m), "unexpected particle %d (damap expected)", id)

    -- backup phases
    local mu1_, mu2_, mu3_ = of.mu1, of.mu2, of.mu3

    -- TO FIX: dispersion is wrong when extracted from A instead of R...
    optfun(m:get1(omat), of, ocpl)

    -- adjust the phases
    local  mu1,  mu2,  mu3 in of
    local dmu1, dmu2, dmu3 = mu1-mu1_, mu2-mu2_, mu3-mu3_

    if dmu1 < 0 then dmu1 = dmu1+1 end
    if dmu2 < 0 then dmu2 = dmu2+1 end
    if dmu3 < 0 then dmu3 = dmu3+1 end

    -- compute the tunes
    q1[id] = q1[id] + dmu1
    q2[id] = q2[id] + dmu2
    q3[id] = q3[id] + dmu3

    -- fill table (keep order !)
    if not mflw[i].nosave then
      orow = orow + 1
      for _,k in ipairs(onam) do mtbl[k][orow] = of[k] end
      mtbl.mu1[orow], mtbl.mu2[orow], mtbl.mu3[orow] = q1[id], q2[id], q3[id]
    end
  end

  __twdat.orow = orow
  return true
end

-- chrom option ---------------------------------------------------------------o

local function chrom_dps (self)
  local chrom, deltap = self.chrom, self.deltap or 0
  local cdp = is_boolean(chrom) and chromdp  or chrom
  local dps = is_number(deltap) and {deltap} or deltap
  assert(is_number  (cdp), "invalid chrom attribute (number expected)")
  assert(is_iterable(dps), "invalid deltap attribute (iterable expected)")

  -- double the list of deltap
  local ndp  = #dps
  local cdps = table.new(2*ndp,0)
  for i,v in ipairs(dps) do
    cdps[i], cdps[i+ndp] = v, v+cdp
  end

  -- update self
  self.deltap = cdps
end

-- closed orbit ---------------------------------------------------------------o

local function twiss_cofind (self, mflw0)
  local npar in mflw0
  local X0, Xi = table.new(npar,0), table.new(npar,0)

  -- get initial guess(es)
  local j = 1
  for i=1,npar do
    local m = mflw0[i]
    if m.status == 'Xset' then
      X0[j], Xi[j]  = m:get0():totable(), i
      X0[j].beam, j = m.beam, j+1
    end
  end

  -- nothing to process (no particles)
  if j == 1 then return end

  -- retrieve closed orbit(s)
  local _, mflw = cofind { exec=false } :copy_variables(self)
                         { X0=X0, deltap=0, save=false, nstep=-1, -- override
                           mapdef=self.comapdef, mapdump=self.comapdump }

  -- update damaps with their closed orbit (tw: i, co: j)
  for j=1,mflw.tpar do
    local m = mflw[j]
    mflw0[Xi[m.id]]:setvar(m:get0()).status = m.status
  end

  -- report
  if mflw.npar ~= mflw.tpar then
    warn("%d/%d particles are unstable/singular/lost after closed orbit search",
         mflw.tpar - mflw.npar, mflw.tpar)
    msort(mflw0)
  end
end

-- normal/closed forms --------------------------------------------------------o

local r4 = 1..4

local function twiss_closed (self, mflw) -- TODO: high order normal form
  local codptol, coupling in self
  local npar in mflw

  for i=1,npar do
    local X, R = mflw[i]:get0(), mflw[i]:get1()
    local rnk = has_dpt(R, codptol) and 6 or 4
    local R6

    -- 4D case
    if rnk == 4 then R6, R = R, R:getsub(r4,r4) end

    -- get linear normal form A from one-turn map R
    local A, V, W, info = normal(R)

    -- get initial linear optical functions and phase advances
    local of = phasadv(W, optfun(A, nil, coupling))

    -- clear phase advances
    of.mu1, of.mu2, of.mu3 = 0, 0, 0

    -- debug normal form
    if option.debug >= 2 then trace_normal(R, A, of) end

    -- back to 6D (TODO: check 5D...)
    if rnk == 4 then
      A = matrix(6):eye():setsub(r4,r4,A) -- TODO 5D :setsub(r4,6,R6)
    end

    -- X[i], A[i], ofun0[i] = Xi, Ai, ofi
    mflw[i]:setvar(X):set1(A)
    mflw.__twdat.ofun[i] = of
  end
end

-- extend track mflw and mtbl -------------------------------------------------o

local function twiss_init (self, mflw)
  local save, chrom, coupling in self
  local npar, mtbl in mflw

  -- add twiss data to mflw
  mflw.__twdat = {
    orow = 0,
    ofun = table.new(npar,0),
    ocpl = coupling,
    omat = matrix(6),
    onam = coupling and ofcname or ofname,
    chrm = chrom,
    npar = npar,
  }

  -- reset sequence iterator
  mflw:sireset()

  if not save then return end

  -- clear data from one-turn-maps calculation
  mtbl:clear()

  -- add twiss columns and type to mtbl
  mtbl.type = 'twiss'
  for _,k in ipairs(mflw.__twdat.onam) do mtbl:addcol(k,{}) end

  -- init tunes and chromaticities
  mtbl.q1, mtbl.dq1 = tblrep(0,npar), table.new(npar/2,0)
  mtbl.q2, mtbl.dq2 = tblrep(0,npar), table.new(npar/2,0)
  mtbl.q3, mtbl.dq3 = tblrep(0,npar), table.new(npar/2,0)
  mtbl.chromdp = chrom == true and chromdp or chrom or nil
end

-- twiss mflow ----------------------------------------------------------------o

local function make_mflow (self)
  local save, mapdef, chrom in self

  -- enforce damaps orders
  assert(mapdef, "invalid/missing mapdef (damap required)")
  if is_true(mapdef) then self.mapdef = {xy=2} end

  -- double the deltaps of self
  if save and chrom then chrom_dps(self) end

  -- wrap atsave (see track)
  local atsave = self:var_raw 'atsave' or ftrue -- prevent evaluation
  if save and atsave ~= ffalse then
    self.atsave = atsave == ftrue and fill or achain(fill, atsave)
  end

  -- prepare track template
  local _, mflw = track { exec=false } :copy_variables(self) { nstep=0 }
  if option.debug > 2 then mdump(mflw,'da.') end

  -- do not save extra rows due to chrom
  if save and chrom then
    local npar in mflw
    for i=npar/2+1,npar do mflw[i].nosave=true end
  end

  -- search for closed orbits, update mflw
  twiss_cofind(self, mflw)
  if mflw.npar == 0 then return mflw end
  if option.debug > 2 then mdump(mflw,'co.') end

  -- get one-turn-maps to user-defined orders
  track { mflow=mflw }
  if mflw.npar == 0 then return mflw end
  if option.debug > 2 then mdump(mflw,'tk.') end

  -- extend track mflw and mtbl for twiss
  twiss_init(self, mflw)

  -- get closed forms (normal forms)
  twiss_closed(self, mflw)
  if option.debug > 2 then mdump(mflw,'nf.') end

  return mflw
end

-- twiss command --------------------------------------------------------------o

local _id = {} -- identity (unique)

local function exec (self)
  local mflw

  -- retrieve or build mflw (and extend mtbl)
  if self.mflow then
    assert(self.mflow.__twss == _id, "invalid mflow (twiss mflow expected)")
    mflw = self.mflow
  else
    mflw = make_mflow(self) -- the real work is done here!
    mflw.__twss = _id
    if not mflw.__twdat then
      warn("twiss not completed (all damaps were unstable/singular/lost)")
      return mflw.mtbl, mflw
    end
  end

  -- track the normal form(s)
  local nstep, mapdump in self
  local mtbl, mflw, ei = track { mflow=mflw, nstep=nstep, mapdump=mapdump }

  -- finalise twiss calculation (tunes, chromas)
  if not ei and mtbl then fill_sum(mflw) end

  return mflw.mtbl, mflw, ei
end

-- attributes set to nil will use the default from track by inheritance

local twiss = command 'twiss' {
  beam=nil,          -- beam (required or sequence.beam)                  (trck)
  sequence=nil,      -- sequence (required)                               (trck)
  range=nil,         -- range of tracking                                 (trck)
  dir=nil,           -- s-direction of tracking (1 or -1)                 (trck)

  s0=nil,            -- initial s (offset)                                (trck)
  X0=nil,            -- initial X coordinates (or damap, or list of)      (trck)
  R0=nil,            -- initial R matrix (companion of X0 for damap)      (trck)
  beta0=nil,         -- initial beta0 block to build R0                   (trck)
  deltap=nil,        -- initial deltap(s)                                 (trck)

  mapdef=true,       -- always use damap formalism (true => {xy=2})       (trck)
  mapsave=nil,       -- save damap in the mtable                          (trck)
  mapdump=nil,       -- dump X and R after each element                   (trck)

  nturn=nil,         -- number of turns                                   (trck)
  nstep=nil,         -- number of elements to track for last phase        (trck)
  nslice=nil,        -- number of slices (or weights) for each element    (trck)
  method=nil,        -- method or order for integration (1 to 8)          (trck)
  model=nil,         -- model for integration ('DKD' or 'TKT')            (trck)
  implicit=nil,      -- slice implicit elements too                       (trck)
  fringe=nil,        -- activate fringe fields (0..7)                     (trck)
  radiate=nil,       -- radiate at slices (NYI)                           (trck)
  misalign=nil,      -- consider misalignment errors                      (trck)
  totalpath=nil,     -- 't' is the totalpath                              (trck)

  save=true,         -- create mtable and save results                    (mtbl)
  title=nil,         -- title of mtable (default seq.name)                (mtbl)
  observe=false,     -- save after all elements                           (mtbl)
  coupling=false,    -- save optical functions for non-diagonal modes     (mtbl)
  chrom=false,       -- compute chromaticity by finite difference         (twss)
  savesel=nil,       -- save selector (predicate)                         (mtbl)

  atentry=nil,       -- action called when entering an element  (ataper)  (trck)
  atslice=nil,       -- action called after each element slices (atsave)  (trck)
  atexit=nil,        -- action called when exiting an element   (atsave)  (trck)
  ataper=nil,        -- action called when checking for aperture          (trck)
  atsave=nil,        -- action called when saving in mtable               (trck)

  cotol=nil,         -- closed orbit tolerance                            (cofn)
  coiter=nil,        -- maximum number of iteration                       (cofn)
  codiff=nil,        -- finite differences step for jacobian              (cofn)
  codptol=nil,       -- 4D vs 6D dpt tolerance                            (cofn)
  comethod=nil,      -- default optimizer                                 (cofn)
  comapdef=nil,      -- mapdef for cofind                                 (cofn)
  comapdump=nil,     -- dump X and R after each element                   (cofn)
  cowarn=nil,        -- commute errors into warnings                      (cofn)
  X1=nil,            -- optional final coordinates translation            (cofn)

  usrdef=nil,        -- user defined data attached to the mflow           (trck)

  mflow=nil,         -- mflow, exclusive with other attributes except nstep
  exec=exec,         -- command to execute upon children creation

  __attr = tblcat(   -- list of all setup attributes
    {'coupling', 'chrom', 'comapdef', 'comapdump'},
    cofind.__attr,
    {noeval=cofind.__attr.noeval}
  )
} :set_readonly() -- reference twiss command is readonly

-- end ------------------------------------------------------------------------o
return { twiss = twiss }
