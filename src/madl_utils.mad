--[=[
 o-----------------------------------------------------------------------------o
 |
 | Utils module
 |
 | Methodical Accelerator Design - Copyright CERN 2015
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a set of utility functions

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  utils -- provides some utility functions

SYNOPSIS
  is_nil(a)
  is_boolean(a)
  is_number(a)
  is_string(a)
  is_function(a)
  is_table(a)

  is_integer(a)
  is_rawtable(a)

  is_iterable(a)
  is_indexable(a)
  is_callable(a)
  is_comparable(a)
  is_ordered(a)

DESCRIPTION
  The utils module provides useful utility functions:
  - is_nil, is_boolean, is_number, is_string, is_function and is_table return
    true is the argument is of the expected type,
  - is_integer returns true if the argument is an integer number within the
    interval of [-2^52, 2^52],
  - is_rawtable returns true if the argument is a table without a metatable set,
  - is_iterable, is_indexable, is_callable, is_comparable and is_ordered return
    true if the argument fulfills the concept requirements.

RETURN VALUE
  A table constaining these utility functions.

ERROR
  None.

SEE ALSO
  None.
]=]

-- hook the help for all functions
M.__help.is_nil        = M.__help.self
M.__help.is_boolean    = M.__help.self
M.__help.is_number     = M.__help.self
M.__help.is_string     = M.__help.self
M.__help.is_function   = M.__help.self
M.__help.is_table      = M.__help.self
M.__help.is_integer    = M.__help.self
M.__help.is_rawtable   = M.__help.self
M.__help.is_iterable   = M.__help.self
M.__help.is_indexable  = M.__help.self
M.__help.is_callable   = M.__help.self
M.__help.is_comparable = M.__help.self
M.__help.is_ordered    = M.__help.self

-- implementation -------------------------------------------------------------o

-- types

M.is_nil = function (a)
  return type(a) == 'nil'
end

M.is_boolean = function (a)
  return type(a) == 'boolean'
end

M.is_number = function (a)
  return type(a) == 'number'
end

M.is_string = function (a)
  return type(a) == 'string'
end

M.is_function = function (a)
  return type(a) == 'function'
end

M.is_table = function (a)
  return type(a) == 'table'
end

-- specializations

M.is_integer = function (a)
  return type(a) == 'number'
         and a >= -2^52 and a <= 2^52 and (a % 1) == 0
end

M.is_rawtable = function (a)
  return type(a) == 'table' and getmetatable(a) == nil
end

-- concepts

M.is_iterable = function (a)
  local mt = getmetatable(a)
  return type(a) == 'table' or mt and (mt.__pairs or mt.__ipairs) and true
end

M.is_indexable = function (a)
  local mt = getmetatable(a)
  return type(a) == 'table' or mt and (mt.__index or mt.__newindex) and true
end

M.is_callable = function (a)
  local mt = getmetatable(a)
  return type(a) == 'function' or mt and mt.__call and true
end

M.is_comparable = function (a)
  local mt = getmetatable(a)
  return type(a) == 'number' or type(a) == 'string' or mt and mt.__eq and true
end

M.is_ordered = function (a)
  local mt = getmetatable(a)
  return type(a) == 'number' or type(a) == 'string' or
         mt and (mt.__lt or mt.__le) and true
end

-- end ------------------------------------------------------------------------o
return M
