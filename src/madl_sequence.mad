--[=[
 o-----------------------------------------------------------------------------o
 |
 | Sequence module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide sequence object to define lattices

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- module ---------------------------------------------------------------------o

local __help = {}
__help.sequence = [=[
NAME
  sequence -- build sequences

SYNOPSIS
  seq = sequence 'name' { attribute-list, element-list... }

DESCRIPTION
  TODO

RETURN VALUE

EXAMPLE
  see LHC sequences

SEE ALSO
  element.
]=]

__help["sequence: seqedit"] = [=[
Sequence edition:
-----------------
  seqedit:    n/a
  flatten:    n/a
  cycle:      n/a
  endedit:    n/a

  seq:insert  { elem1, elem2, ..., deep=true }
  seq:remove  { name1, name2, ..., range=range|'selected' }
  seq:move    { name1, name2, ..., range=range|'selected', by=ds }
  seq:replace { name1=elem1, name2=elem2, ... }
  seq:extract { range=range|'selected' }    (return a table, not a sequence)

  seq:reflect()
  seq:save()
  seq:dump()

  remove from s1 to s2:
  - select elements with s1 <= s_pos <= s2
  - remove selected
]=]

__help["sequence: indexes and ranges"] = [=[
Indexes:
--------
  return the index in the sequence or nil
  - index (number)
    + number <0 means starts from end (i.e. #seq-idx+1)
  - name (string)
    + name                (absolute, unique or error)
    + name[count]         (absolute, with occurences count)
    + name{count} & index (relative, with occurences count starting from index)
    + #s or #S (index=1), #e or #E (index=-1)
  - element (object)
    + element & count

Ranges:
-------
  return the pair of indexes in the sequence or nil
  - index                 (single, equivalent to {index,index})
  - {start,stop}
  - "start/stop"
  - support for start > stop
]=]

-- locals ---------------------------------------------------------------------o

local abs, min                  in math
local vector, tostring          in MAD
local is_iterable, is_callable  in MAD.concept
local Element                   in MAD.element
local minlen                    in MAD.constant
local is_nil, is_number, is_string, is_table, is_rawtable, is_range, is_element
                                in MAD.typeid

-- definitions ----------------------------------------------------------------o

-- hidden keys: elements indexes, elements positions, elements entry positions.
local _eidx, _epos, _spos = {}, {}, {}
local _lastfrom, _lastfrompos = {}, {} -- temporaries
local _capacity = {}

-- special numerical value for elements positions.
local uninitialized = -1e9
local ongoing_init  = -2e9
local maximum_dist  =  2e9 -- to find the closest

 -- forward declarations
local elem_pos

-- default sequence
local sequence = Element 'sequence' {
  kind='sequence', is_sequence=true, direction=1, refer='centre', l=0,
}

-- dictionnary ----------------------------------------------------------------o

-- write protection
local _dct = {}
local dct_mt = {
  __len      =\s   -> rawlen(d[_dct]),
  __pairs    =\s   ->  pairs(s[_dct]),
  __ipairs   =\s   -> ipairs(s[_dct]),
  __index    =\s,i -> rawget(s[_dct],i),
  __newindex =\    ->  error("forbidden write access to counts", 2),
}

-- check uniqueness
local function is_many (a)
  return is_table(a) and not is_nil(rawget(a,_dct))
end

-- add { key=nil|val|{val1,...} }
local function add_to (to, a)
  if is_nil(to) then
    return a                                      -- none -> element
  elseif is_many(to) then
    table.insert(to[_dct], a) ; return to         -- many -> append
  else
    return setmetatable({[_dct]={to, a}}, dct_mt) -- one  -> dict
  end
end

local function repl_by (to, a, b)
  if is_nil(to) or to == a then
    return b                                      -- none or one
  elseif is_many(to) then
    local dct = to[_dct]
    for i=1,#dct do
      if dct[i] == a then
        rawset(dct, i, b) ; return to             -- many -> replace
      end
    end
  end
  error("invalid replacement (element not found)", 2)
end

-- index list -----------------------------------------------------------------o

local function add_idx (to, i)
  if is_nil(to) then
    return i                                      -- none -> element
  elseif is_number(to) then
    return {to, i}                                -- one  -> table
  else
    table.insert(to, i) ; return to               -- many -> append
  end
end

local function repl_idx (to, i1, i2)
  if is_nil(to) or i1 == i2 then
    return i2                                     -- none or one
  elseif is_rawtable(to) then
    for i=1,#to do
      if to[i] == i1 then
        rawset(to, i, i2) ; return to             -- many -> replace
      end
    end
  end
  error("invalid replacement (index not found)", 2)
end

-- helpers --------------------------------------------------------------------o

local function seq_error (msg, seq, idx, elm)
  local ename = elm and elm.name or seq[idx] and seq[idx].name
  error(msg .. " in sequence '"  .. (seq.name or '?')
            .. "' for element '" .. (ename    or '?')
            .. "' at index "     .. (idx      or '?'), 2)
end

-- get closest s_pos index (linear), exported
local function sindex_of (seq, s, idx_)
  local len, start, stop, step = #seq, idx_ or 1
  assert(is_number(s    ), "invalid argument #2 (number expected)")
  assert(is_number(start), "invalid argument #3 (index expected)")
  if start > 0
  then stop, step = len, 1
  else stop, step, start = 1, -1, min(-start, len)
  end
  local smin, s_pos = maximum_dist, seq[_spos]
  for i=start,stop,step do  -- linear search
    local d = abs(s_pos[i]-s)
    if d > smin then return i-1 end
    smin = d
  end
  return nil
end

-- get closest element index (linear)
local function efind_idx (seq, elm, idx_, cnt_)
  if is_nil(elm) then return nil end
  local len, start, stop, step = #seq, idx_ or 1
  assert(is_number(start), "invalid argument #3 (index expected)")
  if start > 0
  then stop, step = len, 1
  else stop, step, start = 1, -1, min(-start, len)
  end
  local cnt = cnt_ or 1
  assert(is_number(cnt), "invalid argument #4 (count expected)")
  for i=start,stop,step do  -- linear search
    if seq[i] == elm then
      if cnt == 1 then return i end
      cnt = cnt - 1
    end
  end
  return nil
end

-- get element index (direct)
local function index_of_elm (seq, elm, cnt_)
  local idx = seq[_eidx][elm]
  if is_rawtable(idx) then
    assert(is_number(cnt_), "invalid argument #3 (count expected)")
    return idx[cnt_]
  end
  return idx
end

-- get index from signed index
local function index_of_num (seq, n)
  local len = #seq
  if n < 0 then n = len+n+1 end -- reflect
  if n < 1 or n > len then return nil end
  return n
end

-- get index from string
local function index_of_str (seq, s, idx_)
  local i, j, name, del = string.find(s, "([^[{/]+)([[{]?)")
  assert(name ~= nil and i == 1, "invalid argument #2 (name expected)")
  local elm, cnt, rel = seq[name]                            -- get element
  if is_nil(elm)    then return nil                          -- not found
  elseif del == ''  then return index_of_elm(seq, elm)       -- index of "name"
  elseif del == '[' then i, j, cnt = string.find(s, "[(%d+)]", j) -- get count
  else                   i, j, cnt = string.find(s, "{(%d+)}", j) ; rel = true
  end
  cnt = assert(tonumber(cnt), "invalid argument #3 (count expected)")
  if not rel
  then return index_of_elm(seq, elm,       cnt) -- index of "name[n]"
  else return efind_idx   (seq, elm, idx_, cnt) -- index of "name{n}"
  end
end

-- get index from signed index, strings or element, exported
local function index_of (seq, a, n_)
      if is_number (a) then return index_of_num(seq, a)
  elseif is_string (a) then return index_of_str(seq, a, n_)
  elseif is_element(a) then return index_of_elm(seq, a, n_)
  end
  error("invalid argument #2 (index, string or element expected)")
end

-- get 'from' element position, memoize result if count is not relative
local function from_epos (seq, from, idx)
  if seq[_lastfrom] ~= from then             -- memoized?
    local idx, name
    if is_string(from) then
      idx, name = index_of_str(seq, from, idx), from
    elseif is_element(from) then
      idx, name = index_of_elm(seq, from), from.name
    end
    if is_nil(idx) then                      -- not found
      seq_error("invalid from of '" .. name .. "'", seq, idx)
    end
    seq[_lastfrompos] = elem_pos(seq, idx)
    if string.sub(from, -1) ~= '}'
    then seq[_lastfrom] = from               -- not relative: memoize
    else seq[_lastfrom] = nil                -- relative: do not memoize
    end
  end
  return seq[_lastfrompos]
end

-- get 'from' position
local function from_pos (seq, elm, idx)
  local pos  = elm.at or 0
  local from = elm.from or elm.at and 'start' or 'prev'
  local fidx = elm.is_sequence ~= true and idx+1 or idx+#elm -- forward index

      if from == 'start' then return pos
  elseif from == 'end'   then return seq.l - pos
  elseif from == 'prev'  then return pos + (idx  > 1    and elem_pos(seq,idx-1)+seq[idx-1].l or 0)
  elseif from == 'next'  then return pos + (fidx < #seq and elem_pos(seq,fidx) or seq.l)
  else                        return pos + from_epos(seq, from, idx)
  end
end

-- refpos (sequence)
local function sequ_rpos (seq)
  local rpos, idx, name = seq.refpos
      if is_nil    (rpos) then return 0
  elseif is_string (rpos) then
    idx, name = index_of_str(seq, rpos), from
  elseif is_element(rpos) then
    idx, name = index_of_elm(seq, rpos), rpos.name
  end
  if is_nil(idx) then                      -- not found
    seq_error("invalid from of '" .. name .. "'", seq, idx)
  end
  return seq[_epos][idx]
end

-- get 'refer' relative position
local function refer_pos (seq, elm, idx)
  local refer
  if elm.is_sequence ~= true
  then   refer = elm.refer or seq.refer
  else   refer = elm.refpos and 'refpos' or seq.refer
  end
      if refer == 'entry'  then return 0
  elseif refer == 'centre' then return elm.l/2
  elseif refer == 'exit'   then return elm.l
  elseif refer == 'refpos' then return sequ_rpos(elm)
  end
  seq_error("invalid refer to '" .. tostring(refer) .. "'", seq, idx, elm)
end

-- build helper ---------------------------------------------------------------o

-- compute s positions of sequence elements
function elem_pos (seq, idx, elm_)
  local epos = seq[_epos][idx]
      if epos >= 0 then return epos
  elseif epos == ongoing_init then
    seq_error("cycling dependencies detected", seq, idx, elm_)
  elseif epos ~= uninitialized then
    seq_error("corrupted s-position detected", seq, idx, elm_)
  end
  seq[_epos][idx] = ongoing_init

  local elm  = elm_ or seq[idx]
  local pos  = from_pos (seq, elm, idx)
  local rpos = refer_pos(seq, elm, idx)

  if is_nil(elm_) then
    seq[_epos][idx] = pos
    seq[_spos][idx] = pos - rpos
  end
  return pos, rpos
end

-- compute s positions of sub sequence elements
local function sequ_pos (seq, sseq, idx)
  local pos, rpos = elem_pos(seq, idx, sseq)
  pos = pos - rpos  -- shift by subsequence refpos
  for i=1,#sseq do
    seq[_epos][i+idx-1] = sseq[_epos][i] + pos
    seq[_spos][i+idx-1] = sseq[_spos][i] + pos
    assert(seq[i+idx-1] == sseq[i], "unexpected corrupted flat sequence")
  end
  return pos
end

-- copy sub sequence
local function copy_sequ (seq, flat, sref, k)
  local len = #seq
  for i=1,len do flat[k-1+i] = seq[i] end
  sref[k] = seq -- keep a link of the subsequence
  return k+len
end

-- flatten lines and subsequence
local function flatten_line (line, flat, sref, k, rev)
  local len, n = #line, (line.__rep or 1) * rev
  if len == 0 then
    seq_error("invalid empty line detected", line, k)
  end

  local start, stop, step
  if n < 0
  then n, start, stop, step = -n, len,   1, -1
  else n, start, stop, step =  n, 1  , len,  1
  end

  for i=1,n do
  for j=start,stop,step do
    local elm = line[j]
    if not (is_element(elm) or is_rawtable(elm)) then
      seq_error("invalid element detected", line, j)
    elseif elm.is_bline == true or is_rawtable(elm) then
      k = flatten_line(elm, flat, sref, k, step)
    elseif elm.is_sequence == true then
      k = copy_sequ   (elm, flat, sref, k)
    else -- other elements
      k, flat[k] = k+1, elm
    end
  end end
  return k
end

-- flatten sequence
local function flatten_sequ (seq, flat, sref)
  local k, n = 1, seq:rawlen()
  for i=1,n do
    local elm = seq[i]
    if not (is_element(elm) or is_rawtable(elm)) then
      seq_error("invalid element detected", seq, i)
    elseif elm.is_bline == true or is_rawtable(elm) then
      k = flatten_line(elm, flat, sref, k, 1)
    elseif elm.is_sequence == true then
      k = copy_sequ   (elm, flat, sref, k)
    else -- other elements
      k, flat[k] = k+1, elm
    end
  end
  assert(n <= k-1, "unexpected corrupted flat sequence")
end

-- build sequence and dictionnaries
local function build_sequ (seq, flat)
  local eidx = {}
  for idx,elm in ipairs(flat) do
    local name = elm.name
    seq[idx ] = elm                       -- array part
    seq[name] = add_to (seq[name], elm)   -- dict name->elem
    eidx[elm] = add_idx(eidx[elm], idx)   -- dict elem->index
  end
  seq[_eidx] = eidx
  assert(seq:rawlen() == #flat, "unexpected corrupted flat sequence")
end

-- compute elements positions
local function build_pos_err(typ, seq, idx, pos)
  seq_error(string.format(
    "invalid %s position at s = %.6gm (negative drift %.6gm)",
    typ, seq[_spos][idx], seq[_spos][idx]-pos), seq, idx)
end

local function build_pos (seq, sref)
  local idx, len, pos = 1, seq:rawlen(), 0
  seq[_epos] = vector(len):ones(uninitialized)
  seq[_spos] = vector(len)
  while idx <= len do
    local sseq = sref[idx]
    if is_nil(sseq) then     -- element
      elem_pos(seq, idx)
      if pos-minlen > seq[_spos][idx] then
        build_pos_err('element', seq, idx, pos)
      end
      pos = seq[_spos][idx] + seq[idx].l
      idx = idx + 1
    else                     -- subsequence
      sequ_pos(seq, sseq, idx)
      if pos-minlen > seq[_spos][idx] then
        build_pos_err('subsequence', seq, idx, pos)
      end
      pos = seq[_spos][idx] - sseq[_spos][1] + sseq.l
      idx = idx + #sseq
    end
  end
  assert(len == idx-1, "unexpected corrupted flat sequence")
end

local function finish_sequ (seq)
  local n = seq:rawlen()

  -- aliases for 1st and last element
  seq['#s'], seq['#S'] = seq[1], seq[1]
  seq['#e'], seq['#E'] = seq[n], seq[n]

  -- adjust length
  local len = seq[_spos][n] + seq[n].l
  if seq.l < len then seq.l = len end

  -- save capacity
  seq[_capacity] = n

  -- clear memoization
  seq[_lastfrom], seq[_lastfrompos] = nil, nil
end

-- metamethods ----------------------------------------------------------------o

-- sequence init (build)
function sequence_init (seq)
  local len = #seq
  assert(len > 0, "invalid argument #1 (non-empty sequence expected)")
  if seq:rawlen() == 0 then return seq end -- inheritance (already built)

  local flat, sref = table.new(len,0), {}
  flatten_sequ (seq, flat, sref)
  build_sequ   (seq, flat)
  build_pos    (seq, sref)
  finish_sequ  (seq)
  return seq:set_readonly()
end

sequence:set_metamethod {
  __init = sequence_init,
}

-- methods --------------------------------------------------------------------o

local function range_index (seq, rng)
  local start, stop
  if is_string(rng) then
    local s1, s2 = string.match(rng, "([^/]+)/?(.*)")
    start, stop = tonumber(s1) or s1, tonumber(s2) or s2
  elseif is_range(rng) then
    assert(not rng:is_empty(), "invalid empty range")
    start, stop = rng:ranges()
  else
    start = is_rawtable(rng) and rng[1] or rng or 1
    stop  = is_rawtable(rng) and rng[2] or rng or #seq
  end
  start = assert(index_of(seq, start), "invalid range start")
  stop  = assert(index_of(seq, stop ), "invalid range stop" )
  if start <= stop
  then return start, stop, nil
  else return start, #seq, stop
  end
end

local function pos_of (seq, elm, start_)
  return seq[_epos][index_of(seq, elm, start_)]
end

local function spos_of (seq, elm, start_)
  return seq[_spos][index_of(seq, elm, start_)]
end

local function foreach (seq, f, rng_)
  assert(is_callable(f), "invalid argument #2 (callable expected)")
  local start, stop, stop2 = range_index(seq, rng_)
  repeat
    for i=start,stop do f(seq[i],i) end
    start, stop, stop2 = 1, stop2, nil
  until is_nil(stop)
  return seq
end

local function filter (seq, p, rng_)
  assert(is_callable(p), "invalid argument #2 (callable expected)")
  local r, start, stop, stop2 = {}, range_index(seq, rng_)
  repeat
    for i=start,stop do
      if p(seq[i],i) == true then r[#r+1] = seq[i] end
    end
    start, stop, stop2 = 1, stop2, nil
  until is_nil(stop)
  return r
end

local function select (seq, p, rng_)
  assert(is_callable(p), "invalid argument #2 (callable expected)")
  local start, stop, stop2 = range_index(seq, rng_)
  repeat
    for i=start,stop do
      local elm = seq[i]
      local flag = p(elm,i)
          if flag == true  then elm:  select()
      elseif flag == false then elm:deselect() end
    end
    start, stop, stop2 = 1, stop2, nil
  until is_nil(stop)
  return seq
end

-- Note: functions below need to update dicts...

local function unique (seq)
  seq:set_readonly(false)
  local eidx, lst = seq[_eidx], {}
  for _,idx in pairs(eidx) do       -- search duplicates
    if is_rawtable(idx) then lst[#lst+1] = idx end
  end
  table.clear(eidx)
  for _,idx in ipairs(lst) do       -- foreach duplicate
    local elm = seq[idx[1]]         -- retrieve element
    local name = elm.name
    for _,i in ipairs(idx) do       -- foreach index (occurence)
      assert(seq[i] == elm, "unexpected corrupted dictionnary")
      local c   = elm {}            -- clone (child)
      seq[i]    = c
      seq[name] = repl_by(seq[name], elm, c)
      eidx[c]   = i                 -- set new unique index
    end
  end
  seq:set_readonly()
  return seq
end

local function tie (seq1, seq2) -- e.g. lhcb1:tie(lhcb2)
  assert(is_element(seq2) and seq2.is_sequence == true, "invalid argument #2 (sequence expected)")
  seq1:set_readonly(false) seq2:set_readonly(false)
  local eidx1, eidx2 = seq1[_eidx], seq2[_eidx]
  for i1=1,#seq1 do
    local name = seq1[i1].name  -- tie by name
    local e2 = seq2[name]
    if not is_nil(e2) then      -- name found in seq2
      local e1 = seq1[name]
      local i2 = index_of_elm(seq2, e2)
      assert(is_number(eidx1[e1]) and is_element(e1), "invalid shared element (must be unique)")
      assert(is_number(eidx2[e2]) and is_element(e2), "invalid shared element (must be unique)")
      assert(seq1[i1] == e1, "unexpected corrupted dictionnary")
      assert(seq2[i2] == e2, "unexpected corrupted dictionnary")
      --  make Y inheritance using e1 as reference and discard e2
      local c1 = e1 { at=e1:rawget'at', from=e1:rawget'from', from=e1:rawget'refpos' }
      local c2 = e1 { at=e2:rawget'at', from=e2:rawget'from', from=e2:rawget'refpos' }
      -- update name->elm dict
      seq1[name], seq1[i1] = c1, c1
      seq2[name], seq2[i2] = c2, c2
      -- update elm->index dict
      eidx1[c1], eidx1[e1] = i1, nil
      eidx2[c2], eidx2[e2] = i2, nil
    end
  end
  seq1:set_readonly() seq2:set_readonly()
  return seq1
end

-- env ------------------------------------------------------------------------o

MAD.element.sequence = sequence

-- members --------------------------------------------------------------------o

local ffalse =\ false

sequence :set_function {
  s_pos        = \s,i -> s[_spos][i],
  e_pos        = \s,i -> s[_epos][i],
  pos_of       = pos_of,
  spos_of      = spos_of,
  index_of     = index_of,
  sindex_of    = sindex_of,
  range_index  = range_index,
  foreach      = foreach,
  filter       = filter,
  select       = select,
  deselect     = \s,r -> s:select(ffalse, r),
  is_selected := error("invalid sequence operation", 2),
--  identifier   = identifier,
  unique       = unique,
  tie          = tie,

} :set_readonly()

-- end -------------------------------------------------------------------------
return {
  sequence = sequence,
  __help   = __help,
}

--[=[
--------------------------------------------------------------------------------
-- TODO ------------------------------------------------------------------------
--------------------------------------------------------------------------------

--[[
local function show_fields(t, lst)
  local a, k, s
  lst = lst or sequence_fields
  for _,v in ipairs(lst) do
    if is_list(v) then k, s = v[1], v[2] else k, s = v, v end
    a = t[k]
    if a then io.write(', ', s, '= ', tostring(a)) end
  end
end

function M:show(disp)
  io.write("sequence '", self.name,"' { ")
  show_list(self, disp)
  io.write(' }\n')
  for _,v in ipairs(self) do v:show(disp) end
  io.write('endsequence\n')
end

function M:show_madx(disp)
  io.write("'", self.name, "': sequence, ")
  show_list(self, disp)
  io.write(';\n')
  for _,v in ipairs(self) do v:show_madx(disp) end
  io.write('endsequence;\n')
end

local function identifier (seq, cvt_)
  local cvt = cvt_ or \s -> string.gsub(string.lower(s), '[^%l%d_]', '_')
  for i=1,#seq do
    local name = seq[i].name
    local knam = cvt(name)
    if name ~= knam then seq[knam] = seq[name] end
  end
  return seq
end
]]

--[[ SEQUENCE DISPLAY
local function show_fields(t, lst)
  local a, k, s
  lst = lst or sequence_fields
  for _,v in ipairs(lst) do
    if is_list(v) then k, s = v[1], v[2] else k, s = v, v end
    a = t[k]
    if a then io.write(', ', s, '= ', tostring(a)) end
  end
end

function M:show(disp)
  io.write("sequence '", self.name,"' { ")
  show_list(self, disp)
  io.write(' }\n')
  for _,v in ipairs(self) do v:show(disp) end
  io.write('endsequence\n')
end

function M:show_madx(disp)
  io.write("'", self.name, "': sequence, ")
  show_list(self, disp)
  io.write(';\n')
  for _,v in ipairs(self) do v:show_madx(disp) end
  io.write('endsequence;\n')
end
]]

-- edition -- TODO: check s_pos and length
local function insert_element(self, elm, before)
  test_membership(self, before)
  local i = before.i_pos
  table.insert(self, i, elm)
  update_index(self, i)
  insert_element_key(self, elm)
end

local function remove_element(self, elm)
  test_membership(self, elm)
  local i = elm.i_pos
  remove_element_key(self, elm)
  table.remove(self, i)
  update_index(self, i)
end

local function replace_element(self, old_elem, new_elem)
  test_membership(self, old_elem)
  local i = old_elem.i_pos
  self[i] = new_elem
  new_elem.i_pos = i
  remove_element_key(self, elm)
  insert_element_key(self, elm)
end

local function swap_elements(self, elem1, elem2, update_key)
  test_membership(self, elem1)
  test_membership(self, elem2)
  local i1, i2 = elem1.i_pos, elem2.i_pos
  self[i1], self[i2] = elem2, elem1
  elem1.i_pos, elem2.i_pos = i2, i1
  if update_key then
    remove_element_key(self, elem1)
    remove_element_key(self, elem2)
    insert_element_key(self, elem1)
    insert_element_key(self, elem2)
  end
end
--]=]
