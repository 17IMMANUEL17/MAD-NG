--[=[
 o-----------------------------------------------------------------------------o
 |
 | Sequence module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide sequence object to define lattices

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- module ---------------------------------------------------------------------o

local __help = {}
__help.sequence = [=[
NAME
  sequence -- build sequences

SYNOPSIS
  seq = sequence 'name' { attribute-list, element-list... }

DESCRIPTION
  TODO

RETURN VALUE

EXAMPLE
  see LHC sequences

SEE ALSO
  element.
]=]

__help["sequence: seqedit"] = [=[
Sequence edition:
-----------------
  seqedit:    n/a
  flatten:    n/a
  replace:    n/a
  endedit:    n/a

  seq:extract { range=range, selected=bool, pattern=string }    (return a table)
  seq:move    { index1, ..., range=range, selected=bool, pattern=string, by=ds }
  seq:remove  { index1, ..., range=range, selected=bool, pattern=string }
  seq:insert  { elem1, elem2, ... }

  seq:reflect() -- to be defined
  seq:save()    -- to be defined
  seq:dump()    -- to be defined
]=]

__help["sequence: indexes, ranges and iterators"] = [=[
Indexes:
--------
  return the index in the sequence or nil
  - number (array index)
    + number, <0 means starts from end (i.e. #seq-idx+1)
  - string
    + name                (absolute, unique or error)
    + name[count]         (absolute, with occurences count)
    + name{count} & index (relative, with occurences count starting from index)
    + $start or #s or #S (index=1), $end or #e or #E (index=-1)
  - element (object)
    + element             (absolute, unique or error)
    + element & count     (absolute, with occurences count)

Ranges:
-------
  return the pair of indexes in the sequence or nil
  - index                 (single, equivalent to {index,index})
  - xrange
  - {start_index,stop_index}
  - "start_index/stop_index"
  - support for start > stop or missing stop (i.e. stop = start)

Iterators:
----------
  seq:iter([range], [nturn])
  - iterate through the sequence.
  - if range is not specified, it is equivalent to {1,-1}.
  - if nturn is not specified, it is set to zero.
]=]

-- locals ---------------------------------------------------------------------o

local abs, min                                                  in math
--local vector                                                    in MAD
local ftrue                                                     in MAD.gfunc
local bool, sub                                                 in MAD.operator
local is_iterable, is_callable                                  in MAD.concept
local extra_element, marker                                     in MAD.element
local minlen                                                    in MAD.constant
local is_nil, is_number, is_positive, is_string, is_table,
      is_rawtable, is_range, is_element                         in MAD.typeid

-- root object ----------------------------------------------------------------o

local _seq = {}

local sequence = extra_element 'sequence' { kind='sequence', [_seq]=true }

local function is_sequence(a)
  return is_table(a) and not is_nil(a[_seq])
end

sequence:set { direction=1, refer='centre', l=0 }

-- definitions ----------------------------------------------------------------o

-- hidden keys: elements indexes, positions and entry positions.
local _eidx, _epos, _spos = {}, {}, {}
local _lastfrom, _lastfrompos = {}, {} -- temporaries
local _vecmaxlen = {}

-- special numerical value for elements positions.
local uninitialized = -1e9
local ongoing_init  = -2e9
local maximum_dist  =  2e9 -- to find the closest

 -- forward declarations
local elem_pos

-- start and end markers
local mkstart = marker '$start' { at=0 } : set_readonly()
local mkend   = marker '$end'   {      } : set_readonly()

-- check sequence $start and $stop integrity
local function check_sequ (seq)
  local n = #seq
      if seq[1].__id ~= mkstart.__id or seq[1].is_marker ~= true then
    error("invalid sequence first element ($start expected)", 2)
  elseif seq[n].__id ~= mkend.  __id or seq[n].is_marker ~= true then
    error("invalid sequence last element ($end expected)", 2)
  end
end

-- check if sequence is the orignal one.
local function is_orig_sequence(seq)
  return is_sequence(seq) and seq:rawlen() == #seq
end

-- debug ----------------------------------------------------------------------o

--[[
local function dumpseq (seq)
  local fmt = MAD.option.format
  MAD.option.format = "%.5g"
  print()
  print('sequence:', seq.name, 'l=', seq.l)
  print('i', 'name', 'L', 'S (s)', 'S (e)')
  seq:foreach \e,i => print(i, e.name, e.l, seq:spos(i), seq:epos(i)) end
  MAD.option.format = fmt
end
]]

local function seq_error (msg, seq, idx, elm)
  local nam = elm and elm.name or seq[idx] and seq[idx].name
  error(msg .. " in sequence '"  .. (seq.name or '?')
            .. "' for element '" .. (nam      or '?')
            .. "' at index "     .. (idx      or '?'), 2)
end

-- dictionnary ----------------------------------------------------------------o

local _dct = {}
local dct_mt = {
  __len       =\s   -> rawlen(s[_dct]),
  __pairs     =\s   ->  pairs(s[_dct]),
  __ipairs    =\s   -> ipairs(s[_dct]),
  __index     =\s,i -> rawget(s[_dct], i),
  __newindex := error("forbidden write access to counts", 2),
}

local function add1_to (seq, idx, elm)
  local ei, nam = seq[_eidx], elm.name
  seq[idx] = elm                    -- set in sequence
  if is_nil(ei[nam]) then           -- none -> elem, index
    seq[nam], ei[nam] = elm, idx
  elseif is_number(ei[nam]) then    -- one  -> create array
    seq[nam] = setmetatable({[_dct]={seq[nam], elm}}, dct_mt)
    ei [nam] =                      { ei[nam], idx}
  else                              -- many -> append
    table.insert(seq[nam][_dct], elm)
    table.insert(ei [nam]      , idx)
  end
end

local function addi_to (seq, idx, elm)
  local ei, nam = seq[_eidx], elm.name
  if is_nil(ei[nam]) then           -- none -> elem, index
    ei[nam] = idx
  elseif is_number(ei[nam]) then    -- one  -> create array
    ei[nam] = { ei[nam], idx}
  else                              -- many -> append
    table.insert(ei[nam], idx)
  end
end

local function repl_by (seq, idx, elm)
  local ei, nam = seq[_eidx][elm.name], elm.name
  seq[idx] = elm                    -- set in sequence
  if ei == idx then                 -- one  -> replace
    seq[nam] = elm ; return
  end
  for i=1,#ei do                    -- many -> search & replace
    if ei[i] == idx then
      seq[nam][_dct][i] = elm ; return
    end
  end
  error("unexpected corrupted dictionnary")
end

local function rem_it (seq, idx, elm)
  local ei, nam = seq[_eidx], elm.name
  assert(seq:remove_array(idx) == elm, "unexpected corrupted sequence")
  if ei[nam] == idx then            -- one  -> replace
    assert(seq[nam] == elm, "unexpected corrupted dictionnary")
    seq[nam], ei[nam] = nil, nil ; return
  end
  for i=1,#ei[nam] do               -- many -> search & replace
    if ei[nam][i] == idx then
      assert(seq[nam][i] == elm, "unexpected corrupted dictionnary")
      if #ei[nam] == 2 then
        seq[nam], ei[nam] = elm, idx
      else
        table.remove(ei[ nam]      , i)
        table.remove(seq[nam][_dct], i)
      end
      return
    end
  end
  error("unexpected corrupted dictionnary")
end

local function ins_it (seq, idx, elm)
  local ei, nam = seq[_eidx], elm.name
  seq:insert_array(idx, elm)
  if is_nil(ei[nam]) then                             -- none -> elem, index
    seq[nam], ei[nam] = elm, idx
  elseif is_number(ei[nam]) and ei[nam] < idx then    -- one  -> create array
    seq[nam] = setmetatable({[_dct]={seq[nam], elm}}, dct_mt)
    ei [nam] =                      { ei[nam], idx}
  elseif is_number(ei[nam]) and ei[nam] > idx then    -- one  -> create array
    seq[nam] = setmetatable({[_dct]={elm, seq[nam]}}, dct_mt)
    ei [nam] =                      {idx,  ei[nam]}
  else
    for i=1,#ei[nam] do                               -- many -> search & insert
      if ei[nam][i] == idx then
        table.insert(ei[ nam]      , i, idx)
        table.insert(seq[nam][_dct], i, elm)
        return
      end
    end
  end
end

local function indx_of (seq, elm)
  local er, nam = seq[elm.name], elm.name
  if er == elm then                 -- one  -> idx
    return seq[_eidx][nam]
  end
  for i=1,#er do                    -- many -> search & idx
    if er[i] == elm then
      return seq[_eidx][nam][i]
    end
  end
  return nil
end

local function chck_dict (seq) -- for debug
  for en,ei in pairs(seq[_eidx]) do
    if is_number(ei) then
      assert(seq[ei] == seq[en]        , "unexpected corrupted dictionnary")
    else
      assert(seq[ei[1]] == seq[en][1]  , "unexpected corrupted dictionnary")
      for i=2,#ei do
        assert(ei[i-1] < ei[i]         , "unexpected corrupted dictionnary")
        assert(seq[ei[i]] == seq[en][i], "unexpected corrupted dictionnary")
      end
    end
  end
end

-- helpers --------------------------------------------------------------------o

-- get closest element index (linear)
local function efind_idx (seq, elm, idx_, cnt_)
  if is_nil(elm) then return nil end
  local n, start, stop, step = #seq, idx_ or 1
  assert(is_number(start), "invalid argument #3 (index expected)")
  if start > 0
  then stop, step = n, 1
  else stop, step, start = 1, -1, min(-start, n)
  end
  local cnt = cnt_ or 1
  assert(is_number(cnt) and cnt >= 1, "invalid argument #4 (count expected)")
  for i=start,stop,step do  -- linear search
    if seq[i] == elm then
      if cnt == 1 then return i end
      cnt = cnt - 1
    end
  end
  return nil
end

-- get index from signed index (direct)
local function index_of_num (seq, num)
  local n = #seq
  if num < 0 then num = n+num+1 end -- reflect
  if num < 1 or num > n then return nil end
  return num
end

-- get element index (direct)
local function index_of_nam (seq, nam, cnt_)
  local idx = seq[_eidx][nam]
  if is_table(idx) then
    assert(is_number(cnt_), "invalid argument #3 (count expected)")
    return idx[cnt_]
  end
  return idx
end

-- get index from string (direct or linear)
local function index_of_str (seq, s, idx_)
  local i, j, nam, del = string.find(s, "([^[{/]+)([[{]?)")
  assert(nam ~= nil and i == 1, "invalid argument #2 (name expected)")
  local cnt, rel                                         -- get element
  if is_nil(seq[nam]) then return nil                    -- not found
  elseif del == ''    then return index_of_nam(seq, nam) -- index of "name"
  elseif del == '['
  then i, j, cnt = string.find(s,      "(%d+)]", j+1)       -- get count
  else i, j, cnt = string.find(s, "([-+]?%d+)}", j+1) ; rel = true end
  cnt = assert(tonumber(cnt), "invalid argument #2 (count expected)")
  if cnt < 0 then
    cnt, idx_ = -cnt, -assert(idx_, "invalid argument #3 (index expected)")
  end
  if not rel
  then return index_of_nam(seq, nam,       cnt) -- index of "name[n]"
  else return efind_idx   (seq, nam, idx_, cnt) -- index of "name{n}"
  end
end

-- get 'from' element position, memoize result if count is not relative
local function from_epos (seq, from, idx)
  if seq[_lastfrom] ~= from then             -- memoized?
    local idx, nam
    if is_string(from) then
      idx, nam = index_of_str(seq, from, idx), from
    elseif is_element(from) then
      idx, nam = index_of_nam(seq, from.name), from.name
    end
    if is_nil(idx) then                      -- not found
      seq_error("invalid from of '" .. nam .. "'", seq, idx)
    end
    seq[_lastfrompos] = elem_pos(seq, idx)
    if string.sub(from, -1) ~= '}'
    then seq[_lastfrom] = from               -- not relative: memoize
    else seq[_lastfrom] = nil                -- relative: do not memoize
    end
  end
  return seq[_lastfrompos]
end

-- forward index
-- return (#elm-1)+1 because seq[idx] == sseq[2] (see copy_sequ and sequ_pos).
local function fidx (elm)
  return is_sequence(elm) and #elm or 1
end

-- get 'from' position
local function from_pos (seq, elm, idx)
  local pos  = elm.at or 0
  local from = elm.from or elm.at and 'start' or 'prev'

      if from == 'start' then return pos
  elseif from == 'prev'  then return pos + sub(elem_pos(seq,idx-1))+seq[idx-1].l
  elseif from == 'next'  then return pos + elem_pos(seq,idx+fidx(elm))
  elseif from == 'end'   then return seq.l - pos
  else                        return pos + from_epos(seq, from, idx)
  end
end

-- refpos (sequence)
local function sequ_rpos (seq)
  local rpos, idx, nam = seq.refpos
      if is_nil    (rpos) then return 0
  elseif is_string (rpos) then
    idx, nam = index_of_str(seq, rpos), rpos
  elseif is_element(rpos) then
    idx, nam = index_of_nam(seq, rpos.name), rpos.name
  end
  if is_nil(idx) then                      -- not found
    seq_error("invalid from of '" .. nam .. "'", seq, idx)
  end
  return seq[_epos][idx]
end

-- get 'refer' relative position
local function refer_pos (seq, elm, idx)
  local refer
  if is_sequence(elm)
  then refer = elm.refpos and 'refpos' or seq.refer
  else refer = elm.refer or seq.refer
  end
      if refer == 'entry'  then return 0
  elseif refer == 'centre' then return elm.l/2
  elseif refer == 'exit'   then return elm.l
  elseif refer == 'refpos' then return sequ_rpos(elm)
  else seq_error("invalid refer to '" .. refer .. "'", seq, idx, elm)
  end
end

-- build helper ---------------------------------------------------------------o

-- compute s positions of an elements
function elem_pos (seq, idx, elm_)
  local epos = seq[_epos][idx]
  if is_nil(epos) then
    seq_error("invalid index or reference detected", seq, idx, elm_)
  elseif is_nil(elm_) then
    if epos >= 0 then
      return epos, epos - seq[_spos][idx]
    elseif epos == ongoing_init then
      seq_error("cycling dependencies detected", seq, idx)
    elseif epos ~= uninitialized then
      seq_error("corrupted s-position detected", seq, idx)
    end
    seq[_epos][idx] = ongoing_init
  end

  local elm  = elm_ or seq[idx]
  local pos  = from_pos (seq, elm, idx)
  local rpos = refer_pos(seq, elm, idx)

  if is_nil(elm_) then
    seq[_epos][idx] = pos
    seq[_spos][idx] = pos - rpos
  end
  return pos, rpos
end

-- compute s positions of sub sequence elements
local function sequ_pos (seq, sseq, idx)
  check_sequ(sseq)
  local pos = sub(elem_pos(seq, idx, sseq)) -- shift by subsequence refpos
  local n = #sseq
  for i=2,n-1 do
    seq[_epos][idx-2+i] = sseq[_epos][i] + pos
    seq[_spos][idx-2+i] = sseq[_spos][i] + pos
    assert(seq[idx-2+i] == sseq[i], "unexpected corrupted flat sequence")
  end
  return pos
end

-- copy sub sequence
local function copy_sequ (seq, flat, sref, idx)
  check_sequ(seq)
  local n = #seq
  for i=2,n-1 do
    flat[idx-2+i] = seq[i]
  end
  sref[idx] = seq -- keep a link of the subsequence
  return idx-2+n
end

-- flatten lines and subsequence
local function flatten_line (line, flat, sref, idx, rev)
  local n, rep = #line, (line.__rep or 1) * rev
  if n == 0 then
    seq_error("invalid empty line detected", line, idx)
  end

  local start, stop, step
  if rep < 0
  then rep, start, stop, step = -rep, n, 1, -1
  else rep, start, stop, step =  rep, 1, n,  1
  end

  for i=1,rep do
  for j=start,stop,step do
    local elm = line[j]
    if not (is_element(elm) or is_rawtable(elm)) then
      seq_error("invalid element detected", line, j)
    elseif elm.is_bline == true or is_rawtable(elm) then
      idx = flatten_line(elm, flat, sref, idx, step)
    elseif is_sequence(elm) then
      idx = copy_sequ   (elm, flat, sref, idx)
    else -- other elements
      idx, flat[idx] = idx+1, elm
    end
  end end
  return idx
end

-- flatten sequence
local function flatten_sequ (seq, flat, sref)
  local n, idx = seq:rawlen(), 2
  flat[1] = mkstart
  for i=1,n do
    local elm = seq[i]
    if not (is_element(elm) or is_rawtable(elm)) then
      seq_error("invalid element detected", seq, i)
    elseif elm.is_bline == true or is_rawtable(elm) then
      idx = flatten_line(elm, flat, sref, idx, 1)
    elseif is_sequence(elm) then
      idx = copy_sequ   (elm, flat, sref, idx)
    else -- other elements
      idx, flat[idx] = idx+1, elm
    end
  end
  flat[idx] = mkend
  assert(n <= idx, "unexpected corrupted flat sequence")
end

-- build sequence and dictionnaries
local function build_sequ (seq, flat)
  seq[_eidx] = {}
  for idx,elm in ipairs(flat) do
    add1_to(seq, idx, elm)
  end
  assert(seq:rawlen() == #flat, "unexpected corrupted flat sequence")
end

-- compute elements positions
local function build_pos_err(typ, seq, idx, pos)
  seq_error(string.format(
    "invalid %s position at s = %.6gm (negative drift %.6gm)",
    typ, seq[_spos][idx], seq[_spos][idx]-pos), seq, idx)
end

local function build_pos (seq, sref)
  local n, idx, pos = seq:rawlen(), 1, 0
  seq[_epos], seq[_spos] = table.new(n,0), table.new(n,0)
  for i=1,n do
    seq[_epos][i], seq[_spos][i] = uninitialized, uninitialized
  end
  while idx <= n do
    local sseq = sref[idx]
    if is_nil(sseq) then     -- element
      elem_pos(seq, idx)
      if pos-minlen > seq[_spos][idx] then
        build_pos_err('element', seq, idx, pos)
      end
      pos = seq[_spos][idx] + seq[idx].l
      idx = idx + 1
    else                     -- subsequence
      sequ_pos(seq, sseq, idx)
      if pos-minlen > seq[_spos][idx] then
        build_pos_err('subsequence', seq, idx, pos)
      end
      pos = seq[_spos][idx] - sseq[_spos][2] + sseq.l
      idx = idx + #sseq-2
    end
  end
  assert(n == idx-1, "unexpected corrupted flat sequence")

  -- adjust sequence length or end marker position
  check_sequ(seq)
  local len = seq[_spos][n]
  if   seq.l < len
  then seq.l = len
  else seq[_spos][n], seq[_epos][n] = seq.l, seq.l
  end
end

local function finish_sequ (seq)
  local n = seq:rawlen()

  -- aliases for 1st and last element
  seq['#s'], seq['#S'] = seq[1], seq[1]
  seq['#e'], seq['#E'] = seq[n], seq[n]

  -- clear memoization
  seq[_lastfrom], seq[_lastfrompos] = nil, nil
end

-- metamethods ----------------------------------------------------------------o

-- sequence init (build)
function sequence_init (seq)
  local n = #seq
  assert(n > 0, "invalid argument #1 (non-empty sequence expected)")
  if seq:rawlen() == 0 then return seq end -- inheritance (already built)

  local flat, sref = table.new(n+2,0), {}
  flatten_sequ (seq, flat, sref)
  build_sequ   (seq, flat)
  build_pos    (seq, sref)
  finish_sequ  (seq)
  return seq:set_readonly()
end

sequence:set_metamethod {
  __init = sequence_init,
}

-- methods --------------------------------------------------------------------o

local function index_of (seq, a, n_)
      if is_number (a) then return index_of_num(seq, a)
  elseif is_string (a) then return index_of_str(seq, a, n_)
  elseif is_element(a) then return index_of_nam(seq, a.name, n_)
  else error("invalid argument #2 (index, string or element expected)")
  end
end

local function sindex_of (seq, s, n_) -- linear, see also efind
  local n, start, stop, step = #seq, n_ or 1
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  assert(is_number(s)    , "invalid argument #2 (number expected)"  )
  assert(is_number(start), "invalid argument #3 (index expected)"   )
  if start > 0
  then stop, step = n, 1
  else stop, step, start = 1, -1, min(-start, n)
  end
  local smin, spos = maximum_dist, seq[_epos]
  for i=start,stop,step do  -- linear search
    local d = abs(spos[i]-s)
    if d > smin then return i-step end
    smin = d
  end
  return nil
end

local function range_of (seq, rng, start_)
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  local start, stop
  if is_number(rng) then
    start = rng
  elseif is_string(rng) then
    local s1, s2 = string.match(rng, "([^/]+)/?(.*)")
    start, stop = tonumber(s1) or s1, tonumber(s2) or s2
  elseif is_range(rng) then
    start, stop = rng:bounds()
  elseif is_table(rng) then
    start, stop = rng[1], rng[2]
  else error("invalid argument #2 (index, string, range or table expected)")
  end
  start = index_of(seq, start, start_)
  stop  = stop and index_of(seq, stop, start_ or start) or start
  return start, stop
end

local function srange_of (seq, rng, start_)
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  local start, stop
  if is_number(rng) then
    start = rng
  elseif is_string(rng) then
    local s1, s2 = string.match(rng, "([^/]+)/?(.*)")
    start = tonumber(s1) or s1 and seq:epos_of(s1, start_)
    stop  = tonumber(s2) or s2 and seq:epos_of(s2, start_)
  elseif is_range(rng) then
    start, stop = rng:bounds()
  elseif is_table(rng) then
    start, stop = rng[1], rng[2]
  else error("invalid argument #2 (index, string, range or table expected)")
  end
  start = sindex_of(seq, start, start_)
  stop  = stop and sindex_of(seq, stop, start_ or start) or start
  return start, stop
end

local function length_of(seq, rng_, trn_)
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  local siz = rng_ and -sub(range_of(seq, rng_))+1 or -1
  return siz + #seq * ((trn_ or 0) + (siz < 0 and 1 or 0))
end

local function setvar (seq, key, val)
  assert(is_sequence(seq)       , "invalid argument #1 (sequence expected)")
  assert(is_nil(seq[_eidx][key]), "invalid argument #2 (variable expected)")
  seq:set_readonly(false)
  seq[key] = val
  return seq:set_readonly()
end

local function cycle (seq, elm)
  assert(is_sequence(seq)  , "invalid argument #1 (sequence expected)")
  assert(index_of(seq, elm), "invalid argument #2 (reference expected)")
  setvar(seq, 'start_at', elm)
  return seq
end

local function foreach (seq, f, rng_, sel_)
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  assert(is_callable(f)  , "invalid argument #2 (callable expected)")
  for i,e in seq:iter(rng_) do
    if not sel_ or e:is_selected() then f(e,i) end
  end
  return seq
end

local function filter (seq, p, rng_, sel_)
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  assert(is_callable(p)  , "invalid argument #2 (callable expected)")
  local res, idx, n = {}, {}, 1
  for i,e in seq:iter(rng_) do
    if not sel_ or e:is_selected() then
      if p(e,i) then res[n], idx[n], n = e, i, n+1 end
    end
  end
  return res, idx
end

local function select (seq, p_, rng_, flg_)
  p_ = p_ or ftrue
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  assert(is_callable(p_) , "invalid argument #2 (callable expected)")
  for i,e in seq:iter(rng_) do
    if p_(e,i,flg_) then e:select(flg_) end
  end
  return seq
end

local function deselect (seq, p_, rng_, flg_)
  p_ = p_ or ftrue
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  assert(is_callable(p_) , "invalid argument #2 (callable expected)")
  for i,e in seq:iter(rng_) do
    if p_(e,i,flg_) then e:deselect(flg_) end
  end
  return seq
end

-- extract, insert, remove, share, unique (need to manage dictionnaries) ------o

local function unique (seq)
  assert(is_orig_sequence(seq), "invalid argument #1 (true sequence expected)")
  seq:set_readonly(false)
  local lst = table.new(0, #seq)
  for _,elm in ipairs(seq) do
    lst[elm] = (lst[elm] or 0) + 1
  end
  for elm,cnt in pairs(lst) do
    if cnt > 1 then
      for i=1,cnt do
        local idx = indx_of(seq, elm)
        assert(seq[idx] == elm, "unexpected corrupted dictionnary")
        repl_by(seq, idx, elm {}) -- replace by a child
      end
      assert(is_nil(indx_of(seq, elm)), "unexpected corrupted dictionnary")
    end
  end
  return seq:set_readonly()
end

local function share (seq1, seq2) -- e.g. lhcb1:share(lhcb2)
  assert(is_orig_sequence(seq1), "invalid argument #1 (true sequence expected)")
  assert(is_orig_sequence(seq2), "invalid argument #2 (true sequence expected)")
  check_sequ(seq1) check_sequ(seq2)
  seq1:set_readonly(false) seq2:set_readonly(false)
  local eidx1, eidx2 = seq1[_eidx], seq2[_eidx]
  for i=1,#seq1 do
    local nam = seq1[i].name   -- share by name
    if eidx2[nam] then         -- element name found in seq2
      local e1, i1 = seq1[nam], eidx1[nam]
      local e2, i2 = seq2[nam], eidx2[nam]
      -- ensure that elements are unique in both sequences
      assert(is_number(i1), "invalid shared element (must be unique)")
      assert(is_number(i2), "invalid shared element (must be unique)")
      assert(seq1[i1] == e1, "unexpected corrupted dictionnary")
      assert(seq2[i2] == e2, "unexpected corrupted dictionnary")
      -- make Y inheritance using e1 as reference and discard e2 (pos are unchanged)
      local c1 = e1 { at=e1:rawget'at', from=e1:rawget'from', from=e1:rawget'refpos' }
      local c2 = e1 { at=e2:rawget'at', from=e2:rawget'from', from=e2:rawget'refpos' }
      -- update dictionnaries and arrays
      repl_by(seq1, i1, c1)
      repl_by(seq2, i2, c2)
    end
  end
  return seq1:set_readonly(), seq2:set_readonly()
end

-- seq:extract { range=range, selected=logical, pattern=string }
local function extract (seq, sel_)
  local sel = sel_ or {}
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  assert(is_table(sel)   , "invalid argument #2 (selection expected)")
  local range, selected, pattern in sel -- default: extract nothing
  if is_nil(range) and is_nil(selected) and is_nil(pattern) then
    return {}, {}
  end
  local p = (pattern and \e -> string.match(e.name, pattern)) or ftrue
  return filter(seq, p, range, selected)
end

-- seq:remove { index1, index2, ..., +extract }
local function remove (seq, sel)
  assert(is_orig_sequence(seq), "invalid argument #1 (true sequence expected)")
  assert(is_table(sel)        , "invalid argument #2 (selection expected)")
  local _,idx = extract(seq, sel)         -- indexes of elements to remove
  for i=1,#sel do                         -- complete with user listed cases
    idx[#idx+1] = index_of(seq, sel[i])
  end
  local n = #idx
  assert(n > 0, "invalid remove selection (empty)")
  table.sort(idx) -- sort by increasing indexes
  local rmv = table.new(n,0)
  for i=n,1,-1 do -- remove by decreasing indexes
    local elm = seq:get_raw(idx[i])
    rem_it(seq, idx[i], elm)
    table.remove(seq[_epos],idx[i])
    table.remove(seq[_spos],idx[i])
    rmv[i] = elm
  end
  seq[_eidx] = {} -- rebuild indexes
  for idx,elm in ipairs(seq) do
    addi_to(seq, idx, elm)
  end
  chck_dict(seq)  -- sanity check
  return rmv      -- return removed elements
end

-- seq:insert { elem1, elem2, ... }
local function insert (seq, sel)
  assert(is_orig_sequence(seq), "invalid argument #1 (true sequence expected)")
  assert(is_table(sel)        , "invalid argument #2 (selection expected)")
  local n = #sel
  assert(n > 0, "invalid insert selection (empty)")
  local ins, idx  = table.new(n), table.new(n)
  local pos, rpos = table.new(n), table.new(n)
  for i=1,n do
    pos[i], rpos[i] = elem_pos(seq, 1, sel[i])
    ins[i], idx [i] = sel[i], sindex_of(seq, pos[i])
  end
  for i=2,n do -- sort by increasing indexes
    for j=i,2,-1 do
      if idx[j] >= idx[j-1] then break end
      idx[j], idx[j-1] = idx[j-1], idx[j]
      ins[j], ins[j-1] = ins[j-1], ins[j]
    end
  end
  for i=n,1,-1 do -- insert by decreasing indexes
    ins_it(seq, idx[i], ins[i])
    table.insert(seq[_epos], idx[i], pos[i])
    table.insert(seq[_spos], idx[i], pos[i]-rpos[i])
  end
  seq[_eidx] = {} -- rebuild indexes
  for idx,elm in ipairs(seq) do
    addi_to(seq, idx, elm)
  end
  chck_dict(seq) -- sanity check
  return seq
end

-- seq:move { index1, index2, ..., +extract }
local function move (seq, sel)
  local rmv = seq:remove(sel) -- use index to select elements
  seq:insert(rmv)             -- use {at,from} to insert elements
  return rmv
end

-- iterator -------------------------------------------------------------------o

local function seqiter (state, i)
  if i == state.stop then
    if state.turn == 0 then
      return nil
    end
    state.turn = state.turn-1
  end
  if i == state.len then
    return 1, state.seq[1]
  else
    return i+1, state.seq[i+1]
  end
end

local function mkiter (seq, start, stop, turn)
  if start == stop+1 then turn = turn+1 end
  return seqiter, {seq=seq, len=#seq, stop=stop, turn=turn}, start-1
end

local function iter (seq, rng_, trn_)
  local turn = trn_ or 0
  assert(is_sequence(seq)           , "invalid argument #1 (sequence expected)")
  assert(is_number(turn) and turn >= 0, "invalid argument #3 (number expected)")
  local start, stop
  if is_nil(rng_) then
    if is_nil(seq.start_at) then
      start, stop = 1, #seq
    else
      start = assert(index_of(seq, seq.start_at), "invalid cycle reference")
      stop  = start == 1 and #seq or start-1
    end
  else
    start, stop = seq:range_of(rng_)
    assert(is_number(start), "invalid range start")
    assert(is_number(stop ), "invalid range stop" )
  end
  return mkiter(seq, start, stop, turn)
end

-- env ------------------------------------------------------------------------o

MAD.element.sequence   = sequence
MAD.typeid.is_sequence = is_sequence

-- members --------------------------------------------------------------------o

sequence :set_function {
  spos      = \s,i   -> s[_spos][i],
  epos      = \s,i   -> s[_epos][i],
  spos_of   = \s,e,i -> s[_spos][index_of(s,e,i)],
  epos_of   = \s,e,i -> s[_epos][index_of(s,e,i)],
  index_of  = index_of,
  range_of  = range_of,
  sindex_of = sindex_of,
  srange_of = srange_of,
  length_of = length_of,
  setvar    = setvar,
  cycle     = cycle,
  foreach   = foreach,
  filter    = filter,
  select    = select,
  deselect  = deselect,
  unique    = unique,
  share     = share,
  insert    = insert,
  remove    = remove,
  extract   = extract,
  iter      = iter,

  -- disabled methods
  is_selected  := error("invalid sequence operation", 2),
} :set_readonly()

-- end -------------------------------------------------------------------------
return {
  sequence = sequence,
  __help   = __help,
}

--[=[
--------------------------------------------------------------------------------
-- TODO ------------------------------------------------------------------------
--------------------------------------------------------------------------------

--[[
local function identifier (seq, cvt_)
  local cvt = cvt_ or \s -> string.gsub(string.lower(s), '[^%l%d_]', '_')
  for i=1,#seq do
    local name = seq[i].name
    local knam = cvt(name)
    if name ~= knam then seq[knam] = seq[name] end
  end
  return seq
end
]]

--[[ SEQUENCE DISPLAY
local function show_fields(t, lst)
  local a, k, s
  lst = lst or sequence_fields
  for _,v in ipairs(lst) do
    if is_list(v) then k, s = v[1], v[2] else k, s = v, v end
    a = t[k]
    if a then io.write(', ', s, '= ', tostring(a)) end
  end
end

function M:show(disp)
  io.write("sequence '", self.name,"' { ")
  show_list(self, disp)
  io.write(' }\n')
  for _,v in ipairs(self) do v:show(disp) end
  io.write('endsequence\n')
end

function M:show_madx(disp)
  io.write("'", self.name, "': sequence, ")
  show_list(self, disp)
  io.write(';\n')
  for _,v in ipairs(self) do v:show_madx(disp) end
  io.write('endsequence;\n')
end
]]

-- edition -- TODO: check spos and length
local function insert_element(self, elm, before)
  test_membership(self, before)
  local i = before.i_pos
  table.insert(self, i, elm)
  update_index(self, i)
  insert_element_key(self, elm)
end

local function remove_element(self, elm)
  test_membership(self, elm)
  local i = elm.i_pos
  remove_element_key(self, elm)
  table.remove(self, i)
  update_index(self, i)
end

local function replace_element(self, old_elem, new_elem)
  test_membership(self, old_elem)
  local i = old_elem.i_pos
  self[i] = new_elem
  new_elem.i_pos = i
  remove_element_key(self, elm)
  insert_element_key(self, elm)
end

local function swap_elements(self, elem1, elem2, update_key)
  test_membership(self, elem1)
  test_membership(self, elem2)
  local i1, i2 = elem1.i_pos, elem2.i_pos
  self[i1], self[i2] = elem2, elem1
  elem1.i_pos, elem2.i_pos = i2, i1
  if update_key then
    remove_element_key(self, elem1)
    remove_element_key(self, elem2)
    insert_element_key(self, elem1)
    insert_element_key(self, elem2)
  end
end
--]=]
