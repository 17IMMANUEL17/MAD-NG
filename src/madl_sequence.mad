--[=[
 o-----------------------------------------------------------------------------o
 |
 | Sequence module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide sequence object to define lattices

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- module ---------------------------------------------------------------------o

local __help = {}
__help.sequence = [=[
NAME
  sequence -- build sequences

SYNOPSIS
  seq = sequence 'name' { attribute-list, element-list... }

DESCRIPTION
  TODO

RETURN VALUE

EXAMPLE
  see LHC sequences

SEE ALSO
  element.
]=]

__help["sequence: seqedit"] = [=[
Sequence edition:
-----------------
  seqedit:    n/a
  flatten:    n/a
  reflect:    n/a
  endedit:    n/a

  seq:extract { index1, index2, ..., range=range, selected=bool, pattern=string }
  seq:remove  { +extract }
  seq:replace { index1=elem1, index2=elem2, ... }
  seq:insert  { elem1, elem2, ..., at=pos, from=index }

  seq:save()    -- to be defined
  seq:dump()    -- to be defined
]=]

__help["sequence: indexes, ranges and iterators"] = [=[
Indexes:
--------
  return the index in the sequence or nil
  - number (spos)
    + number, <0 means starts from end (i.e. seq.l+num)
  - string
    + name                 (absolute, unique or error)
    + name[count]          (absolute, with occurences count)
    + name{count} & index  (relative, with occurences count starting from index)
    + $start or #s or #S (index=1), $end or #e or #E (index=#seq)
  - element (object)
    + element.name         (absolute, unique or error)
    + element.name & count (absolute, with occurences count)

  note:
    seq:name_of(idx) returns the element name at idx mangled by count (if any).
    seq:name_of(seq:index_of('mq[10]')) == 'mq[10]'

Ranges:
-------
  return the pair of indexes in the sequence or nil
  - index                  (single element index)
  - start_spos..stop_spos  (xrange)
  - {start_spos,stop_spos}
  - {start_name,stop_name}
  - {start_elem,stop_elem}
  - "start_spos/stop_spos"
  - "start_name/stop_name"
  - support for start > stop or missing stop (i.e. stop = start)

Iterators:
----------
  seq:iter([range], [nturn])
  - iterate through the sequence.
  - if nturn is not specified, it is set to zero.
  - if range is not specified
    - if seq.start_at exists, nturn+1 starting at seq.start_at.
    - otherwise from 1 to #seq.
]=]

-- locals ---------------------------------------------------------------------o

local abs, min, max                                            in math
local ftrue                                                    in MAD.gfunc
local bool, sub                                                in MAD.operator
local is_iterable, is_callable                                 in MAD.concept
local sequence, marker, flags                                  in MAD.element
local minlen                                                   in MAD.constant
local bsearch                                                  in MAD.algorithm
local is_nil, is_boolean, is_number, is_positive, is_string,
      is_table, is_rawtable, is_range, is_element, is_flag     in MAD.typeid

local table_insert, table_remove = table.insert, table.remove

-- root object ----------------------------------------------------------------o

-- hidden keys: elements indexes, positions and entry positions.
local _eidx, _epos, _spos = {}, {}, {}

-- defined in elements
sequence :set { direction=1, refer='centre', l=0 }

local function is_sequence(a)
  return is_table(a) and not is_nil(a[_eidx])
end

local function is_orig_sequence(seq)
  return is_sequence(seq) and not is_nil(seq:rawget(_eidx))
end

-- definitions ----------------------------------------------------------------o

 -- temporaries to cache 'from' lookup
local _lastfrom, _lastfrompos = {}, {}

-- special numerical value for elements positions.
local uninitialized = -1e9
local ongoing_init  = -2e9
local maximum_dist  =  2e9 -- to find the closest

 -- forward declarations
local elem_pos

-- start and end markers
local mkstart = marker '$start' { at=0 } : set_readonly()
local mkend   = marker '$end'   {      } : set_readonly()

-- check sequence $start and $stop integrity
local function check_sequ (seq)
  local n = #seq
      if seq[1].__id ~= mkstart.__id or seq[1].is_marker ~= true then
    error("invalid sequence first element ($start expected)", 2)
  elseif seq[n].__id ~= mkend  .__id or seq[n].is_marker ~= true then
    error("invalid sequence last element ($end expected)", 2)
  end
end

-- debug ----------------------------------------------------------------------o

--[=[
local function dumpseq (seq)
  local fmt = MAD.option.format
  MAD.option.format = "%.5g"
  print()
  print('sequence:', seq.name, 'l=', seq.l)
  print('i', 'name', 'L', 'S (s)', 'S (e)')
  seq:foreach \e,i => print(i, e.name, e.l, seq:spos(i), seq:epos(i)) end
  MAD.option.format = fmt
end
]=]

local function seq_error (msg, seq, idx, elm)
  local nam = elm and elm.name or seq[idx] and seq[idx].name
  error(msg .. " in sequence '"  .. (seq.name or '?')
            .. "' for element '" .. (nam      or '?')
            .. "' at index "     .. (idx      or '?'), 2)
end

-- dict helpers ---------------------------------------------------------------o

local _dct = {}
local dct_mt = {
  __len       =\s   -> rawlen(s[_dct]),
  __pairs     =\s   ->  pairs(s[_dct]),
  __ipairs    =\s   -> ipairs(s[_dct]),
  __index     =\s,i -> rawget(s[_dct], i),
  __newindex := error("forbidden write access to counts", 2),
}

--[=[
  helpers:      used by:        remarks:
  --------------------------------------
  find_1st      unique
  replace_it    unique, share   no need to update indexes
  insert_it     insert          no index update, build_dict required!
  remove_it     remove          no index update, build_dict required!
]=]

local function find_1st (seq, elm)
  local er, nam = seq[elm.name], elm.name
  if er == elm then                 -- one  -> idx
    return seq[_eidx][nam]
  elseif is_table(er) then
    for i=1,#er do                  -- many -> search & idx
      if er[i] == elm then
        return seq[_eidx][nam][i]
      end
    end
  end
end

local function remove_it (seq, idx)
  local ei, nam = seq[_eidx], seq[idx].name
  if ei[nam] == idx then            -- one  -> replace
    ei [nam] = nil
    seq[nam] = nil ; return
  elseif is_table(ei[nam]) then
    for i=1,#ei[nam] do             -- many -> search & replace
      if ei[nam][i] == idx then
        table_remove(ei [nam]      , i)
        table_remove(seq[nam][_dct], i)
        if #ei[nam] == 1 then
          ei [nam] = ei [nam][1]
          seq[nam] = seq[nam][1]
        end ; return
      end
    end
  end
  error("unexpected corrupted dictionnary")
end

local function insert_it (seq, idx, elm)
  local ei, nam = seq[_eidx], elm.name
  if is_nil(ei[nam]) then           -- none -> elem, index
    ei [nam] = idx
    seq[nam] = elm ; return
  elseif is_number(ei[nam]) then    -- one  -> create array
    if ei[nam] >= idx then
      assert(ei[nam] ~= idx, "unexpected duplicated indexes")
      ei [nam] = {idx, ei[nam]}
      seq[nam] = setmetatable({[_dct]={elm, seq[nam]}}, dct_mt) ; return
    else
      ei [nam] = {ei[nam], idx}
      seq[nam] = setmetatable({[_dct]={seq[nam], elm}}, dct_mt) ; return
    end
  elseif is_table(ei[nam]) then
    for i=1,#ei[nam] do             -- many -> search & insert
      if ei[nam][i] >= idx then
        assert(ei[nam][i] ~= idx, "unexpected duplicated indexes")
        table_insert(ei [nam]      , i, idx)
        table_insert(seq[nam][_dct], i, elm) ; return
      end
    end
  end
  error("unexpected corrupted dictionnary")
end

local function replace_it (seq, idx, elm)
  local old = seq[idx]
  if old.name ~= elm.name then
    remove_it(seq, idx)
    insert_it(seq, idx, elm) ; return
  end
  local ei, nam = seq[_eidx], elm.name
  if ei[nam] == idx then            -- one  -> replace
    seq[nam] = elm ; return
  elseif is_table(ei[nam]) then
    for i=1,#ei[nam] do             -- many -> search & replace
      if ei[nam][i] == idx then
        seq[nam][_dct][i] = elm ; return
      end
    end
  end
  error("unexpected corrupted dictionnary")
end

-- index helpers --------------------------------------------------------------o

-- see mtable module for similarities

-- get closest element index (linear)
local function efind_idx (seq, elm, idx_, cnt_)
  if is_nil(elm) then return nil end
  local n, start, stop, step = #seq, idx_ or 1
  assert(is_number(start), "invalid argument #3 (index expected)")
  if start > 0
  then stop, step = n, 1
  else stop, step, start = 1, -1, min(-start, n)
  end
  local cnt = cnt_ or 1
  assert(is_number(cnt) and cnt >= 1, "invalid argument #4 (count expected)")
  for i=start,stop,step do  -- linear search
    if seq[i] == elm then
      if cnt == 1 then return i end
      cnt = cnt - 1
    end
  end
  return nil
end

-- get index from signed index (direct)
local function index_of_idx (seq, num)
  local n = #seq
  if num < 0 then num = n+num+1 end -- reflect
  if num < 1 or num > n then return nil end
  return num
end

-- get index from s-position (binary)
local function index_of_num (seq, num)
  if num < 0 then num = seq.l+num end -- reflect
  if num < 0 or num > seq.l then return nil end
  return bsearch(seq[_spos], num)
end

-- get element index from name (direct)
local function index_of_nam (seq, nam, cnt_)
  local idx = seq[_eidx][nam]
  if is_table(idx) then
    assert(is_number(cnt_), "invalid argument #3 (count expected)")
    return idx[cnt_]
  end
  return idx
end

-- get index from string (direct or linear)
local function index_of_str (seq, s, idx_)
  local i, j, nam, del = string.find(s, "([^[{/]+)([[{]?)")
  assert(nam ~= nil and i == 1, "invalid argument #2 (name expected)")
  local cnt, rel                                         -- get element
  if is_nil(seq[nam]) then return nil                    -- not found
  elseif del == ''    then return index_of_nam(seq, nam) -- index of "name"
  elseif del == '['
  then i, j, cnt = string.find(s,      "(%d+)]", j+1)    -- get count
  else i, j, cnt = string.find(s, "([-+]?%d+)}", j+1) ; rel = true end
  cnt = assert(tonumber(cnt), "invalid argument #2 (count expected)")
  if not rel then
    return index_of_nam(seq, nam, cnt)                   -- index of "name[n]"
  end
  if cnt < 0 then
    cnt, idx_ = -cnt, -assert(idx_, "invalid argument #3 (index expected)")
  end
  return efind_idx(seq, nam, idx_, cnt)                  -- index of "name{n}"
end

-- position helpers -----------------------------------------------------------o

-- get 'from' element position, memoize result if count is not relative
local function from_epos (seq, from, idx)
  if rawget(seq, _lastfrom) ~= from then             -- memoized?
    local idx, nam
    if is_string(from) then
      idx, nam = index_of_str(seq, from, idx), from
    elseif is_element(from) then
      idx, nam = index_of_nam(seq, from.name), from.name
    end
    if is_nil(idx) then                             -- not found
      seq_error("invalid from of '" .. nam .. "'", seq, idx)
    end
    rawset(seq, _lastfrompos, elem_pos(seq, idx))
    if string.sub(from, -1) ~= '}'
    then rawset(seq, _lastfrom, from)               -- not relative: memoize
    else rawset(seq, _lastfrom, nil )               -- relative: do not memoize
    end
  end
  return rawget(seq, _lastfrompos)
end

-- forward index
-- return (#elm-1)+1 because seq[idx] == sseq[2] (see copy_sequ and sequ_pos).
local function fidx (elm)
  return is_sequence(elm) and #elm or 1
end

-- get 'from' position
local function from_pos (seq, elm, idx)
  local pos  = elm.at or 0
  local from = elm.from or elm.at and 'start' or 'prev'

      if from == 'start' then return pos
  elseif from == 'prev'  then return pos + sub(elem_pos(seq,idx-1))+seq[idx-1].l
  elseif from == 'next'  then return pos + elem_pos(seq,idx+fidx(elm))
  elseif from == 'end'   then return seq.l - pos
  else                        return pos + from_epos(seq, from, idx)
  end
end

-- refpos (sequence)
local function sequ_rpos (seq)
  local rpos, idx, nam = seq.refpos
      if is_nil    (rpos) then return 0
  elseif is_string (rpos) then
    idx, nam = index_of_str(seq, rpos), rpos
  elseif is_element(rpos) then
    idx, nam = index_of_nam(seq, rpos.name), rpos.name
  end
  if is_nil(idx) then                      -- not found
    seq_error("invalid from of '" .. nam .. "'", seq, idx)
  end
  return seq[_epos][idx]
end

-- get 'refer' relative position
local function refer_pos (seq, elm, idx)
  local refer
  if is_sequence(elm)
  then refer = elm.refpos and 'refpos' or seq.refer
  else refer = elm.refer or seq.refer
  end
      if refer == 'entry'  then return 0
  elseif refer == 'centre' then return elm.l/2
  elseif refer == 'exit'   then return elm.l
  elseif refer == 'refpos' then return sequ_rpos(elm)
  else seq_error("invalid refer to '" .. refer .. "'", seq, idx, elm)
  end
end

-- build positions ------------------------------------------------------------o

-- compute s positions of an elements
function elem_pos (seq, idx, elm_)
  local epos = seq[_epos][idx]
  if is_nil(epos) then
    seq_error("invalid index or reference detected", seq, idx, elm_)
  elseif is_nil(elm_) then
    if epos >= 0 then
      return epos, epos - seq[_spos][idx]
    elseif epos == ongoing_init then
      seq_error("cycling dependencies detected", seq, idx)
    elseif epos ~= uninitialized then
      seq_error("corrupted s-position detected", seq, idx)
    end
    seq[_epos][idx] = ongoing_init
  end

  local elm  = elm_ or seq[idx]
  local pos  = from_pos (seq, elm, idx)
  local rpos = refer_pos(seq, elm, idx)

  if is_nil(elm_) then
    seq[_epos][idx] = pos
    seq[_spos][idx] = pos - rpos
  end
  return pos, rpos
end

-- compute s-positions of sub sequence elements
local function sequ_pos (seq, sseq, idx, dir)
  check_sequ(sseq)
  local pos = sub(elem_pos(seq, idx, sseq)) -- shift by subsequence refpos

  if seq.direction ~= sseq.direction then -- changedir patch
    seq[_epos][idx] = sseq[_epos][1] + pos
    seq[_spos][idx] = sseq[_spos][1] + pos
    idx = idx + 1
  end

  local n = #sseq
  if dir > 0 then
    for i=2,n-1 do
      seq[_epos][idx-2+i] = sseq[_epos][i] + pos
      seq[_spos][idx-2+i] = sseq[_spos][i] + pos
      assert(seq[idx-2+i] == sseq[i], "unexpected corrupted flat sequence")
    end
  else
    local l = sseq.l
    for i=2,n-1 do
      local sp, el = sseq[_spos][n+1-i], sseq[n+1-i].l
      seq[_epos][idx-2+i] = l - (sp + el - (sseq[_epos][n+1-i] - sp)) + pos
      seq[_spos][idx-2+i] = l - (sp + el                            ) + pos
      assert(seq[idx-2+i] == sseq[n+1-i], "unexpected corrupted flat sequence")
    end
  end

  if seq.direction ~= sseq.direction then -- changedir patch
    seq[_epos][idx+n] = sseq[_epos][n] + pos
    seq[_spos][idx+n] = sseq[_spos][n] + pos
  end
  return pos
end

-- copy sub sequence
local function copy_sequ (seq, flat, sref, idx, dir)
  check_sequ(seq)
  sref[idx], sref.sdir[idx] = seq, dir -- link subsequence

  if sref.dir ~= seq.direction then -- insert changedir patch
    idx, flat[idx] = idx+1, changedir(seq.name, {})
  end

  local n = #seq
  if dir > 0 then
    for i=2,n-1 do flat[idx-2+i] = seq[i] end
  else
    for i=2,n-1 do flat[idx-2+i] = seq[n+1-i] end
  end

  if sref.dir ~= seq.direction then
    idx, flat[idx-2+n] = idx+1, flat[idx-1] -- share changedir patch
  end
  return idx-2+n
end

-- flatten lines and subsequence
local function flatten_line (line, flat, sref, idx, dir)
  local n, rep = #line, (line.__rep or 1) * dir
  if n == 0 then
    seq_error("invalid empty line detected", line, idx)
  end

  local start, stop, step
  if rep < 0
  then rep, start, stop, step = -rep, n, 1, -1
  else rep, start, stop, step =  rep, 1, n,  1
  end

  for i=1,rep do
  for j=start,stop,step do
    local elm = line[j]
    if not (is_element(elm) or is_rawtable(elm)) then
      seq_error("invalid element detected", line, j)
    elseif elm.is_bline == true or is_rawtable(elm) then
      idx = flatten_line(elm, flat, sref, idx, step)
    elseif not is_nil(sref) and is_sequence(elm) then
      idx = copy_sequ   (elm, flat, sref, idx, step)
    else -- other elements
      idx, flat[idx] = idx+1, elm
    end
  end end
  return idx
end

-- flatten sequence
local function flatten_sequ (seq, flat, sref)
  local n, idx = seq:rawlen(), 2
  flat[1] = mkstart {}
  for i=1,n do
    local elm = seq[i]
    if not (is_element(elm) or is_rawtable(elm)) then
      seq_error("invalid element detected", seq, i)
    elseif elm.is_bline == true or is_rawtable(elm) then
      idx = flatten_line(elm, flat, sref, idx, 1)
    elseif is_sequence(elm) then
      idx = copy_sequ   (elm, flat, sref, idx, 1)
    else -- other elements
      idx, flat[idx] = idx+1, elm
    end
  end
  flat[idx] = mkend {}
  assert(n <= idx, "unexpected corrupted flat sequence")
end

-- compute elements positions
local function build_pos_err(typ, seq, idx, pos)
  seq_error(string.format(
    "invalid %s position at s = %.6gm (negative drift %.6gm)",
    typ, seq[_spos][idx], seq[_spos][idx]-pos), seq, idx)
end

local function build_pos (seq, sref)
  local n, idx, pos = seq:rawlen(), 1, 0
  seq[_epos], seq[_spos] = table.new(n,0), table.new(n,0)
  for i=1,n do
    seq[_epos][i], seq[_spos][i] = uninitialized, uninitialized
  end
  while idx <= n do
    local sseq = sref[idx]
    if is_nil(sseq) then     -- element
      elem_pos(seq, idx)
      if pos-minlen > seq[_spos][idx] then
        build_pos_err('element', seq, idx, pos)
      end
      pos = seq[_spos][idx] + seq[idx].l
      idx = idx + 1
    else                     -- subsequence
      sequ_pos(seq, sseq, idx, sref.sdir[idx])
      if pos-minlen > seq[_spos][idx] then
        build_pos_err('subsequence', seq, idx, pos)
      end
      pos = seq[_spos][idx] - sseq[_spos][2] + sseq.l
      idx = idx + #sseq-2
    end
  end
  assert(n == idx-1, "unexpected corrupted flat sequence")

  -- adjust sequence length or end marker position
  local len = seq[_spos][n]
  if   seq.l < len
  then seq.l = len
  else seq[_spos][n], seq[_epos][n] = seq.l, seq.l
  end
end

-- build dictionnaries --------------------------------------------------------o

-- check sequence dictionnaries
local function check_dict (seq) -- for debug only
  for en,ei in pairs(seq[_eidx]) do
    if is_number(ei) then
      assert(seq[ei] == seq[en]        , "unexpected corrupted dictionnary")
    elseif is_table(ei) then
      assert(seq[ei[1]] == seq[en][1]  , "unexpected corrupted dictionnary")
      for i=2,#ei do
        assert(ei[i-1] < ei[i]         , "unexpected corrupted dictionnary")
        assert(seq[ei[i]] == seq[en][i], "unexpected corrupted dictionnary")
      end
    else
      error("unexpected corrupted dictionnary")
    end
  end
end

-- build sequence dictionnary
local function build_dict (seq)
  local ei = seq[_eidx]
  table.clear(ei)                     -- reuse main storage
  for idx,elm in ipairs(seq) do
    local nam = elm.name
    if is_nil(ei[nam]) then           -- none -> elem, index
      ei[nam] = idx
    elseif is_number(ei[nam]) then    -- one  -> create array
      ei[nam] = {ei[nam], idx}
    else                              -- many -> append
      table_insert(ei[nam], idx)
    end
  end
end

-- build sequence and dictionnaries
local function build_sequ (seq, flat)
  local ei = table.new(0,#flat)       -- assume unique names
  for idx,elm in ipairs(flat) do
    seq[idx] = elm                    -- set in sequence
    local nam = elm.name
    if is_nil(ei[nam]) then           -- none -> elem, index
      ei [nam] = idx
      seq[nam] = elm
    elseif is_number(ei[nam]) then    -- one  -> create array
      ei [nam] = {ei[nam], idx}
      seq[nam] = setmetatable({[_dct]={seq[nam], elm}}, dct_mt)
    else                              -- many -> append
      table_insert(ei [nam]      , idx)
      table_insert(seq[nam][_dct], elm)
    end
  end
  assert(seq:rawlen() == #flat, "unexpected corrupted flat sequence")
  seq[_eidx] = ei
end

-- finalizer ------------------------------------------------------------------o

local function finish_sequ (seq)
  local n = seq:rawlen()

  -- aliases for 1st and last element
  seq['#s'], seq['#S'] = seq[1], seq[1]
  seq['#e'], seq['#E'] = seq[n], seq[n]

  -- clear memoization
  rawset(seq, _lastfrom   , nil)
  rawset(seq, _lastfrompos, nil)

  -- sanity checks
  check_sequ(seq)
end

-- metamethods ----------------------------------------------------------------o

-- sequence init (build)
function sequence_init (seq)
  local n = #seq
  assert(n > 0, "invalid argument #1 (non-empty sequence expected)")
  if seq:rawlen() == 0 then return seq end -- inheritance (already built)

  local flat, sref = table.new(n+2,0), { dir=seq.direction, sdir={} }
  flatten_sequ (seq, flat, sref)
  build_sequ   (seq, flat)
  build_pos    (seq, sref)
  finish_sequ  (seq)
  return seq:set_readonly()
end

sequence:set_metamethods {
  __init = sequence_init,
}

-- methods (readonly) ---------------------------------------------------------o

local function name_of (seq, idx)
  assert(is_sequence(seq)    , "invalid argument #1 (sequence expected)")
  assert(is_number(idx)      , "invalid argument #2 (index expected)")
  assert(is_element(seq[idx]), "invalid argument #2 (valid index expected)")
  local nam = seq[idx].name
  local ei = seq[_eidx][nam]
  if ei == idx then return nam end
  for i=1,#ei do
    if ei[i] == idx then
      return string.format("%s[%d]", nam, i)
    end
  end
  error("unexpected corrupted dictionnary")
end

local function index_of (seq, a, ref_)
      if is_number (a) then return index_of_num(seq, a)
  elseif is_string (a) then return index_of_str(seq, a, ref_)
  elseif is_element(a) then return index_of_nam(seq, a.name, ref_)
  end
  error("invalid argument #2 (number, string or element expected)")
end

local function range_of (seq, rng, ref_)
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  local start, stop
  if is_number(rng) then
    start = index_of_idx(seq, rng)
    return start, start
  elseif is_string(rng) then
    local s1, s2 = string.match(rng, "([^/]+)/?(.*)")
    start, stop = tonumber(s1) or s1, tonumber(s2) or s2
  elseif is_range(rng) then
    start, stop = rng:bounds()
  elseif is_table(rng) then
    start, stop = rng[1], rng[2]
  else error("invalid argument #2 (index, string, range or table expected)")
  end
  start = index_of(seq, start, ref_)
  stop  = stop and index_of(seq, stop, ref_ or start) or start
  return start, stop
end

local function length_of (seq, rng_, ntrn_)
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  local siz = rng_ and 1-sub(range_of(seq, rng_)) or 0
  return siz + #seq * ((ntrn_ or 0) + (siz <= 0 and 1 or 0))
end

local function setvar (seq, key, val)
  assert(is_sequence(seq)       , "invalid argument #1 (sequence expected)")
  assert(is_nil(seq[_eidx][key]), "invalid argument #2 (variable expected)")
  return seq:rawset(key, val)
end

local function cycle (seq, elm)
  assert(is_sequence(seq)  , "invalid argument #1 (sequence expected)")
  assert(index_of(seq, elm), "invalid argument #2 (reference expected)")
  setvar(seq, 'start_at', elm)
  return seq
end

local function select_ (typ) -- build closures
  return \seq, p_, rng_, flg_ =>
    if is_nil(flg_) and not is_callable(p_) then
      p_, rng_, flg_ = nil, p_, rng_   -- right shift
    end
    if is_nil(flg_) and (is_boolean(rng_) or is_number(rng_)) then
      rng_, flg_ = nil, rng_           -- right shift
    end
    p_ = p_ or ftrue
    assert(is_sequence(seq)             , "invalid argument #1 (sequence expected)")
    assert(is_callable(p_)              , "invalid argument #2 (callable expected)")
    assert(is_nil(flg_) or is_flag(flg_), "invalid argument #4 (flag id expected)")
    for i,e in seq:iter(rng_) do
      if p_(e,i,flg_) then e[typ](e, flg_) end
    end
    return seq
  end
end

local select   = select_('select'  )
local deselect = select_('deselect')

local function foreach (seq, f, rng_, flg_)
  if is_nil(flg_) and (is_boolean(rng_) or is_number(rng_)) then
    rng_, flg_ = nil, rng_             -- right shift
  end
  assert(is_sequence(seq)             , "invalid argument #1 (sequence expected)")
  assert(is_callable(f)               , "invalid argument #2 (callable expected)")
  assert(is_nil(flg_) or is_flag(flg_), "invalid argument #4 (flag id expected)")
  for i,e in seq:iter(rng_) do
    if not flg_ or e:is_selected(flg_) then f(e,i) end
  end
  return seq
end

local function filter (seq, p, rng_, flg_)
  if is_nil(flg_) and (is_boolean(rng_) or is_number(rng_)) then
    rng_, flg_ = nil, rng_             -- right shift
  end
  assert(is_sequence(seq)             , "invalid argument #1 (sequence expected)")
  assert(is_callable(p)               , "invalid argument #2 (callable expected)")
  assert(is_nil(flg_) or is_flag(flg_), "invalid argument #4 (flag id expected)")
  local elm, idx, n = {}, {}, 1
  for i,e in seq:iter(rng_) do
    if not flg_ or e:is_selected(flg_) then
      if p(e,i) then elm[n], idx[n], n = e, i, n+1 end
    end
  end
  return elm, idx
end

-- seq:extract { index1, index2, ..., range=range, selected=logical, pattern=string }
local function extract (seq, sel_)
  local sel = sel_ or {}
  assert(is_sequence(seq), "invalid argument #1 (sequence expected)")
  assert(is_table(sel)   , "invalid argument #2 (selection expected)")
  local range, selected, pattern in sel
  local elm, idx
  if is_nil(range) and is_nil(selected) and is_nil(pattern) then
    elm, idx = {}, {} -- default: extract nothing
  else
    local pred = (pattern and \e -> string.match(e.name, pattern)) or ftrue
    elm, idx = filter(seq, pred, range, selected)
  end
  if #sel > 0 then -- add further selection
    local j, n = 1, #elm
    for i=1,#sel do
      local si = index_of(seq, sel[i])
      if si then elm[n+j], idx[n+j], j = seq[si], si, j+1 end
    end
  end
  return elm, idx
end

-- methods (R/W, update dict) -------------------------------------------------o

-- seq:remove { +extract }
local function remove (seq, sel)
  assert(is_orig_sequence(seq), "invalid argument #1 (true sequence expected)")
  assert(is_table(sel)        , "invalid argument #2 (selection expected)")

  -- collect indexes of elements to remove
  local _,idx = extract(seq, sel)
  if #idx == 0 then return {} end

  -- remove elements by decreasing indexes
  table.sort(idx)
  seq:set_readonly(false)
  for i=#idx,1,-1 do
    local ii = idx[i]
    remove_it(seq, ii)
    seq:remove_array(ii)
    table_remove(seq[_epos], ii)
    table_remove(seq[_spos], ii)
  end
  build_dict (seq)
--check_dict (seq)  -- sanity check
  finish_sequ(seq)
  return seq:set_readonly()
end

-- seq:replace { index1=elm1, index2=elem2, ... }
local function replace (seq, sel)
  assert(is_orig_sequence(seq), "invalid argument #1 (true sequence expected)")
  assert(is_table(sel)        , "invalid argument #2 (selection expected)")

  seq:set_readonly(false)
  for idx,elm in pairs(sel) do
    local i = index_of(seq, idx)
    if i then
      assert(is_element(elm), "invalid element replacement")
      replace_it(seq, i, elm)
      seq[i] = elm
       -- check for negative drift
      local pos = seq:spos(i)+seq[i].l
      if pos-minlen > seq:spos(i+1) then
        build_pos_err('element', seq, i+1, pos)
      end
    end
  end
--check_dict (seq)  -- sanity check
  finish_sequ(seq)
  return seq:set_readonly()
end

-- seq:insert { elem1, elem2, ..., at=pos, from=index }
local function insert (seq, sel)
  assert(is_orig_sequence(seq), "invalid argument #1 (true sequence expected)")
  assert(is_table(sel)        , "invalid argument #2 (selection expected)")
  assert(#sel > 0             , "invalid insert selection (empty)")

  -- collect elements and subsequences to insert
  local ins = {} -- no sref -> keep subsequence as-is
  flatten_line(sel, ins, nil, 1, 1)

  -- compute reference index using a dummy marker
  local ridx, len = 2, #seq
  if not (is_nil(sel.at) or is_nil(sel.from)) then
    local mkr = marker { at=sel.at, from=sel.from }
    local pos = sub(elem_pos(seq, 1, mkr))
    ridx = min(max(index_of(seq, pos), 2), len-1)
  end

  -- precompute indexes from positions before editing
  local n = #ins
  local idx = table.new(n,0)
  for i=1,n do
    if is_nil(ins[i].at) and is_nil(ins[i].from) then
      idx[i] = ridx
    else
      local pos = sub(elem_pos(seq, ridx, ins[i]))
      idx[i] = min(max(index_of(seq, pos), 2), len-1)
    end
  end

  -- sort by increasing indexes
  for i=2,n do
    for j=i,2,-1 do
      if idx[j] >= idx[j-1] then break end
      idx[j], idx[j-1] = idx[j-1], idx[j]
      ins[j], ins[j-1] = ins[j-1], ins[j]
    end
  end

  -- insert by decreasing indexes
  seq:set_readonly(false)
  for i=n,1,-1 do
    local ii = idx[i]
    if is_sequence(ins[i]) then
      local sseq, pos = ins[i], sub(elem_pos(seq, ridx, ins[i]))
      for j=#sseq-1,2,-1 do -- see sequ_pos
        insert_it(seq, ii, sseq[j])
        seq:insert_array(ii, sseq[j])
        table_insert(seq[_epos], ii, sseq:epos(j) + pos)
        table_insert(seq[_spos], ii, sseq:spos(j) + pos)
        assert(seq[ii] == sseq[j], "unexpected corrupted sequence insert")
      end
    else
      insert_it(seq, ii, ins[i])
      seq:insert_array(ii, ins[i])
      table_insert(seq[_epos], ii, uninitialized)
      table_insert(seq[_spos], ii, uninitialized)
    end
  end

  -- rebuild dictionnary before next elem_pos
  build_dict(seq)
--check_dict(seq) -- sanity check

  -- update positions of inserted elements
  local sht = 0
  for i=1,n do
    local j = idx[i]+sht
    if is_sequence(ins[i]) then
      sht = sht + #ins[i]-2
    else
      assert(seq:spos(j) == uninitialized, "unexpected corrupted positions")
      elem_pos(seq, j)
      sht = sht + 1
    end
    -- check for negative drift
    local pos = seq:spos(j-1)+seq[j-1].l
    if pos-minlen > seq:spos(j) then
      local typ = is_sequence(ins[i]) and 'subsequence' or 'element'
      build_pos_err(typ, seq, j, pos)
    end
  end
  finish_sequ(seq)
  return seq:set_readonly()
end

-- seq:unique()
local function unique (seq)
  assert(is_orig_sequence(seq), "invalid argument #1 (true sequence expected)")
  local lst = table.new(0, #seq)
  for _,elm in ipairs(seq) do
    lst[elm] = (lst[elm] or 0) + 1
  end
  seq:set_readonly(false)
  for elm,cnt in pairs(lst) do
    if cnt > 1 then
      for i=1,cnt do
        local idx = find_1st(seq, elm)
        assert(seq[idx] == elm, "unexpected corrupted dictionnary")
        local c = elm {}
        replace_it(seq, idx, c) ; seq[idx] = c -- replace by a child
      end
      assert(is_nil(find_1st(seq, elm)), "unexpected corrupted dictionnary")
    end
  end
--check_dict (seq)  -- sanity check
  finish_sequ(seq)
  return seq:set_readonly()
end

-- seq1:share(seq2)
local function share (seq1, seq2)
  assert(is_orig_sequence(seq1), "invalid argument #1 (true sequence expected)")
  assert(is_orig_sequence(seq2), "invalid argument #2 (true sequence expected)")
  check_sequ(seq1) check_sequ(seq2)
  seq1:set_readonly(false) seq2:set_readonly(false)
  local eidx1, eidx2 = seq1[_eidx], seq2[_eidx]
  for i=2,#seq1-1 do
    local nam = seq1[i].name   -- share by name
    if eidx2[nam] then         -- element name found in seq2
      local e1, i1 = seq1[nam], eidx1[nam]
      local e2, i2 = seq2[nam], eidx2[nam]
      -- ensure that elements are unique in both sequences
      assert(is_number(i1), "invalid shared element (must be unique)")
      assert(is_number(i2), "invalid shared element (must be unique)")
      assert(seq1[i1] == e1, "unexpected corrupted dictionnary")
      assert(seq2[i2] == e2, "unexpected corrupted dictionnary")
      -- make Y inheritance using e1 as reference and discard e2 (pos are unchanged)
      local c1 = e1 { at := e1.at, from := e1.from, refpos := e1.refpos }
      local c2 = e1 { at := e2.at, from := e2.from, refpos := e2.refpos }
      assert(sub(elem_pos(seq2, i2, c2)) == seq2:spos(i2),
             "invalid shared element (incompatible positions)")
      -- update dictionnaries and arrays
      replace_it(seq1, i1, c1) ; seq1[i1] = c1
      replace_it(seq2, i2, c2) ; seq2[i2] = c2
    end
  end
--check_dict (seq1) check_dict (seq2) -- sanity check
  finish_sequ(seq1) finish_sequ(seq2)
  return seq1:set_readonly(), seq2:set_readonly()
end

-- iterators ------------------------------------------------------------------o

local function seqfwditer (state, i)
  if i == state.stop then
    if state.turn == 0 then
      return nil
    end
    state.turn = state.turn-1
  end
  if i == state.len then
    return 1, state.seq[1]
  else
    return i+1, state.seq[i+1]
  end
end

local function seqbwditer (state, i)
  if i == state.stop then
    if state.turn == 0 then
      return nil
    end
    state.turn = state.turn-1
  end
  if i == 1 then
    return state.len, state.seq[state.len]
  else
    return i-1, state.seq[i-1]
  end
end

local function mkfwditer (seq, start, stop, nturn)
  if start == stop+1 then nturn = nturn+1 end
  return seqfwditer, {seq=seq, len=#seq, stop=stop, turn=nturn}, start-1
end

local function mkbwditer (seq, start, stop, nturn)
  if start == stop-1 then nturn = nturn+1 end
  return seqbwditer, {seq=seq, len=#seq, stop=stop, turn=nturn}, start+1
end

local function fwditer (seq, rng_, ntrn_)
  local nturn = ntrn_ or 0
  assert(is_sequence(seq)            , "invalid argument #1 (sequence expected)")
  assert(is_number(nturn) and nturn >= 0,"invalid argument #3 (number expected)")
  local start, stop
  if is_nil(rng_) then
    if is_nil(seq.start_at) then
      start, stop = 1, #seq
    else
      start = assert(index_of(seq, seq.start_at), "invalid cycle reference")
      stop  = start == 1 and #seq or start-1
    end
  else
    start, stop = seq:range_of(rng_)
    assert(is_number(start), "invalid range start")
    assert(is_number(stop ), "invalid range stop" )
  end
  return mkfwditer(seq, start, stop, nturn)
end

local function bwditer (seq, rng_, ntrn_)
  local nturn = ntrn_ or 0
  assert(is_sequence(seq)            , "invalid argument #1 (sequence expected)")
  assert(is_number(nturn) and nturn >= 0,"invalid argument #3 (number expected)")
  local start, stop
  if is_nil(rng_) then
    if is_nil(seq.start_at) then
      start, stop = #seq, 1
    else
      start = assert(index_of(seq, seq.start_at), "invalid cycle reference")
      stop  = start == #seq and 1 or start+1
    end
  else
    start, stop = seq:range_of(rng_)
    assert(is_number(start), "invalid range start")
    assert(is_number(stop ), "invalid range stop" )
  end
  return mkbwditer(seq, start, stop, nturn)
end

local function iter (seq, rng_, ntrn_, dir_)
  local dir = dir_ or 1
  assert(is_number(dir), "invalid argument #4 (number expected)")
  if dir ==  1 then return fwditer(seq, rng_, ntrn_) end
  if dir == -1 then return bwditer(seq, rng_, ntrn_) end
  error("invalid argument #4 (direction number expected)")
end

-- env ------------------------------------------------------------------------o

MAD.element.sequence        = sequence
MAD.typeid.is_sequence      = is_sequence
MAD.typeid.is_orig_sequence = is_orig_sequence

-- members --------------------------------------------------------------------o

sequence :set_functions {
  spos      = \s,i   -> s[_spos][i],
  epos      = \s,i   -> s[_epos][i],
  spos_of   = \s,e,i -> s[_spos][index_of(s,e,i)],
  epos_of   = \s,e,i -> s[_epos][index_of(s,e,i)],
  name_of   = name_of,
  index_of  = index_of,
  range_of  = range_of,
  length_of = length_of,
  setvar    = setvar,
  cycle     = cycle,
  select    = select,
  deselect  = deselect,
  foreach   = foreach,
  filter    = filter,
  extract   = extract,
  remove    = remove,
  replace   = replace,
  insert    = insert,
  share     = share,
  unique    = unique,
  iter      = iter,
  fwditer   = fwditer,
  bwditer   = bwditer,

  -- disabled methods
  is_selected := error("invalid sequence operation", 2),
} :set_readonly()

-- end -------------------------------------------------------------------------
return {
  sequence = sequence,
  __help   = __help,
}

--[=[
SEQUENCE DISPLAY
local function show_fields(t, lst)
  local a, k, s
  lst = lst or sequence_fields
  for _,v in ipairs(lst) do
    if is_list(v) then k, s = v[1], v[2] else k, s = v, v end
    a = t[k]
    if a then io.write(', ', s, '= ', tostring(a)) end
  end
end

function M:show(disp)
  io.write("sequence '", self.name,"' { ")
  show_list(self, disp)
  io.write(' }\n')
  for _,v in ipairs(self) do v:show(disp) end
  io.write('endsequence\n')
end

function M:show_madx(disp)
  io.write("'", self.name, "': sequence, ")
  show_list(self, disp)
  io.write(';\n')
  for _,v in ipairs(self) do v:show_madx(disp) end
  io.write('endsequence;\n')
end
--]=]
