--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Shreyber, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.track = [=[
NAME
  track -- track

SYNOPSIS
  TODO

DESCRIPTION
  The module track provides...

RETURN VALUES
  The track command

SEE ALSO
  element, sequence, survey
]=]

__help['track: references'] = [=[
[Wolski14]    A. Wolski, "Beam Dynamics in High Energy Particle Accelerators".
[Forest98]    E. Forest, "Beam Dynamics, A New Attitude and Framework".
[Forest02]    E. Forest, "Introduction to Polymorphic Tracking Code",
              KEK report 2002-3.
[Forest06]    E. Forest, "Geometric Integration for Particle Accelerators",
              J.Phys. A, Math.Gen. 39 (2006) 5321-5377.
[Ripken95]    K. Heinemann, G. Ripken, and F. Schmidt. "Construction of
              Nonlinear Symplectic Six-dimensional Thin-lens Maps by
              Exponentiation", Technical Report 95-189, DESY, 1995.
[SixTrack]    R. De. Maria et al., "SixTrack Physics Manual", CERN,
              http://cern.ch/SixTrack/doc/physics_manual/sixphys.pdf, Sep. 2016.
[Yoshida90]   H. Yoshida, "Construction of higher order symplectic integrators",
              Phys.Let. A, Volume 150, number 5,6,7.
[Burkhardt13] H. Burkhardt et al., "Improved Teapot Method and Tracking with
              Thick Quadrupoles for the LHC and its Upgrade", IPAC 2013.
[MADX-PTC]    MAD-X PTC Code, rev. 6099
]=]

__help['track: straight maps'] = [[
  [2] p.352, ch. 12.1
      DKD: ch 12.1.3, p. 353
      MKM: ch 12.1.4, p.354
  [3] DKD: p. 72, Section K.4.2,
           PTC, Function INTER_STREX in file Sh_def_kind.f90)
      MKM: p. 75, Section K.4.7,
           PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

__help['track: curved maps'] = [[
  [2] p.357, ch. 12.2
  [3] PTC, p. 76, Section K.4.9,Function INTER_TEAPOT in file Sh_def_kind.f90)
]]

__help['track: pushtkt'] = [[
[2] MKM: p. 75, Section K.4.7,
[3] PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

__help['track: straight matrix-kick'] = [[
  [2] p.358, ch. 12.2.2 Drift-Kick Split, drift in polar coordinates
  [3] p. 76, PTC, Function SPROTR in file Sh_def_kind.f90)
]]

--[[TODO:
-Add charge, direction, mass(?)
-Deltap (recalculation of pt)
- KICKEX: how to read properly strength of thick element (i.e. convert
k1,k1s, k2 etc to knl,ksl)
-????KICKEX: add a check for thick element that there is only one strength,
i.e. quad only has k1 and not k0, k2 or???
]]
-- add patch, rotation + translation

--[[ METHOD:
2 - 2nd order, 1 kick per integration step
4 - Ruth-Neri-Yoshida 4th order, 3 kicks per step
6 - Yoshida 6th order, 7kicks per step
]]

--[[
  frame of integration:

 angle == 0 and k0 ~= 0 rbend on (??? rbend with the straight ref. frame ??)
 STRAIGHT REF. FRAME FOR RBEND : STREX

 angle == 0 and k0 == 0 rbend off (i.e. drift)
 DRIFT-TRACK

 angle ~= 0 and k0 ~= 0 sbend on
 SBEND, default RBEND:  TEAPOT

 angle ~= 0 and k0 == 0 sbend off( useless, what kind of element is this? broken sbend?)
       <=> rbend with l = l_arc and k0 = angle, what about errors?

 angle == 0 abd k0 == 0 but k[n] ~= 0: straight magnet
 DKD (model = 1 ): STREX ; MKM (model = 2): TKTF
]]

-- locals ---------------------------------------------------------------------o

local vector, matrix, element                                    in MAD
local is_nil, is_number, is_sequence, is_beam                    in MAD.typeid
local abs, sqrt, max, sin, cos, tan, asin, acos, atan, atan2,
      sinc, fact                                                 in MAD.gmath
local minlen, minang                                             in MAD.constant

local ptc_compat  = true
local madx_compat = true

-- special --------------------------------------------------------------------o

local function empty_track () end

local function invalid_track (elm)
  error(string.format("invalid element %s of kind %s with length %s",
                      elm.name, elm.kind, elm.l))
end

element.  patch_element :set_functions { track = invalid_track } -- no default
element.  extra_element :set_functions { track = invalid_track } -- not valid
element.special_element :set_functions { track =   empty_track } -- default

-- strengths retrieval --------------------------------------------------------o

-- Load element multipoles in mflow

local function get_mult (elm, m) -- l=0
  local knl, dknl = elm.knl or {}, elm.dknl or {}
  local ksl, dksl = elm.ksl or {}, elm.dksl or {}
  local nmul = max(#knl, #ksl, #dknl, #dksl)

  for i=1,nmul do
    m.knl[i] = (knl[i] or 0) + (dknl[i] or 0)
    m.ksl[i] = (ksl[i] or 0) + (dksl[i] or 0)
  end
  m.nmul = nmul
  return nmul
end

-- Load element strengths and multipoles in mflow

local function get_kmult (elm, m, l) -- l>0
  local k0 , k1 , k2 , k3  in elm
  local k0s, k1s, k2s, k3s in elm
  local nkn = k3  and 4 or k2  and 3 or k1  and 2 or k0  and 1 or 0
  local nks = k3s and 4 or k2s and 3 or k1s and 2 or k0s and 1 or 0
  local knl, dknl = elm.knl or {}, elm.dknl or {}
  local ksl, dksl = elm.ksl or {}, elm.dksl or {}
  local nmul = max(#knl, #ksl, #dknl, #dksl, nkn, nks)

  if nmul >= 1 then
    local kn = { k0 , k1 , k2 , k3  }
    local ks = { k0s, k1s, k2s, k3s }
    for i=1,nmul do
      m.knl[i] = (kn[i] or 0)*l + (knl[i] or 0) + (dknl[i] or 0)
      m.ksl[i] = (ks[i] or 0)*l + (ksl[i] or 0) + (dksl[i] or 0)
    end
  end
  m.nmul = nmul
  return nmul
end

-- drifts ---------------------------------------------------------------------o

__help['track: exact straight drift'] = [[
  [Wolski14] p.86, ch. 3.1, eq. 3.13-3.18
  [Forest98] p.306, ch. 10.4.3.1, eq. 10.23a-10.23c
  [MADX-PTC] Function DRIFTR in file Sh_def_kind.f90
]]

local function straight_drift (_, m, l) -- exact
  if abs(l) < minlen then return end

  local x, px, y, py, t, pt, T in m
  local _beta = 1/m.beam.beta
  local l_pz = l/sqrt(1 + 2*_beta*pt + pt^2 - px^2 - py^2) -- TODO: stability

  m.x = x + px*l_pz
  m.y = y + py*l_pz
  m.t = t - (_beta+pt)*l_pz + (1-T)*l*_beta
end

__help['track: exact polar drift'] = [[
  [Forest02] p.76, ch. K.4.9, (general explaination)
  [Forest06] p.5365, eq. 127, exact drift
  [MADX-PTC] Function SPROTR in file Sh_def_kind.f90
]]

local function polar_drift (elm, m, l) -- exact
  local angle in elm
  if abs(angle) < minang then return straight_drift(_,m,l) end

  local rho = elm.l/(angle*m.dir)
  local angle = l/rho
  local sa, ca, ta, sa2 = sin(angle), cos(angle), tan(angle), sin(angle/2)

  local x, px, y, py, t, pt, T in m
  local _beta = 1/m.beam.beta
  local pz  = sqrt(1 + 2*_beta*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local _pz = 1/pz
  local ptt = 1 - ta*px*_pz
  local xr  = (x+rho)*ta*_pz

  m.x  = (x + rho*(2*sa2^2 + sa*px*_pz))/(ca*ptt)
  m.px = ca*px + sa*pz
  m.y  = y + xr*py/ptt
  m.t  = t - xr*(_beta+pt)/ptt + (1-T)*l*_beta
end

-- kicks ----------------------------------------------------------------------o

__help['track: generic thin kick'] = [[
  [MADX-PTC] Function KICKTR in file Sh_def_kind.f90
]]

-- Special case TO BE REVIEWED !!!
local function thin_kick (elm, m, _) -- l=0 (ignored)
  local knlt, kslt = elm.knl or {}, elm.ksl or {} -- BUG: not retrieved by getmul
  local knl1, ksl1 = (knlt[1] or 0), (kslt[1] or 0)

  local x, px, y, py, dirchg, nmul, knl, ksl in m -- BUG: nmul set by last getmul
  local byt
  local by = knl[nmul] / fact(nmul-1)
  local bx = ksl[nmul] / fact(nmul-1)
  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + knl[i] / fact(i-1)
    bx  = y*by + x*bx + ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = px - dirchg*by + dirchg*knl1
  m.py = py + dirchg*bx - dirchg*ksl1

  if knl1 ~= 0 or ksl1 ~= 0 then
    local t, pt in m
    local _beta = 1/m.beam.beta
    local pz = sqrt(1 + 2*_beta*pt + pt^2)

    local l = elm.lrad or 0
    if l ~= 0 then -- dipole focusing and deltap
      m.px = m.px - knl1^2*x/l + dirchg*knl1*(pz-1)
      m.py = m.py - ksl1^2*y/l + dirchg*ksl1*(pz-1)
    end
--    m.t = t + dirchg*(knl1*x - ksl1*y) * (_beta+pt)/pz
    m.t = t - dirchg*(knl1*x - ksl1*y) * (_beta+pt)/pz
  end
end

__help['track: straight kick'] = [[
  [Forest98] p.354, ch. 12.1.3, eq. 12.6
  [MADX-PTC] Function KICKEXR in file Sh_def_kind.f90
  [SixTrack] p.12, ch. 3.5 (thin multipole), eq. 91-94
  [Ripken95] p.26, ch. 4.6.2, eq. 4.23 (and solution)
]]

local function straight_kick (elm, m, l) -- l>0
  local x, px, y, py, nmul, knl, ksl, dirchg in m
  local lw, byt = elm.l>minlen and l/elm.l or 1
  local by = lw*knl[nmul] / fact(nmul-1)
  local bx = lw*ksl[nmul] / fact(nmul-1)

  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + lw*knl[i] / fact(i-1)
    bx  = y*by + x*bx + lw*ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = px - dirchg*by
  m.py = py + dirchg*bx
end

__help['track: polar kick'] = [[
  [Forest98] p. 358-361, ch. 12.2.2, eq. 12.18a-12.18f
  [Forest02] p. 76
  [Forest06] ??
  [MADX-PTC] Function SKICKR in file Sh_def_kind.f90
  [Ripken95] p. 22, ch. 4.3 (bending magnet) eq. 4.12 (and solution)
  [SixTrack] Thin Dipole, ch. 3.2.2, eq. 48-50
]]

local function polar_kick (elm, m, l) -- [PTC] SKICK, TODO: GETELECTRIC
  local x, px, y, py, nmul, knl, ksl, dirchg in m
  local lw, byt = elm.l>minlen and l/elm.l or 1
  local by = lw*knl[nmul] / fact(nmul-1)
  local bx = lw*ksl[nmul] / fact(nmul-1)

  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + lw*knl[i] / fact(i-1)
    bx  = y*by + x*bx + lw*ksl[i] / fact(i-1)
    by  = byt
  end

  local angle, k0 in elm
--  m.px = px - dirchg*by*(1 + angle/elm.l*x) -- only angle
--  m.py = py + dirchg*bx*(1 + angle/elm.l*x)
-- stability problem???? differences with a simple test SBEND
  m.px = px - dirchg*by*(1 + k0*x) -- only angle
  m.py = py + dirchg*bx*(1 + k0*x)
end

-- patches --------------------------------------------------------------------o

-- S-rotation (roll, tilt)

local function srotation (_, m, angle)   -- XYrot <-> Rz(-angle)?
  if abs(angle) < minang then return end

  local x, px, y, py, dir in m
  local sa, ca = sin(angle*dir), cos(angle*dir)

  m.x  = ca*x  + sa*y
  m.y  = ca*y  - sa*x
  m.px = ca*px + sa*py
  m.py = ca*py - sa*px
end

-- Y-rotation (yaw)

local function yrotation (_, m, angle)   -- XZrot (Dragt's PROT) <-> Ry(angle)
  if abs(angle) < minang then return end

  local x, px, y, py, t, pt, dir in m
  local sa, ca, ta = sin(angle*dir), cos(angle*dir), tan(angle*dir)
  local _beta = 1/m.beam.beta
  local pz = sqrt(1 + 2*_beta*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local _pz = 1/pz
  local ptt = 1 - ta*px*_pz

  m.x  = x/(ca*ptt)
  m.px = ca*px + sa*pz
  m.y  = y + ta*x*py*_pz/ptt
  m.t  = t - ta*x*_pz*(_beta+pt)/ptt
end

-- X-rotation (pitch)

local function xrotation (_, m, angle)   -- YZrot <-> Rx(angle)
  if abs(angle) < minang then return end -- XZrot with x,px <-> y,py)

  local x, px, y, py, t, pt, dir in m
  local sa, ca, ta = sin(angle*dir), cos(angle*dir), tan(angle*dir)
  local _beta = 1/m.beam.beta
  local pz = sqrt(1 + 2*_beta*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local _pz = 1/pz
  local ptt = 1 - ta*py*_pz

  m.y  = y/(ca*ptt)
  m.py = ca*py + sa*pz
  m.x  = x + ta*y*px*_pz/ptt
  m.t  = t - ta*y*_pz*(_beta+pt)/ptt
end

-- Translation (dz treated as drift length)

local function translate (_, m, dx, dy, dz)
  local dir in m

  straight_drift(_, m, dz)
  m.x = m.x - dx*dir
  m.y = m.y - dy*dir
end

-- Changeref/Forward/Backward patches

local function changeref (elm, m)
  local x, y, z, theta, phi, psi in elm
  xrotation(elm, m, phi   or 0)                    -- phi  : Elevation angle.
  yrotation(elm, m, theta or 0)                    -- theta: Azimuthal angle.
  srotation(elm, m, psi   or 0)                    -- psi  : Roll      angle.
  translate(elm, m, x or 0, y or 0, z or 0)
end

local function forward_patch (elm, m)
  local x, y, z, theta, phi, psi, dx, dy, dz, dtheta, dphi, dpsi in elm
  xrotation(elm, m, (phi   or 0)+(dphi   or 0))    -- phi  : Elevation angle.
  yrotation(elm, m, (theta or 0)+(dtheta or 0))    -- theta: Azimuthal angle.
  srotation(elm, m, (psi   or 0)+(dpsi   or 0))    -- psi  : Roll      angle.
  translate(elm, m, (x or 0)+(dx or 0),
                    (y or 0)+(dy or 0),
                    (z or 0)+(dz or 0) )
end

local function backward_patch (elm, m)
  local x, y, z, theta, phi, psi, dx, dy, dz, dtheta, dphi, dpsi in elm
  translate(elm, m, (x or 0)+(dx or 0),
                    (y or 0)+(dy or 0),
                    (z or 0)+(dz or 0) )
  srotation(elm, m, (psi   or 0)+(dpsi   or 0))    -- psi  : Roll      angle.
  yrotation(elm, m, (theta or 0)+(dtheta or 0))    -- theta: Azimuthal angle.
  xrotation(elm, m, (phi   or 0)+(dphi   or 0))    -- phi  : Elevation angle.
end

-- patch_element(s)

element.srotation :set_functions {
  track = \e,m -> srotation(e, m, e.psi or e.angle),
}

element.yrotation :set_functions {
  track = \e,m -> yrotation(e, m, e.theta or e.angle),
}

element.xrotation :set_functions {
  track = \e,m -> xrotation(e, m, e.phi or e.angle),
}

element.translation :set_functions {
  track = \e,m -> translate(e, m, e.dx or 0, e.dy or 0, e.dz or 0),
}

element.changeref :set_functions {
  track = \e,m -> changeref(e, m),
}

-- sbend ----------------------------------------------------------------------o

__help['track: exact sbend'] = [[
  [Forest98] p.360, ch. 12.2.3
  [Forest02] p.76 (general explaination)
  [Forest06] p.5365, eq. 126, exact drift
  [MADX-PTC] Function SPROTR in file Sh_def_kind.f90
]]

local function sbend_face (elm, m, h)
  local x, px, y, py, t, pt, dir in m
  local k0 = elm.k0 or 0
  local _beta = 1/m.beam.beta

  if dir == 1 then -- to insure reversal symmetry ; horizontal wedge (only dir)
    px = px +(dir*k0*h/2)*x^2
  end

  local ptt =     sqrt(1 + 2*pt*_beta + pt^2 - px^2)
  local xi  = dir*sqrt(1 + 2*pt*_beta + pt^2)*k0*h/ptt^2
  local dxi_px   =  2*px*xi/ptt^2
  local dxi_ddel = -2*xi*(1 + pt)/ptt^2

  x  = x / (1-dxi_px*y^2)
  px = px - xi*y^2
  py = py - 2*xi*x*y
  t  = t  - dxi_ddel*x*y^2

  if(dir == -1) then -- to insure reversal symmetry; horizontal wedge (only dir)
    px = px +(dir*k0*h/2)*x^2
  end

  m.x  = x
  m.px = px
  m.py = py
  m.t  = t
end

local function sbend_wedge (elm, m, e)
  local x, px, y, py, t, pt, T, dir in m
  local k0 = elm.k0 or 0
  local _beta = 1/m.beam.beta
  local b1 = dir*k0
  local sa, ca, sa2 = sin(e), cos(e), sin(2*e)

  if b1 == 0 then
    yrot_track (elm, m, e) return
  end

  local pz  = sqrt(1 + 2*_beta*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local ptt = sqrt(1 + 2*_beta*pt + pt^2        - py^2) -- TODO: stability
  local pxt = px*ca + (pz - b1*x)*sa
  local pzs = sqrt(1 + 2*_beta*pt + pt^2 - py^2 - pxt^2) -- TODO: stability
  local yt  = (e + asin(px/ptt) - asin(pxt/ptt)) / b1

  m.x  = x*ca + (x*px*sa2 + sa^2*(2*x*pz-b1*x^2)) / (pzs+pz*ca-px*sa)
  m.px = pxt
  m.y  = y + py * yt
  m.t  = t - yt*(_beta + pt)
end

local function sbend_fringe_field (elm, m, pos)
-- Lee-Whiting formula, E. Forest ch 13.2.3, eq 13.33
--  TODO: FINT and FINTX to have different FINT at entrance /exit
  local x, px, y, py, t, pt, T, dir in m
  local k0   = elm.k0 or 0
  local _beta = 1/m.beam.beta
-- soft edge
  local fint = elm.fint or 0  -- fringe field integral at entrance and exit of the bend
  local hgap = elm.hgap or 0  -- half gap of the magnet
  local fsad = 0

  if fint*hgap ~= 0.0 then  -- soft edge
      fsad = 1/(fint*hgap*2)/36
  end

  local b = m.beam.charge*k0
  if pos == 'exit' then
     b = -b
  end

  local pz = sqrt(1 + 2*_beta*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local time_fac = _beta + pt
  local rel_p    = sqrt(1 + 2*_beta*pt + pt^2)

  local c3=b^2*fsad/rel_p

  local xp, yp = px/pz or 0, py/pz or 0
  local d  = matrix {
    { (1+xp^2) / pz, xp*yp    / pz, -time_fac*xp /pz^2 },
    {  xp*yp   / pz, (1+yp^2) / pz, -time_fac*yp /pz^2 },
    { -xp          ,   -yp        ,  time_fac    /pz   },
  }

  local fi0 = atan((xp/(1 + yp^2)))-2*b*fint*hgap*(1 + xp^2*(2 + yp^2))*pz
  local co2 = b/cos(fi0)^2
  local co1 = co2/(1 + (xp/(1 + yp^2))^2)

  local fi = {0, 0, 0}
  fi[1] =    co1 /       (1 + yp^2) - 2*co2*b*fint*hgap* (2*xp*(2 + yp^2)*pz)
  fi[2] =-2*co1*xp*yp/(1 + yp^2)^2  - 2*co2*b*fint*hgap* (2*xp^2*yp)*pz
  fi[3] =                           - 2*co2*b*fint*hgap* (1 + xp^2*(2 + yp^2))

  fi0=b*tan(fi0)

  b=0
  for i=1,3 do -- y column
    b=fi[i]*d:get(i,2) + b
  end
  m.y  = 2*m.y/(1 + sqrt(1 - 2*b*m.y))
  m.py = py - fi0*m.y

  b=0
  for i=1,3 do -- x column
    b=fi[i]*d:get(i,1) + b
  end
  m.x = m.x+0.5*b*m.y^2

  b=0
  for i=1,3 do -- z column
    b=fi[i]*d:get(i,3) + b
  end
  m.t = t + 0.5*b*m.y^2

  -- soft edge
  m.py = m.py - 4*c3*m.y^3
  m.t  = m.t  +   c3*m.y^4/rel_p^2*time_fac
end

local function sbend_fringe (elm, m, pos)
  if elm.kill_fringe then return end

  if pos == 'entry' and not elm.kill_ent_fringe then
    local e, h = elm.e1 or 0, elm.h1 or 0
    if abs(e) < minang then
      sbend_face         (elm, m,  h)
      sbend_fringe_field (elm, m,  'entry')
    else
      yrotation          (elm, m,  e)
      sbend_face         (elm, m,  h)
      sbend_fringe_field (elm, m,  'entry')
      sbend_wedge        (elm, m, -e)
    end

  elseif pos == 'exit' and not elm.kill_exi_fringe then
    local e, h = elm.e2 or 0, elm.h2 or 0
    if abs(e) < minang then
      sbend_fringe_field (elm, m, 'exit')
      sbend_face         (elm, m,  h)
    else
      sbend_wedge        (elm, m, -e)
      sbend_fringe_field (elm, m, 'exit')
      sbend_face         (elm, m,  h)
      yrotation          (elm, m,  e)
    end
  else error("invalid argument #3 ('entry' or 'exit' expected")
  end
end

-- cavities -------------------------------------------------------------------o

local function cav_kick_track (elm, m, l) --RF CAV, CRAB, RFMULT with l>0 kick (kickcavr)
  local x, px, y, py, t, pt, nmul, dirchg in m
  local tt, phase, phase0 = elm.tt or 0, elm.phase or 0, elm.phase0 or 0
  local ff, ph = elm.f or {}, elm.ph or {}
  local a, r = elm.a or  0, elm.r or 0
-- nocavity.and.(.not.always_on)  return

  local pc = beam.pc
  local volt_c = 1.0e-3
  local freq, harm, volt, lag = elm.freq or 0, elm.harm or 0, elm.volt or 0, elm.lag or 0
  local nbessel, nf = elm.nbessel or  0, elm.nf or 1
  if freq == 0 and harm == 0 then
    error("either frequency or harmonic number has to be defined for RF Cavity " .. elm.name)
  end

local omega = twopi*freq / clight
local vl    = m.dirchg*l*volt*volt_c/pc
local df, f, r2 = 0, 1, 1

do ko=1, nf -- over modes
  do i=1,nbessel
    r2  = -r2*(ko*omega)^2/(4*(i+1)^2)
    dr2 =  r2*i
    df  =  df + 2*dr2
    r2  =  r2*(x^2+y^2)
    f   =  f + r2
  end

  if nbessel > 0 then
    m.px = px-x*ff[ko]* df * vl * cos(arg)/(ko*omega)
    m.py = py-y*ff[ko]* df * vl * cos(arg)/(ko*omega)
  end

  local arg = ko*omega*(t + tt) + phas + ph[ko] + phase0
  m.pt = m.pt -ff[ko]*f*vl*sin(arg)

  local lw, byt = elm.l>0 and l/elm.l or 1
  local by = lw*knl[nmul] / fact(nmul-1)
  local bx = lw*ksl[nmul] / fact(nmul-1)

  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + lw*knl[i] / fact(i-1)
    bx  = y*by + x*bx + lw*ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = m.px - ff[ko]*dirchg*by/pc*(a + r*cos(arg))
  m.py = m.py + ff[ko]*dirchg*bx/pc*(a + r*cos(arg))

  by = -lw*knl[nmul] / fact(nmul-1) / nmul
  bx = -lw*ksl[nmul] / fact(nmul-1) / nmul

  for i=nmul,2,-1 do
    byt = x*by - y*bx - lw*knl[i-i] / fact(i-2) / (i-1)
    bx  = y*by + x*bx - lw*ksl[i-i] / fact(i-2) / (i-1)
    by  = byt
  end

  byt = x*by - y*bx
  bx  = y*by + x*bx
  by  = byt

  m.pt = m.pt + ff[ko]*(ko*omega)*dirchg*by/pc * r *sin(arg)
  end    --over modes
end

local function cav_track_thin (elm, m, l) -- for tracking thin rf mult
  local x, px, y, py, t, pt, nmul, dirchg in m
  local tt, phase, phase0 = elm.tt or 0, elm.phase or 0, elm.phase0 or 0
  local ff, ph = elm.f or {}, elm.ph or {}
  local a, r = elm.a or  0, elm.r or 0
-- nocavity.and.(.not.always_on)  return
  if 'nocavity' and (not 'always_on') then return end

  local pc = beam.pc
  local volt =elm.volt
  local volt_c = 1.0e-3
  local omega = twopi*freq / clight

  do ko=1, nf -- over modes

  local arg = ko*omega*(t + tt) + phas + ph[ko] + phase0
  m.pt = m.pt - dirchg*volt_c*ff[ko]*volt*sin(arg)/pc

  -- BUG: knl, ksl never retrieved
  local lw, byt = elm.l>0 and l/elm.l or 1
  local by = lw*knl[nmul] / fact(nmul-1)
  local bx = lw*ksl[nmul] / fact(nmul-1)

  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + lw*knl[i] / fact(i-1)
    bx  = y*by + x*bx + lw*ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = m.px - ff[ko]*dirchg*by/pc*(a + r*cos(arg))
  m.py = m.py + ff[ko]*dirchg*bx/pc*(a + r*cos(arg))

  by = -lw*knl[nmul] / fact(nmul-1) / nmul
  bx = -lw*ksl[nmul] / fact(nmul-1) / nmul

  for i=nmul,2,-1 do
    byt = x*by - y*bx - lw*knl[i-i] / fact(i-2) / (i-1)
    bx  = y*by + x*bx - lw*ksl[i-i] / fact(i-2) / (i-1)
    by  = byt
  end

  byt = x*by - y*bx
  bx  = y*by + x*bx
  by  = byt

  m.t = t - ff[ko]*(ko*omega)*dirchg*by/pc * r *sin(arg)
  end    --over modes
end

local function adjust_time_cav(elm, m, pos)
  local x, px, y, py, t, pt, T, dir in m
  local _beta = 1/m.beam.beta

  local delta_e = elm.delta_e or 0
  if pos == 'entry' then
    delta_e = pt
    if 'nocavity' and (not 'always_on') then return end

    if elm.l < minlen then
      cav_track_thin(elm, m)
      delta_e=(m.pt - delta_e)*beam.pc
          return
    end

  else
    if elm.l < minlen then return end
      t = t - elm.l*_beta -- TO CHECK
      delta_e = (pt - delta_e)*beam.pc
  end

end

local function fringe_cav(elm, m, pos)
  local x, px, y, py, t, pt, T, dir in m
  if('nocavity'  and( not 'always_on')) then return end
  if elm.kill_fringe     == 1               or
   elm.kill_ent_fringe == 1 and pos ==  'entry' or
   elm.kill_ext_fringe == 1 and pos ==  'exit' then return
  end

  if not ('fringe' or elm.nbessel == -1 ) then return end

  if elm.l < minlen then return end

  local kbmad = 0
  if elm.nbessel == -1 then
      kbmad = 1
  end

  local z = 0
  if pos == 'entry' then
    z=elm.l
  end
  local freq, volt = elm.freg or 0, elm.volt or 0
  local volt_c = 1.0e-3
  local pc = beam.pc
  local omega = twopi*freq / clight
  local vl    = m.dirchg*volt*volt_c/pc
  if pos == 'exit' then vl = -vl end

  local tt, phase, phase0 = elm.tt or 0, elm.phase or 0, elm.phase0 or 0
  local ph = elm.f or {}, elm.ph or {}
  local nf = elm.nf or 1
   do ko=1, nf   -- over modes
    s1 = cos(kbmad*ko*omega*z)*sin(ko*omega*(t + tt) + phas + phase0 + ph[ko])
    c1 = cos(kbmad*ko*omega*z)*cos(ko*omega*(t+  tt) + phas + phase0 + ph[ko])
    m.px = m.px + 0.5*vl*s1*m.x
    m.py = m.py + 0.5*vl*s1*m.y
    m.pt = m.pt - 0.25*(m.x^2 + m.y^2)*vl*c1*omega*ko
   end
end

local function cavity_track (elm, m)  -- thin rf mult
  local l, angle, tilt in elm

  if abs(angle) >= minang then
    error("invalid straight element angle (too curved): " .. elm.name)
  end

  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end

  adjust_time_cav(elm, m, 'entry')
  fringe_cav     (elm, m, 'entry')

  if l >= minlen then
   thick_track (elm, m, straight_drift_track, cav_kick_track)
  end

  fringe_cav     (elm, m, 'exit')
  adjust_time_cav(elm, m, 'exit')

  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end
end

-- solenoid -------------------------------------------------------------------o

local function solenoid_drift_track (elm, m, l)
  local ks in elm

  if is_nil(ks) or ks == 0 then
    straight_drift_track(elm, m, l) return
  end

  local x, px, y, py, t, pt, T in m
  local _beta = 1/m.beam.beta

  local bsol = m.dirchg*ks/2
  local xp = px + bsol*y
  local yp = py - bsol*x

  local l_pz  = l/sqrt(1 + 2*_beta*pt + pt^2 - xp^2 - yp^2) -- TODO: stability
  local angle = l_pz*bsol

  local ca, sa, sc = cos(angle), sin(angle), sinc(angle)

  local xt  = ca*x  + l_pz*sc*px
  local pxt = ca*px - l_pz*sc*x *bsol^2
  local yt  = ca*y  + l_pz*sc*py
  local pyt = ca*py - l_pz*sc*y *bsol^2

  m.x  = ca*xt  + sa*yt
  m.px = ca*pxt + sa*pyt
  m.y  = ca*yt  - sa*xt
  m.py = ca*pyt - sa*pxt

  m.t  = t - (_beta+pt)*l_pz + (1-T)*l*_beta
end

local function solenoid_track (elm, m)
  local l, angle, tilt in elm
  if abs(angle) >= minang then
    error("invalid straight element angle (too curved): " .. elm.name)
  elseif l < minlen then
    error("invalid straight element length (too short): " .. elm.name)
  end

  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end

  -- TODO: boundary elements, radiation and aperture checks.
  thick_track (elm, m, solenoid_drift_track, straight_kick_track)

  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end
end

element.solenoid :set_functions { track = solenoid_track } -- TODO

-- integrator schemes ---------------------------------------------------------o

local integrate = require 'madl_sympint'

-- frame kinds ----------------------------------------------------------------o

local function drift_track (elm, m)
  local l in elm
  local ns = #elm

  m.nmul = 0 -- for sanity checks

  if ns == 0 then -- no sub-elements
    straight_drift_track(elm, m, l) return
  end

  local s, ds, at = 0
  for i=1,ns do   -- sub-elements
    local selm = elm[i]
    at = assert(selm.at, "invalid sub-element position (at expected)")
    ds = at - s
    assert(ds >= 0, "invalid sub-element position (positive ds expected)")
    if ds >= minlen then
      straight_drift_track(elm, m, ds)
    end
    s = s + ds
    assert(selm.l == 0, "invalid sub-element length (0 expected)")
    selm:track(m)
  end
  ds = l-s
  assert(ds >= 0, "invalid sub-element position (positive ds expected)")
  if ds >= minlen then
    straight_drift_track(elm, m, ds)
  end
end

local function thick_track (elm, m, drift, kick)
  local l, angle, method in elm
  local nmul = abs(l) <= minlen and get_mult(elm, m) or get_kmult(elm, m, l)
  local integrator = nmul == 0 and drift or integrate[method or m.method]
  local ns = #elm

  if ns == 0 then -- no sub-elements
    integrator(elm, m, l, drift, kick) return
  end

  local s, ds, at = 0
  for i=1,ns do   -- sub-elements
    local selm = elm[i]
    at = assert(selm.at, "invalid sub-element position (at expected)")
    ds = at - s
    assert(ds >= 0, "invalid sub-element position (positive ds expected)")
    if ds >= minlen then
      integrator(elm, m, ds, drift, kick)
    end
    s = s + ds
    assert(selm.l == 0, "invalid sub-element length (0 expected)")
    selm:track(m)
  end
  ds = l-s
  assert(ds >= 0, "invalid sub-element position (positive ds expected)")
  if ds >= minlen then
    integrator(elm, m, ds, drift, kick)
  end
end

-- frame kinds ----------------------------------------------------------------o

local function thin_track (elm, m) -- e.g. multipole
  local l in elm

  if l >= minlen then
    error("invalid thin element length (too long): " .. elm.name)
  end

  local nmul = get_mult(elm, m)
  if nmul == 0 then return end

  if ptc_compat == true then
    thin_kick_track  (elm, m, 0)
  else
    straight_kick_track(elm, m, 0)
  end
end

local function straight_track (elm, m) -- e.g. rbend
  local l, angle, tilt in elm

  if abs(angle) >= minang then
    error("invalid straight element angle (too curved): " .. elm.name)
  elseif not madx_compat and l < minlen then
    error("invalid straight element length (too short): " .. elm.name)
  end
  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end

  -- TODO: boundary elements, radiation and aperture checks.
  thick_track(elm, m, straight_drift_track, straight_kick_track)

  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end
end

local function curved_track (elm, m) -- e.g. sbend
  local l, angle, tilt in elm
  if abs(angle) < minang then
    error("invalid curved element angle (too straight): " .. elm.name)
  elseif l < minlen then
    error("invalid curved element length (too short): " .. elm.name)
  end

  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end

  sfringe_track(elm, m, 'entry')
  -- TODO: boundary elements, radiation and aperture checks.
  thick_track  (elm, m, curved_drift_track, curved_kick_track)
  sfringe_track(elm, m, 'exit')

  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end
end

element. thin_element :set_functions { track =  thin_track }
element.drift_element :set_functions { track = drift_track }
element.thick_element :set_functions { track = thick_track }

-- track command --------------------------------------------------------------o

local mtable, Command in MAD
local observe in MAD.element.flags

local _trk = {}

local function make_mtable (self)
  if self.mtable then return self.mtable end -- already built
  if not self.save then return nil end       -- nothing to build

  local sequence, drift, range, nturn in self
  local name, direction in sequence
  local nrow = sequence:length_of(range, nturn) * (drift and 2 or 1)

  return mtable 'track' {
    type='track', title=name, direction=direction,
    {'name'}, 'kind', 's', 'l',
    'x', 'px', 'y', 'py', 't', 'pt',
    [_trk]=_trk,
  } : reserve(math.min(nrow, 1e5))
end

local function fill_mtable (tbl, name, kind, m, s, l)
  -- keep order!
  tbl = tbl + { name, kind, s, l, m.x, m.px, m.y, m.py, m.t, m.pt }
end

local function make_mflow (self)
  local sequence, beam, mflow in self

  if not is_nil(mflow) then
    if sequence ~= mflow.seq then -- new sequence -> update
      local len, dir = #sequence, sequence.direction
      mflow.seq, mflow.ds, mflow.len, mflow.dir = sequence, 0, len, dir
    end
    if beam ~= mflow.beam then -- new beam -> update
      mflow.beam, mflow.dirchg = beam, mflow.dir*beam.charge
    end
    return mflow
  end

  local x, px, y, py, t, pt, X0 in self
  x  = x  or X0.x  or X0[1] or 0
  px = px or X0.px or X0[2] or 0
  y  = y  or X0.y  or X0[3] or 0
  py = py or X0.py or X0[4] or 0
  t  = t  or X0.t  or X0[5] or 0
  pt = pt or X0.pt or X0[6] or 0

  local nstep, nslice, method, total_path, save, drift in self
  local len, dir = #sequence, sequence.direction
  local T = total_path == true and 1 or 0

  return { x=x, px=px, y=y, py=py, t=t, pt=pt, T=T,           -- initial vars
           nmul=0, knl={}, ksl={},                            -- internal vars
           s=0, ds=0, len=len, dir=dir, ndft=0,               -- internal status
           nst=nstep, nsl=nslice, method=method,              -- user setup
           seq=sequence, save=save, drift=save and drift,     -- user status
           beam=beam, dirchg = dir*beam.charge,               -- user beam
           [_trk]=_trk }
end

local function exec (self)
  assert(self[_trk], "invalid argument #1 (survey expected)")
  local seq  = assert(self.sequence, "missing sequence")
  local beam = assert(self.beam    , "missing beam")
  assert(is_sequence(seq), "invalid sequence")
  assert(is_beam(beam)   , "invalid beam")

  local map = make_mflow (self)
  local tbl = make_mtable(self)

  assert(is_nil(tbl) or tbl[_trk] == _trk, "invalid track table")
  assert(               map[_trk] == _trk, "invalid track map"  )

  local s, ds, len, ndft, save, drift in map
  local range, nturn in self

  -- dynamic tracking
  for i,elm in seq:iter(range, nturn) do
    local l in elm

    -- implicit drift
    if ds >= minlen then
      straight_drift(nil, map, ds)
      if drift and elm:is_selected(observe) then
        ndft = ndft+1
        fill_mtable(tbl, 'DRIFT_'..ndft, 'drift', map, s+ds, ds)
      end
    elseif ds <= -minlen then
      error(string.format("negative implicit drift %s in %s['%s'] at %s",
            ds, seq.name, elm.name, s))
    end
    s = s+ds

    -- sequence element
    do
      local tbl, map = elm:track(map)
      if tbl then return tbl, map end -- stop (e.g. slink)
    end
    if save and elm:is_selected(observe) then
      local name, kind in elm
      fill_mtable(tbl, name, kind, map, s+l, l)
    end
    s  = s+l
    ds = i < len and seq:spos(i+1) - (seq:spos(i)+l) or 0
  end
  map.s, map.ds, map.ndft = s, ds, ndft

  return tbl, map
end

-- track command template

local track = Command 'track' {
  X0={0,0,0,0,0,0}, nturn=0, drift=true, save=true,
  nstep=1, nslice=2, method='simple', total_path=false,
  exec=exec, [_trk]=true,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  track  = track,
  __help = __help,
}
