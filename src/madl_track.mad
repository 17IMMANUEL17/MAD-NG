--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Shreyber, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.track = [=[
NAME
  track -- track

SYNOPSIS
  TODO

DESCRIPTION
  The module track provides...

RETURN VALUES
  The track command

SEE ALSO
  element, sequence, survey
]=]

__help['track: references'] = [=[
[Wolski14]    A. Wolski,  "Beam Dynamics in High Energy Particle Accelerators".
[Forest98]    E. Forest,  "Beam Dynamics, A New Attitude and Framework".
[MADX PTC]    MAD-X PTC Code, rev. 6099
[Forest02]    E. Forest,  "Introduction to Polymorphic Tracking Code",
              KEK report 2002-3.
[Yoshida90]   H. Yoshida, "Construction of higher order symplectic integrators",
              Phys.Let A, Volume 150, number 5,6,7.
[Burkhardt13] H. Burkhardt et al., "Improved Teapot Method and Tracking with
              Thick Quadrupoles for the LHC and its Upgrade", IPAC 2013.
[Ripken1995]  K. Heinemann, G. Ripken, and F. Schmidt. "Construction of nonlinear
              symplectic six-dimensional thin-lens maps by exponentiation.""  Technical
              Report 95-189, DESY, 1995
[SixTrackPG]  R. De. Maria et al., "SixTrack Physics Manual", CERN, September,2016.

]=]

__help['track: straight drift map'] = [[
  [1] Drift Space, ch. 3.1, p.86, eq.(3.13-3.18)
  [2] Drift, ch. 10.4.3.1, eq. (10.23a-10.23c)
  [3] PTC, Function DRIFTR in file Sh_def_kind.f90, same formula as [1]
]]

__help['track: straight maps'] = [[
  [2] p.352, ch. 12.1
      DKD: ch 12.1.3, p. 353
      MKM: ch 12.1.4, p.354
  [3] DKD: p. 72, Section K.4.2,
           PTC, Function INTER_STREX in file Sh_def_kind.f90)
      MKM: p. 75, Section K.4.7,
           PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

__help['track: curved maps'] = [[
  [2] p.357, ch. 12.2
  [3] PTC, p. 76, Section K.4.9,Function INTER_TEAPOT in file Sh_def_kind.f90)
]]

__help['track: pushtkt'] = [[
[2] MKM: p. 75, Section K.4.7,
[3] PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

__help['track: straight matrix-kick'] = [[
  [2] p.358, ch. 12.2.2 Drift-Kick Split, drift in polar coordinates
  [3] p. 76, PTC, Function SPROTR in file Sh_def_kind.f90)
]]

__help['track: curved drift map'] = [[
  [2] p.358-361, ch. 12.2.2 Drift-Kick Split, drift in polar coordinates
  [3] p. 76, PTC, Function SPROTR in file Sh_def_kind.f90)
]]

__help['track: curved kick map'] = [[
  [2] p.358-361, ch. 12.2.2 Drift-Kick Split, kick in polar coordinates, eq. (12.18a-12.18f)
  [3] p. 76, PTC, Function SKICK in file Sh_def_kind.f90
  [7] Bending magnet, ch.4.3 p. 22, eq.(4.12) and its solution --not PTC map
  [8] Thin Dipole, ch.3.2.2, eq. (48-50) - not PTC map
]]

__help['track: kick'] = [[
  [2] p.354, ch. 12.1.3
  [2] p. 72, Section K.4.2,
  [3] PTC, Function KICKEXR in file Sh_def_kind.f90)
  [3] PTC, Function KICKR in file Sh_def_kind.f90)
]]
__help['track: multipole kick map'] = [[
  [7] Thin Lens Transport Map, ch. 4.6.2, p.26, eq.(4.23) and its solution
  [8] Thin multipole, ch. 3.5 , eq. (91-94)
  [3] PTC, Function KICKTR in file Sh_def_kind.f90
]]



--[[TODO:
-Add charge, direction, mass(?)
-Deltap (recalculation of pt)
- KICKEX: how to read properly strength of thick element (i.e. convert
k1,k1s, k2 etc to knl,ksl)
-????KICKEX: add a check for thick element that there is only one strength,
i.e. quad only has k1 and not k0, k2 or???
]]
-- add patch, rotation + translation

--[[ METHOD:
2 - 2nd order, 1 kick per integration step
4 - Ruth-Neri-Yoshida 4th order, 3 kicks per step
6 - Yoshida 6th order, 7kicks per step
]]

--[[
  frame of integration:

 angle == 0 and k0 ~= 0 rbend on (??? rbend with the straight ref. frame ??)
 STRAIGHT REF. FRAME FOR RBEND : STREX

 angle == 0 and k0 == 0 rbend off (i.e. drift)
 DRIFT-TRACK

 angle ~= 0 and k0 ~= 0 sbend on
 SBEND, default RBEND:  TEAPOT

 angle ~= 0 and k0 == 0 sbend off( useless, what kind of element is this? broken sbend?)
       <=> rbend with l = l_arc and k0 = angle, what about errors?

 angle == 0 abd k0 == 0 but k[n] ~= 0: straight magnet
 DKD (model = 1 ): STREX ; MKM (model = 2): TKTF
]]

-- locals ---------------------------------------------------------------------o

local vector, matrix                                             in MAD
local is_nil, is_number, is_matrix, is_sequence, is_beam         in MAD.typeid
local abs, sqrt, max, sin, cos, tan, asin, acos, atan, atan2,
      sinc, fact                                                 in MAD.gmath
local minlen, minang                                             in MAD.constant

local maxmult   = 20
local ptccompat = true

-- implementation -------------------------------------------------------------o

local function invalid_track (elm)
  error(string.format("invalid element %s of kind %s with length %s",
                      elm.name, elm.kind, elm.l))
end

local function empty_track ()
end

-- Put element multipoles in mflow

local function get_mult0 (elm, m) -- l=0
  local knl, dknl = elm.knl or {}, elm.dknl or {}
  local ksl, dksl = elm.ksl or {}, elm.dksl or {}
  local nmul = max(#knl, #ksl, #dknl, #dksl)

  for i=1,nmul do
    m.knl[i] = (knl[i] or 0) + (dknl[i] or 0)
    m.ksl[i] = (ksl[i] or 0) + (dksl[i] or 0)
  end
  m.nmul = nmul
  return nmul
end

local function get_mult (elm, m, l) -- general
  local k0 , k1 , k2 , k3  in elm
  local k0s, k1s, k2s, k3s in elm
  local nkn = k3  and 4 or k2  and 3 or k1  and 2 or k0  and 1 or 0
  local nks = k3s and 4 or k2s and 3 or k1s and 2 or k0s and 1 or 0
  local knl, dknl = elm.knl or {}, elm.dknl or {}
  local ksl, dksl = elm.ksl or {}, elm.dksl or {}
  local nmul = max(#knl, #ksl, #dknl, #dksl, nkn, nks)

  if nmul >= 1 then
    local kn = { k0 , k1 , k2 , k3  }
    local ks = { k0s, k1s, k2s, k3s }
    for i=1,nmul do
      m.knl[i] = (kn[i] or 0)*l + (knl[i] or 0) + (dknl[i] or 0)
      m.ksl[i] = (ks[i] or 0)*l + (ksl[i] or 0) + (dksl[i] or 0)
    end
  end
  m.nmul = nmul
  return nmul
end

-- S-rotation (roll, tilt)

local function srot_track (elm, m, angle)
  local sa, ca = sin(angle), cos(angle)
  local x, px, y, py in m

  m.x  = ca*x  + sa*y
  m.y  = ca*y  - sa*x
  m.px = ca*px + sa*py
  m.py = ca*py - sa*px
end

-- Y-rotation (yaw)

local function yrot_track (elm, m, angle) -- XZ rot (aka Dragt's PROT)
  local sa, ca, ta = sin(angle), cos(angle), tan(angle)
  local x, px, y, py, t, pt in m
  local beta_inv = 1/m.beam.beta
  local pz = sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local pz_ = 1/pz
  local ptt = 1 - ta*px*pz_

  m.x  = x/(ca*ptt)
  m.px = ca*px + sa*pz
  m.y  = y + ta*x*py*pz_/ ptt
  m.t  = t - ta*x*pz_*(beta_inv+pt) / ptt

end

-- X-rotation (pitch)

local function xrot_track (elm, m, angle) -- YZ rot
  local sa, ca, ta = sin(angle), cos(angle), tan(angle)
  local x, px, y, py, t, pt in m
  local beta_inv = 1/m.beam.beta
  local pz = sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local pz_ = 1/pz_
  local ptt = 1 - ta*px*pz_

  -- same as yrot with x <-> y and px <-> py
  m.x  = x + ta*y*px*pz_/ptt
  m.y  = y/(ca*ptt)
  m.py = ca*py + sa*pz
  m.t  = t - ta*y*pz_*(beta_inv+pt) / ptt
end

-- XYZ-Translation (dz treated as drift length)

local function trans_track (elm, m, d) -- drift + XY trans
  local x, px, y, py, t, pt in m
  local beta_inv = 1/m.beam.beta
  local pz = sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local pz_ = 1/pz_

  m.x = x-d[1] + d[3]*px*pz_
  m.y = y-d[2] + d[3]*py*pz_
  m.t = t-d[3] * (beta_inv+pt)*pz_
end

-- Fringe fields (dipole)

local function face_track(elm, m, h)
  local x, px, y, py, t, pt, dir in m
  local k0 = elm.k0 or 0
  local beta_inv = 1/m.beam.beta

  if dir == 1 then -- to insure reversal symmetry ; horizontal wedge (only dir)
    px = px +(dir*k0*h/2)*x^2
  end

  local ptt =     sqrt(1 + 2*pt*beta_inv + pt^2 - px^2)
  local xi  = dir*sqrt(1 + 2*pt*beta_inv + pt^2)*k0*h/ptt^2
  local dxi_px   =  2*px*xi/ptt^2
  local dxi_ddel = -2*xi*(1 + pt)/ptt^2

  x  = x / (1-dxi_px*y^2)
  px = px - xi*y^2
  py = py - 2*xi*x*y
  t  = t  - dxi_ddel*x*y^2

  if(dir == -1) then -- to insure reversal symmetry; horizontal wedge (only dir)
    px = px +(dir*k0*h/2)*x^2
  end

  m.x  = x
  m.px = px
  m.py = py
  m.t  = t

end

local function wedge_track(elm, m, e)
  local x, px, y, py, t, pt, T, dir in m
  local k0   = elm.k0 or 0
  local beta_inv = 1/m.beam.beta
  local b1 = dir*k0
  local sa, ca, sa2 = sin(e), cos(e), sin(2*e)

  if b1 == 0 then
    yrot_track (elm, m, e) return
  end

  local pz  = sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local pxt = px*ca + (pz - b1*x)*sa
  local ptt = sqrt(1 +2*pt*beta_inv + pt^2 - py^2)         -- TODO: stability
  local pzs = sqrt(1 +2*pt*beta_inv + pt^2 - py^2 - pxt^2) -- TODO: stability
  local yt  = (e + asin(px/ptt) - asin(pxt/ptt)) / b1

  m.x  = x*ca + (x*px*sa2 + sa^2*(2*x*pz-b1*x^2)) / (pzs+pz*ca-px*sa)
  m.px = pxt
  m.y  = y + py * yt
  m.t  = t - yt*(beta_inv + pt)
end

local function fringe_dipole(elm, m, pos) -- Lee-Whiting formula, E. Forest ch 13.2.3, eq 13.33
--  TODO: FINT and FINTX to have different FINT at entrance /exit

  local x, px, y, py, t, pt, T, dir in m
  local k0   = elm.k0 or 0
  local beta_inv = 1/m.beam.beta
-- soft edge
  local fint = elm.fint or 0  -- fringe field integral at entrance and exit of the bend
  local hgap = elm.hgap or 0  -- half gap of the magnet
  local fsad = 0

  if fint*hgap ~= 0.0 then  -- soft edge
      fsad = 1/(fint*hgap*2)/36
  end

  local b  = m.chg*k0
  if pos == 'exit' then
     b = -b
  end

  local pz = sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local time_fac = beta_inv + pt
  local rel_p    = sqrt(1 + 2*beta_inv*pt + pt^2)

  local c3=b^2*fsad/rel_p

  local xp, yp = px/pz or 0, py/pz or 0
  local d  = matrix {
    { (1+xp^2) / pz, xp*yp    / pz, -time_fac*xp /pz^2 },
    {  xp*yp   / pz, (1+yp^2) / pz, -time_fac*yp /pz^2 },
    { -xp          ,   -yp        ,  time_fac    /pz   },
  }

  local fi0 = atan((xp/(1 + yp^2)))-2*b*fint*hgap*(1 + xp^2*(2 + yp^2))*pz
  local co2 = b/cos(fi0)^2
  local co1 = co2/(1 + (xp/(1 + yp^2))^2)

  local fi = {0, 0, 0}
  fi[1] =    co1 /       (1 + yp^2) - 2*co2*b*fint*hgap* (2*xp*(2 + yp^2)*pz)
  fi[2] =-2*co1*xp*yp/(1 + yp^2)^2  - 2*co2*b*fint*hgap* (2*xp^2*yp)*pz
  fi[3] =                           - 2*co2*b*fint*hgap* (1 + xp^2*(2 + yp^2))

  fi0=b*tan(fi0)

  b=0
  for i=1,3 do -- y column
    b=fi[i]*d:get(i,2) + b
  end
  m.y  = 2*m.y/(1 + sqrt(1 - 2*b*m.y))
  m.py = py - fi0*m.y

  b=0
  for i=1,3 do -- x column
    b=fi[i]*d:get(i,1) + b
  end
  m.x = m.x+0.5*b*m.y^2

  b=0
  for i=1,3 do -- z column
    b=fi[i]*d:get(i,3) + b
  end
  m.t = t + 0.5*b*m.y^2

  -- soft edge
  m.py = m.py - 4*c3*m.y^3
  m.t  = m.t  +   c3*m.y^4/rel_p^2*time_fac

end

local function sfringe_track(elm, m, pos) -- dipole fringe field
  --TODO: to add dir == -1
  -- e: edge angle
  if elm.kill_fringe     == 1               or
     elm.kill_ent_fringe == 1 and pos ==  'entry' or
     elm.kill_ext_fringe == 1 and pos ==  'exit' then return end

  if pos == 'entry' then
    local e, h = elm.e1 or 0, elm.h1 or 0
    if e and abs(e) >= minang then
      yrot_track    (elm, m,  e)
      face_track    (elm, m,  h)
      fringe_dipole (elm, m,  'entry')
      wedge_track   (elm, m, -e)
    else
      face_track    (elm, m,  h)
      fringe_dipole (elm, m,  'entry')
    end
  elseif pos == 'exit' then
    local e, h = elm.e2 or 0, elm.h2 or 0
    if e and abs(e) >= minang then
      wedge_track   (elm, m, -e)
      fringe_dipole (elm, m, 'exit')
      face_track    (elm, m,  h)
      yrot_track    (elm, m,  e)
    else
      fringe_dipole (elm, m, 'exit')
      face_track    (elm, m,  h)
    end
  end
end
---Cavity
local function cav_track_thin (elm, m, l) -- for tracking thin rf mult
  m.in_action(elm, m, l, 'cav_track_thin')
  local x, px, y, py, t, pt, nmul, dirch in m
  local tt, phase, phase0 = elm.tt or 0, elm.phase or 0, elm.phase0 or 0
  local ff, ph = elm.f or {}, elm.ph or {}
  local a, r = elm.a or  0, elm.r or 0
-- nocavity.and.(.not.always_on)  return
  if 'nocavity' and (not 'always_on') then return end

  local pc = beam.pc
  local volt =elm.volt
  local volt_c = 1.0e-3
  local omega = twopi*freq / clight

  do ko=1, nf -- over modes

  local arg = ko*omega*(t + tt) + phas + ph[ko] + phase0
  m.pt = m.pt - dirch*volt_c*ff[ko]*volt*sin(arg)/pc

  local lw, byt = elm.l>0 and l/elm.l or 1
  local by = lw*knl[nmul] / fact(nmul-1)
  local bx = lw*ksl[nmul] / fact(nmul-1)

  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + lw*knl[i] / fact(i-1)
    bx  = y*by + x*bx + lw*ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = m.px - ff[ko]*dirch*by/pc*(a + r*cos(arg))
  m.py = m.py + ff[ko]*dirch*bx/pc*(a + r*cos(arg))

  by = -lw*knl[nmul] / fact(nmul-1) / nmul
  bx = -lw*ksl[nmul] / fact(nmul-1) / nmul

  for i=nmul,2,-1 do
    byt = x*by - y*bx - lw*knl[i-i] / fact(i-2) / (i-1)
    bx  = y*by + x*bx - lw*ksl[i-i] / fact(i-2) / (i-1)
    by  = byt
  end

  byt = x*by - y*bx
  bx  = y*by + x*bx
  by  = byt

  m.t = t - ff[ko]*(ko*omega)*dirch*by/pc * r *sin(arg)
  end    --over modes
  m.out_action(elm, m, l, 'cav_track_thin')
end

local function adjust_time_cav(elm, m, pos)
  local x, px, y, py, t, pt, T, dir in m
  local beta_inv = 1/m.beam.beta

  local delta_e = elm.delta_e or 0
  if pos == 'entry' then
    delta_e = pt
    if 'nocavity' and (not 'always_on') then return end

    if elm.l < minlen then
      cav_track_thin(elm, m)
      delta_e=(m.pt - delta_e)*beam.pc
          return
    end

  else
    if elm.l < minlen then return end
      t = t - elm.l*beta_inv -- TO CHECK
      delta_e = (pt - delta_e)*beam.pc
  end

end

local function fringe_cav(elm, m, pos)
  local x, px, y, py, t, pt, T, dir in m
  if('nocavity'  and( not 'always_on')) then return end
  if elm.kill_fringe     == 1               or
   elm.kill_ent_fringe == 1 and pos ==  'entry' or
   elm.kill_ext_fringe == 1 and pos ==  'exit' then return
  end

  if not ('fringe' or elm.nbessel == -1 ) then return end

  if elm.l < minlen then return end

  local kbmad = 0
  if elm.nbessel == -1 then
      kbmad = 1
  end

  local z = 0
  if pos == 'entry' then
    z=elm.l
  end
  local freq, volt = elm.freg or 0, elm.volt or 0
  local volt_c = 1.0e-3
  local pc = beam.pc
  local omega = twopi*freq / clight
  local vl    = m.dirch*volt*volt_c/pc
  if pos == 'exit' then vl = -vl end

  local tt, phase, phase0 = elm.tt or 0, elm.phase or 0, elm.phase0 or 0
  local ph = elm.f or {}, elm.ph or {}
  local nf = elm.nf or 1
   do ko=1, nf   -- over modes
    s1 = cos(kbmad*ko*omega*z)*sin(ko*omega*(t + tt) + phas + phase0 + ph[ko])
    c1 = cos(kbmad*ko*omega*z)*cos(ko*omega*(t+  tt) + phas + phase0 + ph[ko])
    m.px = m.px + 0.5*vl*s1*m.x
    m.py = m.py + 0.5*vl*s1*m.y
    m.pt = m.pt - 0.25*(m.x^2 + m.y^2)*vl*c1*omega*ko

   end

end

-- Drift general exact strait

local function strait_drift_track (elm, m, l)
  m.in_action(elm, m, l, 'strait_drift_track')

  local x, px, y, py, t, pt, T in m
  local beta_inv = 1/m.beam.beta
  local l_pz = l/sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability

  m.x = x + px*l_pz
  m.y = y + py*l_pz
  m.t = t - (beta_inv+pt)*l_pz + (1-T)*l*beta_inv

  m.out_action(elm, m, l, 'strait_drift_track')
end

-- Drift general exact curved       [PTC SSECH1: either SPROT(DKD) or SSEC(MKM)]

local function curved_drift_track (elm, m, l)
-- Geometric integration for particle accelerators, E.Forest,
-- J.Phys. A: Math.Gen. 39 (2006) 5321-5377, p.5365, eq. 127
  m.in_action(elm, m, l, 'curved_drift_track')

  local x, px, y, py, t, pt, T in m
  local beta_inv = 1/m.beam.beta
  local rho = elm.l/elm.angle
  local angle = l/rho

  local sa, ca, ta, sa2 = sin(angle), cos(angle), tan(angle), sin(angle/2)

  local pz  = sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local pz_ = 1/pz
  local ptt = 1 - ta*px*pz_
  local xr  = x+rho
  m.x  = (x + rho*(2*sa2^2 + sa*px*pz_)) / (ca*ptt)
  m.px = ca*px + sa*pz
  m.y  = y + ta*xr*pz_*py/ptt
  m.t  = t - ta*xr*pz_*(beta_inv+pt) / ptt + (1-T)*l*beta_inv

  m.out_action(elm, m, l, 'curved_drift_track')
end

local function patch_drift_track (elm, m, l)
--[[ rotation + translation (drift) ]]

  local angle = elm.angle or 0
  local d  = elm.d or {}
  if m.dir == 1 then
    xrot_track (elm, m, angle)
    yrot_track (elm, m, angle)
    srot_track (elm, m, angle)
    trans_track(elm, m, d)
  else
    d[1]  = -d[1]
    d[1]  = -d[2]
    angle = -angle
    trans_track(elm, m, d)
    srot_track (elm, m, angle)
    yrot_track (elm, m, angle)
    xrot_track (elm, m, angle)
    d[1]  = -d[1]
    d[1]  = -d[2]
    angle = -angle

  end
end

-- Drift solenoid exact

local function solenoid_drift_track (elm, m, l)
  m.in_action(elm, m, l, 'solenoid_drift_track')

  local ks in elm

  if is_nil(ks) or ks == 0 then
    strait_drift_track(elm, m, l) return
  end

  local x, px, y, py, t, pt, T in m
  local beta_inv = 1/m.beam.beta

  local bsol = m.dirch*ks/2
  local xp = px + bsol*y
  local yp = py - bsol*x

  local l_pz  = l/sqrt(1 + 2*beta_inv*pt + pt^2 - xp^2 - yp^2) -- TODO: stability
  local angle = l_pz*bsol

  local ca, sa, sc = cos(angle), sin(angle), sinc(angle)

  local xt  = ca*x  + l_pz*sc*px
  local pxt = ca*px - l_pz*sc*x *bsol^2
  local yt  = ca*y  + l_pz*sc*py
  local pyt = ca*py - l_pz*sc*y *bsol^2

  m.x  = ca*xt  + sa*yt
  m.px = ca*pxt + sa*pyt
  m.y  = ca*yt  - sa*xt
  m.py = ca*pyt - sa*pxt

  m.t  = t - (beta_inv+pt)*l_pz + (1-T)*l*beta_inv

  m.out_action(elm, m, l, 'solenoid_drift_track')
end

-- Kick thin

local function thin_kick_track(elm, m, l) -- l == 0
  local lrad = elm.lrad or 0
  local knlt, kslt = elm.knl or {}, elm.ksl or {}
  local knl1, ksl1 = (knlt[1] or 0), (kslt[1] or 0)
  m.in_action(elm, m, l, 'thin_kick_track')

  local x, px, y, py, dirch, nmul, knl, ksl in m
  local byt
  local by = knl[nmul] / fact(nmul-1)
  local bx = ksl[nmul] / fact(nmul-1)
  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + knl[i] / fact(i-1)
    bx  = y*by + x*bx + ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = px - dirch*by + dirch*knl1
  m.py = py + dirch*bx - dirch*ksl1

  if knl1 ~= 0 or ksl1 ~= 0 then
    local t, pt in m
    local beta_inv = 1/m.beam.beta
    local pz = sqrt(1 + 2*beta_inv*pt + pt^2)
    if lrad ~=0 then -- dipole focusing and deltap
      m.px = m.px - knl1^2*x/lrad + dirch*knl1*(pz-1)
      m.py = m.py - ksl1^2*y/lrad + dirch*ksl1*(pz-1)
    end
--    m.t = t + dirch*(knl1*x - ksl1*y) * (beta_inv+pt)/pz
    m.t = t - dirch*(knl1*x - ksl1*y) * (beta_inv+pt)/pz
  end

  m.out_action(elm, m, l, 'thin_kick_track')
end

-- Kick general exact strait                 [PTC KICKEXR: KICKR + KICKTR(mult)]

local function strait_kick_track(elm, m, l)
  m.in_action(elm, m, l, 'strait_kick_track')

  local x, px, y, py, dirch, nmul, knl, ksl in m
  local lw, byt = elm.l>0 and l/elm.l or 1
  local by = lw*knl[nmul] / fact(nmul-1)
  local bx = lw*ksl[nmul] / fact(nmul-1)
  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + lw*knl[i] / fact(i-1)
    bx  = y*by + x*bx + lw*ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = px - dirch*by
  m.py = py + dirch*bx

  m.out_action(elm, m, l, 'strait_kick_track')
end

-- Kick general exact curved        [PTC SKICK, TODO: GETELECTRIC]
local function curved_kick_track (elm, m, l) --
  m.in_action(elm, m, l, 'curved_kick_track')

  local x, px, y, py, dirch, nmul, knl, ksl in m
  local lw, byt = l/elm.l
  local by = lw*knl[nmul] / fact(nmul-1)
  local bx = lw*ksl[nmul] / fact(nmul-1)

  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + lw*knl[i] / fact(i-1)
    bx  = y*by + x*bx + lw*ksl[i] / fact(i-1)
    by  = byt
  end

  local angle, k0 in elm
--  m.px = px - dirch*by*(1 + angle/elm.l*x) -- only angle
--  m.py = py + dirch*bx*(1 + angle/elm.l*x)
-- stability problem???? differences with a simple test SBEND
  m.px = px - dirch*by*(1 + k0*x) -- only angle
  m.py = py + dirch*bx*(1 + k0*x)

  m.out_action(elm, m, l, 'curved_kick_track')
end

-- TW Cavity
local function twcav_drift_track(elm, m, l, z0) --tw cavity tracking, rk2_cavr
  m.in_action(elm, m, l, 'twcav_drift_track')

  local x, px, y, py, dirch, dir, charge, nmul, knl, ksl in m
  local beta_inv = 1/m.beam.beta
  local d,a, ad  = {}, {}, {}

  local freq,  dphas  = elm.freq or 0, elm.dhas or 0
  local phase, phase0 = elm.phase or 0, elm.phase0 or 0
  local omega = twopi*freq / clight
  local volt_c = 1.0e-3

  local volt, dvds = elm.volt or 0, elm.dvds or 0
  local psi = elm.psi or 0
  local c1, c2, s1, s2, vl = 0, 0, 0, 0, 0
  c1 = cos(omega*(t-z0) + phas + phase0)
  c2 = cos(omega*(t+z0) + phas + phase0 + dphas)
  s1 = sin(omega*(t-z0) + phas + phase0)
  s2 = sin(omega*(t+z0) + phas + phase0 + dphas)
  vl = charge*(volt - dvds*z0)*volt_c/pc
  ad[1] = 0.5*vl*(cos(psi)*s1-sin(psi)*s2)
  ad[2] = omega*0.5*vl*(cos(psi)*c1-sin(psi)*c2)
  ad[3] = omega*0.5*vl*(-cos(psi)*c1-sin(psi)*c2)
  a[1]  = ad[1]*m.x
  a[2]  = ad[1]*m.y
  a[3]  = -dir*vl*(cos(psi)*s1+sin(psi)*s2)

  if elm.b  then
  elm.b[1] = -ad(3)*m.y/charge
  elm.b[2] =  ad(3)*m.x/charge
  elm.b[3] = 0
  end

  if elm.e then
  elm.e[1] =     -ad(2)*m.x/charge
  elm.e[2] =     -ad(2)*m.y/charge
  elm.e[3] =  dir*ad(3)    /charge
  end

  m.px = px - a[1]
  m.py = py - a[1]

  local pz  = sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local pz_ = 1/pz
  f[1] = m.px*pz_
  f[3] = m.py*pz_
  f[2] = f[1]*ad[1]
  f[4] = f[3]*ad[1]
  f[5] = -(f[1]*m.x+f[3]*m.y)*ad[2]+a[3]
  f[6] = (beta_inv + m.pt)*pz_ - (1-T)*beta_inv -- change the sign????

  m.out_action(elm, m, l, 'twcav_drift_track')

  return {f, a, ad}
end

local function twcav_track(elm, m, l, j) --thick twcavity (inter_cav_trav+rk2_cav)
  m.in_action(elm, m, l, 'cav_track')
  local x, px, y, py, t, pt, dirch in m
  local z0, tt = 0, 0
  local d1 = dirch*l or 0
  if dirch == 1  then
    z0=(j-1)*d1
  else
    z0=elm.l+(j-1)*d1
  end

  local f  = twcav_drift_track(elm, m, l, z0) or {}
  do  i=1,6
    a[i]=d1*f[i]
  end

  m.x  = x  + a[1]/2
  m.px = px + a[2]/2
  m.y  = y  + a[3]/2
  m.py = py + a[4]/2
  m.t  = t  - a[5]/2  --sign to check?
  m.pt = pt + a[6]/2

  tt=z0+d1/2

  f = twcav_drift_track(elm, m, l, tt)

  do  i=1,6
    b[i]=d1*f[i]
  end

  m.x  = x  + b[1]
  m.px = px + b[2]
  m.y  = y  + b[3]
  m.py = py + b[4]
  m.t  = t  - b[5]  --sign to check?
  m.pt = pt + b[6]

  z0=z0+d1
  m.in_action(elm, m, l, 'twcav_track')

end

-- Cavity kick
local function cav_kick_track (elm, m, l) --RF CAV, CRAB, RFMULT with l>0 kick (kickcavr)
  m.in_action(elm, m, l, 'rfcav_drift_track')
  local x, px, y, py, t, pt, nmul, dirch in m
  local tt, phase, phase0 = elm.tt or 0, elm.phase or 0, elm.phase0 or 0
  local ff, ph = elm.f or {}, elm.ph or {}
  local a, r = elm.a or  0, elm.r or 0
-- nocavity.and.(.not.always_on)  return

  local pc = beam.pc
  local volt_c = 1.0e-3
  local freq, harm, volt, lag = elm.freq or 0, elm.harm or 0, elm.volt or 0, elm.lag or 0
  local nbessel, nf = elm.nbessel or  0, elm.nf or 1
  if freq == 0 and harm == 0 then
    error("either frequency or harmonic number has to be defined for RF Cavity " .. elm.name)
  end

local omega = twopi*freq / clight
local vl    = m.dirch*l*volt*volt_c/pc
local df, f, r2 = 0, 1, 1

do ko=1, nf -- over modes
  do i=1,nbessel
    r2  = -r2*(ko*omega)^2/(4*(i+1)^2)
    dr2 =  r2*i
    df  =  df + 2*dr2
    r2  =  r2*(x^2+y^2)
    f   =  f + r2
  end

  if nbessel > 0 then
    m.px = px-x*ff[ko]* df * vl * cos(arg)/(ko*omega)
    m.py = py-y*ff[ko]* df * vl * cos(arg)/(ko*omega)
  end

  local arg = ko*omega*(t + tt) + phas + ph[ko] + phase0
  m.pt = m.pt -ff[ko]*f*vl*sin(arg)

  local lw, byt = elm.l>0 and l/elm.l or 1
  local by = lw*knl[nmul] / fact(nmul-1)
  local bx = lw*ksl[nmul] / fact(nmul-1)

  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + lw*knl[i] / fact(i-1)
    bx  = y*by + x*bx + lw*ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = m.px - ff[ko]*dirch*by/pc*(a + r*cos(arg))
  m.py = m.py + ff[ko]*dirch*bx/pc*(a + r*cos(arg))

  by = -lw*knl[nmul] / fact(nmul-1) / nmul
  bx = -lw*ksl[nmul] / fact(nmul-1) / nmul

  for i=nmul,2,-1 do
    byt = x*by - y*bx - lw*knl[i-i] / fact(i-2) / (i-1)
    bx  = y*by + x*bx - lw*ksl[i-i] / fact(i-2) / (i-1)
    by  = byt
  end

  byt = x*by - y*bx
  bx  = y*by + x*bx
  by  = byt

  m.pt = m.pt + ff[ko]*(ko*omega)*dirch*by/pc * r *sin(arg)
  end    --over modes
  m.out_action(elm, m, l, 'rfcav_drift_track')
end


-- integrator schemes ---------------------------------------------------------o

local integrate = require 'madl_sympint'

-- frame kinds ----------------------------------------------------------------o

local function thick_track (elm, m, drift, kick)
  local l, angle, method in elm
  local nmul = abs(l) <= minlen and get_mult0(elm, m) or get_mult(elm, m, l)
  local integrator = nmul == 0 and drift or integrate[method or m.method]
  local ns = #elm

  if ns == 0 then -- no sub-elements
    integrator(elm, m, l, drift, kick) return
  end

  local s, ds, at = 0
  for i=1,ns do   -- sub-elements
    local selem = elm[i]
    at = assert(selem.at, "invalid sub-element position (at expected)")
    ds = at*l - s
    assert(ds >= 0, "invalid sub-element position (positive ds expected)")
    if ds >= minlen then
      integrator(elm, m, ds, drift, kick)
    end
    s = s + ds
    assert(selem.l == 0, "invalid sub-element length (0 expected)")
    selem:track(m)
  end
  ds = l-s
  assert(ds >= 0, "invalid sub-element position (positive ds expected)")
  if ds >= minlen then
    integrator(elm, m, ds, drift, kick)
  end
end

local function drift_track (elm, m)
  local l in elm
  local ns = #elm

  m.nmul = 0 -- for sanity checks

  if ns == 0 then -- no sub-elements
    strait_drift_track(elm, m, l) return
  end

  local s, ds, at = 0
  for i=1,ns do   -- sub-elements
    local selem = elm[i]
    at = assert(selem.at, "invalid sub-element position (at expected)")
    ds = at*l - s
    assert(ds >= 0, "invalid sub-element position (positive ds expected)")
    if ds >= minlen then
      strait_drift_track(elm, m, ds)
    end
    s = s + ds
    assert(selem.l == 0, "invalid sub-element length (0 expected)")
    selem:track(m)
  end
  ds = l-s
  assert(ds >= 0, "invalid sub-element position (positive ds expected)")
  if ds >= minlen then
    strait_drift_track(elm, m, ds)
  end
end

local function thin_track (elm, m) -- e.g. multipole
--  io.write('THIN_TRACK: for ', elm.name, ' (l=', elm.l, ')\n')
  local l in elm

  if l >= minlen then
    error("invalid thin element length (too long): " .. elm.name)
  end

  local nmul = get_mult0(elm, m)
  if nmul == 0 then return end

  if ptccompat == true then
    thin_kick_track  (elm, m, 0)
  else
    strait_kick_track(elm, m, 0)
  end
end

local function strait_track (elm, m) -- e.g. rbend
--  io.write('STRAIT_TRACK: for ', elm.name, ' (l=', elm.l,')\n')
  local l, angle, tilt in elm

  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elm.name)
--  elseif l < minlen then
--    error("invalid strait element length (too short): " .. elm.name)
  end
  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end
  -- TODO: boundary elements, radiation and aperture checks.
  thick_track (elm, m, strait_drift_track, strait_kick_track)

  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end
end

local function curved_track (elm, m) -- e.g. sbend
--  io.write('CURVED_TRACK: for ', elm.name, ' (l=', elm.l,')\n')
  local l, angle, tilt in elm
  if abs(angle) < minang then
    error("invalid curved element angle (too strait): " .. elm.name)
  elseif l < minlen then
    error("invalid curved element length (too short): " .. elm.name)
  end

--  if m.t ~=0 then m.t= -m.t end
  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end
  sfringe_track(elm, m, 'entry')
  thick_track  (elm, m, curved_drift_track, curved_kick_track)
  sfringe_track(elm, m, 'exit')
  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end
--  m.t =-m.t
end

local function cavity_track (elm, m)  -- thin rf mult
  local l, angle, tilt in elm

  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elm.name)
  end
  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end

     adjust_time_cav(elm, m, 'entry')
     fringe_cav     (elm, m, 'entry')
     if l >= minlen then
      thick_track (elm, m, strait_drift_track, cav_kick_track)
     end
     fringe_cav     (elm, m, 'exit')
     adjust_time_cav(elm, m, 'exit')
  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end
end

local function tw_cavity_track (elm, m)  --cav_trav
  local l, angle, tilt in elm

  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elm.name)
  end
  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end

--   FRINGE_CAV_TRAV(EL,X,k,1) -fringe_cav_trav
   thick_track (elm, m, cav_kick_track)
--  FRINGECAV(EL,X,k,2)
--  ADJUST_TIME_CAV_TRAV_OUT(EL,X,k,2)
  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end


end
-- specialisations ------------------------------------------------------------o

local function solenoid_track (elm, m)
--  io.write('SOL_TRACK: for ', elm.name, ' (l=', elm.l,')\n')
  local l, angle, tilt in elm
  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elm.name)
  elseif l < minlen then
    error("invalid strait element length (too short): " .. elm.name)
  end

  if abs(tilt) >= minang  then
    srot_track(elm, m, tilt)
  end

  -- TODO: boundary elements, radiation and aperture checks.
  thick_track (elm, m, solenoid_drift_track, strait_kick_track)

  if abs(tilt) >= minang  then
    srot_track(elm, m, -tilt)
  end
end

-- load track maps into elements ----------------------------------------------o

local element in MAD

element.   thin_element :set_function { track =     thin_track }
element.  patch_element :set_function { track =    patch_track }
element.  drift_element :set_function { track =    drift_track }
element. strait_element :set_function { track =   strait_track }
element. curved_element :set_function { track =   curved_track }
element.special_element :set_function { track =    empty_track }
element.  extra_element :set_function { track =  invalid_track }

element.srotation       :set_function { track =     srot_track }
element.xrotation       :set_function { track =     xrot_track }
element.yrotation       :set_function { track =     yrot_track }
element.translate       :set_function { track =     tran_track }

element.solenoid        :set_function { track = solenoid_track }

-- track command --------------------------------------------------------------o

local mtable, Command in MAD

local _trk = {}

local function make_table (self)
  if not self.save then return nil end
  local seq = self.sequence
  local name, direction in seq
  local drift, range, nturn in self
  local nrow = seq:length_of(range, nturn) * (drift and 2 or 1)

  return mtable 'track' {
    type='track', title=name, direction=direction,
    {'name'}, 'kind', 's', 'l',
    'x', 'px', 'y', 'py', 't', 'pt',
    [_trk]=_trk,
  } : reserve(nrow < 2e5 and nrow or 2e5)
end

local function fill_table (tbl, name, kind, m, s, l)
  -- keep order!
  tbl = tbl + { name, kind, s, l, m.x, m.px, m.y, m.py, m.t, m.pt }
end

local function make_map (self)
  local x, px, y, py, t, pt, X0 in self

  x  = x  or X0.x  or X0[1] or 0
  px = px or X0.px or X0[2] or 0
  y  = y  or X0.y  or X0[3] or 0
  py = py or X0.py or X0[4] or 0
  t  = t  or X0.t  or X0[5] or 0
  pt = pt or X0.pt or X0[6] or 0

  local seq = self.sequence
  local len, dir = #seq, seq.direction

  local nst, method, total_path, in_action, out_action in self
  local T = total_path == true and 1 or 0

  return { x=x, px=px, y=y, py=py, t=t, pt=pt, T=T,
           knl=vector(maxmult), ksl=vector(maxmult),
           s=0, ds=0, len=len, dir=dir, ndrift=0, nst=nst,
           method=method, in_action=in_action, out_action=out_action,
           [_trk]=_trk }
end

local function exec (self)
  assert(self[_trk], "invalid argument #1 (survey expected)")
  local seq = assert(self.sequence, "missing sequence")
  assert(is_sequence(seq), "invalid sequence")

  local beam = assert(self.beam or seq.beam, "missing beam")
  assert(is_beam(beam), "invalid beam")

  local map = self.map   or make_map  (self)
  local tbl = self.table or make_table(self)

  assert(is_nil(tbl) or tbl[_trk] == _trk, "invalid track table")
  assert(               map[_trk] == _trk, "invalid track map"  )

  -- hook
  map.beam  = beam
  map.chg   = beam.charge
  map.dirch = map.dir * beam.charge

  local s, ds, len, ndrift in map
  local save, range, nturn in self
  local drift = save and self.drift

  -- dynamic tracking
  for i,elm in seq:iter(range, nturn) do
    local l in elm

    -- implicit drift
    if ds >= minlen then
      strait_drift_track(nil, map, ds)
      if drift and elm:is_selected() then
        ndrift = ndrift+1
        fill_table(tbl, 'DRIFT_'..ndrift, 'drift', map, s+ds, ds)
      end
    elseif ds <= -minlen then
      error(string.format("negative implicit drift %s in %s['%s'] at %s",
            ds, seq.name, elm.name, s))
    end
    s = s+ds

    -- sequence element
    elm:track(map)
    if save and elm:is_selected() then
      local name, kind in elm
      fill_table(tbl, name, kind, map, s+l, l)
    end
    s  = s+l
    ds = i < len and seq:s_pos(i+1) - (seq:s_pos(i)+l) or 0
  end
  map.s, map.ds, map.ndrift = s, ds, ndrift

  return tbl, map
end

-- track command template

local no_action = \ ()

local track = Command 'track' {
  X0={0,0,0,0,0,0}, nturn=0, drift=true, save=true,
  nst=1, method='simple', total_path=false,
  exec=exec, [_trk]=true,
} :set_function {
  in_action=no_action, out_action=no_action
} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  track  = track,
  __help = __help,
}
