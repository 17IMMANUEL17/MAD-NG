--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local element, mtable, command, damap, symint, aperture, trace   in MAD

local is_beam, is_sequence, is_boolean, is_number, is_integer, is_true,
      is_table, is_callable, is_mappable, is_tpsa, is_damap      in MAD.typeid
local fnone, ffalse, ftrue, functor, chain, achain               in MAD.gfunc
local fact, sinc                                                 in MAD.gmath
local tblcat, errorf, assertf                                    in MAD.utility
local apercheck                                                  in MAD.aperture
local minlen, minang                                             in MAD.constant

local abs, min, max in math

local strsub = string.sub

-- constants
local minvolt = 1e-6

-- integrator schemes ---------------------------------------------------------o

local thinonly, thickonly, atend                                in MAD.symint

-- dynamic maps ---------------------------------------------------------------o

local strex_drift, strex_kick, strex_fringe,
      curex_drift, curex_kick, curex_fringe                     in MAD.dynmap

local rbend_thick, rbend_kick, rbend_fringe,
      sbend_thick, sbend_kick, sbend_fringe                     in MAD.dynmap

local  quad_thick,  quad_kick,  quad_fringe,
      combi_thick, combi_kick, combi_fringe                     in MAD.dynmap

local solen_thick, solen_kick, solen_fringe,
      rfcav_thick, rfcav_kick, rfcav_fringe                     in MAD.dynmap

-- special
local strex_hkick, quad_hthick, quad_hkick                      in MAD.dynmap

-- patches
local xrotation, yrotation, srotation, translate,
      changeref, changedir, changenrj                           in MAD.dynmap

-- sabac: TODO
local sabac_quad_drift, sabac_quad_kick, sabac_quad_corr        in MAD.dynmap

-- debug ----------------------------------------------------------------------o

local nodump = true

local function mdump(str, ...)
  if nodump then return end
  print(str, ...)
end

-- strengths and phases -------------------------------------------------------o

local zs = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}

local function get_mult (elm, m)
  local knl, ksl, dknl, dksl in elm
  local nmul = max(#(knl or {}), #(ksl or {}), #(dknl or {}), #(dksl or {}))
  m.nmul = nmul

  knl, ksl, dknl, dksl = knl or zs, ksl or zs, dknl or zs, dksl or zs
  m.knl[1], m.knl[2] = knl[1] + dknl[1], knl[2] + dknl[2]
  m.ksl[1], m.ksl[2] = ksl[1] + dksl[1], ksl[2] + dksl[2]

  for i=3,nmul do
    m.knl[i] = (knl[i] + dknl[i]) / fact(i-1)
    m.ksl[i] = (ksl[i] + dksl[i]) / fact(i-1)
  end
end

local function get_phas (elm, m)
  local pnl, psl, dpnl, dpsl in elm
  local npha = max(#(pnl or {}), #(psl or {}), #(dpnl or {}), #(dpsl or {}))
  m.npha = npha

  pnl, psl, dpnl, dpsl = pnl or zs, psl or zs, dpnl or zs, dpsl or zs

  for i=1,npha do
    m.pnl[i] = pnl[i] + dpnl[i]
    m.psl[i] = psl[i] + dpsl[i]
  end
end

-- element tracking -----------------------------------------------------------o

local function onetrack (elm, mflw, track, thick, thin, corr, fringe)
  local sdir in mflw

  changeref(elm, mflw,  sdir)
  fringe   (elm, mflw,  sdir)
  track    (elm, mflw,   1  , thick, thin, corr)
  fringe   (elm, mflw, -sdir)
  changeref(elm, mflw, -sdir)
end

local function subtrack (elm, mflw, track, thick, thin, corr, fringe)
  local sdir in mflw
  local nelm = #elm

  changeref(elm, mflw, sdir)
  fringe   (elm, mflw, sdir)

  if sdir > 0 then
    local at, lw = 0
    for i=1,nelm do
      at, lw = elm[i].at, elm[i].at - at
      if abs(lw) >= minlen then
        track(elm, mflw, lw, thick, thin, corr)
      end
      elm[i]:track(mflw.__sdat)
    end
    lw = 1 - at
    if abs(lw) >= minlen then
      track(elm, mflw, lw, thick, thin, corr)
    end

  else -- backtrack
    local at, lw = 1
    for i=nelm,1,-1 do
      at, lw = elm[i].at, at - elm[i].at
      if abs(lw) >= minlen then
        track(elm, mflw, lw, thick, thin, corr)
      end
      elm[i]:track(mflw.__sdat)
    end
    lw = at
    if abs(lw) >= minlen then
      track(elm, mflw, lw, thick, thin, corr)
    end
  end

  fringe   (elm, mflw, -sdir)
  changeref(elm, mflw, -sdir)
end

-- kinds ----------------------------------------------------------------------o

local function track_thin (elm, mflw)
  get_mult(elm, mflw)
  mdump('\ntrack_thin', elm.name, 'l=', elm.l, 'nmul=', mflw.nmul)
  if mflw.nmul == 0 then return end

  onetrack(elm, mflw, thinonly, nil, strex_kick, nil, fnone)
end

local function track_multipole (elm, mflw)
  get_mult(elm, mflw)
  mdump('\ntrack_multi', elm.name, 'l=', elm.l, 'nmul=', mflw.nmul)
  if mflw.nmul == 0 then return end

  local knl, ksl in mflw
  mflw.el = elm.l or elm.lrad

  local kick -- TODO: case ksi is defined
  if abs(knl[1])+abs(ksl[1]) < minang then
    kick = strex_kick
  else
    kick = strex_hkick
  end

  onetrack(elm, mflw, thinonly, nil, kick, nil, fnone)
end

local function track_drift (elm, mflw)
  mdump('\ntrack_drift', elm.name, 'l=', elm.l)

  local l in elm
  if abs(l) < minlen then return end

  mflw.el, mflw.eld = l, l

  local track = #elm == 0 and onetrack or subtrack
  track(elm, mflw, thickonly, strex_drift, nil, nil, fnone)
end

local function track_sbend (elm, mflw)
  mdump('\ntrack_sbend', elm.name, 'l=', elm.l, 'angle=', elm.angle)

  local l, angle, k0, k1, k0s, k1s in elm
  assert(l >= minlen, "invalid sbend length (>0 expected)")
  assert(abs(angle) >= minang, "invalid sbend angle (~=0 expected)")
  get_mult(elm, mflw)

  local nmul, knl, ksl in mflw
  knl[1], knl[2] = knl[1]+(k0  or 0)*l, knl[2]+(k1  or 0)*l
  ksl[1], ksl[2] = ksl[1]+(k0s or 0)*l, ksl[2]+(k1s or 0)*l
  mflw.k0, mflw.k1  = knl[1]/l, knl[2]/l
  mflw.el, mflw.eld = l, l
  mflw.eh, mflw.ang = angle/l, angle

  if nmul < 2 then
    mflw.nmul = max((k1 or k1s) and 2 or (k0 or k0s) and 1 or 0, nmul)
  end

  mdump('track_sbend', 'el=', mflw.el, 'eh=', mflw.eh, 'k0=', mflw.k0)

  local model  = elm.model  or mflw.model
  local method = elm.method or mflw.method
  local thick, kick, corr

  if model == 'DKD' then
    thick, kick = curex_drift, curex_kick
  else
    thick, kick = sbend_thick, sbend_kick
  end

  local track  = #elm == 0 and onetrack or subtrack
  track(elm, mflw, symint[method], thick, kick, corr, sbend_fringe)
end

local track_combined =\ error("NYI") -- for now...

local function track_rbend (elm, mflw)
  mdump('\ntrack_rbend', elm.name, 'l=', elm.l, 'angle=', elm.angle)

  local l, angle, k0, k0s, k1, k1s in elm
  assert(l >= minlen, "invalid rbend length (>0 expected)")
  get_mult(elm, mflw)

  local nmul, knl, ksl in mflw
  knl[1], knl[2] = knl[1]+(k0  or 0)*l, knl[2]+(k1  or 0)*l
  ksl[1], ksl[2] = ksl[1]+(k0s or 0)*l, ksl[2]+(k1s or 0)*l
  mflw.k0, mflw.k1  = knl[1]/l, knl[2]/l
  mflw.el, mflw.eld = l, l/sinc(angle)
  mflw.eh, mflw.ang = angle/mflw.eld, angle

  if nmul < 2 then
    mflw.nmul = max((k1 or k1s) and 2 or (k0 or k0s) and 1 or 0, nmul)
  end

  mdump('track_rbend', 'el=', mflw.el, 'eld=', mflw.eld, 'eh=', mflw.eh, 'k0=', mflw.k0)

  local model  = elm.model  or mflw.model
  local method = elm.method or mflw.method
  local thick, kick, corr

  if model == 'DKD' then
    if abs(knl[1])+abs(ksl[1]) < minang then
      thick, kick = strex_drift, strex_kick
    else
      thick, kick = strex_drift, strex_hkick
    end
  else
    thick, kick = rbend_thick, rbend_kick
  end

  local track  = #elm == 0 and onetrack or subtrack
  track(elm, mflw, symint[method], thick, kick, corr, rbend_fringe)
end

local function track_quadrupole (elm, mflw)
  mdump('\ntrack_quad', elm.name, 'l=', elm.l, 'angle=', elm.angle)

  local l, angle, k0, k0s, k1, k1s in elm
  assert(l >= minlen, "invalid quadrupole length (>0 expected)")
  get_mult(elm, mflw)

  local sdir, nmul, knl, ksl in mflw
  knl[1], knl[2] = knl[1]+(k0  or 0)*l, knl[2]+(k1  or 0)*l
  ksl[1], ksl[2] = ksl[1]+(k0s or 0)*l, ksl[2]+(k1s or 0)*l
  mflw.k0, mflw.k1  = knl[1]/l, knl[2]/l
  mflw.el, mflw.eld = l, l/sinc(angle)
  mflw.eh, mflw.ang = angle/mflw.eld, angle

  if nmul < 2 then
    mflw.nmul = max((k1 or k1s) and 2 or (k0 or k0s) and 1 or 0, nmul)
  end

  mdump('track_quad', 'el=', mflw.el, 'eld=', mflw.eld, 'eh=', mflw.eh, 'k1=', mflw.k1)

  local model  = elm.model  or mflw.model
  local method = elm.method or mflw.method
  local thick, kick, corr

  if model == 'DKD' then                                                        -- TODO: SABAC DKD
    if abs(knl[1])+abs(ksl[1]) < minang then
      thick, kick = strex_drift, strex_kick
    else
      thick, kick = strex_drift, strex_hkick
    end
  elseif abs(angle) < minang then
      thick, kick = quad_thick, quad_kick
  else
      drift, kick = quad_hthick, quad_hkick
  end

  local track = #elm == 0 and onetrack or subtrack
  track(elm, mflw, symint[method], thick, kick, corr, quad_fringe)
end

local function track_sextupole (elm, mflw)
  mdump('\ntrack_sext', elm.name, 'l=', elm.l)

  local l, k2, k2s in elm
  assert(l >= minlen, "invalid sextupole length (>0 expected)")
  get_mult(elm, mflw)

  local nmul, knl, ksl in mflw
  knl[3] = knl[3]+(k2  or 0)*l
  ksl[3] = ksl[3]+(k2s or 0)*l
  mflw.el, mflw.eld = l, l

  if nmul < 3 then
    mflw.nmul = max((k2 or k2s) and 3 or 0, nmul)
  end

  mdump('track_sext', 'el=', mflw.el, 'k2=', mflw.knl[3])

  local method = elm.method or mflw.method
  local track = #elm == 0 and onetrack or subtrack
  local thick, kick, corr = strex_drift, strex_kick
  track(elm, mflw, symint[method], thick, kick, corr, strex_fringe)
end

local function track_octupole (elm, mflw)
  mdump('\ntrack_octu', elm.name, 'l=', elm.l)

  local l, k3, k3s in elm
  assert(l >= minlen, "invalid octupole length (>0 expected)")
  get_mult(elm, mflw)

  local nmul, knl, ksl in mflw
  knl[4] = knl[4]+(k3  or 0)*l
  ksl[4] = ksl[4]+(k3s or 0)*l
  mflw.el, mflw.eld = l, l

  if nmul < 4 then
    mflw.nmul = max((k3 or k3s) and 4 or 0, nmul)
  end

  mdump('track_octu', 'el=', mflw.el, 'k3=', mflw.knl[4])

  local method = elm.method or mflw.method
  local track = #elm == 0 and onetrack or subtrack
  local thick, kick, corr = strex_drift, strex_kick
  track(elm, mflw, symint[method], thick, kick, corr, strex_fringe)
end

local function track_decapole (elm, mflw)
  mdump('\ntrack_deca', elm.name, 'l=', elm.l)

  local l, k4, k4s in elm
  assert(l >= minlen, "invalid decapole length (>0 expected)")
  get_mult(elm, mflw)

  local nmul, knl, ksl in mflw
  knl[5] = knl[5]+(k4  or 0)*l
  ksl[5] = ksl[5]+(k4s or 0)*l
  mflw.el, mflw.eld = l, l

  if nmul < 5 then
    mflw.nmul = max((k4 or k4s) and 5 or 0, nmul)
  end

  mdump('track_deca', 'el=', mflw.el, 'k4=', mflw.k4)

  local method = elm.method or mflw.method
  local track = #elm == 0 and onetrack or subtrack
  local thick, kick, corr = strex_drift, strex_kick
  track(elm, mflw, symint[method], thick, kick, corr, strex_fringe)
end

local function track_dodecapole (elm, mflw)
  mdump('\ntrack_dodeca', elm.name, 'l=', elm.l)

  local l, k5, k5s in elm
  assert(l >= minlen, "invalid dodecapole length (>0 expected)")
  get_mult(elm, mflw)

  local nmul, knl, ksl in mflw
  knl[6] = knl[6]+(k5  or 0)*l
  ksl[6] = ksl[6]+(k5s or 0)*l
  mflw.el, mflw.eld = l, l

  if nmul < 6 then
    mflw.nmul = max((k5 or k5s) and 6 or 0, nmul)
  end

  mdump('track_dodeca', 'el=', mflw.el, 'k5=', mflw.knl[6])

  local method = elm.method or mflw.method
  local track = #elm == 0 and onetrack or subtrack
  local thick, kick, corr = strex_drift, strex_kick
  track(elm, mflw, symint[method], thick, kick, corr, strex_fringe)
end

local function track_solenoid (elm, mflw)
  mdump('\ntrack_solen', elm.name, 'l=', elm.l)

  local l, ks, ksi in elm
  assert(l >= minlen, "invalid solenoid length (>0 expected)")
  get_mult(elm, mflw)

  mflw.ksi = ksi + ks*l
  mflw.el, mflw.eld = l, l

  mdump('track_solen', 'el=', mflw.el, 'ksi=', mflw.ksi)

  local thick, kick, corr

  if abs(mflw.ksi) < minang then
    thick, kick = strex_thick, strex_kick
  else
    thick, kick = solen_thick, strex_kick
  end

  local method = elm.method or mflw.method
  local track  = #elm == 0 and onetrack or subtrack
  track(elm, mflw, symint[method], thick, kick, corr, solen_fringe)
end

local function track_rfcavity (elm, mflw)
  mdump('\ntrack_rfcav', elm.name, 'l=', elm.l)

  local l, volt, freq, lag in elm
  assert(l >= minlen, "invalid rfcavity length (>0 expected)")
  get_mult(elm, mflw)

  mflw.volt, mflw.freq, mflw.lag = volt, freq, lag
  mflw.el, mflw.eld = l, l

  mdump('track_rfcav', 'volt=', mflw.volt, 'freq=', mflw.freq, 'lag=', mflw.lag)

  local thick, kick, corr

  if abs(mflw.volt) < minvolt then
    thick, kick = strex_thick, strex_kick
  else
    thick, kick = rfcav_thick, rfcav_kick
  end

  local method = elm.method or mflw.method
  local track  = #elm == 0 and onetrack or subtrack
  track(elm, mflw, symint[method], thick, kick, corr, rfcav_fringe)
end

-- load maps into elements ----------------------------------------------------o

local invalid = \e ->
  errorf("invalid track element %s of kind %s with length %s",
          e.name, e.kind, e.l)

local E = element

-- warning: class protection set by alt. 'nolookup' object model can be BYPASSED
--          because classes are modified before any use of 'track' attribute
--          by any children at the time of module loading...

-- kind maps

E. thin_element:setv({ track = functor( track_thin  ) }, 'init')
E.drift_element:setv({ track = functor( track_drift ) }, 'init')
E.thick_element:setv({ track = functor( invalid     ) }, 'init') -- avoid missing definition
E.specl_element:setv({ track = functor( invalid     ) }, 'init') -- avoid missing definition
E.patch_element:setv({ track = functor( invalid     ) }, 'init') -- avoid missing definition
E.extra_element:setv({ track = functor( invalid     ) }, 'init') -- forbidden in track

-- specialized maps (invalid == NYI)

E.sbend      :setv({ track = functor( track_sbend      ) }, 'init') -- curved  , k0, (k0s, k1, k1s)
E.combined   :setv({ track = functor( track_combined   ) }, 'init') -- curved  , k0, k1, (k0s, k1s)
E.rbend      :setv({ track = functor( track_rbend      ) }, 'init') -- straight, k0, (k0s, k1, k1s)
E.quadrupole :setv({ track = functor( track_quadrupole ) }, 'init') -- straight, k0, k1, (k0s, k1s)
E.sextupole  :setv({ track = functor( track_sextupole  ) }, 'init') -- straight, (k2, k2s)
E.octupole   :setv({ track = functor( track_octupole   ) }, 'init') -- straight, (k3, k3s)
E.decapole   :setv({ track = functor( track_decapole   ) }, 'init') -- straight, (k4, k4s)
E.dodecapole :setv({ track = functor( track_dodecapole ) }, 'init') -- straight, (k5, k5s)
E.solenoid   :setv({ track = functor( track_solenoid   ) }, 'init') -- straight, ksi, (ks)
E.rfcavity   :setv({ track = functor( track_rfcavity   ) }, 'init') -- straight, (volt, freq, lag)
E.twcavity   :setv({ track = functor( invalid          ) }, 'init') -- straight, (volt, freq, lag)

E.wiggler    :setv({ track = functor( invalid          ) }, 'init') -- straight
E.elseparator:setv({ track = functor( invalid          ) }, 'init') -- straight

E.kicker     :setv({ track = functor( invalid          ) }, 'init') -- straight, (hkick, vkick)
E.hkicker    :setv({ track = functor( invalid          ) }, 'init') -- straight, ( kick, hkick)
E.vkicker    :setv({ track = functor( invalid          ) }, 'init') -- straight, ( kick, vkick)
E.ackicker   :setv({ track = functor( invalid          ) }, 'init') -- straight, (hkick, vkick, tune)
E.achkicker  :setv({ track = functor( invalid          ) }, 'init') -- straight, ( kick, hkick, tune)
E.acvkicker  :setv({ track = functor( invalid          ) }, 'init') -- straight, ( kick, vkick, tune)

E.beambeam   :setv({ track = functor( invalid          ) }, 'init') -- thin
E.multipole  :setv({ track = functor( track_multipole  ) }, 'init') -- thin
E.rfmultipole:setv({ track = functor( invalid          ) }, 'init') -- thin

-- special maps

E.marker     :setv({ track = functor( fnone            ) }, 'init')
E.xrotation  :setv({ track = functor( xrotation        ) }, 'init') -- patch
E.yrotation  :setv({ track = functor( yrotation        ) }, 'init') -- patch
E.srotation  :setv({ track = functor( srotation        ) }, 'init') -- patch
E.translate  :setv({ track = functor( translate        ) }, 'init') -- patch
E.changeref  :setv({ track = functor( changeref        ) }, 'init') -- patch
E.changedir  :setv({ track = functor( changedir        ) }, 'init') -- patch
E.changenrj  :setv({ track = functor( changenrj        ) }, 'init') -- patch

-- track mtable ---------------------------------------------------------------o

local function save_dat (elm, mflw, lw, islc)
  local name, kind in elm
  local npar, ds, tdir, spos, turn, mtbl, atsave, relative, mapsave in mflw

  lw = relative and lw*max(0,min(1,islc)) or islc<0 and 1 or lw*islc
  local dsw = ds*lw

  for i=1,npar do
    local id, x, px, y, py, t, pt in mflw[i]
    local damap
    if is_tpsa(x) then
      x,px,y,py,t,pt = x:get0(),px:get0(),y:get0(),py:get0(),t:get0(),pt:get0()
      damap = mapsave and mflw[i]:copy()
    end

    -- keep order!
    mtbl = mtbl + { name, kind, spos+dsw, dsw, id,
                    x, px, y, py, t, pt, islc, turn, tdir, damap }
  end
  -- user action
  atsave(elm, mflw, lw, islc)
end

local function save_imp (elm, mflw, lw, islc)
  if not elm:is_implicit() then
    save_dat(elm, mflw, lw, islc)
  end
end

local function save_obs (elm, mflw, lw, islc)
  if elm:is_observed() and mflw.turn % mflw.observe == 0 then
    save_dat(elm, mflw, lw, islc)
  end
end

local header = {
  'direction', 'observe', 'implicit', 'relative',
}

local function make_mtable (self, obs)
  local title, range, nturn, dir, implicit, relative, mapsave in self
  local sequ, nrow = self.sequence

  if obs > 0 then
    nrow = nturn-1
  else
    nrow = sequ:length_of(range, nturn)*(implicit and 2 or 1)
  end

  -- keep order!
  return mtable 'track' {
    title=title or sequ.name, type='track', header=header, reserve=nrow,
    direction=dir, observe=obs, implicit=implicit, relative=relative,
    {'name'}, 'kind', 's', 'l', 'id', 'x', 'px', 'y', 'py', 't', 'pt',
    'slc', 'turn', 'tdir',     -- t-direction of the tracking: sdir * seq.dir
    mapsave and 'damap' or nil -- optional column to save the damap
  }
end

-- trace track internal actions -----------------------------------------------o

local act2str = {
  [fnone   ] = 'fnone'   , [ftrue   ] = 'ftrue'   , [ffalse  ] = 'ffalse',
  [save_dat] = 'save_all', [save_imp] = 'save_imp', [save_obs] = 'save_obs',
}

local function trace_action (mflw)
  local atentry, atslice, atexit, ataper, atsave in mflw

  local estr = act2str[atentry] or 'usrdef'
  local sstr = act2str[atslice] or 'usrdef'
  local xstr = act2str[atexit ] or 'usrdef'
  local astr = act2str[ataper ] or 'usrdef'
  local ostr = act2str[atsave ] or 'usrdef'

  trace(2, "track actions: atentry=%s, atslice=%s, atexit=%s, ataper=%s, atsave=%s",
           estr, sstr, xstr, astr, ostr)
end

-- track mflow ----------------------------------------------------------------o

local modint = {DKD=true, TKT=true}

local function make_mflow (self)
  -- check sequence
  local sequ = assert(self.sequence, "missing sequence")
  assert(is_sequence(sequ), "invalid sequence")

  -- check beam
  local beam = assert(self.beam or sequ.beam, "missing beam")
  assert(is_beam(beam), "invalid beam")

  -- build iterator (track direction)
  local range, dir, nturn in self
  local iter, state, init = sequ:siter(range, nturn, dir)

  -- saving data, build mtable
  local save, observe, implicit, relative, radiate in self
  local fill, mtbl = fnone
  if is_boolean(observe) then observe = observe and 1 or 0 end
  assert(is_boolean(save)    , "invalid save (boolean expected)")
  assert(is_boolean(implicit), "invalid implicit (boolean expected)")
  assert(is_boolean(relative), "invalid relative (boolean expected)")
  assert(is_integer(observe) and observe >= 0
                             , "invalid observe (positive integer expected)")
  if save then
    mtbl = make_mtable(self, observe)
    fill = observe  >  0    and save_obs or
           implicit ~= true and save_imp or save_dat
  end

  -- sequence and time direction
  local edir = sequ.dir
  local tdir = dir*edir
  assert(tdir == 1 or tdir == -1, "invalid time direction (1 or -1 expected)")

  -- setup default sclicing
  local nslice in self
  local nslc = is_number(nslice) and nslice or is_table(nslice) and #nslice
  assert(is_integer(nslc) and nslc > 0,
         "invalid nslice (positive integer or array of slice weights expected)")

  -- retrieve default actions (avoid evaluation in case of functions)
  local atentry = self:var_raw 'atentry'
  local atslice = self:var_raw 'atslice'
  local atexit  = self:var_raw 'atexit'
  local ataper  = self:var_raw 'ataper'
  local atsave  = self:var_raw 'atsave'

  assert(is_callable(atentry), "invalid atentry (callable expected)")
  assert(is_callable(atslice), "invalid atslice (callable expected)")
  assert(is_callable(atexit ), "invalid atexit (callable expected)")
  assert(is_callable(ataper ), "invalid ataper (callable expected)")
  assert(is_callable(atsave ), "invalid atsave (callable expected)")

  -- chain atentry, atslice and atexit to fill table (if needed)
  if save then
    if atentry ~= fnone and atentry ~= ffalse then
      atentry = atentry == ftrue and fill or achain(atentry, fill)
    end
    if atslice ~= fnone and atslice ~= ffalse then
      atslice = atslice == ftrue and fill or achain(atslice, fill)
    end
    if atexit  ~= fnone and atexit  ~= ffalse then
      atexit  = atexit  == ftrue and fill or achain(atexit , fill)
    end
  end

  -- chain ataper with atslice for aperture check (if not disabled)
  if ataper ~= fnone and ataper ~= ffalse then
    ataper  = ataper  == ftrue and apercheck or achain(ataper, apercheck)
    atslice = (atslice == fnone or atslice == ftrue) and ataper
                                             or  chain(ataper, atslice  )
  end

  -- totalpath
  local totalpath in self
  assert(is_boolean(totalpath), "invalid totalpath (boolean expected)")
  local T = totalpath and 1 or 0

  -- model, method
  local model, method in self
  assertf(modint[model],
          "invalid integration model %s (DKD or TKT expected)", model)
  assertf(symint[method] and strsub(method,1,2) ~= 'at',
          "invalid integration method '%s'", method)

  -- retrieve initial conditions
  local s0, X0, R0, mapdef, mapsave in self
  assert(is_number  (s0)    , "invalid s0 (number expected)")
  assert(is_mappable(X0)    , "invalid X0 (mappable expected)")
  assert(is_boolean(mapdef) or is_mappable(mapdef)
                            , "invalid mapdef (boolean or mappable expected)")
  assert(is_boolean(mapsave), "invalid mapsave (boolean expected)")
  if not is_mappable(X0[1]) then X0, R0 = {X0}, {R0} end

  -- precedence of initial conditions
  local npar = #X0
  local mflw = table.new(npar,50)

  for i=1,npar do
    local X0i = X0[i]
    mflw[i] = X0i -- default is to reuse!

    if is_damap(X0i) then -- damap are mappable (i.e. must be first)
      mflw[i].id = X0i.id or i
    elseif is_mappable(X0i) then -- access by indexes first for vectors
      local id =           X0i.id or i
      local x  = X0i[1] or X0i.x  or 0
      local px = X0i[2] or X0i.px or 0
      local y  = X0i[3] or X0i.y  or 0
      local py = X0i[4] or X0i.py or 0
      local t  = X0i[5] or X0i.t  or 0
      local pt = X0i[6] or X0i.pt or 0
      if mapdef then -- replace: damap required from coordinates (and R matrix)
        mflw[i] = damap(is_true(mapdef) and {} or mapdef[i] or mapdef)
        mflw[i].id = id
        mflw[i]:set0{x, px, y, py, t, pt}
        if R0[i] then mflw[i]:set1(R0[i]) end
      elseif is_table(mflw[i]) then -- reuse: fill table
        mflw[i].id,
        mflw[i].x, mflw[i].px,
        mflw[i].y, mflw[i].py,
        mflw[i].t, mflw[i].pt = id, x, px, y, py, t, pt
      else -- replace: need a table for key access (e.g. vector)
        mflw[i] = {id=id, x=x, px=px, y=y, py=py, t=t, pt=pt}
      end
    else
      errorf("invalid type of item at id=%d (coordinates or damap expected)", i)
    end
  end

  -- complete mflow
  mflw.beam=beam             -- current beam
  mflw.sequ=sequ             -- current sequence
  mflw.mtbl=mtbl             -- current mtable (nil if no save)
  mflw.sdir=dir              -- s-direction of tracking
  mflw.tdir=tdir             -- t-direction of tracking
  mflw.edir=edir             -- current element direction
  mflw.eidx=init             -- current element index
  mflw.turn=1                -- current turn index

  mflw.s0=s0                 -- initial s-position (i.e. offset)
  mflw.ds=nil                -- s-length of results (signed)
  mflw.spos=nil              -- s-position of results (signed)
  mflw.npar=npar             -- number of tracked particles or damaps
  mflw.tpar=npar             -- total number of particles or damaps (i.e. #mflw)
  mflw.nslice=nslice         -- number of slice for each element

  mflw.save=save             -- save data
  mflw.observe=observe       -- save observed elements every n turns
  mflw.implicit=implicit     -- save also implicit elements
  mflw.relative=relative     -- save length of slices

  mflw.atentry=atentry       -- action when entering an element
  mflw.atslice=atslice       -- action after each element slices
  mflw.atexit=atexit         -- action when exiting an element
  mflw.atsave=atsave         -- action when saving a row in mtable
  mflw.ataper=ataper         -- action when checking for aperture

  mflw.usrdef=self.usrdef    -- user defined data

  mflw.model=model           -- default integration model
  mflw.method=method         -- default integration method
  mflw.totalpath=totalpath   -- t is the totalpath
  mflw.radiate=radiate       -- radiate at slices
  mflw.T=T                   -- cancel compensation for time of flight

  mflw.mapdef=mapdef         -- save damap definitions (for info)
  mflw.mapsave=mapsave       -- save damaps

  -- internal vars for track (varying states) --

  -- for processing elements
  mflw.__edat = setmetatable({
    eslc=0,                  -- current element number of slices
    el=0,                    -- current element length
    eld=0,                   -- current element D-shaped length (arc length)
    eh=0,                    -- current element curvature
    k0=0,                    -- current element strength k0
    k0s=0,                   -- current element strength k0s
    k1=0,                    -- current element strength k1
    k1s=0,                   -- current element strength k1s
    nmul=0,                  -- current element number of multipoles
    knl=table.new(15,0),     -- current element multipoles
    ksl=table.new(15,0),     -- current element multipoles skew
    npha=0,                  -- current element number of multiplole phases
    pnl=table.new(15,0),     -- current element multipoles phases
    psl=table.new(15,0),     -- current element multipoles shew phases
  }, {__index=mflw})

  -- for processing (thin) subelements
  mflw.__sdat = setmetatable({
    nmul=0,                  -- current subelement number of multipoles
    knl=table.new(15,0),     -- current subelement multipoles
    ksl=table.new(15,0),     -- current subelement multipoles skew
    npha=0,                  -- current subelement number of multiplole phases
    pnl=table.new(15,0),     -- current subelement multipoles phases
    psl=table.new(15,0),     -- current subelement multipoles shew phases
  }, {__index=mflw})

  -- for processing sequence elements by nstep
  mflw.__sitr={iter=iter, state=state} -- sequence iterator state

  return mflw
end

-- track command --------------------------------------------------------------o

local _id = {} -- identity

local function exec (self)
  local mflw, mtbl

  -- retrieve or build mflw (and mtbl)
  if self.mflow then
    assert(self.mflow.__trck == _id, "invalid mflow (track mflow expected)")
    mflw = self.mflow
  else
    mflw = make_mflow(self)
    mflw.__trck = _id
  end
  mtbl = mflw.mtbl

  -- check number of element to track
  local nstep in self
  if nstep == 0 then return mtbl, mflw end

  -- retrieve information
  local s0, eidx, sequ, atentry, atexit in mflw
  local iter, state in mflw.__sitr
  local ne = #sequ

  -- debug actions setup
  if MAD.option.debug >= 2 then trace_action(mflw) end

  -- dynamic tracking
  for ei,elm,spos,ds in iter, state, eidx do
    mflw.eidx = ei ; mflw.spos = s0+spos ; mflw.ds = ds
    atentry  (elm, mflw.__edat, 0,  0)
    elm:track(     mflw.__edat       )
    atexit   (elm, mflw.__edat, 0, -1)

    -- check for end of turn
    if ei == ne then mflw.turn = mflw.turn + 1 end
    -- check remaining number of element to track
    nstep = nstep-1
    if nstep == 0 then return mtbl, mflw, ei end
  end

  return mtbl, mflw
end

local _na, _nyi -- not applicable (see survey), not yet implemented

local track = command 'track' {
  beam=nil,         -- beam (required or sequence.beam)                   (mflw)
  sequence=nil,     -- sequence (required)                                (mflw)
  range=nil,        -- range of tracking                                  (iter)
  dir=1,            -- s-direction of tracking (1 or -1)                  (mflw)

  s0=0,             -- initial s                                          (mflw)
  X0={0,0,0,0,0,0}, -- initial X coordinates (or damap, or list of)       (mflw)

  mapdef=false,     -- setup for damap (true => {})                       (mflw)
  mapsave=false,    -- save damap in the mtable                           (mflw)
  R0=nil,           -- initial R matrix (compagnion of X0 for damap)      (mflw)

  nturn=1,          -- number of turns                                    (iter)
  nstep=-1,         -- number of elements to track                        (iter)
  nslice=1,         -- number of slice for each element                   (mflw)
  model='TKT',      -- model for integration ('DKD' or 'TKT')             (mflw)
  method='simple',  -- method or order for integration                    (mflw)
  totalpath=false,  -- 't' is the totalpath                               (mflw)
  radiate=_nyi,     -- radiate at slices                                  (mflw)

  save=true,        -- create mtable and save results                     (mtbl)
  title=nil,        -- title of mtable (default seq.name)                 (mtbl)
  implicit=true,    -- save also in implicit elements                     (mtbl)
  relative=false,   -- save length of slices instead from element start   (mtbl)
  observe=1,        -- save only in observed elements (every n turns)     (mtbl)

  atentry=fnone,    -- action called when entering an element             (mflw)
  atslice=fnone,    -- action called after each element slices            (mflw)
  atexit=ftrue,     -- action called when exiting an element              (mflw)
  ataper=atend,     -- action called when checking for aperture           (mflw)
  atsave=fnone,     -- action called when saving a row in mtable          (mflw)

  usrdef=nil,       -- user defined data attached to the mflow            (mflw)

  mflow=nil,        -- mflow, exclusive with other attributes except nstep

  exec=exec,        -- command to execute upon children creation
} :set_readonly()   -- reference track command is readonly

-- end ------------------------------------------------------------------------o
return { track = track }
