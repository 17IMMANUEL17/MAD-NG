--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

--[=[
Notes about directions and quantities:
  edir: element direction affects curvatures (edir = seq.dir).
  sdir: track direction s affects lengths    (sdir = cmd.dir).
  tdir: time direction t  affects angles     (tdir = edir x sdir).
  bdir: beam direction    affects strengths  (bdir = edir x sdir x chg).
--]=]

-- locals ---------------------------------------------------------------------o

local command, element, mtable, damap, option                   in MAD

local is_nil, is_beam, is_sequence, is_boolean, is_number,
      is_integer, is_true, is_callable, is_iterable, is_damap,
      is_mappable, is_beta0                                     in MAD.typeid
local fnil, ffalse, chain, achain                               in MAD.gfunc
local dp2pt, bet2map                                            in MAD.gphys
local DKD, atbegin, atins, atins1, action, actionat             in MAD.symint
local errorf, assertf, printf                                   in MAD.utility
local tobit, band, bor                                          in MAD.operator
local apercheck                                                 in MAD.aperture
local is_implicit                                               in element.drift

local table, type, setmetatable, assert =
      table, type, setmetatable, assert

-- load track methods into elements -------------------------------------------o

require 'madl_etrck'

-- helper ---------------------------------------------------------------------o

local function mshow (mflw)
  local show in MAD
  show(mflw)
  for i=1,#mflw do
    local m = mflw[i]
    printf("** [%d]=\n", i)
    show(m)
    if is_damap(m) then
      m:get0():print(nil,'line')
      if option.debug > 2 then m:get1():print(nil,'line') end
     end
  end
end

-- track mtable ---------------------------------------------------------------o

local function fill_row (elm, mflw, lw, islc)
  if mflw.savesel(elm, mflw, lw, islc) == false then
    return false
  end

  local name, kind in elm
  local ds, eidx, clw, sdir, tdir, spos, turn, mtbl, mapsave in mflw

  local lw = islc<0 and -1-islc or clw
  local dsw = ds*lw

  eidx = is_implicit(elm) and eidx+0.5*sdir or eidx

  for i=1,mflw.npar do
    if mflw[i].nosave then goto continue end

    local m, M = mflw[i]
    local id, x, px, y, py, t, pt in m
    if is_damap(m) then
      x,px,y,py,t,pt = x:get0(),px:get0(),y:get0(),py:get0(),t:get0(),pt:get0()
      M = mapsave and (mapsave == 1 and m:get1() or m:copy())
    end

    -- keep order!
    mtbl = mtbl + { name, kind, spos+dsw, dsw, id,
                    x, px, y, py, t, pt, islc, turn, tdir, eidx, M }

    ::continue::
  end
  return true
end

local function fill_obs (elm, mflw, lw, islc)
  if elm:is_observed() and mflw.turn % mflw.observe == 0 then
    return fill_row(elm, mflw, lw, islc)
  end
  return false
end

local header = {
  'direction', 'observe', 'implicit', 'misalign', 'deltap', 'lost'
}

local function make_mtable (self, range, nosav, obs, ndp)
  local title, nturn, dir, implicit, misalign, deltap, mapsave in self
  local sequ, nrow = self.sequence

  if nosav then
    nrow = 0
  elseif obs > 0 then
    nrow = (nturn-1)*ndp
  else
    nrow = sequ:length_of(range, nturn)*(implicit and 2 or 1)*ndp
  end

  -- keep order!
  return mtable(sequ.name, {
    name=self.name, title=title, type='track', header=header,
    direction=dir, observe=obs, implicit=implicit, misalign=misalign,
    deltap=deltap, lost=0, range=range, reserve=nrow, __seq=sequ,
    {'name'}, 'kind', 's', 'l', 'id', 'x', 'px', 'y', 'py', 't', 'pt',
    'slc', 'turn', 'tdir',      -- t-direction of the tracking: sdir * seq.dir
    'eidx',                     -- index of element in the sequence
    mapsave and '__map' or nil, -- optional column to save the (da)map
  })
end

-- reset mflow iterator (e.g. track again) ------------------------------------o

local function sireset (mflw)
  local sequ, sdir, __sitr in mflw
  local s0, range, nturn in __sitr
  local iter, state, init = sequ:siter(range, nturn, sdir)

  __sitr.iter=iter
  __sitr.state=state

  mflw.s0, mflw.ds, mflw.spos, mflw.eidx, mflw.turn = s0, 0, 0, init, 1

  return mflw
end

-- track mflow ----------------------------------------------------------------o

local modint = {DKD=true, TKT=true}

-- see (survey)
local slicebit = { [false]=tobit(0), [true]=tobit(4),
                   atentry=tobit(1), atslice=tobit(2), atexit=tobit(4),
                   atbound=tobit(5), atbody =tobit(6), atall =tobit(7) }

local mapkind = { part=tobit(1), damap=tobit(2) }

local function make_mflow (self)
  -- check sequence
  local sequ = assert(self.sequence, "missing sequence")
  assert(is_sequence(sequ), "invalid sequence")

  -- check beam
  local beam = assert(self.beam or sequ.beam, "missing beam")
  assert(is_beam(beam), "invalid beam")

  -- get range (nil == "#s/#e")
  local range = self.range or sequ.range

  -- build iterator (track direction)
  local dir, nturn in self
  local iter, state, init = sequ:siter(range, nturn, dir)

  -- saving data, build mtable
  local save, implicit, observe, fringe, radiate in self
  local savebit = slicebit[save]
  if is_boolean(fringe ) then fringe  = fringe  and -1 or 0 end
  if is_boolean(radiate) then radiate = radiate and  1 or 0 end

  assert(is_number(savebit)  ,
              "invalid save directive (boolean or valid atxxx string expected)")
  assert(is_boolean(implicit), "invalid implicit (boolean expected)")
  assert(is_integer(fringe)  and fringe  >= -1
                             , "invalid fringe (boolean or fringe flag expected)")
  assert(is_integer(radiate) and radiate >= 0
                             , "invalid radiate (positive integer expected)")
  assert(is_integer(observe) and observe >= 0
                             , "invalid observe (positive integer expected)")

  local savesel = self:var_raw 'savesel'
  assert(is_callable(savesel), "invalid savesel (callable expected)")

  -- sequence and time direction
  local edir = sequ.dir
  local tdir = dir*edir
  assert(tdir == 1 or tdir == -1, "invalid time direction (1 or -1 expected)")

  -- setup default sclicing
  local nslice = self:var_raw 'nslice'
  local nslc = is_number(nslice) and nslice or is_callable(nslice) and 1
                                            or is_iterable(nslice) and #nslice
  assert(is_integer(nslc) and nslc > 0,
         "invalid nslice (integer>0 or iterable of or generator of slice weights expected)")

  -- setup default misalign
  local misalign in self
  assert(is_boolean(misalign), "invalid misalign (boolean expected)")

  -- setup deltap (number, table, vector or range)
  local deltap = self.deltap or 0
  if is_number(deltap) then deltap = {deltap} end
  assert(is_iterable(deltap), "invalid deltap (number or iterable expected)")
  local ndp = #deltap

  -- retrieve default actions (avoid evaluation in case of functions)
  local atentry = self:var_raw 'atentry'
  local atslice = self:var_raw 'atslice'
  local atexit  = self:var_raw 'atexit'
  local ataper  = self:var_raw 'ataper'
  local atsave  = self:var_raw 'atsave'

  assert(is_callable(atentry), "invalid atentry (callable expected)")
  assert(is_callable(atslice), "invalid atslice (callable expected)")
  assert(is_callable(atexit ), "invalid atexit (callable expected)")
  assert(is_callable(ataper ), "invalid ataper (callable expected)")
  assert(is_callable(atsave ), "invalid atsave (callable expected)")

  local mtbl
  if save then
    local nosave = atsave == ffalse
    mtbl = make_mtable(self, range, nosave, observe, ndp)

    if not nosave then
      local fill = observe > 0 and fill_obs or fill_row
      atsave = atsave == fnil and fill or achain(fill, atsave)

      if savebit > 0 then
        local saveact, ex = action 'atsave'
        if band(savebit, slicebit.atentry) ~= 0 then
          atentry = atentry == fnil and saveact or chain(atentry, saveact)
        end
        if band(savebit, slicebit.atexit) ~= 0 then
          atexit = atexit == fnil and saveact or chain(atexit, saveact)
          ex = true
        end
        if band(savebit, slicebit.atslice) ~= 0 then
          local saveact = actionat('atsave', ex and atins or atins1)
          atslice = atslice == fnil and saveact or chain(atslice, saveact)
        end
      end
    end
  end

  if ataper ~= ffalse then -- chain ataper to atslice for slice 0
    ataper = ataper == fnil and apercheck or achain(apercheck, ataper)

    local aperact = actionat('ataper', atbegin)
    atslice = atslice == fnil and aperact or chain(aperact, atslice)
  end

  -- totalpath
  local totalpath in self
  assert(is_boolean(totalpath), "invalid totalpath (boolean expected)")
  local T = totalpath and 1 or 0

  -- model, method
  local method, model, ptcmodel in self
  if is_nil(ptcmodel) then ptcmodel = option.ptcmodel end
  assertf(DKD[method], "invalid integration method '%s'", method)
  assertf(modint[model],
                    "invalid integration model %s (DKD or TKT expected)", model)
  assert(is_boolean(ptcmodel), "invalid ptcmodel (boolean expected)")

  -- retrieve initial conditions
  local s0, X0, mapdef, mapsave in self
  if X0 == 0 then X0 = {0,0,0,0,0,0} end
  assert(is_number  (s0)    , "invalid s0 (number expected)")
  assert(is_mappable(X0)    , "invalid X0 (mappable expected)")
  assert(is_boolean(mapdef) or is_mappable(mapdef)
                            , "invalid mapdef (boolean or mappable expected)")
  assert(is_boolean(mapsave) or mapsave == 1 -- 1 means to save only the matrix
                            , "invalid mapsave (boolean or 1 expected)")
  if not is_mappable(X0[1]) or is_beta0(X0) then X0 = {X0} end

  -- create mflw
  local npar = #X0
  local mflw = table.new(npar*ndp,50)
  local mdef = is_true(mapdef) and {xy=1} or mapdef
  local mknd = 0
  local beta = beam.beta

  -- precedence of initial conditions
  for j,dp in ipairs(deltap) do
    local dpt = dp2pt(dp, beta)

    for i=1,npar do
      local X0i, beam = X0[i], X0[i].beam
      local dpt = beam and dp2pt(dp, beam.beta) or dpt
      local ii = (j-1)*npar+i

      if is_damap(X0i) then -- damap copy
        mflw[ii] = X0i:copy()
        mflw[ii].pt:set0(X0i.pt:get0()+dpt) -- for MADX compatibility
        mflw[ii].status = 'Mset'
        mknd = bor(mknd, mapkind.damap)
--      if dpt ~= 0 then mflw[ii]:translate({0,0,0,0,0,dpt},'in') end
      elseif is_beta0(X0i) then -- damap created from beta0
        mflw[ii] = bet2map(X0i, damap(mdef[i] or mdef))
        mflw[ii].pt:set0(mflw[ii].pt:get0()+dpt) -- for MADX compatibility
        mflw[ii].status = 'Bset'
        mknd = bor(mknd, mapkind.damap)
--      if dpt ~= 0 then mflw[ii]:translate({0,0,0,0,0,dpt},'in') end
      elseif is_mappable(X0i) then -- access by indexes first for vectors
        local x, px = X0i[1] or X0i.x or 0, X0i[2] or X0i.px or 0
        local y, py = X0i[3] or X0i.y or 0, X0i[4] or X0i.py or 0
        local t, pt = X0i[5] or X0i.t or 0, X0i[6] or X0i.pt or 0
        if mdef then -- damap created from coordinates (I as 1st order)
          mflw[ii] = damap(mdef[i] or mdef)
          mflw[ii]:setvar{x,px,y,py,t,pt+dpt}
          mflw[ii].status = 'Xset'
          mknd = bor(mknd, mapkind.damap)
        else -- copy: need a table for key access (e.g. vs. vector)
          mflw[ii] = {x=x, px=px, y=y, py=py, t=t, pt=pt+dpt, status='Xset'}
          mknd = bor(mknd, mapkind.part)
        end
      else
        errorf("invalid type of item at id=%d (particle or damap expected)", i)
      end
      -- save extra information
      mflw[ii].id, mflw[ii].id0, mflw[ii].beam, mflw[ii].nosave =
               ii, j ~= 1 and i or nil,   beam,      X0i.nosave
    end
  end

  -- complete mflow
  mflw.beam=beam             -- current beam
  mflw.sequ=sequ             -- current sequence
  mflw.mtbl=mtbl             -- current mtable (nil if no save)
  mflw.sdir=dir              -- s-direction of tracking
  mflw.tdir=tdir             -- t-direction of tracking
  mflw.edir=edir             -- current element direction

  mflw.s0=s0                 -- initial s-position (i.e. offset)
  mflw.ds=0                  -- current element s-length (signed)
  mflw.spos=0                -- current element s-position (signed)
  mflw.eidx=init             -- current element index
  mflw.turn=1                -- current turn index
  mflw.nstep=-1              -- current number of remaining steps

  mflw.npar=#mflw            -- number of tracked particles or damaps
  mflw.tpar=mflw.npar        -- total number of particles or damaps
  mflw.nslc=nslc             -- minimum number of slices for all elements
  mflw.nslice=nslice         -- slices for each element (num, fun or iterable)
  mflw.deltap=deltap         -- delta p
  mflw.implicit=implicit     -- slice also implicit elements (e.g. plots)
  mflw.fringe=fringe         -- compute fringe fields
  mflw.radiate=radiate       -- radiate at slices
  mflw.misalign=misalign     -- 0 none, 1 main, 2 +error

  mflw.save=save             -- save data
  mflw.observe=observe       -- save observed elements every n turns
  mflw.savesel=savesel       -- save selector

  mflw.atentry=atentry       -- action called when entering an element
  mflw.atslice=atslice       -- action called after each element slices (ataper)
  mflw.atexit=atexit         -- action called when exiting an element (atsave)
  mflw.ataper=ataper         -- action called when checking aperture
  mflw.atsave=atsave         -- action called when saving in mtable

  mflw.method=method         -- default integration method
  mflw.model=model           -- default integration model
  mflw.T=T                   -- cancel compensation for time of flight

  mflw.ptcmodel=ptcmodel     -- use PTC thick model

  mflw.mapknd=mknd           -- kind of maps, particle:1, damap:2, mixed:3
  mflw.mapdef=mapdef         -- save damap definitions (for info)
  mflw.mapsave=mapsave       -- save damaps

  mflw.usrdef=self.usrdef    -- user defined data

  -- for debugging
  mflw.ndump=0               -- dump level of damaps
  mflw.mdump=fnil            -- dump damaps after each integration step
  mflw.xdump=fnil            -- dump damaps after each integration step
  mflw.show=mshow            -- show the mflow

  -- for processing sequence elements by nstep
  mflw.__sitr={iter=iter, state=state,          -- sequence iterator state
               s0=s0, range=range, nturn=nturn} -- sequence iterator reset
  mflw.sireset=sireset

  -- for processing elements (pre-alloc to avoid rehash)
  mflw.__edat = setmetatable({
    el=0, eh=0,               -- current element length and curvature
    ks=0,                     -- solenoid strength
    volt=0, freq=0, lag=0,    -- rfcavity parameters
    nsl=0,                    -- current element number of slices
    clw=0,                    -- current element cumulated length weights
    nmul=0,                   -- current element number of multipoles
    knl={[0]=0},              -- current element multipoles
    ksl={[0]=0},              -- current element multipoles skew
    npha=0,                   -- current element number of multiplole phases
    pnl={[0]=0},              -- current element multipoles phases
    psl={[0]=0},              -- current element multipoles shew phases
  }, {__index=mflw})

  -- for processing (thin) subelements (pre-alloc to avoid rehash)
  mflw.__sdat = setmetatable({
    clw=0,                    -- current subelement cumulated length weights
    nmul=0,                   -- current subelement number of multipoles
    knl={[0]=0},              -- current subelement multipoles
    ksl={[0]=0},              -- current subelement multipoles skew
    npha=0,                   -- current subelement number of multiplole phases
    pnl={[0]=0},              -- current subelement multipoles phases
    psl={[0]=0},              -- current subelement multipoles shew phases
  }, {__index=mflw})

  return mflw
end

-- track command --------------------------------------------------------------o

local _id = {} -- identity (unique)

local function is_dynmflow (a)
  return type(a) == "table" and a.__trck == _id
end

local function exec (self)
  local mflw

  -- retrieve or build mflw (and mtbl)
  if self.mflow then
    assert(self.mflow.__trck == _id, "invalid mflow (track mflow expected)")
    mflw = self.mflow
  else
    mflw = make_mflow(self)
    mflw.__trck = _id
  end

  -- retrieve mtbl (if any)
  local mtbl = mflw.mtbl

  -- check number of elements to track
  local nstep in self
  if nstep == 0 then return mtbl, mflw end
  mflw.nstep = nstep

  -- debug maps
  local mapdump in self
  if mapdump then
    mflw.ndump = mapdump == true and 1 or mapdump
    mflw.mdump = mflw.ndump > 0 and mdump or fnil
    mflw.xdump = mflw.ndump > 1 and xdump or fnil
  end

  -- retrieve information
  local s0, eidx, sequ, __sitr, __edat in mflw
  local iter, state in __sitr
  local ne, ie = #sequ, nil

  -- dynamic tracking
  for ei,elm,spos,ds in iter, state, eidx do
    mflw.eidx, mflw.spos, mflw.ds, __edat.clw = ei, s0+spos, ds, 0
    elm:track(__edat)
    mflw.nstep = mflw.nstep-1

    -- check remaining number of elements and particles/damaps to track
    if mflw.nstep == 0 or mflw.npar == 0 then ie = ei break end
    -- check for end of turn
    if ei == ne then mflw.turn = mflw.turn+1 end
  end

  -- store number of particles/damaps lost
  if mtbl then mtbl.lost = mflw.tpar - mflw.npar end

  return mtbl, mflw, ie
end

local track = command 'track' {
  beam=nil,         -- beam (or sequence.beam, required)                  (mflw)
  sequence=nil,     -- sequence (required)                                (mflw)
  range=nil,        -- range of tracking (or sequence.range)              (iter)
  dir=1,            -- s-direction of tracking (1 or -1)                  (mflw)

  s0=0,             -- initial position offset s                          (mflw)
  X0=0,             -- initial X coordinates (or damap, or beta0)         (mflw)
  deltap=nil,       -- initial deltap(s)                                  (mflw)

  mapdef=false,     -- setup for damap (or list of, true => {})           (mflw)
  mapsave=false,    -- save damap in the mtable                           (mflw)
  mapdump=false,    -- dump X and R after each element                    (mflw)

  nturn=1,          -- number of turns to track                           (iter)
  nstep=-1,         -- number of elements to track                        (iter)
  nslice=1,         -- number of slices (or weights) for each element     (mflw)
  method=2,         -- method or order for integration (1 to 8)           (mflw)
  model='TKT',      -- model for integration ('DKD' or 'TKT')             (mflw)
  ptcmodel=nil,     -- use strict PTC thick model (override option)       (mflw)
  implicit=false,   -- slice implicit elements too (e.g. plots)           (mflw)
  misalign=false,   -- consider misalignment                              (mflw)
  fringe=true,      -- enable fringe fields (see element.flags.fringe)    (mflw)
  radiate=false,    -- radiate at slices (NYI)                            (mflw)
  totalpath=false,  -- variable 't' is the totalpath                      (mflw)

  save=true,        -- create mtable and save results                     (mtbl)
  title=nil,        -- title of mtable (default seq.name)                 (mtbl)
  observe=1,        -- save only in observed elements (every n turns)     (mtbl)
  savesel=fnil,     -- save selector (predicate)                          (mtbl)

  atentry=fnil,     -- action called when entering an element             (mflw)
  atslice=fnil,     -- action called after each element slices (ataper)   (mflw)
  atexit=fnil,      -- action called when exiting an element   (atsave)   (mflw)
  ataper=fnil,      -- action called when checking for aperture           (mflw)
  atsave=fnil,      -- action called when saving in mtable                (mflw)

  usrdef=nil,       -- user defined data attached to the mflow            (mflw)

  mflow=nil,        -- mflow, exclusive with other attributes except nstep
  exec=exec,        -- command to execute upon children creation

  __attr = {        -- list of all setup attributes
    'beam', 'sequence', 'range', 'dir', 's0', 'X0', 'deltap', 'mapdef',
    'mapsave', 'mapdump', 'nturn', 'method', 'model', 'ptcmodel', 'implicit',
    'fringe', 'radiate', 'misalign', 'totalpath', 'save', 'title', 'observe',
    'usrdef',
    noeval = {'atentry', 'atslice', 'atexit', 'ataper', 'atsave', 'nslice',
              'savesel'},
  }
} :set_readonly()   -- reference track command is readonly

-- env ------------------------------------------------------------------------o

MAD.typeid.is_dynmflow = is_dynmflow

-- end ------------------------------------------------------------------------o
return { track = track }
