--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [[
NAME
  track -- track

SYNOPSIS
  TODO

DESCRIPTION
  The module track provides...

RETURN VALUES
  The track command

SEE ALSO
  element, sequence, survey
]]

-- locals ---------------------------------------------------------------------o

local Command, element, sequence, table            in MAD
local is_nil, is_number, vector, matrix, is_matrix in MAD
local abs, sin, cos                                in MAD

local minlen, minang = 1e-14, 1e-14

-- implementation -------------------------------------------------------------o

local function invalid_track (elem, m)
  error(string.format("invalid element %s of kind %s with length %s",
                      elem.name, elem.kind, l and tostring(l) or 0))
end

local function drift_track (l, m)
  return elem.l
end

local function thin_track (elem, m)
  return 0
end

local function strait_track (elem, m)
  return elem.l
end

local function curved_track (elem, m)
  return elem.l
end

-- load track maps into elements

element.element       :set_function { track = invalid_track }
element.thin_element  :set_function { track =    thin_track }
element.strait_element:set_function { track =  strait_track }
element.curved_element:set_function { track =  curved_track }

-- track command helpers

local function fill_table (tbl, name, m, s, l)
  -- add table row (order matters!)
  tbl = tbl + { name, s, l }
end

local function make_map (self)
  local X0, A0 in self
  local V = vector(6):fill(X0)
  local R = matrix(6)
  return { V=V, R=R, A=A, R=R, S=S, T=T }
end

local function make_table (self)
  local seq, dft = self.sequence, self.drift
  local n = (dft == true and 2 or 1) * #seq
  return table 'track' { type = 'track', title = seq.name,
    {'name'}, 's', 'length', 'angle', 'tilt',
     'x', 'y', 'z', 'theta', 'phi', 'psi', 'globaltilt',
  } : reserve(n)
end

-- track command exec
-- track { sequence=seq, X0={x0,y0,z0}, A0={theta0,phi0,psi0},
--         drift=logical, range={start,stop}, dir=1, refer='exit' }
--> table

local function __exec (self)
  local seq = assert(self.sequence, "missing sequence")
  assert(seq.kind == 'sequence' and seq.is_sequence == true, "invalid sequence")

  local map = make_map(self)
  local tbl = make_table(self)
  local drift in self
  local s_pos in seq

  -- affine tracking
  local n, end_pos = -1, 0
  for i=1,#seq do
    local elem, s = seq[i], s_pos[i]
    local ds = s - end_pos

    -- implicit drift
    if ds < 0 then
      error(string.format("negative drift %s in %s['%s'] at %s",
            tostring(ds), seq:get_key('name'), elem.name, tostring(s)))
    elseif ds >= minlen then
      drift_track(ds, map)
      end_pos, n = s, n+1
      if drift then fill_table(tbl, 'DRIFT_'..n, map, end_pos, ds) end
    end

    -- sequence element
    ds = elem:track(map)
    end_pos = end_pos + ds
    fill_table(tbl, elem.name, map, end_pos, ds)
  end

  return tbl
end

-- track command template

local track = Command 'track' {
  -- default options
  X0={0,0,0}, A0={0,0,0}, drift=true, range={1,-1}, dir=1,
  noexec=true,                        -- make template only
} : set_metamethod({ __exec = __exec }, true) : set_readonly()

-- end ------------------------------------------------------------------------o
return {
  track = track,

  __help = M.__help,
}
