--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Shreyber, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  track -- track

SYNOPSIS
  TODO

DESCRIPTION
  The module track provides...

RETURN VALUES
  The track command

SEE ALSO
  element, sequence, survey
]=]

M.__help['References Track'] = [=[
[Wolski14]    A. Wolski,  "Beam Dynamics in High Energy Particle Accelerators".
[Forest98]    E. Forest,  "Beam Dynamics, A New Attitude and Framework".
[Forest02]    E. Forest,  "Introduction to Polymorphic Tracking Code",
              KEK report 2002-3.
[Yoshida90]   H. Yoshida, "Construction of higher order symplectic integrators",
              Phys.Let A, Volume 150, number 5,6,7.
[Burkhardt13] H. Burkhardt et al., "Improved Teapot Method and Tracking with
              Thick Quadrupoles for the LHC and its Upgrade", IPAC 2013.
]=]

M.__help['Track drift'] = [[
  [1] Drift Space, ch. 3.1, p.86 eq.(3.13-3.18)
  [2] p.353, ch. 12.1.3
  [3] PTC, Function DRIFTR in file Sh_def_kind.f90, same formula as [1]
]]

M.__help['Track straight'] = [[
  [2] p.352, ch. 12.1
      DKD: ch 12.1.3, p. 353
      MKM: ch 12.1.4, p.354
  [3] DKD: p. 72, Section K.4.2,
           PTC, Function INTER_STREX in file Sh_def_kind.f90)
      MKM: p. 75, Section K.4.7,
           PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

M.__help['Track curved'] = [[
  [2] p.357, ch. 12.2
  [3] PTC, p. 76, Section K.4.9,Function INTER_TEAPOT in file Sh_def_kind.f90)
]]

M.__help['Track pushtkt'] = [[
[2] MKM: p. 75, Section K.4.7,
[3] PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

M.__help['Track straight matrix-kick'] = [[
  [2] p.358, ch. 12.2.2 Drift-Kick Split, drift in polar coordinates
  [3] p. 76, PTC, Function SPROTR in file Sh_def_kind.f90)
]]

M.__help['Track curved drift-kick'] = [[
  [2] p.358, ch. 12.2.2 Drift-Kick Split, drift in polar coordinates
  [3] p. 76, PTC, Function SPROTR in file Sh_def_kind.f90)
]]

M.__help['Track curved kick '] = [[
  [2] p.358, ch. 12.2.2 Drift-Kick Split, kick in polar coordinates
  [3] p. 76, PTC, Function SKICK in file Sh_def_kind.f90)

]]

M.__help['Track kick'] = [[
  [2] p.354, ch. 12.1.3
  [2] p. 72, Section K.4.2,
  [3] PTC, Function KICKEXR in file Sh_def_kind.f90)
  [3] PTC, Function KICKR in file Sh_def_kind.f90)
]]

--[[TODO:
-Add charge, direction, mass(?)
-Deltap (recalculation of pt)
- KICKEX: how to read properly strength of thick element (i.e. convert
k1,k1s, k2 etc to knl,ksl)
-????KICKEX: add a check for thick element that there is only one strength,
i.e. quad only has k1 and not k0, k2 or???
]]
-- add patch, rotation + translation

--[[ METHOD:
2 - 2nd order, 1 kick per integration step
4 - Ruth-Neri-Yoshida 4th order, 3 kicks per step
6 - Yoshida 6th order, 7kicks per step
]]

--[[
  frame of integration:

 angle == 0 and k0 ~= 0 rbend on (??? rbend with the straight ref. frame ??)
 STRAIGHT REF. FRAME FOR RBEND : STREX

 angle == 0 and k0 == 0 rbend off (i.e. drift)
 DRIFT-TRACK

 angle ~= 0 and k0 ~= 0 sbend on
 SBEND, default RBEND:  TEAPOT

 angle ~= 0 and k0 == 0 sbend off( useless, what kind of element is this? broken sbend?)
       <=> rbend with l = l_arc and k0 = angle, what about errors?

 angle == 0 abd k0 == 0 but k[n] ~= 0: straight magnet
 DKD (model = 1 ): STREX ; MKM (model = 2): TKTF
]]

-- locals ---------------------------------------------------------------------o

local Command, element, sequence, table, load                     in MAD
local is_nil, is_number, vector, matrix, is_matrix                in MAD
local abs, sqrt, max, sin, cos, tan, asin, acos, atan, sinc, fact in MAD

local minlen, minang = 1e-14, 1e-14
local maxmul = 20

-- implementation -------------------------------------------------------------o

local function invalid_track (elem, m)
  error(string.format("invalid element %s of kind %s with length %s",
                      elem.name, elem.kind, l and tostring(l) or 0))
end

-- Put element multipoles in mflow

local function get_mult0 (elem, m) -- l=0
  local knl, dknl = elem.knl or {}, elem.dknl or {}
  local ksl, dksl = elem.ksl or {}, elem.dksl or {}
  local nmul = max(#knl, #ksl, #dknl, #dksl)

  for i=1,nmul do
    m.knl[i] = (knl[i] or 0) + (dknl[i] or 0)
    m.ksl[i] = (ksl[i] or 0) + (dksl[i] or 0)
  end
  return nmul
end

local function get_mult (elem, m, l) -- general
  local k0 , k1 , k2 , k3  in elem
  local k0s, k1s, k2s, k3s in elem
  local nkn = k3  and 4 or k2  and 3 or k1  and 2 or k0  and 1 or 0
  local nks = k3s and 4 or k2s and 3 or k1s and 2 or k0s and 1 or 0
  local knl, dknl = elem.knl or {}, elem.dknl or {}
  local ksl, dksl = elem.ksl or {}, elem.dksl or {}
  local nmul = max(#knl, #ksl, #dknl, #dksl, nkn, nks)

  if nmul >= 1 then
    local kn = { k0 , k1 , k2 , k3  }
    local ks = { k0s, k1s, k2s, k3s }
    for i=1,nmul do
      m.knl[i] = (kn[i] or 0)*l + (knl[i] or 0) + (dknl[i] or 0)
      m.ksl[i] = (ks[i] or 0)*l + (ksl[i] or 0) + (dksl[i] or 0)
    end
  end
  return nmul
end

-- Drift general exact strait

local function strait_drift_track (elem, m, l)
  m.in_action(elem, m, l, 'strait_drift_track')

  local x, px, y, py, t, pt, T in m
  local beta_inv = 1/m.beam.beta
  local l_pz = l/sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability

  m.x = x + px*l_pz
  m.y = y + py*l_pz
  m.t = t + (beta_inv+pt)*l_pz - (1-T)*l*beta_inv

  m.out_action(elem, m, l, 'strait_drift_track')
end

-- Drift general exact curved       [PTC SSECH1: either SPROT(DKD) or SSEC(MKM)]

local function curved_drift_track (elem, m, l)
  m.in_action(elem, m, l, 'curved_drift_track')

  local x, px, y, py, t, pt, T in m
  local beta_inv = 1/m.beam.beta
  local dir = m.dir * m.beam.charge
  local rho = elem.l/elem.angle
  local angle = l/rho

  local sa, ca, ta, sa2 = sin(angle), cos(angle), tan(angle), sin(angle/2)

  local pz  = sqrt(1 + 2*beta_inv*pt + pt^2 - px^2 - py^2) -- TODO: stability
  local pz_ = 1/pz
  local ptt = 1 - ta*px*pz_
  local xr  = x+rho

  m.x  = (x + rho*(2*sa2^2 + sa*px*pz_)) / (ca*ptt)
  m.px = ca*px + sa*pz
  m.y  = y + ta*xr*pz_*py/ptt
  m.t  = t + ta*xr*pz_*(beta_inv+pt) / ptt - (1-T)*l*beta_inv

  m.out_action(elem, m, l, 'curved_drift_track')
end

-- Drift solenoid exact

local function solenoid_drift_track (elem, m, l)
  m.in_action(elem, m, l, 'solenoid_drift_track')

  local ks in elem

  if is_nil(ks) or ks == 0 then
    return drift_track(elem, m, l)
  end

  local x, px, y, py, t, pt, T in m
  local beta_inv = 1/m.beam.beta
  local dir = m.dir * m.beam.charge

  local bsol = m.beam.charge*ks/2
  local xp = px + bsol*y
  local yp = py - bsol*x

  local l_pz  = l/sqrt(1 + 2*beta_inv*pt + pt^2 - xp^2 - yp^2) -- TODO: stability
  local angle = l_pz*bsol

  local ca, sa, sc = cos(angle), sin(angle), sinc(angle)

  local xt  = ca*x  + l_pz*sc*px
  local pxt = ca*px - l_pz*sc*x *bsol^2
  local yt  = ca*y  + l_pz*sc*py
  local pyt = ca*py - l_pz*sc*y *bsol^2

  m.x  = ca*xt  + sa*yt
  m.px = ca*pxt + sa*pyt
  m.y  = ca*yt  - sa*xt
  m.py = ca*pyt - sa*pxt

  m.t  = t + (beta_inv+pt)*l_pz - (1-T)*l*beta_inv

  m.out_action(elem, m, l, 'solenoid_drift_track')
end

-- Kick thin

local function thin_kick_track(elem, m, l)
  m.in_action(elem, m, l, 'thin_kick_track')

  local nmul = get_mult0(elem, m)
  if nmul == 0 then return end

  local x, px, y, py, knl, ksl in m
  local dir = m.dir * m.beam.charge

  local byt
  local by = knl[nmul] / fact(nmul-1)
  local bx = ksl[nmul] / fact(nmul-1)
  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + knl[i] / fact(i-1)
    bx  = y*by + x*bx + ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = px - dir*by + dir*knl[1]
  m.py = py + dir*bx - dir*ksl[1]

  if knl[1] ~= 0 or ksl[1] ~= 0 then
    local t, pt in m
    local beta_inv = 1/m.beam.beta
    local pz = sqrt(1 + 2*beta_inv*pt + pt^2)
    m.t = t + dir*(knl[1]*x - ksl[1]*y) * (beta_inv+pt)/pz
  end

  m.out_action(elem, m, l, 'thin_kick_track')
end

-- Kick general exact strait                 [PTC KICKEXR: KICKR + KICKTR(mult)]

local function strait_kick_track(elem, m, l)
  m.in_action(elem, m, l, 'strait_kick_track')

  local nmul = l >= minlen and get_mult(elem, m, l) or get_mult0(elem, m)
  if nmul == 0 then return end

  local x, px, y, py, knl, ksl in m
  local dir = m.dir * m.beam.charge

  local byt
  local by = knl[nmul] / fact(nmul-1)
  local bx = ksl[nmul] / fact(nmul-1)
  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + knl[i] / fact(i-1)
    bx  = y*by + x*bx + ksl[i] / fact(i-1)
    by  = byt
  end

  m.px = px - dir*by + dir*knl[1] -- why not like in skick ?
  m.py = py + dir*bx - dir*ksl[1]

  if knl[1] ~= 0 or ksl[1] ~= 0 then
    local t, pt in m
    local beta_inv = 1/m.beam.beta
    local pz = sqrt(1 + 2*beta_inv*pt + pt^2)
    m.t = t + dir*(knl[1]*x - ksl[1]*y) * (beta_inv+pt)/pz
  end
--add mult solenoid
  m.out_action(elem, m, l, 'strait_kick_track')
end

-- Kick general exact curved                      [PTC SKICK, TODO: GETELECTRIC]

local function curved_kick_track (elem, m, l) --
  m.in_action(elem, m, l, 'curved_kick_track')

  local nmul = get_mult(elem, m, l)
  if nmul == 0 then return end

  local x, px, y, py, knl, ksl in m
  local dir = m.dir * m.beam.charge

  local byt
  local by = knl[nmul] / fact(nmul-1)
  local bx = ksl[nmul] / fact(nmul-1)
  for i=nmul-1,1,-1 do
    byt = x*by - y*bx + knl[i] / fact(i-1)
    bx  = y*by + x*bx + ksl[i] / fact(i-1)
    by  = byt
  end

  local k0 in elem
  m.px = px - dir*by*(1 + k0*x)  --only angle
  m.py = py + dir*bx*(1 + k0*x)

  m.out_action(elem, m, l, 'curved_kick_track')
end

-- integrator schemes ---------------------------------------------------------o

local integrate = require 'madl_sympint'

-- frame kinds ----------------------------------------------------------------o

local function thick_track (elem, m, angle, drift, kick)
  local l, subelem, method in elem
  local integrator = integrate[method or m.method]
  local ns = is_nil(subelem) and 0 or #subelem

  if ns == 0 then -- no sub-elements
    integrator(elem, m, l, drift, kick)
    return l
  end

  local s, ds, at = 0
  for i=1,ns do   -- sub-elements
    at = assert(subelem[i].at, "invalid sub-element position (at expected)")
    ds = at*l - s
    assert(ds >= 0, "invalid sub-element position (positive ds expected)")
    if ds >= minlen then
      integrator(elem, m, ds, drift, kick)
    end
    s = s + ds
    assert(subelem[i]:track(m) == 0, "invalid sub-element length (0 expected)")
  end
  ds = l-s
  assert(ds >= 0, "invalid sub-element position (positive ds expected)")
  if ds >= minlen then
    integrator(elem, m, ds, drift, kick)
  end
  return l
end

local function drift_track (elem, m)
  local l, subelem in elem
  local ns = is_nil(subelem) and 0 or #subelem

  if ns == 0 then -- no sub-elements
    strait_drift_track(elem, m, l)
    return l
  end

  local s, ds, at = 0
  for i=1,ns do   -- sub-elements
    at = assert(subelem[i].at, "invalid sub-element position (at expected)")
    ds = at*l - s
    assert(ds >= 0, "invalid sub-element position (positive ds expected)")
    if ds >= minlen then
      strait_drift_track(elem, m, ds)
    end
    s = s + ds
    assert(subelem[i]:track(m) == 0, "invalid sub-element length (0 expected)")
  end
  ds = l-s
  assert(ds >= 0, "invalid sub-element position (positive ds expected)")
  if ds >= minlen then
    strait_drift_track(elem, m, ds)
  end
  return l
end

local function thin_track (elem, m)
--  io.write('THIN_TRACK: for ', elem.name, ' (l=', elem.l, ')\n')
  local l in elem

  if l >= minlen then
    error("invalid thin element length (too long): " .. elem.name)
  end

  thin_kick_track(elem, m, 0)
  return l
end

local function strait_track (elem, m) -- e.g. rbend
--  io.write('STRAIT_TRACK: for ', elem.name, ' (l=', elem.l,')\n')
  local l, angle in elem

  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elem.name)
--  elseif l < minlen then
--    error("invalid strait element length (too short): " .. elem.name)
  end

  -- TODO: boundary elements and radiation.
  return thick_track (elem, m, 0, strait_drift_track, strait_kick_track)
end

local function curved_track (elem, m) -- e.g. sbend
--  io.write('CURVED_TRACK: for ', elem.name, ' (l=', elem.l,')\n')
  local l, angle in elem

  if abs(angle) < minang then
    error("invalid curved element angle (too strait): " .. elem.name)
  elseif l < minlen then
    error("invalid curved element length (too short): " .. elem.name)
  end

  -- TODO: boundary elements and radiation.
  return thick_track (elem, m, angle, curved_drift_track, curved_kick_track)
end

-- specialisations ------------------------------------------------------------o

local function solenoid_track (elem, m)
--  io.write('SOL_TRACK: for ', elem.name, ' (l=', elem.l,')\n')
  local l, angle in elem

  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elem.name)
  elseif l < minlen then
    error("invalid strait element length (too short): " .. elem.name)
  end

  -- TODO: boundary elements and radiation.
  return thick_track (elem, m, 0, solenoid_drift_track, strait_kick_track)
end

-- load track maps into elements ----------------------------------------------o

element.element        :set_function { track =  invalid_track }
element.drift_element  :set_function { track =    drift_track }
element.thin_element   :set_function { track =     thin_track }
element.strait_element :set_function { track =   strait_track }
element.curved_element :set_function { track =   curved_track }
element.solenoid       :set_function { track = solenoid_track }

-- track command --------------------------------------------------------------o

local _trck = {}

local function make_table (self, length)
  local sequence, drift, save in self
  if save == 'none' then return nil end
  local name, direction in sequence
  local nrow = (drift == true and 2 or 1) * length

  return table 'track' {
    type='track', title=name, direction=direction,
    {'name'}, 'kind', 's', 'l',
    'x', 'px', 'y', 'py', 't', 'pt',
    [_trck]=_trck,
  } : reserve(nrow)
end

local function fill_table (tbl, name, kind, m, s, l)
  -- keep order!
  tbl = tbl + { name, kind, s, l, m.x, m.px, m.y, m.py, m.t, m.pt }
end

local function make_map (self, start)
  local x, px, y, py, t, pt, X0, sequence in self

  x  = x  or X0.x  or X0[1]
  px = px or X0.px or X0[2]
  y  = y  or X0.y  or X0[3]
  py = py or X0.py or X0[4]
  t  = t  or X0.t  or X0[5]
  pt = pt or X0.pt or X0[6]

  local s_pos, direction in sequence
  local nst, method, total_path, in_action, out_action in self
  local T = total_path == true and 1 or 0

  return { x=x, px=px, y=y, py=py, t=t, pt=pt,
           knl=vector(maxmul), ksl=vector(maxmul),
           dir=direction, nst=nst, method=method, T=T,
           in_action=in_action, out_action=out_action,
           s_ini=s_pos[start], s_end=s_pos[start], ndrift=-1, [_trck]=_trck }
end

-- track command exec
-- track { sequence=seq, X0={x,px,y,py,t,pt},
--         range={start,stop}, save='exit'|'none',
--         drift=logical, method='teapot', total_path=logical,
--         table=tbl, map=map  }
-- return the table and the map
-- alternate initial conditions (higher precedence):
-- x=x, px=px, y=y, py=py, t=t, pt=pt
-- X0={x=x, px=px, y=y, py=py, t=t, pt=pt}

local function exec (self)
  local seq = assert(self.sequence, "missing sequence")
  assert(seq.kind == 'sequence' and seq.is_sequence == true, "invalid sequence")
  local beam = assert(self.beam or seq.beam, "missing beam")
  assert(beam.kind == 'beam', "invalid beam")

  local start, stop = seq:range_index (self.range)
  local tbl = self.table or make_table(self, stop-start+1)
  local map = self.map   or make_map  (self, start)
  assert(map[_trck] == _trck, "invalid track map"  )
  assert(is_nil(tbl) or tbl[_trck] == _trck, "invalid track table")

  local s_ini, s_end, ndrift in map
  local drift, save in self
  local s_pos in seq

  drift = drift == true and save or 'none'
  map.beam = beam

  -- dynamic tracking
  for i=start,stop do
    local elem, s = seq[i], s_pos[i]
    local name, kind, angle, tilt, nstep in elem
    local ds = s - s_end

    -- implicit drift
    if ds >= minlen then
      strait_drift_track(nil, map, ds)
      s_end, ndrift = s, ndrift+1

      if drift == 'exit' and elem:is_selected() then
        fill_table(tbl, 'DRIFT_'..ndrift, 'drift', map, s_end-s_ini, ds)
      end
    elseif ds < 0 then
      error(string.format("negative implicit drift %s in %s['%s'] at %s",
            tostring(ds), seq.name, name, tostring(s)))
    end

    -- sequence element
    ds = elem:track(map)
    s_end = s + ds

    if save == 'exit' and elem:is_selected() then
      fill_table(tbl, name, kind, map, s_end-s_ini, ds)
    end
  end
  map.s_end, map.ndrift = s_end, ndrift

  return tbl, map
end

-- track command template

local no_action = \ ()

local track = Command 'track' {
  -- default options
  X0={0,0,0,0,0,0}, range={1,-1},
  drift=true, save='exit', nst=1, method='teapot', total_path=false,
  exec=exec,
} :set_function {
  in_action=no_action, out_action=no_action
} :set_readonly()

MAD.utility.defhelp(M) -- todo: per function help -> 'track'

-- end ------------------------------------------------------------------------o
return {
  track = track,
  __help = M.__help,
}
