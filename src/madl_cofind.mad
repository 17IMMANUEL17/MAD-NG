--[=[
 o-----------------------------------------------------------------------------o
 |
 | Closed Orbit module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local warn, option, vector, matrix, command, track               in MAD
local bind1st                                                    in MAD.gfunc
local has_dpt, vname, msort                                      in MAD.gphys
local tblcat, tblorder, errorf, assertf, printf                  in MAD.utility
local eps                                                        in MAD.constant
local is_number, is_positive, is_boolean, is_true, is_iterable,
      is_mappable                                                in MAD.typeid

local abs, min, max in math

local assert, error, getmetatable, setmetatable, table =
      assert, error, getmetatable, setmetatable, table

local vn = vname[6]

-- helpers --------------------------------------------------------------------o

local function mdump (X0, dX, X, R, id, itr, typ)
  local fmt = option.format
  option.format = "% 10.5f"
  printf("cofind: (id=%d,itr=%d,typ=%s)\n", id, itr, typ)
  X0:print('X0', eps, 'line')
  dX:print('dX', eps, 'line')
  if option.debug >= 3 then
    X:print('X', eps, 'line')
    R:print('R', eps)
  end
  option.format = fmt
end

local function parcpy (X, Y_) -- see track init
  local Y = Y_ or table.new(0,10)
  Y.x, Y.px = X.x, X.px
  Y.y, Y.py = X.y, X.py
  Y.t, Y.pt = X.t, X.pt
  return Y
end

local function par2vec (X, V_)
  local V = V_ or vector(6)
  if is_number(X) then return V:fill(X) end
  V[1], V[2] = X.x, X.px
  V[3], V[4] = X.y, X.py
  V[5], V[6] = X.t, X.pt
  return V
end

local function vec2par (V, X_)
  local X = X_ or table.new(0,10)
  X.x, X.px = V[1], V[2]
  X.y, X.py = V[3], V[4]
  X.t, X.pt = V[5], V[6]
  return X
end

-- cofind algorithms ----------------------------------------------------------o

local method = {}

local I  = matrix(6):eye()
local I4 = matrix(4):eye()
local X4 = vector(4)
local R4 = matrix(4)
local r4 = 1..4

function method.newton (X0, X, R, T, tol, dptol)
  local dX, rnk

  if not T and has_dpt(R, dptol) then
    -- 6D case
    dX, rnk = (R-I):solve(X-X0)

    if rnk < 6 then
      return rnk, dX, "singular"
    elseif dX:maxabs() <= tol then
      return rnk, dX, "stable"
    end

    -- adjust X0 orbit
    X0:sub(dX,X0)

  else
    -- 4D case
    X0:getrow(r4, X4) ; R:getsub(r4,r4, R4)
    dX, rnk = (R4-I4):solve(X:getrow(r4)-X4)

    if rnk < 4 then
      return rnk, dX, "singular"
    elseif dX:maxabs() <= tol then
      return rnk, dX, "stable"
    end

    -- adjust X0 orbit
    (X4-dX):copy(X0)
  end

  return rnk, dX
end

-- cofind using jacobian ------------------------------------------------------o

local function cofind_jacob (self, mflw)
  local cotol, coiter, codiff, codptol, comethod, totalpath in self
  local costep = method[comethod]

  -- error handling
  local errf = self.cowarn and warn or errorf

  -- save current orbits, extend n particles to n*(1+6) particles
  local n, X0 = mflw.npar, table.new(mflw.npar,0)
  for i=n,1,-1 do
    local m, ii = mflw[i], 7*(i-1)+1
    local mt = {__index=m, -- unfortunately, Lua needs a function for newindex.
                __newindex=\_,k,v => if k == 'status' then m[k] = v end end}
    for j=6,1,-1 do
      local mc = parcpy(m) -- no beam, no status, no id0, no coid
      mflw[ii+j], mc.id, mc.nosave = mc, ii+j, true
      setmetatable(mc,mt)  -- connect secondary particles to primary particle
    end
    mflw[ii], m.id, m.coid = m, ii, m.id
    X0[i] = par2vec(m)     -- save current orbit
  end
  mflw.npar, mflw.tpar, n = 7*n, 7*n, 7*n

  -- save finite differences, final translation, temporaries
  local dH, X1, X, R = par2vec(codiff), par2vec(self.X1), vector(6), matrix(6)

  -- search for fix points
  for itr=1,coiter do
    -- sanity check
    assert(n%7 == 0, "unexpected corrupted set of particle blocks")

    -- 1. set orbit and finite diff. for jacobian (from secondary particles)
    for i=1,n,7 do
      local m, id = mflw[i], mflw[i].id
      assert(m.coid == id, "unexpected corrupted set of particle blocks")
      vec2par(X0[id], m)
      for j=1,6 do
        m = mflw[i+j]
        assert(m.coid == id, "unexpected corrupted set of particle blocks")
        vec2par(X0[id], m)
        m[vn[j]] = X0[id][j] + dH[j]
      end
    end

    -- 2. track blocks of 7 particles
    track { mflow=mflw }

    -- 3. lost particles (if any)
    if n ~= mflw.npar then
      warn("cofind: lost %d particles at iteration %d", n-mflw.npar, itr)
      -- save information (spos, turn and status set by lostpar)
      for i=mflw.npar+1,n do mflw[i].coiter = itr end
      n = mflw.npar

      -- filter out particles with at least one lost particle in their block
      local i = 1
      while i <= n do
        if mflw[i].status == "lost" then
          mflw[i], mflw[n] = mflw[n], mflw[i] -- swap with last
          n = n - 1
        else
          i = i + 1
        end
      end

      -- reorder remaining tracked particles
      tblorder(mflw, n)
      -- update number of tracked particles
      mflw.npar = n
      -- sanity check (again)
      assert(n%7 == 0, "unexpected corrupted set of particle blocks")
    end

    -- 4. update orbits
    local i = 1
    while i <= n do
      local m = mflw[i]

      -- retrieve previous orbit, current orbit and jacobian
      local X0 = X0[m.coid] ; par2vec(m, X)
      for j=1,6 do ; for k=1,6 do -- compute jacobian R_jk = df(x_j)/dx_k
        R:set(j,k, (mflw[i+k][vn[j]] - X[j])/dH[k])
      end end

      -- update X0 = X0-dX if |dX| > cotol, where dX solves (R-I)dX = (X-X1)-X0
      local rnk, dX, typ = costep(X0, X-X1, R, totalpath, cotol, codptol)

      if option.debug >= 2 then
        mdump(X0, dX, X, R, m.coid, itr, typ or m.status)
      end

      if typ then -- "stable/singular"
        if typ == "stable"
        then vec2par(X0, m).coR = R:copy()
        else warn("cofind: singular matrix (rnk=%d) at iteration %d \z
                   for particle %d.", rnk, itr, m.coid)
        end
        -- save information in stable/singular primary particle
        m.rank, m.status, m.coiter = rnk, typ, itr
        -- swap with last tracked block
        for j=0,6 do mflw[i+j], mflw[n-6+j] = mflw[n-6+j], mflw[i+j] end
        n = n - 7
      else
        i = i + 7
      end
    end

    -- update the number of particles to track
    mflw.npar = n

    -- all particles have been processed
    if n == 0 then break end

    -- reset sequence iterator
    mflw:sireset()
  end

  -- 5. mark remaining particles as unstable
  if n ~= 0 then
    errf("cofind: closed orbit(s) did not converge in %d iterations", coiter)
    for i=1,n do
      mflw[i].coiter, mflw[i].status = coiter, "unstable"
    end
  end

  -- 6. remove secondary particles, restore initial id
  local j = 0
  for i=1,mflw.tpar do
    local m = mflw[i]
    mflw[i] = nil
    if getmetatable(m) == nil then
      mflw[j+1], m.id, j, m.coid = m, m.coid, j+1, nil
    end
  end
  assert(7*j == mflw.tpar, "unexpected corrupted set of particle blocks")
  mflw.tpar = j

  -- 7. particles are ordered by stable/unstable/singular/lost then by id
  return mflw.mtbl, msort(mflw)
end

-- cofind using map -----------------------------------------------------------o

local function cofind_map (self, mflw)
  local cotol, coiter, codptol, comethod, totalpath in self
  local costep = method[comethod]

  -- error handling
  local errf = self.cowarn and warn or errorf

  -- save current orbits
  local n, X0 = mflw.npar, table.new(mflw.npar,0)
  for i=1,n do X0[i] = mflw[i]:get0() end

  -- save final translation, temporaries
  local X1, X, R = par2vec(self.X1), vector(6), matrix(6)

  -- search for fix points
  for itr=1,coiter do

    -- 1. set order 0 to orbit, order 1 to I, higher orders to 0
    for i=1,n do mflw[i]:setvar(X0[mflw[i].id]) end

    -- 2. track damaps
    track { mflow=mflw }

    -- 3. lost damaps (if any)
    if n ~= mflw.npar then
      warn("cofind: lost %d particles at iteration %d", n-mflw.npar, itr)
      -- save information (spos, turn and status set by lostpar)
      for i=mflw.npar+1,n do mflw[i].coiter = itr end
      n = mflw.npar
    end

    -- 4. update orbits
    local i = 1
    while i <= n do
      local m = mflw[i]

      -- retrieve previous orbit, current orbit and jacobian
      local X0 = X0[m.id]
      m:get0(X) ; m:get1(R)

      -- update X0 = X0-dX if |dX| > cotol, where dX solves (R-I)dX = (X-X1)-X0
      local rnk, dX, typ = costep(X0, X-X1, R, totalpath, cotol, codptol)

      if option.debug > 2 then
        mdump(X0, dX, X, R, m.id0 or m.id, itr, typ or m.status)
      end

      if typ then -- "stable/singular"
        if typ == "stable"
        then m:set0(X0).coR = R:copy() -- update X0 only
        else warn("cofind: singular matrix (rnk=%d) at iteration %d \z
                   for damap %d.", rnk, itr, m.id0 or m.id)
        end
        -- save information in stable/singular damap
        m.rank, m.status, m.coiter = rnk, typ, itr
        -- swap with last tracked damap
        mflw[i], mflw[n] = mflw[n], mflw[i]
        n = n - 1
      else
        i = i + 1
      end
    end

    -- update the number of damap to track
    mflw.npar = n

    -- all damaps have been processed
    if n == 0 then break end

    -- reset sequence iterator
    mflw:sireset()
  end

  -- 5. mark remaining damap as unstable
  if n ~= 0 then
    errf("cofind: closed orbit(s) did not converge in %d iterations", coiter)
    for i=1,n do
      mflw[i].coiter, mflw[i].status = coiter, "unstable"
    end
  end

  -- 7. damaps are ordered by stable/unstable/singular/lost then by id
  return mflw.mtbl, msort(mflw)
end

-- cofind command -------------------------------------------------------------o

-- input  status: Xset, Mset (from track)
-- output status: stable, unstable, singular, lost.

local function exec (self)
  local mapdef, cotol, coiter, codiff, codptol, comethod, cowarn in self
  assertf(is_positive(cotol ), "invalid cotol %.15g (positive number expected)" , cotol )
  assertf(is_positive(coiter), "invalid coiter %d (positive number expected)"   , coiter)
  assertf(is_positive(codiff), "invalid codiff %.15g (positive number expected)", codiff)
  assertf(is_positive(codptol),"invalid codptol %.15g (positive number expected)",codptol)
  assertf(   method[comethod], "invalid comethod '%s' (unsupported method)"     ,comethod)
  assert (is_boolean(cowarn) , "invalid cowarn (boolean expected)")

  -- setup map order
  self.mapdef = is_true(mapdef) and {xy=1} or mapdef

  -- prepare track template
  local _, mflw = track { exec=false } :copy_variables(self) { nstep=0 }

  -- search closed orbit
  if mapdef
  then return cofind_map  (self, mflw) -- use damap
  else return cofind_jacob(self, mflw) -- use jacobian
  end
end

-- attributes set to nil will use the default from track by inheritance

local cofind = command 'cofind' {
  beam=nil,          -- beam (required or sequence.beam)                  (trck)
  sequence=nil,      -- sequence (required)                               (trck)
  range=nil,         -- range of tracking                                 (trck)
  dir=nil,           -- s-direction of tracking (1 or -1)                 (trck)

  s0=nil,            -- initial s (offset)                                (trck)
  X0=nil,            -- initial X coordinates (or list of)                (trck)
  deltap=nil,        -- initial deltap(s)                                 (trck)

  mapdef=true,       -- setup for damap (true => {xy=1})                  (trck)
  mapsave=nil,       -- save damap in the mtable                          (trck)
  mapdump=nil,       -- dump X and R after each element                   (trck)

  nturn=nil,         -- number of turns                                   (trck)
  nslice=nil,        -- number of slices (or weights) for each element    (trck)
  method=nil,        -- method or order for integration (1 to 8)          (trck)
  model=nil,         -- model for integration ('DKD' or 'TKT')            (trck)
  implicit=nil,      -- slice implicit elements too (e.g. plots)           (mflw)
  misalign=nil,      -- consider misalignment                              (mflw)
  fringe=nil,        -- activate fringe fields (0..7)                      (mflw)
  radiate=nil,       -- radiate at slices (NYI)                            (mflw)
  totalpath=nil,     -- 't' is the totalpath                               (mflw)

  save=false,        -- create mtable and save results                    (trck)
  title=nil,         -- title of mtable (default seq.name)                (trck)
  observe=nil,       -- save only in observed elements (every n turns)    (trck)
  savesel=nil,       -- save selector (predicate)                         (trck)

  atentry=nil,       -- action called when entering an element  (ataper)  (trck)
  atslice=nil,       -- action called after each element slices (atsave)  (trck)
  atexit=nil,        -- action called when exiting an element   (atsave)  (trck)
  ataper=nil,        -- action called when checking for aperture          (trck)
  atsave=nil,        -- action called when saving in mtable               (trck)

  cotol=1e-8,        -- closed orbit tolerance (i.e. |dX|)                (cofn)
  coiter=20,         -- maximum number of iteration                       (cofn)
  codiff=1e-10,      -- finite differences step for jacobian              (cofn)
  codptol=1e-12,     -- 4D vs 6D dpt tolerance                            (cofn)
  comethod='newton', -- default algorithm                                 (cofn)
  cowarn=false,      -- commute errors into warnings                      (cofn)
  X1=0,              -- optional final coordinates translation            (cofn)

  usrdef=nil,        -- user defined data attached to the mflow           (trck)

  mflow=nil,         -- mflow, exclusive with other attributes
  exec=exec,         -- command to execute upon children creation

  __attr = tblcat(   -- list of all setup attributes
    {'cotol', 'coiter', 'codiff', 'codptol', 'comethod', 'cowarn', 'X1'},
    track.__attr,
    {noeval=track.__attr.noeval}
  )
} :set_readonly()    -- reference cofind command is readonly

-- end ------------------------------------------------------------------------o
return { cofind = cofind }
