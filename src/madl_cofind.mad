--[=[
 o-----------------------------------------------------------------------------o
 |
 | Closed Orbit module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local warn, vector, matrix, command, track                        in MAD
local fnone                                                       in MAD.gfunc
local has_dp, vname                                               in MAD.gphys
local tblcat, errorf, assertf                                     in MAD.utility
local is_number, is_positive, is_boolean, is_true, is_iterable    in MAD.typeid
local abs                                                         in math

local I  = matrix(6):eye()
local I4 = matrix(4):eye()

-- cofind algorithms ----------------------------------------------------------o

local method = {}

function method.newton (X0, X, R, T, tol, dptol)
  local dX, rnk

  if not T and has_dp(R, dptol) then
    -- 6D case
    dX, rnk = (R-I):solve(X-X0)

    if rnk < 6 then
      warn("singular matrix occurred during 6D closed orbit search.")
      return rnk, "singular"
    elseif dX:maxabs() <= tol then
      -- return if last applied correction is below tolerance
      return rnk, "cofound"
    end

    -- adjust orbit
    X0:sub(dX,X0)

  else
    -- 4D case
    local X4 = X:getrow(1..4) - X0:getrow(1..4)
    local R4 = R:getsub(1..4, 1..4) - I4
    dX, rnk = R4:solve(X4)

    if rnk < 4 then
      warn("singular matrix occurred during 4D closed orbit search.")
      return rnk, "singular"
    elseif dX:maxabs() <= tol then
      -- return if last applied correction is below tolerance
      return rnk, "cofound"
    end

    -- adjust orbit
    X4 = X0:getrow(1..4) - dX
    X0:zeros():copy(X4)
  end
end

-- cofind using jacobian ------------------------------------------------------o

-- Fast version useful to find a single closed orbit (e.g. to translate X0).
-- warning: returned values are different from cofind_map.

local function cofind_jacob (self, track)
  local cotol, coiter, codiff, codptol, comethod in self
  local costep = method[comethod]
  local T = self.totalpath

  assert(is_number(track.X0[1]),"cofind+codiff work only on single particle")

  -- error handling
  local errf = self.cowarn and warn or errorf

  -- build 6D initial orbit
  local X0 = vector(6):fill(track.X0)   -- initial coordinates
  local X1 = vector(6):fill(self .X1)   -- final translation
  local dX = vector(6):fill(codiff)     -- finite differences

  -- track 6+1 particles to compute 6D jacobian by finite differences
  local Xs = { 0,0,0,0,0,0,X0 }
  for j=1,6 do Xs[j] = X0:same() end

  -- scale positions vs momentum (empirical...)
  if is_number(codiff) then
    dX[1], dX[3] = codiff*100, codiff*100
  end

  -- search for fix point
  local X, R, rnk, typ

  for itr=1,coiter do

    -- init dx_j
    for j=1,6 do
      Xs[j]:copy(X0):seti(j, X0[j]+dX[j])
    end

    -- track 6D x 7 particles
    local _, mflw = track { X0=Xs, deltap=0, save=false }

    -- check for all particles lost
    if mflw.npar ~= 7 then
      errf("cofind lost %d particles after %d iterations", 7-mflw.npar, itr)
      return X0, nil, 0, "lost", itr
    end

    -- retrieve 6D orbit and jacobian map
    X, R = vector(6), matrix(6)

    for i=1,6 do
      local vn = vname[i]
      X[i] = mflw[7][vn] -- particle co-ordinates must be accessed by names.
      for j=1,6 do -- compute jacobian R_ij = df(x_i)/dx_j
        R:set(i,j, (mflw[j][vn] - X[i])/dX[j])
      end
    end

    -- update X0 = X0-dX if |dX| > cotol, where dX solves (R-I)dX = (X-X1)-X0
    rnk, typ = costep(X0, X-X1, R, T, cotol, codptol)

    -- orbit X, jacobian R, rank of R, "singular/lost/unfound", it
    if typ then return X, R, rnk, typ, itr end
  end

  errf("closed orbit did not converge in %d iterations", coiter)
  return X, R, 0, "unfound", coiter
end

-- cofind using map -----------------------------------------------------------o

--[[                       npart or #X0                                     npar
   +-----------------------------+             +-----------------------------+
X0 | initial                     |    => mflw0 | cofound/singular/lost by id |
   +-----------------------------+             +-----------------------------+
--]]

local function cofind_map (self, track)
  local cotol, coiter, codptol, comethod in self
  local costep = method[comethod]
  local T = self.totalpath

  -- error handling
  local errf = self.cowarn and warn or errorf

  -- let's track build initial damaps (e.g. handle deltap and check attributes)
  local _, mflw0 = track { nstep=0, save=false }
  local mflw, npar, mtbl = mflw0, mflw0.npar

  -- keep track of initial indexes
  local idx0 = table.new(npar,0)
  for i=1,npar do idx0[i] = i end

  -- build final translation
  local X1 = vector(6):fill(self.X1)

  for it=1,coiter do
    -- track damaps
    mtbl, mflw = track { X0=mflw, npart=npar, deltap=0 }
    npar = mflw.npar

    local i = 1
    while i <= npar do
      -- retrieve orbit and jacobian
      local m  = mflw[i]
      local i0 = idx0[m.id]
      local X0 = mflw0[i0]:get0()
      local X, R = m:get0(), m:get1()

      -- update X0 = X0-dX if |dX| > cotol, where dX solves (R-I)dX = (X-X1)-X0
      local rnk, typ = costep(X0, X-X1, R, T, cotol, codptol)

      -- save or update damap
      if typ then
        m.rank, m.status, m.coiter = rnk, typ, it
        mflw[i], mflw[npar], idx0[i], npar = mflw[npar], nil, idx0[npar], npar-1
      else
        m:setv(X0) ; i = i+1
      end

      mflw0[i0], m.id = m, i0
    end

    -- handle lost particles (if any)
    for i=mflw.npar+1,mflw.tpar do
      local m  = mflw[i]
      local i0 = idx0[m.id]
      mflw0[i0], m.id, m.coiter, mflw[i] = m, i0, it, nil
    end

    -- all damaps have been processed
    if npar == 0 then return mtbl, mflw0 end
  end

  errf("closed orbit did not converge in %d iterations", coiter)

  -- case errf is warn
  for i=1,npar do
    local m = mflw[i]
    local i0 = idx0[m.id]
    mflw0[i0], m.id, m.coiter, m.status = m, i0, coiter, "unfound"
  end
  return mtbl, mflw0
end

-- cofind command -------------------------------------------------------------o

local function exec (self)
  local mapdef, cotol, coiter, codiff, codptol, comethod, cowarn in self
  assertf(is_positive(cotol ), "invalid cotol %.15g (positive number expected)" , cotol )
  assertf(is_positive(coiter), "invalid coiter %d (positive number expected)"   , coiter)
  assertf(is_positive(codiff), "invalid codiff %.15g (positive number expected)", codiff)
  assertf(is_positive(codptol),"invalid codptol %.15g (positive number expected)",codptol)
  assertf(   method[comethod], "invalid comethod '%s' (unsupported method)"     ,comethod)
  assert (is_boolean(cowarn) , "invalid cowarn (boolean expected)")

  -- prepare track template
  local trck0 = track 'cotrack' { exec=false } :copy_variables(self)

  -- setup map order
  trck0.mapdef = is_true(mapdef) and {xy=1} or mapdef

  -- search closed orbit using Newton algorithm
  if mapdef
  then return cofind_map  (self, trck0) -- use damap
  else return cofind_jacob(self, trck0) -- use jacobian
  end
end

-- attributes set to nil will use the default from track by inheritance

local cofind = command 'cofind' {
  beam=nil,          -- beam (required or sequence.beam)                  (trck)
  sequence=nil,      -- sequence (required)                               (trck)
  range=nil,         -- range of tracking                                 (trck)
  dir=nil,           -- s-direction of tracking (1 or -1)                 (trck)

  s0=nil,            -- initial s                                         (trck)
  X0=nil,            -- initial X coordinates (or damap, or list of)      (trck)
  R0=nil,            -- initial R matrix (compagnion of X0)               (trck)
  beta0=nil,         -- initial beta0 block to build uncoupled R0         (trck)
  deltap=nil,        -- initial deltap(s)                                 (trck)

  mapdef=nil,        -- setup for damap (true => {xy=1})                  (trck)
  mapsave=nil,       -- save damap in the mtable                          (trck)
  mapdump=nil,       -- dump X and R after each element                   (trck)

  nturn=nil,         -- number of turns                                   (trck)
  nstep=nil,         -- number of elements to track                       (trck)
  npart=nil,         -- number of particles/damaps (or #X0)               (trck)
  nslice=nil,        -- number of slice for each element                  (trck)
  implicit=nil,      -- slice implicit elements too                       (trck)
  model=nil,         -- model for integration ('DKD' or 'TKT')            (trck)
  method=nil,        -- method or order for integration (1 to 8)          (trck)
  totalpath=nil,     -- 't' is the totalpath                              (trck)
  radiate=nil,       -- radiate at slices (NYI)                           (trck)
  misalign=nil,      -- consider misalignment errors                      (trck)

  save=false,        -- create mtable and save results                    (trck)
  title=nil,         -- title of mtable (default seq.name)                (trck)
  savesel=nil,       -- save selector (predicate)                         (trck)
  relative=nil,      -- save length of slices instead from element start  (trck)
  observe=nil,       -- save only in observed elements (every n turns)    (trck)

  usrdef=nil,        -- user defined data attached to the mflow           (trck)

  atentry=nil,       -- action called when entering an element            (trck)
  atslice=nil,       -- action called after each element slices           (trck)
  atexit=nil,        -- action called when exiting an element             (trck)
  ataper=nil,        -- action called after checking for aperture         (trck)
  atsave=nil,        -- action called after saving in mtable              (trck)

  cotol=1e-8,        -- closed orbit tolerance                            (cofn)
  coiter=20,         -- maximum number of iteration                       (cofn)
  codiff=1e-10,      -- finite differences step for jacobian              (cofn)
  codptol=1e-12,     -- 4D vs 6D dp tolerance                             (cofn)
  comethod='newton', -- default optimizer                                 (cofn)
  cowarn=false,      -- commute errors into warnings                      (cofn)
  X1={0,0,0,0,0,0},  -- optional final coordinates translation            (cofn)

  mflow=nil,         -- mflow, exclusive with other attributes except nstep
  exec=exec,         -- command to execute upon children creation

  __attr = tblcat(   -- list of all setup attributes
    {'cotol', 'coiter', 'codiff', 'codptol', 'comethod', 'cowarn', 'X1'},
    track.__attr,
    {noeval=track.__attr.noeval}
  )
} :set_readonly()    -- reference cofind command is readonly

-- end ------------------------------------------------------------------------o
return { cofind = cofind }
