--[=[
 o-----------------------------------------------------------------------------o
 |
 | DA Maps module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides full set of functions and operations on damap and cdamap.
  - Support real and complex scalars and GTPSA as inhomogeneous variables.

 o-----------------------------------------------------------------------------o
]=]

local MR, MC = {}, {}

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'

local min, max in math

local _C, gtpsad, tpsa, ctpsa, vector, cvector, matrix, cmatrix    in MAD
local vname, vname_dup                                             in MAD.gphys

local is_nil, is_number, is_integer, is_complex, is_scalar,
      is_table, is_string, is_indexable, is_iterable, is_mappable,
      is_vector, is_cvector, isa_vector, is_matrix, is_cmatrix,
      is_tpsa, is_ctpsa                                            in MAD.typeid

local abs, floor in math

-- types ----------------------------------------------------------------------o

local   int_arr = ffi.typeof 'int [?]'
local  tpsa_arr = ffi.typeof 'struct  tpsa* [?]'
local ctpsa_arr = ffi.typeof 'struct ctpsa* [?]'

-- identity -------------------------------------------------------------------o

local _idr, _idc = {}, {} -- identity

local function is_damap (a)
  local mt = getmetatable(a)
  return mt ~= nil and mt.__obj == _idr
end

local function is_cdamap (a)
  local mt = getmetatable(a)
  return mt ~= nil and mt.__obj == _idc
end

local function isa_damap (a)
  local mt = getmetatable(a)
  return mt ~= nil and (mt.__obj == _idr or mt.__obj == _idc)
end

MR.__obj = _idr
MC.__obj = _idc

-- ctors ----------------------------------------------------------------------o

local function map_alloc (td, vn, mt)
  local ct = mt == MR and tpsa or ctpsa
  local ta = mt == MR and tpsa_arr(td.nv) or ctpsa_arr(td.nv)
  local mv = table.new(td.nv, vn.__n+3) -- __ta, __td, __vn
  local mo = td.mvar_ords

  -- map variables
  for i=1,td.nmv do
    mv[i] = ct(td, mo[i-1]):scalar(0,i) ; ta[i-1] = mv[i]
    if vn[i] then mv[vn[i]] = mv[i] end -- named
  end

  -- map knobs (scalar + order 1)
  for i=td.nmv+1,td.nv do
    mv[i] = ct(td,       1):scalar(0,i) ; ta[i-1] = mv[i]
    if vn[i] then mv[vn[i]] = mv[i] end -- named
  end

  mv.__ta, mv.__td, mv.__vn = ta, td, vn

  return setmetatable({__var=mv}, mt)
end

local function map_ctor(arg, mt)
  -- specification of damap by variables order.
  if arg.mo then
    local td = gtpsad(arg)
    local vn = arg.vn and vname_dup(arg.vn) or vname[min(td.nv,6)]
    return map_alloc(td, vn, mt)
  end

  -- specification of damap by planes order.
  local nv = arg.nv or 6
  local xy = arg.xy or 2
  local pt = arg.pt or xy
  local vn = vname[nv]
  local mo, ko

  if nv == 6 then
    mo, ko = {xy, xy, xy, xy, pt, pt} -- 6D damap
  elseif nv == 5 then
    mo, ko = {xy, xy, xy, xy}, {pt}   -- 5D damap (4D + 1 knob)
  elseif nv == 4 then
    mo, ko = {xy, xy, xy, xy}         -- 4D damap
  else
    error("invalid dmap specification (4D, 5D or 6D expected)")
  end

  local td = gtpsad{mo=mo, ko=ko, vn=vn}
  return map_alloc(td, vn, mt)
end

--[=[
  arg content:
    - planes orders: .nv=n or 6, .xy=o or 2, .pt=o or xy
    - otherwise same as gtpsad{}.
--]=]

local function damap (arg)
  arg = arg or {}
  assert(is_mappable(arg), "invalid argument #1 (mappable expected)")
  return map_ctor(arg, MR)
end

local function cdamap (arg)
  arg = arg or {}
  assert(is_mappable(arg), "invalid argument #1 (mappable expected)")
  return map_ctor(arg, MC)
end

-- same, copy -----------------------------------------------------------------o

function MR.__same (x, y_, e_)
  if is_nil(e_) and is_complex(y_) then -- shift right
    e_, y_ = y_
  end
  assert(is_nil(y_) or isa_damap(y_), "invalid argument #2 (damap expected)")
  return map_alloc(x.__td, x.__vn, (is_complex(e_) or is_cdamap(y_)) and MC or MR)
end

function MC.__same (x)
  return map_alloc(x.__td, x.__vn, MC)
end

function MR.__copy (x, y_)
  if is_nil(y_) then
    x, y_ = map_alloc(x.__td, x.__vn, MR), x
  else
    assert(is_damap(y_), "invalid argument #2 (damap expected)")
    assert(x.__td == y.__td, "incompatible damaps")
  end
  for i=1,#x do
    _C.mad_tpsa_copy(y_[i], x[i])
  end
  return x
end

function MC.__copy (x, y_)
  if is_nil(y_) then
    x, y_ = map_alloc(x.__td, x.__vn, MC), x
  else
    assert(is_cdamap(y_), "invalid argument #2 (cdamap expected)")
    assert(x.__td == y.__td, "incompatible cdamaps")
  end
  for i=1,#x do
    _C.mad_ctpsa_copy(y_[i], x[i])
  end
  return x
end

-- get/set tbl/vec/mat ------------------------------------------------------------o

function MR.get0 (x, v)
  v = v or vector(#x)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,#x do v[i] = x[i].coef[0] end
  return v
end

function MC.get0 (x, v)
  v = v or cvector(#x)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,#x do v[i] = x[i].coef[0] end
  return v
end

function MR.set0 (x, v)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,min(#x,#v) do
    _C.mad_tpsa_set0(x[i], 0, v[i])
  end
  return x
end

function MC.set0 (x, v)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,min(#x,#v) do
    local b = complex(v[i])
    _C.mad_ctpsa_set0_r(x[i], 0, 0, b.re, b.im)
  end
  return x
end

function MR.setv (x, v)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,min(#x,#v) do
    _C.mad_tpsa_scalar(x[i], v[i], i, 0)
  end
  return x
end

function MC.setv (x, v)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,min(#x,#v) do
    local b = complex(v[i])
    _C.mad_ctpsa_scalar_r(x[i], b.re, b.im, i, 0, 0)
  end
  return x
end

function MR.get1 (x, m)
  m = m or matrix(#x, x.__td.nv)
  assert(is_matrix(m), "invalid argument #2 (matrix expected)")
  local nr, nc = m:sizes()
  for i=1,min(#x,nr) do
    _C.mad_tpsa_getv(x[i], 1, nc, m.data+(i-1)*nc)
  end
  return m
end

function MC.get1 (x, m)
  m = m or cmatrix(#x, x.__td.nv)
  assert(is_cmatrix(m), "invalid argument #2 (cmatrix expected)")
  local nr, nc = m:sizes()
  for i=1,min(#x,nr) do
    _C.mad_ctpsa_getv(x[i], 1, nc, m.data+(i-1)*nc)
  end
  return m
end

function MR.set1 (x, m)
  assert(is_matrix(m), "invalid argument #2 (matrix expected)")
  local nr, nc = m:sizes()
  for i=1,min(#x,nr) do
    _C.mad_tpsa_setv(x[i], 1, nc, m.data+(i-1)*nc)
  end
  return x
end

function MC.set1 (x, m)
  assert(is_cmatrix(m), "invalid argument #2 (cmatrix expected)")
  local nr, nc = m:sizes()
  for i=1,min(#x,nr) do
    _C.mad_ctpsa_setv(x[i], 1, nc, m.data+(i-1)*nc)
  end
  return x
end

-- inv, pinv, compose ---------------------------------------------------------o

-- map inverse: r = x^-1

function MR.inv (x, r)
  r = r or map_alloc(x.__td, x.__vn, MR)
  assert(is_damap(r), "invalid argument #2 (damap expected)")
  assert(r.__td == x.__td, "incompatible damap (GTPSA descriptors differ)")
  assert(#r == #x, "incompatible damap lengths")
  _C.mad_tpsa_minv(#x, x.__ta, r.__ta) return r
end

function MC.inv (x, r)
  r = r or map_alloc(x.__td, x.__vn, MC)
  assert(is_cdamap(r), "invalid argument #2 (cdamap expected)")
  assert(r.__td == x.__td, "incompatible cdamap (GTPSA descriptors differ)")
  assert(#r == #x, "incompatible cdamap lengths")
  _C.mad_ctpsa_minv(#x, x.__ta, r.__ta) return r
end

-- partial map inverse on selected variables (rows)

function MR.pinv (x, sel, r)
  r = r or map_alloc(x.__td, x.__vn, MR)
  assert(is_table(sel), "invalid argument #2 (table expected)")
  assert(is_damap(r)  , "invalid argument #3 (damap expected)")
  assert(r.__td == x.__td, "incompatible damap (GTPSA descriptors differ)")
  assert(#r == #x, "incompatible damap lengths")
  local s = int_arr(#x) ; for i=1,#x do s[i-1] = sel[i] end -- TODO: by key
  _C.mad_tpsa_pminv(#x, x.__ta, r.__ta, s) return r
end

function MC.pinv (x, sel, r)
  r = r or map_alloc(x.__td, x.__vn, MC)
  assert(is_table(sel), "invalid argument #2 (table expected)")
  assert(is_cdamap(r) , "invalid argument #3 (cdamap expected)")
  assert(r.__td == x.__td, "incompatible cdamap (GTPSA descriptors differ)")
  assert(#r == #x, "incompatible cdamap lengths")
  local s = int_arr(#x) ; for i=1,#x do s[i-1] = sel[i] end -- TODO: by key
  _C.mad_ctpsa_pminv(#x, x.__ta, r.__ta, s) return r
end

-- maps translation r = x(v) (special case of composition)

function MR.translate (x, t, r)
  local v = is_vector(t) and t or vector(#x):fill(t)
  r = r or map_alloc(x.__td, x.__vn, MR)
  assert(is_damap(r), "invalid argument #3 (damap expected)")
  assert(r.__td == x.__td, "incompatible damap (GTPSA descriptors differ)")
  assert(#r == #x, "incompatible damap lengths")
  _C.mad_tpsa_translate(#x, x.__ta, #v, v.data, r.__ta) return r
end

function MC.translate (x, t, r)
  local v = is_cvector(t) and t or cvector(#x):fill(t)
  r = r or map_alloc(x.__td, x.__vn, MC)
  assert(is_cdamap(r), "invalid argument #3 (cdamap expected)")
  assert(r.__td == x.__td, "incompatible cdamap (GTPSA descriptors differ)")
  assert(#r == #x, "incompatible cdamap lengths")
  _C.mad_ctpsa_translate(#x, x.__ta, #v, v.data, r.__ta) return r
end

-- maps composition : r = x(y)

function MR.compose (x, y, r)
  r = r or map_alloc(x.__td, x.__vn, MR)
  assert(is_damap(y), "invalid argument #2 (damap expected)")
  assert(is_damap(r), "invalid argument #3 (damap expected)")
  assert(r.__td == x.__td, "incompatible damap (GTPSA descriptors differ)")
  assert(r.__td == y.__td, "incompatible damap (GTPSA descriptors differ)")
  assert(#r == #x, "incompatible damap lengths")
  _C.mad_tpsa_compose(#x, x.__ta, #y, y.__ta, r.__ta) return r
end

function MC.compose (x, y, r)
  r = r or map_alloc(x.__td, x.__vn, MC)
  assert(is_cdamap(y), "invalid argument #2 (cdamap expected)")
  assert(is_cdamap(r), "invalid argument #3 (cdamap expected)")
  assert(r.__td == x.__td, "incompatible cdamap (GTPSA descriptors differ)")
  assert(r.__td == y.__td, "incompatible cdamap (GTPSA descriptors differ)")
  assert(#r == #x, "incompatible cdamap lengths")
  _C.mad_ctpsa_compose(#x, x.__ta, #y, y.__ta, r.__ta) return r
end

-- operators ------------------------------------------------------------------o

-- add

function MR.__radd_mat (t, x, r)
  if t == 0
  then return x:copy(r)                     -- [0] + dam => copy
  else return x:translate(t,r)              -- vec + dam => dam + vec
  end
end

function MR.__add (x, t, r)
  if t == 0 then                            -- dam + [0] => copy
    return x:copy(r)
  elseif x == 0 then                        -- 0   + dam => copy
    return t:copy(r)
  elseif is_iterable(t) then                -- dam + trn
    return x:translate(t,r)
  elseif is_iterable(x) then                -- trn + dam => dam + trn
    return t:translate(x,r)
  end
  error("invalid arguments (unsupported damap operation '+')")
end

MC.__radd_cpx  = MR.__radd_mat  -- fully polymorphic
MC.__radd_cmat = MR.__radd_mat  -- fully polymorphic
MC.__add       = MR.__add       -- fully polymorphic

-- sub

function MR.__sub (x, t, r)
  if t == 0 then                            -- dam - [0] => copy
    return x:copy(r)
  elseif is_iterable(t) then                -- dam - trn
    local v = is_vector(t) and t or vector(#x):fill(t)
    return x:translate(-v,r)
  end
  error("invalid arguments (unsupported damap operation '-')")
end

function MC.__sub (x, t, r)
  if t == 0 then                            -- cdam - [0] => copy
    return x:copy(r)
  elseif is_iterable(t) then                -- cdam - trn
    local v = is_cvector(t) and t or cvector(#x):fill(t)
    return x:translate(-v,r)
  end
  error("invalid arguments (unsupported damap operation '-')")
end

-- mul

function MR.__mul (x, y, r)
  if rawequal(x,0) then                     -- 0 * dam => copy
    return y:copy(r)
  elseif rawequal(x,1) then                 -- 1 * dam => copy
    return y:copy(r)
  elseif rawequal(y,0) then                 -- dam * 0 => copy
    return x:copy(r)
  elseif rawequal(y,1) then                 -- dam * 1 => copy
    return x:copy(r)
  elseif isa_damap(y) then                  -- dam * dam => dam o dam
    return x:compose(y,r)
  end
  error("invalid arguments (unsupported damap operation '*')")
end

MC.__mul = MR.__mul  -- fully polymorphic

-- div

function MR.__div (x, y, r)
  if rawequal(x,1) then                     --   1 / dam => dam:inv()
    return y:inv(r)
  elseif rawequal(y,1) then                 -- dam / 1   => copy
    return x:copy(r)
  elseif isa_damap(y) then                  -- dam / dam => dam o dam:inv()
    return x:compose(y:inv(r),r)
  end
  error("invalid arguments (unsupported damap operation '/')")
end

MC.__div = MR.__div  -- fully polymorphic

-- pow

function MR.__pow (x, n, r)
  assert(is_integer(n), "invalid argument #2 (integer expected)")
  if n == 0 then                            -- dam^0  => same
    return x:same()
  elseif n == 1 then                        -- dam^1  => copy
    return x:copy(r)
  elseif n == 2 then                        -- dam^2  => dam o dam
    return x:compose(x,r)
  elseif n == -1 then                       -- dam^1  => dam:inv()
    return x:inv(r)
  elseif n == -2 then                       -- dam^-2 => dam:inv()^2
    r = x:inv(r)
    return r:compose(r,r)
  end

  local n, t = abs(n), n < 0 and x:inv() or x:copy()
  r = r or x:same()

  while true do
    if n%2 == 1 then r = r:compose(t,r) end  -- r = r o t
    n = floor(n/2)
    if n == 0 then break end
    t:compose(t,t)                           -- t = t^2
  end

  return r
end

MC.__pow = MR.__pow -- fully polymorphic

-- I/O ------------------------------------------------------------------------o

function MR.write (x, file_, eps_)
  for i=1,#x do -- should it write knobs too?
    local vn = x.__vn[i] and string.upper(x.__vn[i]) or tostring(i)
    x[i]:write(file_, vn, eps_)
  end
  return x
end

function MR.print (x, eps_)
  return x:write(nil, eps_)
end

function MR.read (_, file_)
  error("NYI")
  -- TODO: 1st decide if knobs must be written/read...
end

-- metamethods ----------------------------------------------------------------o

MR.__len   = \s   -> s.__var.__td.nv

MR.__index = \s,k -> s.__var[k] or MR[k]
MC.__index = \s,k -> s.__var[k] or MC[k]

MR.__tostring = \s -> string.format("damap: %p", s)
MC.__tostring = \s -> string.format("cdamap: %p", s)

function MR.__newindex (s, k, x)
  local v = s.__var[k]

  if v == nil then -- new var
    if is_tpsa(x)
    then s.__var[k] = x  -- keep tpsa under control
    else rawset(s, k, x) -- uncontrolled variable
    end
    return
  end

  -- useful?
  assert(is_tpsa(v), "forbidden access to readonly variable")

  if is_number(x) then
    _C.mad_tpsa_scalar(v, x, type(k) == "number" and k or s.__vn[k], 0)
  elseif is_tpsa(x) then
    _C.mad_tpsa_copy(x, v)
  else
    error("invalid assignment (scalar or real GTPSA expected)")
  end
end

function MC.__newindex (s, k, x)
  local v = s.__var[k]

  if v == nil then  -- new var
    if is_ctpsa(x)
    then s.__var[k] = x  -- keep tpsa under control
    else rawset(s, k, x) -- uncontrolled variable
    end
    return
  end

  -- useful?
  assert(is_ctpsa(v), "forbidden access to readonly variable")

  if is_number(x) then x = complex(x) end

  if is_complex(x) then
    _C.mad_ctpsa_scalar_r(v, x.re,x.im, type(k)=="number" and k or s.__vn[k], 0,0)
  elseif is_ctpsa(x) then
    _C.mad_ctpsa_copy(x, v)
  else
    error("invalid assignment (scalar or complex GTPSA expected)")
  end
end

local function iter (self, key)
  local k, v = next(self, key)
  if k == '__var' then return next(self, k) end
  return k, v
end

local function pairs_iter (self)
  return iter, self, nil
end

MR.__pairs  =  pairs_iter

MR.  same, MR.  copy, MR.length =
MR.__same, MR.__copy, MR.__len

MC.  same, MC.  copy, MC.length =
MC.__same, MC.__copy, MC.__len

MR.  add, MR.  sub, MR.  mul, MR.  div, MR.  pow =
MR.__add, MR.__sub, MR.__mul, MR.__div, MR.__pow

MC.  add, MC.  sub, MC.  mul, MR.  div, MC.  pow =
MC.__add, MC.__sub, MC.__mul, MR.__div, MC.__pow

-- MR -> MC -------------------------------------------------------------------o

for k,v in pairs(MR) do
  if is_nil(MC[k]) then MC[k] = v end
end

-- TODO: set concepts for MR and MC

-- env ------------------------------------------------------------------------o

MAD.typeid.is_damap  = is_damap
MAD.typeid.is_cdamap = is_cdamap
MAD.typeid.isa_damap = isa_damap

-- end ------------------------------------------------------------------------o
return {
   damap =  damap,
  cdamap = cdamap,
}
