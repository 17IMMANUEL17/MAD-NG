--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix constructors
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides types and constructors for matrices

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

--[[
NAME
  xmatrix -- matrices contructors

SYNOPSIS
  This module should not be loaded directly, SEE ALSO.

DESCRIPTION
  The module xmatrix provides consistent definitions of matrices and
  complex matrices for constuctors and types. It is separated from the matrix
  module to avoid recursive cross-dependencies between modules.

RETURN VALUES
  The constructors of matrices and complex matrices as well as functions for
  types identification.

SEE ALSO
  matrix, cmatrix
]]

-- locals --------------------------------------------------------------------o

local cdef, istype, typeof, sizeof, cast, gc, fill in require 'ffi'
local _C, is_table in MAD

cdef [[
typedef struct  matrix { int32_t nr, nc; double  data[?]; }  matrix_t;
typedef struct cmatrix { int32_t nr, nc; complex data[?]; } cmatrix_t;
]]

-- FFI type constructors
local  matrix_ctor = typeof  'matrix_t'
local cmatrix_ctor = typeof 'cmatrix_t'

-- implementation ------------------------------------------------------------o

local function is_matrix (x)
  return istype('matrix_t', x)
end

local function is_cmatrix (x)
  return istype('cmatrix_t', x)
end

local function is_vector (x)
  return is_matrix(x) and (x.nr == 1 or x.nc == 1)
end

local function is_cvector (x)
  return is_cmatrix(x) and (x.nr == 1 or x.nc == 1)
end

local function isa_matrix (x)
  return is_matrix(x) or is_cmatrix(x)
end

local function isa_vector (x)
  return isa_matrix(x) and (x.nr == 1 or x.nc == 1)
end

local function matrix_alloc (nr, nc)
  local len, mat = nr*nc, nil
  if len < _C.mad_alloc_threshold then
    mat = matrix_ctor(len)
  else
    local siz = sizeof('matrix_t', len)
    local ptr = _C.mad_malloc(siz)
    mat = gc(cast('matrix_t&', ptr), _C.mad_free)
    fill(mat, siz)
  end
  mat.nr, mat.nc = nr, nc
  return mat
end

local function cmatrix_alloc (nr, nc)
  local len, mat = nr*nc, nil
  if len < (_C.mad_alloc_threshold/2) then
    mat = cmatrix_ctor(len)
  else
    local siz = sizeof('cmatrix_t', len)
    local ptr = _C.mad_malloc(siz)
    mat = gc(cast('cmatrix_t&', ptr), _C.mad_free)
    fill(mat, siz)
  end
  mat.nr, mat.nc = nr, nc
  return mat
end

local function fromtable (ctor, tbl)
  local nr, nc = #tbl or 1, is_table(tbl[1]) and #tbl[1] or 1
  return ctor(nr,nc):fromtable(tbl)
end

-- constructors

local function matrix (nr, nc_)
  if is_table(nr) then
    return fromtable(matrix_alloc, nr)
  elseif isa_matrix(nr) then
    return matrix_alloc(nr:sizes())
  end
  local nc = nc_ or nr -- square
  if nr > 0 and nc > 0 then
    return matrix_alloc(nr, nc)
  end
  error("invalid argument #1 or #2, matrix or nrow[,ncol] or table [of tables] expected")
end

local function cmatrix (nr, nc_)
  if is_table(nr) then
    return fromtable(cmatrix_alloc, nr)
  elseif isa_matrix(nr) then
    return cmatrix_alloc(nr:sizes())
  end
  local nc = nc_ or nr -- square
  if nr > 0 and nc > 0 then
    return cmatrix_alloc(nr, nc)
  end
  error("invalid argument #1 or #2, matrix or nrow[,ncol] or table [of tables] expected")
end

local  vector = \n ->  matrix(n,1)
local cvector = \n -> cmatrix(n,1)

-- end ------------------------------------------------------------------------o
return {
  vector     = vector,
  cvector    = cvector,
  matrix     = matrix,
  cmatrix    = cmatrix,

  is_vector  = is_vector,
  is_matrix  = is_matrix,
  is_cvector = is_cvector,
  is_cmatrix = is_cmatrix,
  isa_vector = isa_vector,
  isa_matrix = isa_matrix,
}
