--[=[
 o-----------------------------------------------------------------------------o
 |
 | Geometric 3D maps
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of geometric 3D maps (i.e. survey)
    maps have the following calling convention:
      geomap(elm, mflw, len_weight)
    where the expected fields are:
      mflw -> { sdir, tdir, edir, el, ang, tlt, V, W }
      elm  -> { angle, dtheta, dphi, dpsi, dx, dy, ds}

 o-----------------------------------------------------------------------------o
]=]

local M = {}

--[=[
Notes about directions and quantities:
  element direction   edir: affects curvatures (edir = seq.dir).
  track direction (s) sdir: affects lengths    (sdir = cmd.dir).
  time direction  (t) tdir: affects angles     (tdir = edir x sdir).
  beam direction      bdir: affects strengths  (bdir = edir x sdir x chg).
--]=]

-- locals ---------------------------------------------------------------------o

local _C, vector, matrix    in MAD
local minlen, minang        in MAD.constant
local is_number             in MAD.typeid

local abs, sin, cos         in math

local Ve = vector(3) -- displacement vector of element
local We = matrix(3) -- orientation  matrix of element

local U  = vector(3) -- extra vector for calculation (avoid copy)
local S  = matrix(3) -- extra matrix for calculation (avoid copy)

-- patches --------------------------------------------------------------------o

-- X-rotation

function M.xrotation (elm, m, lw_) -- Rx(ax)
  local ax = is_number(elm) and elm or elm.angle*m.tdir
  if abs(ax) < minang then return end

  m:mdump(elm, 'xrotation:0')

  local W in m
  local lw = lw_ or 1
  We:rotx(ax*lw)
  W:mul(We, W)            -- W = W*We

  m:mdump(elm, 'xrotation:1')
end

-- Y-rotation

function M.yrotation (elm, m, lw_) -- Ry(ay)
  local ay = is_number(elm) and elm or elm.angle*m.tdir
  if abs(ay) < minang then return end

  m:mdump(elm, 'yrotation:0')

  local W in m
  local lw = lw_ or 1
  We:roty(ay*lw)
  W:mul(We, W)            -- W = W*We

  m:mdump(elm, 'yrotation:1')
end

-- S-rotation

function M.srotation (elm, m, lw_) -- Rz(az)
  local az = is_number(elm) and elm or elm.angle*m.tdir
  if abs(az) < minang then return end

  m:mdump(elm, 'srotation:0')

  local W in m
  local lw = lw_ or 1
  We:rotz(az*lw)
  W:mul(We, W)            -- W = W*We

  m:mdump(elm, 'srotation:1')
end

-- Translation

function M.translate (elm, m, lw_)
  local dx, dy, ds = elm.dx or 0, elm.dy or 0, elm.ds or 0
  if abs(dx)+abs(dy)+abs(ds) < minlen then return end

  m:mdump(elm, 'translate:0')

  local sdir, tdir, V, W in m
  local lw = lw_ or 1
  Ve:fill{dx*lw*tdir, dy*lw*tdir, ds*lw*sdir}
  V:add(W:mul(Ve, U), V)  -- V = W*Ve+V

  m:mdump(elm, 'translate:1')
end

-- Changeref (generic patch, lw_>0: TR, lw_<0: RT)

function M.changeref (elm, m, lw_)
  local dx  , dy  , ds   = elm.dx     or 0, elm.dy   or 0, elm.ds   or 0
  local dthe, dphi, dpsi = elm.dtheta or 0, elm.dphi or 0, elm.dpsi or 0

  local trn = abs(dx  )+abs(dy  )+abs(ds  ) >= minlen
  local rot = abs(dthe)+abs(dphi)+abs(dpsi) >= minang

  if not (trn or rot) then return end

  m:mdump(elm, 'changeref:0')

  local sdir, tdir, V, W in m
  local lw = lw_ or 1

  -- translate
  if trn and lw > 0 then
    Ve:fill{dx*tdir, dy*tdir, ds*sdir}
    V:add(W:mul(Ve, U), V)  -- V = V+W*Ve
  end

  -- rotate
  if rot then
    We:rotzxy(-dphi*tdir, dthe*tdir, dpsi*tdir, lw<0)
    W:mul(We, W)            -- W = W*We or W*We:t()
  end

  -- translate
  if trn and lw < 0 then
    Ve:fill{dx*tdir, dy*tdir, ds*sdir}
    V:sub(W:mul(Ve, U), V)  -- V = V-W*Ve
  end

  m:mdump(elm, 'changeref:1')
end

-- Changedir (reverse t-direction)

function M.changedir (elm_, m, lw_)
  m.edir = -m.edir
  m.tdir = -m.tdir
end

-- Changenrj (change energy)

function M.changenrj (elm_, m_, lw_)
  -- N/A for survey
end

-- misalignments --------------------------------------------------------------o

local T  = vector(3) -- misalignment translation
local R  = matrix(3) -- misalignment rotation
local Tb = vector(3) -- misalignment translation at exit (Tbar)
local Rb = matrix(3) -- misalignment rotation    at exit (Rbar)

local misalignexi -- forward declaration

-- Misalign (lw_>0: entry, lw_<0: exit)

function M.misalign (elm, m, lw_)
  if (lw_ or 1) < 0 then return misalignexi(elm, m) end

  local dx  , dy  , ds   = elm.dx     or 0, elm.dy   or 0, elm.ds   or 0
  local dthe, dphi, dpsi = elm.dtheta or 0, elm.dphi or 0, elm.dpsi or 0

  local trn = abs(dx  )+abs(dy  )+abs(ds  ) >= minlen
  local rot = abs(dthe)+abs(dphi)+abs(dpsi) >= minang

  if not (trn or rot) then return end

  m:mdump(elm, 'misalign:0')

  local sdir, V, W in m

  -- misalignment at entry and global frame
  -- forward : x1' = R*x1+T      => V = V+W*T   ; W = W*R
  -- backward: x1  = R^t*(x1'-T) => W = W*R:t() ; V = V-W*T

  -- translate
  if trn and sdir > 0 then
    T:fill{dx, dy, ds}
    V:add(W:mul(T, U), V)  -- V = V+W*T
  end

  -- rotate
  if rot then
    R:rotzxy(-dphi, dthe, dpsi, sdir<0)
    W:mul(R, W)            -- W = W*R or W*R:t()
  end

  -- translate
  if trn and sdir < 0 then
    T:fill{dx, dy, ds}
    V:sub(W:mul(T, U), V)  -- V = V-W*T
  end

  m:mdump(elm, 'misalign:1')
end

function misalignexi (elm, m)
  local dx  , dy  , ds   = elm.dx     or 0, elm.dy   or 0, elm.ds   or 0
  local dthe, dphi, dpsi = elm.dtheta or 0, elm.dphi or 0, elm.dpsi or 0

  local trn = abs(dx  )+abs(dy  )+abs(ds  ) >= minlen
  local rot = abs(dthe)+abs(dphi)+abs(dpsi) >= minang

  if not (trn or rot) then return end

  m:mdump(elm, 'misalignexi:0')

  local el, ang, tlt, sdir, V, W in m

  -- translation
  if trn then T:fill{dx, dy, ds} else T:zeros() end

  -- rotation
  if rot then R:rotzxy(-dphi, dthe, dpsi) end

  -- compute Rbar, Tbar
  _C.mad_mat_rtbar(Rb.data, Tb.data, abs(el), ang, tlt, rot and R.data or nil, T.data)

  -- misalignment at exit and global frame
  -- forward : x2  = Rb^t*(x2'-Tb) => W = W*Rb:t() ; V = V-W*Tb
  -- backward: x2' = Rb*x2+Tb      => V = V+W*Tb   ; W = W*Rb

  if sdir > 0 then
    W:mult(Rb, W)          -- W = W*Rb:t()
    V:sub(W:mul(Tb, U), V) -- V = V - W*Tb
  else
    V:add(W:mul(Tb, U), V) -- V = V + W*Tb
    W:mul(Rb, W)           -- W = W*Rb
  end

  m:mdump(elm, 'misalignexi:1')
end

-- kinds ----------------------------------------------------------------------o

function M.curex_thin (elm, m, lw_)
  m:mdump(elm, 'curex_thin:0')

  local ang, W in m

  We:roty(-ang)
  W:mul(We, W)                   -- W = W*We

  m:mdump(elm, 'curex_thin:1')
end

function M.strex_thick (elm, m, lw)
  m:mdump(elm, 'strex_thick:0')

  local el, V, W in m

  Ve:fill{0, 0, el*lw}
  V:add(W:mul(Ve, U), V)         -- V = W*Ve+V

  m:mdump(elm, 'strex_thick:1')
end

function M.curex_thick (elm, m, lw)
  m:mdump(elm, 'curex_thick:0')

  local el, ang, V, W in m
  local rho = el/ang
  local ang = ang*lw

  Ve:fill{rho*(cos(ang)-1), 0, rho*sin(ang)}
  We:roty(-ang)
  V:add(W:mul(Ve, U), V)         -- V = W*Ve+V
  W:mul(We, W)                   -- W = W*We

  m:mdump(elm, 'curex_thick:1')
end

-- end ------------------------------------------------------------------------o
return { geomap = M }
