--[=[
 o-----------------------------------------------------------------------------o
 |
 | Geometric 3D maps
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of geometric 3D maps (i.e. survey)
    maps have the following calling convention:
      geomap(elm, map, len_weight)
    where the expected fields are:

    map -> { sdir, V, W ; R, S, T, U }
    elm -> { l, angle ; phi, theta, psi, dx, dy, dz}

    (fields beyond ; are optionnal or internal)

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local abs, sin, cos  in math
local minlen, minang in MAD.constant
local is_number      in MAD.typeid
local errorf         in MAD.utility

-- debug ----------------------------------------------------------------------o

local nodump = true

local function mdump(str, l, m)
  if nodump then return end
  local V, A in m
  print(str, l, V[1], V[2], V[3], A[1], A[2], A[3])
end

-- helpers --------------------------------------------------------------------o

local function update_angles(mflw)
  local A, W in mflw
  A[1], A[2], A[3] = W:torotmad(A[1], A[2], A[3])
end

-- patches (lw_ == 0 disable the patch) ---------------------------------------o

-- X-rotation (pitch)

function M.xrotation (elm, m, lw_) -- Rx(-phi)
  if lw_ == 0 then return end

  local phi = is_number(elm) and elm or elm.phi or 0
  if abs(phi) < minang then return end

  m.S :rotx(-phi*m.tdir)
  m.W :mul(m.S, m.W) -- W = W*S
  update_angles(m)
end

-- Y-rotation (yaw)

function M.yrotation (elm, m, lw_) -- Ry(-theta)
  if lw_ == 0 then return end

  local the = is_number(elm) and elm or elm.theta or 0
  if abs(the) < minang then return end

  m.S :roty(-the*m.tdir)
  m.W :mul(m.S, m.W) -- W = W*S
  update_angles(m)
end

-- S-rotation (roll, tilt)

function M.srotation (elm, m, lw_) -- Rz(psi)
  if lw_ == 0 then return end

  local psi = is_number(elm) and elm or elm.psi or 0
  if abs(psi) < minang then return end

  m.S :rotz(psi*m.tdir)
  m.W :mul(m.S, m.W) -- W = W*S
  update_angles(m)
end

-- Translation

function M.translate (elm, m, lw_)
  if lw_ == 0 then return end

  local dx, dy, dz = elm.dx or 0, elm.dy or 0, elm.dz or 0
  if abs(dx)+abs(dy)+abs(dz) < minlen then return end

  local tdir in m
  m.R :fill {dx*tdir, dy*tdir, dz*tdir}
  m.V :add(m.W :mul(m.R,m.U), m.V) -- V = W*R+V
end

-- Changeref (generic patch, dir>0: xyzt, dir<0: tzyx)

function M.changeref (elm, m, lw_)
  if lw_ == 0 then return end

  local dir = lw_ or 1

  if dir < 0 then M.translate(elm, m, lw_) end

  local the, phi, psi = elm.theta or 0, elm.phi or 0, elm.psi or 0
  if abs(the)+abs(phi)+abs(psi) >= minang then
    local tdir in m
    if dir > 0
    then m.S :rotxyz(phi*tdir, the*tdir, psi*tdir)
    else m.S :rotzyx(phi*tdir, the*tdir, psi*tdir)
    end
    m.W :mul(m.S, m.W) -- W = W*S
    update_angles(m)
  end

  if dir > 0 then M.translate(elm, m, lw_) end
end

-- Changedir (reverse t-direction)

function M.changedir (elm_, m, lw_)
  if lw_ == 0 then return end

  m.edir = -m.edir
  m.tdir = -m.tdir
end

-- Changenrj (change energy)

function M.changenrj (elm_, m_, lw_)
  -- N/A for survey
end

-- kinds ----------------------------------------------------------------------o

function M.drift (elm, m, lw) -- drift_element
  local el = is_number(elm) and elm or m.el
  if abs(el) < minlen then return end

  local sdir, R, U, V, W in m
  local l = el*lw*sdir

  mdump('drift-0:', l, m)

  R:fill{0, 0, l}
  V:add(W:mul(R, U), V)     -- V = V+W*R

  mdump('drift-1:', l, m)
end

function M.thin (elm, m, lw_) -- thin_element
  local ang = is_number(elm) and elm or m.ang
  if abs(ang) < minang then return end

  local etlt, tdir, S, W in m

  mdump('thin-0:', m.el*m.sdir, m)

  S:roty(-ang*tdir)

  if abs(etlt) >= minang then
    local T in m
    T:rotz(etlt*tdir)
    T:mul(S, S):mult(T, S)      -- S = T*S*T'
  end

  W:mul(S, W)                   -- W = W*S
  update_angles(m)

  mdump('thin-1:', m.el*m.sdir, m)
end

function M.thick (elm, m, lw) -- thick_element
  local el, ang in m
  if abs(ang) < minang then return M.drift(el, m, lw) end
  if abs(el)  < minlen then return M.thin(ang, m, lw) end

  local etlt, sdir, tdir, R, S, U, V, W in m
  local l, ang = el*sdir*lw, ang*tdir*lw
  local rho = l/ang

  mdump('thick-0:', l, m)

  m.R :fill{rho*(cos(ang)-1), 0, rho*sin(ang)}
  m.S :roty(-ang)

  if abs(etlt) >= minang then
    local T in m
    T:rotz(etlt*tdir)
    T:mul(R, R)                 -- R = T*R
    T:mul(S, S):mult(T, S)      -- S = T*S*T'
  end

  V:add(W:mul(R, U), V)         -- V = W*R+V
  W:mul(S, W)                   -- W = W*S
  update_angles(m)

  mdump('thick-1:', l, m)
end

-- end ------------------------------------------------------------------------o
return { geomap = M }
