--[=[
 o-----------------------------------------------------------------------------o
 |
 | Geometric 3D maps
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of geometric 3D maps (i.e. survey)
    maps have the following calling convention:
      geomap(elm, map)
    where the expected fields are:

    map -> { sdir, V, W ; R, S, T, U }
    elm -> { l, angle ; phi, theta, psi, dx, dy, dz}

    (fields beyond ; are optionnal or internal)

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local abs, sin, cos  in math
local minlen, minang in MAD.constant
local errorf         in MAD.utility

-- helpers --------------------------------------------------------------------o

local function update_angles(mflw)
  local A, W in mflw
  A[1], A[2], A[3] = W:torotmad(A[1], A[2], A[3])
end

-- patches --------------------------------------------------------------------o

-- X-rotation (pitch)

function M.xrotation (elm, m, lw_) -- Rx(-phi)
  local phi = elm.phi or 0
  if abs(phi) < minang then return end

  m.S :rotx(-phi*m.tdir)
  m.W :mul(m.S, m.W) -- W = W*S
  update_angles(m)
end

-- Y-rotation (yaw)

function M.yrotation (elm, m, lw_) -- Ry(-theta)
  local th = elm.theta or 0
  if abs(th) < minang then return end

  m.S :roty(-th*m.tdir)
  m.W :mul(m.S, m.W) -- W = W*S
  update_angles(m)
end

-- S-rotation (roll, tilt)

function M.srotation (elm, m, lw_) -- Rz(psi)
  local psi = elm.psi or 0
  if abs(psi) < minang then return end

  m.S :rotz(psi*m.tdir)
  m.W :mul(m.S, m.W) -- W = W*S
  update_angles(m)
end

-- Translation

function M.translate (elm, m, lw_)
  local dx, dy, dz = elm.dx or 0, elm.dy or 0, elm.dz or 0
  if abs(dx)+abs(dy)+abs(dz) < 3*minlen then return end

  local tdir in m
  m.R :fill {dx*tdir, dy*tdir, dz*tdir}
  m.V :add(m.W :mul(m.R,m.U), m.V) -- V = W*R+V
end

-- MAD patch

function M.madpatch (elm, m, lw_)
  local th, phi, psi = elm.theta or 0, elm.phi or 0, elm.psi or 0
  if abs(th)+abs(phi)+abs(psi) < 3*minang then return end

  local tdir in m
  m.S :rotmad(th*tdir, phi*tdir, psi*tdir)
  m.W :mul(m.S, m.W) -- W = W*S
  update_angles(m)

  M.translate(elm, m, lw_)
end

-- Forward patch

function M.xystpatch (elm, m, lw_)
  local th, phi, psi = elm.theta or 0, elm.phi or 0, elm.psi or 0
  if abs(th)+abs(phi)+abs(psi) < 3*minang then return end

  local tdir in m                           -- phi  : Elevation angle.
  m.S :rotxyz(phi*tdir, th*tdir, psi*tdir)  -- theta: Azimuthal angle.
  m.W :mul(m.S, m.W) -- W = W*S             -- psi  : Roll      angle.
  update_angles(m)

  M.translate(elm, m, lw_)
end

-- Backward patch

function M.tsyxpatch (elm, m, lw_)
  M.translate(elm, m, lw_)

  local th, phi, psi = elm.theta or 0, elm.phi or 0, elm.psi or 0
  if abs(th)+abs(phi)+abs(psi) < 3*minang then return end

  local tdir in m                           -- psi  : Roll      angle.
  m.S :rotzyx(phi*tdir, th*tdir, psi*tdir)  -- theta: Azimuthal angle.
  m.W :mul(m.S, m.W) -- W = W*S             -- phi  : Elevation angle.
  update_angles(m)
end

-- Changeref (generic patch)

function M.changeref (elm, m, lw_)
  local typ = elm.patch or 'xyst'

      if typ == 'xyst' then M.xystpatch(elm, m, lw_)
  elseif typ == 'tsyx' then M.tsyxpatch(elm, m, lw_)
  else errorf("invalid patch type '%s' ('xyst' or 'tsyx' expected)", typ)
  end
end

-- Changedir (reverse mflow t-direction)

function M.changedir (elm_, m, lw_)
  m.tdir = -m.tdir
end

-- Changenrj (change mflow energy)

function M.changenrj (elm_, m_, lw_)
  -- N/A for survey
end

-- kinds ----------------------------------------------------------------------o

function M.drift (elm, m, lw) -- drift_element
  local l = elm.l*lw*m.sdir
  if abs(l) < minlen then return end

  m.R :fill{0, 0, l}
  m.V :add(m.W :mul(m.R,m.U), m.V) -- V = W*R+V
end

function M.thin (elm, m, lw_) -- thin_element
  local angle = elm.angle
  if abs(angle) < minang then return end

  local tdir in m
  m.S :roty(-angle*tdir)

  local tilt in elm
  if abs(tilt) >= minang then
    m.T :rotz(tilt*tdir)
    m.T :mul(m.S, m.S) :mult(m.T, m.S) -- S = T*S*T'
  end

  m.W :mul(m.S, m.W) -- W = W*S
  update_angles(m)
end

function M.thick (elm, m, lw) -- thick_element
  local l = elm.l*lw
  if abs(l) < minlen then
    return M.thin(elm, m, lw)
  end

  local angle = elm.angle*lw
  if abs(angle) < minang then
    return M.drift(elm, m, lw)
  end

  local sdir, tdir in m
  l, angle = l*sdir, angle*tdir
  local rho = l/angle
  m.R :fill{rho*(cos(angle)-1), 0, rho*sin(angle)}
  m.S :roty(-angle)

  local tilt in elm
  if abs(tilt) >= minang then
    m.T :rotz(tilt*tdir)
    m.T :mul(m.R, m.R)                 -- R = T*R
    m.T :mul(m.S, m.S) :mult(m.T, m.S) -- S = T*S*T'
  end

  m.V :add(m.W :mul(m.R,m.U), m.V)     -- V = W*R+V
  m.W :mul(m.S, m.W)                   -- W = W*S
  update_angles(m)
end

-- end ------------------------------------------------------------------------o
return M
