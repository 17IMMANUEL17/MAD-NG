--[=[
 o-----------------------------------------------------------------------------o
 |
 | Synchrotron Radiation module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide routines for synchrotron radiation, adapted from MAD-X.

  References:
  - A. Latina, Review of Synchrotron Radiation Effects in MAD-X.
  - H. Burkhardt, CERN CLIC-Note-709 of 08-06-2007 for routine InvSynFracInt.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local _C, warn                   in MAD
local hypot, rand, randp         in MAD.gmath
local is_damap                   in MAD.typeid
local printf                     in MAD.utility
local eps, minang, hbar, clight  in MAD.constant
local atborder                   in MAD.symint.slcsel

local abs, sqrt in math

-- tracking photons -----------------------------------------------------------o

local function track_photon (elm, m, i, ph_fac, beam)
  local clw, spos, ds in m
  -- take care of mflw wrappers (e.g. __sdat in track)
  m = m.mflw

  local x, px, y, py, pt in m[i]
  local s   = spos+ds*clw
  local nrj = ph_fac*(beam.energy + pt*beam.pc)
  local phb = MAD.beam { particle="photon", energy=nrj }
  local a   = beam.pc/phb.pc
  local ph  = {x=x, px=a*px, y=y, py=a*py, t=0, pt=0, s0=s, beam=phb, id=#m+1,
               status='Xset'}

  if m.info >= 2 then
    printf("photon: emitting #%d in %s at %.5f m for turn #%d\n",
                           ph.id, elm.name, s,         m.turn)
    printf("photon: x=%-.5e, px=%-.5e, y=%-.5e, py=%-.5e\n",
                      ph.x,     ph.px,   ph.y,     ph.py)
  end

  m.npar, m.tpar, m.nphot = m.npar+1, m.tpar+1, m.nphot+1
  table.insert(m, m.npar, ph)
end

-- synchrotron radiation ------------------------------------------------------o

-- backup initial x, px, y, py

function M.srad_save (elm, m, lw, islc)
-- print("srad_save", elm.name, elm.l, lw, islc)
  if elm.lrad == 0 then return end
  for i=1,m.npar do
    local beam in m[i]
    if beam and beam.charge == 0 then goto continue end
    local x, px, y, py in m[i]
    if is_damap(m[i]) then x, px, py = x:get0(), px:get0(), py:get0() end
    m[i]. x00            =  x
    m[i].px00, m[i].py00 = px, py
    m[i].dpx0, m[i].dpy0 = 0 , 0
    ::continue::
  end
  m.pclw = 0
end

local function srad_save1 (elm, m, lw, islc)
-- print("srad_save1", elm.name, elm.l, lw, islc)
  for i=1,m.npar do
    local beam in m[i]
    if beam and beam.charge == 0 then goto continue end
    local x, px, y, py, t, pt in m[i]
    if is_damap(m[i]) then
      m[i].dpx0, m[i].px00 = px:get0()-m[i].px00, 0
      m[i].dpy0, m[i].py00 = py:get0()-m[i].py00, 0
      m[i].x0  , m[i].px0  = x:copy(m[i].x0), px:copy(m[i].px0)
      m[i].y0  , m[i].py0  = y:copy(m[i].y0), py:copy(m[i].py0)
      m[i].t0  , m[i].pt0  = t:copy(m[i].t0), pt:copy(m[i].pt0)
    else
      m[i].dpx0, m[i].px00 = px-m[i].px00, 0
      m[i].dpy0, m[i].py00 = py-m[i].py00, 0
      m[i].x0  , m[i].px0  = x, px
      m[i].y0  , m[i].py0  = y, py
      m[i].t0  , m[i].pt0  = t, pt
    end
    ::continue::
  end
  m.redo = true
end

-- damping synchrotron radiation, backup px, py

function M.srad_damp (elm, m, lw, islc)
--print("srad_damp", elm.name, elm.l, lw, islc, m.clw)
  if elm.lrad == 0 then return end

  if atborder(elm,m,lw,islc) then
    if islc == 0  then return srad_save1(elm,m,lw,islc) end
    if not m.redo then return end
  end

  local eh, sdir, info in m
  local elw = (m.clw-m.pclw) * elm.lrad
  local aelw = abs(elw)
  local facr = m.pclw == 0 and 0.5 or 1

  for i=1,m.npar do
    local beam in m[i]
    if beam and beam.charge == 0 then goto continue end
    local x, px, py, pt, px0, py0, x00, dpx0, dpy0 in m[i]

    if is_damap(m[i]) then
      x, px , py , pt = x:get0(), px :get0(), py :get0(), pt:get0()
         px0, py0     =           px0:get0(), py0:get0()
    end

    local hlw = aelw*(1+0.5*eh*(x+x00))
    local hx  = (px-px0+dpx0)/hlw - eh
    local hy  = (py-py0+dpy0)/hlw
    local kck = hx^2+hy^2

    if kck > 0 then
      local  beam = beam or m.beam
      local _bet0 = 1/beam.beta
      local  dpp1 = sqrt(1 + (2*_bet0)*pt + pt^2)
      local _beta = (_bet0+pt) / dpp1
      local  rfac = 2/3 * beam.emrad * beam.betgam^3 * dpp1 * kck * hlw * facr

-- print("i=", i, "hx=", hx, "hy=", hy, "hlw=", hlw, "eh=", eh, "rfac=", rfac)

      local damp = sqrt(1 + rfac*(rfac-2)*_beta^2)

      if sdir < 0 then damp, rfac = 1/damp, -rfac end

      if m.redo then
        m[i].x, m[i].px = m[i].x0, m[i].px0*damp
        m[i].y, m[i].py = m[i].y0, m[i].py0*damp
        m[i].t, m[i].pt = m[i].t0, m[i].pt0*(1-rfac) - rfac*_bet0
      else
        m[i].px = m[i].px*damp
        m[i].py = m[i].py*damp
        m[i].pt = m[i].pt*(1-rfac) - rfac*_bet0
      end

      if info >= 2 and rfac ~= 0 then
        printf("synrad: particle #%d lost %.5e GeV in slice %d of %s (rfac=%.5e)\n",
               m[i].id, rfac*beam.energy, islc, elm.name, rfac)
      end
    end

    -- backup
    if not m.redo then
      m.pclw = m.clw
      m[i].x00            = m[i].x
      m[i].px0, m[i].dpx0 = m[i].px, 0
      m[i].py0, m[i].dpy0 = m[i].py, 0
    end

  ::continue::
  end
end

-- quantum synchrotron radiation, backup px, py

local kcrit = 1.5*hbar*clight

function M.srad_quant (elm, m, lw, islc)
--print("srad_quant", elm.name, elm.l, lw, islc, m.clw)

  if elm.lrad == 0 or atborder(elm,m,lw,islc) then return end

  local eh, sdir, info, radiate in m
  local elw = (m.clw-m.pclw) * elm.lrad
  local aelw = abs(elw)

  for i=1,m.npar do
    local beam in m[i]
    if beam and beam.charge == 0 then goto continue end
    local x, px, py, pt, x00, px00, py00 in m[i]

    if is_damap(m[i]) then
      x, px, y, py, pt = x:get0(), px:get0(), y:get0(), py:get0(), pt:get0()
    end

    local hlw = aelw*(1+0.5*eh*(x+x00))
    local hx  = (px-px00)/hlw - eh
    local hy  = (py-py00)/hlw
    local kck = hypot(dpx, dpy)

    if kck > 0 then
      local  beam = beam or m.beam
      local  bet0 = beam.beta
      local _bet0 = 1/bet0
      local  dpp1 = sqrt(1 + (2*_bet0)*pt + pt^2)
      local _beta = (_bet0+pt) / dpp1
      local  gama = (bet0*pt + 1)*beam.gamma
      local ucrit = kcrit * gama^2/beam.mass * kck * hlw
      local aphot = beam.aphot * dpp1 * kck
      local nphot = randp(aphot)
      local  rfac = 0

      for i=1,nphot do
        local ph_val = _C.mad_rad_InvSynFracInt(rand())
        local ph_fac = ph_val*ucrit
        rfac = rfac + ph_fac

        if radiate == "photon" and abs(ph_fac) >= 1e-12 then
          track_photon(elm, m, i, ph_fac, beam)
        end
      end

      local damp = sqrt(1 + rfac*(rfac-2)*_beta^2)

      if sdir < 0 then damp, rfac = 1/damp, -rfac end

      m[i].px = m[i].px*damp
      m[i].py = m[i].py*damp
      m[i].pt = m[i].pt*(1-rfac) - rfac*_bet0

      if info >= 2 and rfac ~= 0 or nphot > 2 then
        printf("synrad: particle #%d lost %.5e GeV [%d photons] in slice %d of %s (pt=%.5e)\n",
                m[i].id, rfac*beam.energy, nphot, islc, elm.name, pt)
        if nphot > 5 then
          warn(">5 photons emitted, synch. radiat. too high at x=%.5e, y=%.5e", x, y)
        elseif nphot > 2 then
          warn(">2 photons emitted, thinner slicing strongly recommended")
        end
      end
    end

    -- backup
    m.pclw = m.clw
    m[i].x00, m[i].px00, m[i].py00 = x, px, py

    ::continue::
  end
end

-- end ------------------------------------------------------------------------o
return { synrad = M }
