--[=[
 o-----------------------------------------------------------------------------o
 |
 | Synchrotron Radiation module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide routines for synchrotron radiation.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local _C, warn, beam             in MAD
local hypot, rand, randp         in MAD.gmath
local is_damap                   in MAD.typeid
local printf                     in MAD.utility
local eps, minang, hbar, clight  in MAD.constant

local abs, sqrt in math

local getmetatable = getmetatable

-- tracking photons -----------------------------------------------------------o

local function track_photon (elm, mflw, i, nrj, px, py)   -- see track...
  -- take care of mflw wrappers (e.g. __edat and __sdat in track)
  m = assert(getmetatable(mflw).__index, "corrupted mflow wrapper (unexpected)")

  local x, y in m[i]
  if is_damap(m[i]) then x, y = x:get0(), y:get0() end

  local phb = beam { particle="photon", energy=nrj }
  local ph = {x=x, px=px, y=y, py=py, t=0, pt=0, beam=phb, id=#m+1, status='Xset'}

  if m.info >= 2 then
    local clw, spos, ds, turn in mflw
    local id, name, s = ph.id, elm.name, spos+ds*clw

    printf("photon: emitting #%d in %s at %.3f m for turn #%d\n", id, name, s, turn)
    printf("photon: x=% -.2e, px=% -.2e, y=% -.2e, py=% -.2e\n", x, px, y, py)
  end

  m.npar, m.tpar, m.nphot = m.npar+1, m.tpar+1, m.nphot+1
  table.insert(m, m.npar, ph)
end

-- synchrotron radiation ------------------------------------------------------o

function M.srad_savp (elm, m, lw, islc)
! print("srad_savp", elm.name, elm.l, lw, islc)
  for i=1,m.npar do
    local px, py, beam in m[i]
    if beam and beam.particle == "photon" then goto continue end
    if is_damap(m[i]) then px, py = px:get0(), py:get0() end
    m[i].px0, m[i].py0 = px, py
    ::continue::
  end
end

function M.srad_avrg (elm, m, lw, islc)
! print("srad_avrg", elm.name, elm.l, lw, islc)
  local eh, sdir, info in m
  local elw = lw*elm.lrad
  local aelw = abs(elw)

  for i=1,m.npar do
    local px, py, pt, px0, py0, beam in m[i]
    if beam and beam.particle == "photon" then goto continue end
    if is_damap(m[i]) then px, py, pt = px:get0(), py:get0(), pt:get0() end

    local dpx  = px-px0 + elw*eh
    local dpy  = py-py0
    local kck2 = dpx^2+dpy^2

    if kck2 > 0 then
      local  beam = beam or m.beam
      local _bet0 = 1/beam.beta
      local  dp_1 = sqrt(1 + (2*_bet0)*pt + pt^2)
      local _beta = (_bet0+pt) / dp_1
      local  rfac = 2/3 * beam.emrad * (dp_1*beam.betgam)^3 * kck2 / aelw
      local  damp = sqrt(1 + rfac*(rfac-2)*_beta^2)

      if sdir < 0 then damp, rfac = 1/damp, -rfac end

      if info >= 2 and rfac ~= 0 then
        printf("synrad: particle #%d lost an average of %.2e GeV in slice %d of %s\n",
               m[i].id, rfac*beam.energy, islc, elm.name)
      end

      px, py = px*damp, py*damp
      m[i].px = m[i].px*damp
      m[i].py = m[i].py*damp
      m[i].pt = m[i].pt*(1-rfac)-rfac*_bet0
    end

    m[i].px0, m[i].py0 = px, py
    ::continue::
  end
end

local kcrit = 1.5*hbar*clight

function M.srad_quant (elm, m, lw, islc)
! print("srad_avrg", elm.name, elm.l, lw, islc)
  local eh, sdir, trkphot, info in m
  local elw  = lw*elm.lrad
  local aelw = abs(elw)

  for i=1,m.npar do
    local px, py, pt, px0, py0, beam in m[i]
    if beam and beam.particle == "photon" then goto continue end
    if is_damap(m[i]) then px, py, pt = px:get0(), py:get0(), pt:get0() end

    local dpx = px-px0 + elw*eh
    local dpy = py-py0
    local kck = hypot(dpx, dpy)

    if kck > 0 then
      local beam = beam or m.beam
      local  bet0 = beam.beta
      local _bet0 = 1/bet0
      local  dp_1 = sqrt(1 + (2*_bet0)*pt + pt^2)
      local _beta = (_bet0 + pt) / dp_1
      local  gama = (bet0*pt + 1)*beam.gamma
      local ucrit = kcrit * gama^2/beam.mass * kck / aelw
      local aphot = beam.aphot * dp_1 * kck
      local nphot = randp(aphot)
      local  rfac = 0

      for i=1,nphot do
        local val = _C.mad_rad_InvSynFracInt(rand())
        local ifac = val*ucrit
        rfac = rfac + ifac

        if trkphot and dpt >= 1e-12 then
          track_photon(elm, m, i, dpt, px, py) -- TODO: compute dpt
        end
      end

      local damp = sqrt(1 + rfac*(rfac-2)*_beta^2)

      if sdir < 0 then damp, rfac = 1/damp, -rfac end

      if info >= 2 and rfac ~= 0 or nphot > 2 then
        printf("synrad: particle #%d lost %.4e GeV [%d photons] in slice %d of %s\n",
                m[i].id, rfac*beam.energy, nphot, islc, elm.name)
        if nphot > 5 then
          local x, y in m[i]
          if is_damap(m[i]) then x, y = x:get0(), y:get0() end
          warn(">5 photons emitted, synch. radiat. too high at x=%.2e, y=%.2e",
                x, y)
        elseif nphot > 2 then
          warn(">2 photons emitted, thinner slicing strongly recommended")
        end
      end

      px, py = px*damp, py*damp
      m[i].px = m[i].px*damp
      m[i].py = m[i].py*damp
      m[i].pt = m[i].pt*(1-rfac)-rfac*_bet0
    end

    m[i].px0, m[i].py0 = px, py
    ::continue::
  end
end

-- end ------------------------------------------------------------------------o
return { synrad = M }
