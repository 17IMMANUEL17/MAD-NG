--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides full set of functions and operations on real and complex matrices.
  - Vectors are column oriented matrices, i.e. implemented as [n x 1] matrices.

 o-----------------------------------------------------------------------------o
]=]

local MR, MC, MI = {}, {}, {}

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'
local istype in ffi
local type = type

local _C, tostring, complex, tocomplex, constant in MAD

local is_nil, is_boolean, is_number, is_integer, is_string,
      is_range, is_table, is_complex, is_scalar, is_callable,
      is_iterable, get_metamethod                                in MAD.typeid
local ident, swap, compose, bind1st, opstr,
      unm, add, mul, mod, pow, lbool, lnot, land, lor            in MAD.gfunc
local carg, real, imag, conj, norm, proj, rect, polar, ceil, floor,
      frac, trunc, round, abs, exp, log, log10, sqrt, sin, cos, tan, cot, sinh,
      cosh, tanh, coth, asin, acos, atan, acot, asinh, acosh, atanh, acoth, wf,
      erf, erfc, erfi, erfcx, tgamma, lgamma, sign, sign1,
      sumsqrl, sumabsl, minabsl, maxabsl, cabs                   in MAD.gmath
local rep, errorf, assertf, openfile, strsplitall,
      int2str, num2str                                           in MAD.utility
local inf, eps                                                   in constant
local min, max, random                                           in math

-- tmp for returned values
local ires = ffi.new  'idx_t[2]'
local  res = ffi.new  'num_t[2]'
local cres = ffi.new 'cnum_t[2]'

-- constants
local idx_sz = ffi.sizeof ' idx_t'
local dbl_sz = ffi.sizeof  'num_t'
local cpx_sz = ffi.sizeof 'cnum_t'

local type, assert, error, ipairs, tonumber, tostring, table, string, rawequal =
      type, assert, error, ipairs, tonumber, tostring, table, string, rawequal

local gmm = get_metamethod

-- types ----------------------------------------------------------------------o

ffi.cdef 
[[ // warning: must be kept identical to C definition
struct  matrix { const ssz_t nrow, ncol;  num_t _dat[?]; };
struct cmatrix { const ssz_t nrow, ncol; cnum_t _dat[?]; };
struct imatrix { const ssz_t nrow, ncol;  idx_t _dat[?]; };
]]

local  matrix_ctor = ffi.typeof 'struct  matrix'
local cmatrix_ctor = ffi.typeof 'struct cmatrix'
local imatrix_ctor = ffi.typeof 'struct imatrix'

local  matrix_size = ffi.offsetof( matrix_ctor, '_dat')
local cmatrix_size = ffi.offsetof(cmatrix_ctor, '_dat')
local imatrix_size = ffi.offsetof(imatrix_ctor, '_dat')

local is_matrix  = \x -> istype( matrix_ctor, x)
local is_cmatrix = \x -> istype(cmatrix_ctor, x)
local is_imatrix = \x -> istype(imatrix_ctor, x)
local isa_matrix = \x -> is_matrix(x) or is_cmatrix(x)
local isy_matrix = \x -> is_matrix(x) or is_cmatrix(x) or is_imatrix(x)

local is_vector  = \x -> is_matrix (x) and (x.nrow == 1 or x.ncol == 1)
local is_cvector = \x -> is_cmatrix(x) and (x.nrow == 1 or x.ncol == 1)
local is_ivector = \x -> is_imatrix(x) and (x.nrow == 1 or x.ncol == 1)
local isa_vector = \x -> isa_matrix(x) and (x.nrow == 1 or x.ncol == 1)
local isy_vector = \x -> isy_matrix(x) and (x.nrow == 1 or x.ncol == 1)

-- allocators -----------------------------------------------------------------o

local function matrix_alloc (nr, nc)
  local len = nr*nc
  assert(len <= 2^30, "matrix is too large")
  local mat = matrix_ctor(len) -- VLA (hooked immediately before calling C)
  _C.mad_mat_reshape(mat, nr, nc)
  return mat
end

local function cmatrix_alloc (nr, nc)
  local len = nr*nc
  assert(len <= 2^29, "cmatrix is too large")
  local mat = cmatrix_ctor(len) -- VLA (hooked immediately before calling C)
  _C.mad_cmat_reshape(mat, nr, nc)
  return mat
end

local function imatrix_alloc (nr, nc)
  local len = nr*nc
  assert(len <= 2^30, "imatrix is too large")
  local mat = imatrix_ctor(len) -- VLA (hooked immediately before calling C)
  _C.mad_imat_reshape(mat, nr, nc)
  return mat
end

local function fromtable (ctor, tbl)
  local nr, nc = #tbl or 0, is_iterable(tbl[1]) and #tbl[1] or 1
  assert(nr > 0 and nc > 0, "invalid argument #1 (non-empty table expected)")
  return ctor(nr,nc):fill(tbl)
end

-- constructors ---------------------------------------------------------------o

local function matrix (nr, nc_)
  if is_table(nr) then
    return fromtable(matrix_alloc, nr)
  end
  local nc = nc_ or nr -- square
  assert(is_number(nr) and is_number(nc) and nr >= 1 and nc >= 1,
         "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)")
  return matrix_alloc(nr, nc)
end

local function cmatrix (nr, nc_)
  if is_table(nr) then
    return fromtable(cmatrix_alloc, nr)
  end
  local nc = nc_ or nr -- square
  assert(is_number(nr) and is_number(nc) and nr >= 1 and nc >= 1,
         "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)")
  return cmatrix_alloc(nr, nc)
end

local function imatrix (nr, nc_)
  if is_table(nr) then
    return fromtable(imatrix_alloc, nr)
  end
  local nc = nc_ or nr -- square
  assert(is_number(nr) and is_number(nc) and nr >= 1 and nc >= 1,
         "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)")
  return imatrix_alloc(nr, nc)
end

local  vector = \n ->  matrix(n, 1)
local cvector = \n -> cmatrix(n, 1)
local ivector = \n -> imatrix(n, 1)

-- checkers -------------------------------------------------------------------o

local function chksiz (r, x, y) -- add, sub
  assert((is_nil(r) or (r.nrow == x.nrow and r.ncol == x.ncol)) and
         (is_nil(y) or (y.nrow == x.nrow and y.ncol == x.ncol)),
         "incompatible matrix sizes")
  return r
end

local function chksizm (r, x, y) -- mul
  assert((is_nil(r) or (r.nrow == x.nrow and r.ncol == y.ncol)) and x.ncol == y.nrow,
         "incompatible matrix sizes")
  return r
end

local function chksiztm (r, x, y) -- tmul
  assert((is_nil(r) or (r.nrow == x.ncol and r.ncol == y.ncol)) and x.nrow == y.nrow,
         "incompatible matrix sizes")
  return r
end

local function chksizmt (r, x, y) -- mult
  assert((is_nil(r) or (r.nrow == x.nrow and r.ncol == y.nrow)) and x.ncol == y.ncol,
         "incompatible matrix sizes")
  return r
end

local function chksizd (r, x, y) -- div
  assert((is_nil(r) or (r.nrow == x.nrow and r.ncol == y.nrow)) and x.ncol == y.ncol,
         "incompatible matrix sizes")
  return r
end

local function chksizt (r, x) -- transpose
  assert(is_nil(r) or (r.nrow == x.ncol and r.ncol == x.nrow),
         "incompatible matrix sizes")
  return r
end

-- get, set -------------------------------------------------------------------o

local idx     = \i,j,c   -> (( i-1)*c + j)
local idx_j   = \ij ,c   -> ((ij-1)%c + 1)

local geti0   = \x,i     -> x._dat[i]
local seti0   = \x,i,e   => x._dat[i]=e return x end
local geti    = \x,i     -> x._dat[i-1]
local seti    = \x,i,e   => x._dat[i-1]=e return x end
local get0    = \x,i,j   -> x._dat[ i   *x.ncol +  j   ]
local set0    = \x,i,j,e => x._dat[ i   *x.ncol +  j   ]=e return x end
local get     = \x,i,j   -> x._dat[(i-1)*x.ncol + (j-1)]
local set     = \x,i,j,e => x._dat[(i-1)*x.ncol + (j-1)]=e return x end

local geti_s  = \x,i   -> 1 <= i and i <= x.nrow*x.ncol                     and geti (x, i) or nil
local get_s   = \x,i,j -> 1 <= i and i <= x.nrow and 1 <= j and j <= x.ncol and get (x,i,j) or nil

local function idxij (ij, c)
  local j = (ij-1)%c + 1
  return (ij-j)/c + 1, j
end

local function seti_s (x, i, e)
  assert(1 <= i and i <= x.nrow*x.ncol, "index out of bounds")
  return seti(x, i, e)
end

local function set_s (x, i, j, e)
  assert(1 <= i and i <= x.nrow and 1 <= j and j <= x.ncol, "index out of bounds")
  return set(x, i, j, e)
end

MR.get  = get_s
MR.set  = set_s
MR.geti = geti_s
MR.seti = seti_s

MI.get  = get_s
MI.set  = set_s
MI.geti = geti_s
MI.seti = seti_s

-- sizes, same, copy, reshape -------------------------------------------------o

local size   = \x -> x.nrow * x.ncol -- #x
local sizes  = \x -> (x.nrow, x.ncol)
local tsizes = \x -> (x.ncol, x.nrow)

MR.sizes  = sizes
MR.tsizes = tsizes

MI.sizes  = MR.sizes
MI.tsizes = MR.tsizes

-- x:same()
-- x:same(e)
-- x:same(nr,nc)
-- x:same(nr,nc,e)

function MR.__same (x, nr_, nc_, e_) -- promote to cmatrix if e_ is a complex
  if is_nil(nc_) then e_, nr_ = nr_, nil  end
  local e, nr, nc = e_ or 0, nr_ or x.nrow, nc_ or x.ncol
  return is_complex(e) and cmatrix(nr, nc) or matrix(nr, nc)
end

function MC.__same (x, nr_, nc_, e_) -- promote to matrix if e_ is a number
  if is_nil(nc_) then e_, nr_ = nr_, nil  end
  local e, nr, nc = e_ or 0i, nr_ or x.nrow, nc_ or x.ncol
  return is_number(e) and matrix(nr, nc) or cmatrix(nr, nc)
end

function MI.__same (x, nr_, nc_, e_)
  if is_nil(nc_) then e_, nr_ = nr_, nil  end -- for compatibility
  return imatrix(nr_ or x.nrow, nc_ or x.ncol)
end

function MR.__copy (x, y_)
  if rawequal(x,y_) then return y_ end
  local y = chksiz(y_,x) or matrix_alloc(x:sizes())
  assert(is_matrix(y), "incompatible matrix type (matrix expected)")
  ffi.copy(y._dat, x._dat, dbl_sz*size(x))
  return y
end

function MC.__copy (x, y_)
  if rawequal(x,y_) then return y_ end
  local y = chksiz(y_,x) or cmatrix_alloc(x:sizes())
  assert(is_cmatrix(y), "incompatible matrix type (matrix expected)")
  ffi.copy(y._dat, x._dat, cpx_sz*size(x))
  return y
end

function MI.__copy (x, y_)
  if rawequal(x,y_) then return y_ end
  local y = chksiz(y_,x) or imatrix_alloc(x:sizes())
  assert(is_imatrix(y), "incompatible matrix type (matrix expected)")
  ffi.copy(y._dat, x._dat, idx_sz*size(x))
  return y
end

function MR.reshape (x, nr_, nc_)
  local nr, nc = nr_ or size(x), nc_ or 1
  assert(nr >= 1 and nc >= 1 and nr*nc <= size(x), "invalid matrix new sizes")
  _C.mad_mat_reshape(x, nr, nc)
  return x
end

function MC.reshape (x, nr_, nc_)
  local nr, nc = nr_ or size(x), nc_ or 1
  assert(nr >= 1 and nc >= 1 and nr*nc <= size(x), "invalid cmatrix new sizes")
  _C.mad_cmat_reshape(x, nr, nc)
  return x
end

function MI.reshape (x, nr_, nc_)
  local nr, nc = nr_ or size(x), nc_ or 1
  assert(nr >= 1 and nc >= 1 and nr*nc <= size(x), "invalid imatrix new sizes")
  _C.mad_imat_reshape(x, nr, nc)
  return x
end

function MR._appendto (x, v_)
  -- no check, user is responsible for keeping track of the real allocated size
  -- TOTALLY UNSAFE, accessing data ouside valid indexes trigs a SEGFAULT
  -- increment either nr or nc depending on the VECTOR type, UNDEFINED on matrix
  _C.mad_vec_append(x, v_ or 0)
  return x
end

function MC._appendto (x, v_)
  -- no check, user is responsible for keeping track of the real allocated size
  -- TOTALLY UNSAFE, accessing data ouside valid indexes trigs a SEGFAULT
  -- increment either nr or nc depending on the VECTOR type, UNDEFINED on matrix
  local v = complex(v_)
  _C.mad_cvec_append_r(x, v.re, v.im)
  return x
end

function MI._appendto (x, v_)
  -- no check, user is responsible for keeping track of the real allocated size
  -- TOTALLY UNSAFE, accessing data ouside valid indexes trigs a SEGFAULT
  -- increment either nr or nc depending on the VECTOR type, UNDEFINED on matrix
  _C.mad_ivec_append(x, v_ or 0)
  return x
end

function MR._reshapeto (x, nr_, nc_)
  -- no check, user is responsible for keeping track of the real allocated size
  -- TOTALLY UNSAFE, accessing data ouside valid indexes trigs a SEGFAULT
  _C.mad_mat_reshape(x, nr_ or size(x), nc_ or 1)
  return x
end

function MC._reshapeto (x, nr_, nc_)
  -- no check, user is responsible for keeping track of the real allocated size
  -- TOTALLY UNSAFE, accessing data ouside valid indexes trigs a SEGFAULT
  _C.mad_cmat_reshape(x, nr_ or size(x), nc_ or 1)
  return x
end

function MI._reshapeto (x, nr_, nc_)
  -- no check, user is responsible for keeping track of the real allocated size
  -- TOTALLY UNSAFE, accessing data ouside valid indexes trigs a SEGFAULT
  _C.mad_imat_reshape(x, nr_ or size(x), nc_ or 1)
  return x
end

-- zeros, ones, eye, symp, circ, fill, shift, reshape (in place) --------------o

function MR.is_const (x, e_, tol_)
  local e, tol = e_ or 0, tol_ or 0
  for i=0,size(x)-1 do
    if abs(geti0(x,i)-e) > tol then return false end
  end
  return true
end

function MR.is_diag (x, e_, tol_)
  local e, tol, ii, nc = e_ or 0, tol_ or 0, 0, x.ncol
  for i=0,size(x)-1 do
    local ee = 0
    if i == ii then ee, ii = e, ii+nc+1 end
    if abs(geti0(x,i)-ee) > tol then return false end
  end
  return true
end

function MR.zeros (x)
  ffi.fill(x._dat, dbl_sz * size(x))
  return x
end

function MC.zeros (x)
  ffi.fill(x._dat, cpx_sz * size(x))
  return x
end

function MI.zeros (x)
  ffi.fill(x._dat, idx_sz * size(x))
  return x
end

function MR.ones (x, e_)
  local e, n = e_ or 1, size(x)
  for i=0,n-1 do seti0(x,i,e) end
  return x
end

MI.ones = MR.ones

function MR.eye (x, e_) -- zeros + diag
  x:zeros()
  local e, nr, nc = e_ or 1, x:sizes()
  local n = min(nr, nc)
  for i=0,n*nc,nc+1 do seti0(x,i,e) end
  return x
end

MI.eye = MR.eye

function MR.seq (x, e0_)
  local e0, n = 1+(e0_ or 0), size(x)
  for i=0,n-1 do seti0(x,i,e0+i) end
  return x
end

MI.seq = MR.seq

function MR.random (x, f_, ...) -- random
  assert(is_nil(f_) or is_callable(f_), "invalid argument #2 (callable expected)")
  local n, f = size(x), f_ or random
  for i=0,n-1 do seti0(x,i,f(...)) end
  return x
end

function MC.random (x, f_, ...) -- random
  assert(is_nil(f_) or is_callable(f_), "invalid argument #2 (callable expected)")
  local n, f = size(x), f_ or random
  for i=0,n-1 do seti0(x,i,complex(f(...),f(...))) end
  return x
end

function MR.shuffle (x) -- random permutation (Knuth shuffle)
  local n = size(x)
  for i=0,n-2 do
    local j = random(i,n-1)
    x._dat[i], x._dat[j] = x._dat[j], x._dat[i]
  end
  return x
end

MI.shuffle = MR.shuffle

function MR.symp (x) -- zeros + J
  local nr, nc = x:sizes()
  assert(nr == nc and nr % 2 == 0, "invalid argument #1 (2n matrix expected)")
  x:zeros()
  for i=1,nr-1,2 do set(x,i,i+1,1) set(x,i+1,i,-1) end
  return x
end

function MR.circ (x, v)
  local d
  if isa_vector(v) then
    d = v.nrow == 1 and 'row' or 'col'
  else
    assert(is_iterable(v), "invalid argument #2 (iterable expected)")
    if is_iterable(v[1]) then d, v = 'row', v[1] else d = 'col' end
  end
  local k, nr, nc = 0, x:sizes()
  if d == 'row' then
    for i=1,nr do
    for j=nc+2-i,nc do seti0(x,k, v[j]) k=k+1 end
    for j=1,nc+1-i  do seti0(x,k, v[j]) k=k+1 end
    end
  else
    for i=1,nr do
    for j= i,  1,-1 do seti0(x,k, v[j]) k=k+1 end
    for j=nc,i+1,-1 do seti0(x,k, v[j]) k=k+1 end
    end
  end
  return x
end

function MR.fill (x, a, p_, s_)
  local nr, nc = x:sizes()
  if is_scalar(a) then        -- scalar
    for i=0,nr*nc-1 do seti0(x,i, a) end
  elseif is_callable(a) then  -- generator
    if is_nil(p_) or is_nil(s_) then
      for i=1,nr do
      for j=1,nc do set(x,i,j, a(get(x,i,j), i,j)) end end
    else                      -- stateless iterator
      local v
      for i=0,nr*nc-1 do s_,v = a(p_,s_) ; seti0(x,i,v) end
    end
  elseif is_iterable(a) then
    if is_iterable(a[1]) then -- 2D container
      assert(#a == nr, "incompatible container size")
      for i=1,nr do
        assert(is_iterable(a[i]), "invalid container (iterable expected)")
        assertf(#a[i] == nc, "incompatible container size row %d, %d ~= %d", i, #a[i], nc)
        for j=1,nc do set(x,i,j, a[i][j]) end
      end
    else                      -- 1D container
      assert(#a == nr*nc, "incompatible container size")
      for i=1,nr*nc do seti(x,i, a[i]) end
    end
  else
    error("invalid argument #2 (scalar, callable or iterable expected)")
  end
  return x
end

MI.fill = MR.fill

function MR.movev (x, i, j, yi, y_) -- move x[i..j] to y[yi,yi+j-i]
  local y, yj = y_ or x, yi+j-i
  assert(i  >= 1 and j  <= size(x) and i <= j, "source indexes out of bounds")
  assert(yi >= 1 and yj <= size(y),       "destination indexes out of bounds")
  _C.mad_vec_copy(x._dat+i-1, y._dat+yi-1, j-i+1, 1)
  return x
end

function MC.movev (x, i, j, yi, y_)
  local y, yj = y_ or x, yi+j-i
  assert(i  >= 1 and j  <= size(x) and i <= j, "source indexes out of bounds")
  assert(yi >= 1 and yj <= size(y),       "destination indexes out of bounds")
  _C.mad_cvec_copy(x._dat+i-1, y._dat+yi-1, j-i+1, 1)
  return x
end

function MI.movev (x, i, j, yi, y_)
  local y, yj = y_ or x, yi+j-i
  assert(i  >= 1 and j  <= size(x) and i <= j, "source indexes out of bounds")
  assert(yi >= 1 and yj <= size(y),       "destination indexes out of bounds")
  _C.mad_ivec_copy(x._dat+i-1, y._dat+yi-1, j-i+1, 1)
  return x
end

function MR.shiftv (x, ni, ns_) -- shift data >= ni by +/-ns
  local n, ns = size(x), ns_ or 1
  assert(ni >= 1 and ni <= n, "index out of bounds")
  if ns ~= 0 and ni+ns <= n and ni-ns <= n then
    _C.mad_vec_shift(x._dat+ni-1, n-ni+1, 1, ns)
  end
  return x
end

function MC.shiftv (x, ni, ns_)
  local n, ns = size(x), ns_ or 1
  assert(ni >= 1 and ni <= n, "index out of bounds")
  if ns ~= 0 and ni+ns <= n and ni-ns <= n then
    _C.mad_cvec_shift(x._dat+ni-1, n-ni+1, 1, ns)
  end
  return x
end

function MI.shiftv (x, ni, ns_)
  local n, ns = size(x), ns_ or 1
  assert(ni >= 1 and ni <= n, "index out of bounds")
  if ns ~= 0 and ni+ns <= n and ni-ns <= n then
    _C.mad_ivec_shift(x._dat+ni-1, n-ni+1, 1, ns)
  end
  return x
end

function MR.roll (x, ns_, ms_)
  local nr, nc = x:sizes()
  if is_nil(ms_) and (nr == 1 or nc == 1)
  then _C.mad_vec_roll(x._dat, nr*nc, 1, ns_ or 0)
  else _C.mad_mat_roll(x._dat, nr, nc, ns_ or 0, ms_ or 0)
  end
  return x
end

function MC.roll (x, ns_, ms_)
  local nr, nc = x:sizes()
  if is_nil(ms_) and (nr == 1 or nc == 1)
  then _C.mad_cvec_roll(x._dat, nr*nc, 1, ns_ or 0)
  else _C.mad_cmat_roll(x._dat, nr, nc, ns_ or 0, ms_ or 0)
  end
  return x
end

function MI.roll (x, ns_, ms_)
  local nr, nc = x:sizes()
  if is_nil(ms_) and (nr == 1 or nc == 1)
  then _C.mad_ivec_roll(x._dat, nr*nc, 1, ns_ or 0)
  else _C.mad_imat_roll(x._dat, nr, nc, ns_ or 0, ms_ or 0)
  end
  return x
end

-- conversion -----------------------------------------------------------------o

function MR.cplx (re_, im_, r) -- (re,im) -> r
  local re, im = re_ or im_, im_ or re_ -- trick for next checks
  assert(is_matrix(re) and is_matrix(im), "invalid argument #1 or #2 (matrix expected)")
  r = chksiz(r,re,im) or cmatrix_alloc((re_ or im_):sizes())
  _C.mad_vec_cvec(re_ and re_._dat, im_ and im_._dat, r._dat, size(r), 1)
  return r
end

function MC.reim (x, re_, im_) -- x -> (re,im)
  assert(is_nil(re_) or is_matrix(re_), "invalid argument #2 (matrix expected)")
  assert(is_nil(im_) or is_matrix(im_), "invalid argument #3 (matrix expected)")
  re_ = chksiz(re_,x) or matrix_alloc(x:sizes())
  im_ = chksiz(im_,x) or matrix_alloc(x:sizes())
  _C.mad_cvec_vec(x._dat, re_._dat, im_._dat, size(x), 1)
  return re_, im_
end

function MR.real (x, r)
  assert(is_nil(r) or is_matrix(r), "invalid argument #2 (matrix expected)")
  r = chksiz(r,x) or matrix_alloc(x:sizes())
  _C.mad_vec_copy(x._dat, r._dat, size(x), 1)
  return r
end

function MC.real (x, r)
  assert(is_nil(r) or is_matrix(r), "invalid argument #2 (matrix expected)")
  r = chksiz(r,x) or matrix_alloc(x:sizes())
  _C.mad_cvec_vec(x._dat, r._dat, nil, size(x), 1)
  return r
end

function MR.imag (x, r)
  assert(is_nil(r) or is_matrix(r), "invalid argument #2 (matrix expected)")
  r = chksiz(r,x) or matrix_alloc(x:sizes())
  _C.mad_vec_zero(r._dat, size(x), 1)
  return r
end

function MC.imag (x, r)
  assert(is_nil(r) or is_matrix(r), "invalid argument #2 (matrix expected)")
  r = chksiz(r,x) or matrix_alloc(x:sizes())
  _C.mad_cvec_vec(x._dat, nil, r._dat, size(x), 1)
  return r
end

-- getx, setx, swpx, insx, remx -----------------------------------------------o

function MR.getvec (x, ij, r_)
  if is_number(ij) then ij = {ij} end
  assert(is_iterable(ij), "invalid argument #2 (iterable expected)")
  local r = r_ or x:same(#ij,1)
  assert(is_iterable(r ), "invalid argument #3 (iterable expected)")
  for i,ii in ipairs(ij) do r[i] = geti_s(x,ii) end
  return r
end

function MR.setvec (x, ij, y, p_, s_) -- inplace
  if is_number(ij) then ij = {ij} end
  if is_scalar(y) then y = rep(y) end
  assert(is_iterable(ij), "invalid argument #2 (iterable expected)")
  if is_nil(p_) then
    assert(is_iterable(y), "invalid argument #3 (scalar or iterable expected)")
    local k, nk = 1, #y
    for _,ii in ipairs(ij) do seti_s(x,ii,y[k]) ; k=k%nk+1 end
  else  -- stateless iterator
    assert(is_callable(y), "invalid argument #3 (scalar or callable expected)")
    local v
    for _,ii in ipairs(ij) do s_,v = y(p_,s_) ; seti_s(x,ii,v) end
  end
  return x
end

function MR.swpvec (x, ij, ij2) -- inplace
  if is_number(ij ) then ij  = {ij } end
  if is_number(ij2) then ij2 = {ij2} end
  assert(is_iterable(ij ), "invalid argument #2 (iterable expected)")
  assert(is_iterable(ij2), "invalid argument #3 (iterable expected)")
  local n, n2 = #ij, #ij2
  for k=1,min(n,n2) do x[ij[k]], x[ij2[k]] = x[ij2[k]], x[ij[k]] end
  return x
end

function MR.remvec (x, ij) -- inplace
  if is_number(ij) then ij = {ij} end
  assert(is_iterable(ij), "invalid argument #2 (iterable expected)")
  local n = size(x)
  local k, ik = 1, {}
  for _,i in ipairs(ij) do ik[i] = true end -- collect indexes
  for i=1,n do if not ik[i] then x[k] = geti_s(x,i) ; k=k+1 end end
  return x:reshape(n-#ij,1)
end

function MR.insvec (x, ij, y) -- inplace
  if is_number(ij) then ij = {ij} end
  if is_scalar(y) then y = rep(y) end
  assert(is_iterable(ij), "invalid argument #2 (iterable expected)")
  assert(is_iterable(y) , "invalid argument #3 (scalar or iterable expected)")
  local i, j = #x, #ij
  while i >= 1 and j >= 1 do
    for k=i,ij[j]+1,-1 do x[k] = x[k-j] end
    i, j, x[ij[j]] = ij[j]-1, j-1, y[j]
  end
  return x
end

function MR.getidx (x, ir_, jc_, r_)
  local ir, jc = ir_, jc_
  -- indexes
  if is_number(ir) and is_number(jc) then
      return idx(ir, jc, x.nrow), ir, jc
  end
  -- list of indexes
  if is_nil(ir) then ir = 1..x.nrow elseif is_number(ir) then ir = {ir} end
  if is_nil(jc) then jc = 1..x.ncol elseif is_number(jc) then jc = {jc} end
  assert(is_iterable(ir), "invalid argument #2 (iterable expected)")
  assert(is_iterable(jc), "invalid argument #3 (iterable expected)")
  local r = r_ or ivector(#ir * #jc)
  assert(is_iterable(r ), "invalid argument #4 (iterable expected)")
  local k, nc = 1, x.ncol
  for _,ik in ipairs(ir) do
  for _,jk in ipairs(jc) do r[k] = idx(ik,jk,nc) ; k=k+1 end end
  return r, ir, jc
end

function MR.getij (x, ij_)
      if is_nil  (ij_) then ij_ = ivector(size(x)):seq()
  elseif is_range(ij_) then ij_ = ivector(#ij_):fill(ij_)
  end
  return idxij(ij_, x.ncol)
end

MI.getij  = MR.getij
MI.getidx = MR.getidx

function MR.getsub (x, ir_, jc_, r_)
  local ij, ir, jc = x:getidx(ir_,jc_)
  if is_number(ij)
  then return x:getvec(ij, r_)
  else return x:getvec(ij, r_ or x:same(#ir,#jc))
  end
end

function MR.setsub (x, ir_, jc_, y, p_, s_)
  local ij, ir, jc = x:getidx(ir_,jc_)
  if is_nil(ir_) and not is_nil(jc_) and not (isy_matrix(y) and y.ncol > 1) then
    _C.mad_imat_trans(ij._dat, ij._dat, #ir, #jc)
  end
  return x:setvec(ij, y, p_, s_)
end

function MR.remsub (x, ir_, jc_)
  if ir_ then
    local nr, nc = x:sizes()
    local ij, ir, _ = x:getidx(ir_, 1..nc)
    x:remvec(ij):reshape(nr-#ir, nc)
  end
  if jc_ then
    local nr, nc = x:sizes()
    local ij, _, jc = x:getidx(1..nr, jc_)
    x:remvec(ij):reshape(nr, nc-#jc)
  end
  return x
end

function MR.inssub (x, ir_, jc_, y)
  return x:insvec(x:getidx(ir_,jc_), y)
end

function MR.swpsub (x, ir_, jc_, ir2_, jc2_) -- inplace
  return x:swpvec(x:getidx(ir_,jc_), x:getidx(ir2_,jc2_))
end

function MR.getdiag (x, r_)
  return x:getvec((1..min(x:sizes()))*(x.ncol+1), r_)
end

function MR.setdiag (x, y, p_, s_) -- inplace
  return x:setvec((1..min(x:sizes()))*(x.ncol+1), y, p_, s_)
end

MR.getrow = \x,ir,r_      -> x:getsub(ir,nil,r_)
MR.setrow = \x,ir,y,p_,s_ -> x:setsub(ir,nil,y,p_,s_)
MR.swprow = \x,ir,ir2     -> x:swpsub(ir,nil,ir2,nil)
MR.remrow = \x,ir         -> x:remsub(ir,nil)
MR.insrow = \x,ir,y       -> x:inssub(ir,nil,y)

MR.getcol = \x,jc,r_      -> x:getsub(nil,jc,r_)
MR.setcol = \x,jc,y,p_,s_ -> x:setsub(nil,jc,y,p_,s_)
MR.swpcol = \x,jc,jc2     -> x:swpsub(nil,jc,nil,jc2)
MR.remcol = \x,jc         -> x:remsub(nil,jc)
MR.inscol = \x,jc,y       -> x:inssub(nil,jc,y)

MI.getvec = MR.getvec
MI.setvec = MR.setvec
MI.swpvec = MR.swpvec
MI.remvec = MR.remvec
MI.insvec = MR.insvec

MI.getsub = MR.getsub
MI.setsub = MR.setsub
MI.swpsub = MR.swpsub
MI.remsub = MR.remsub
MI.inssub = MR.inssub

MI.getrow = MR.getrow
MI.setrow = MR.setrow
MI.swprow = MR.swprow
MI.remrow = MR.remrow
MI.insrow = MR.insrow

MI.getcol = MR.getcol
MI.setcol = MR.setcol
MI.swpcol = MR.swpcol
MI.remcol = MR.remcol
MI.inscol = MR.inscol

MI.getdiag = MR.getdiag
MI.setdiag = MR.setdiag

-- foreach, map, fold, scan, filter -------------------------------------------o

function MR.foreach (x, ij_, f, r_)
  if is_callable(ij_) or is_string(ij_) then f, r_, ij_ = ij_, f end -- right shift
  if is_string(f ) then f = opstr[f] end
  if is_string(r_) and r_ == 'in' then r_ = x end
  local ij = ij_ or 1..size(x)
  assert(is_iterable(ij), "invalid argument #2 (iterable expected)")
  assert(is_callable(f ), "invalid argument #3 (callable expected)")
  if is_nil(r_) then
    for i,ii in ipairs(ij) do         f(geti_s(x,ii), ii) end
  else
    assert(is_iterable(r_), "invalid argument #4 (iterable expected)")
    for i,ii in ipairs(ij) do r_[i] = f(geti_s(x,ii), ii) end
  end
  return x
end

MI.foreach = MR.foreach

function MR.filter (x, ij_, p, r_)
  if is_callable(ij_) then p, r_, ij_ = ij_, p end -- right shift
  if is_string(r_) and r_ == 'in' then r_ = x end
  local ij = ij_ or 1..size(x)
  assert(is_iterable(ij), "invalid argument #2 (iterable expected)")
  assert(is_callable(p) , "invalid argument #3 (callable expected)")
  local r, ri = r_ or x:same(), is_table(r_) and {} or ivector(#x)
  assert(is_iterable(r) , "invalid argument #4 (iterable expected)")
  local k = 1
  for _,ii in ipairs(ij) do
    local v = geti(x,ii)
    if p(v, ii) == true then r[k], ri[k], k = v, ii, k+1 end
  end
  if k == 1 then return {}, {} end
  if isa_matrix(r ) then r :reshape(k-1) end
  if is_imatrix(ri) then ri:reshape(k-1) end
  return r, ri
end

MI.filter = MR.filter

function MR.map (x, ij_, f, r_)
  if is_callable(ij_) or is_string(ij_) then f, r_, ij_ = ij_, f end -- right shift
  if is_string(f ) then f = opstr[f] end
  if is_string(r_) and r_ == 'in' then r_ = x end
  local ij = ij_ or 1..size(x)
  assert(is_iterable(ij), "invalid argument #2 (iterable expected)")
  assert(is_callable(f ), "invalid argument #3 (callable expected)")
  if is_nil(r_) then
    local iter, s, i, ii = ipairs(ij) ; i, ii = iter(s, i)
    local r0 = f(geti_s(x,ii), ii) ; r_ = x:same(r0) ; r_[ii] = r0
    for _,ii in iter, s, i do r_[ii] = f(geti_s(x,ii), ii) end
  else
    assert(is_iterable(r_), "invalid argument #4 (iterable expected)")
    for _,ii in ipairs(ij) do r_[ii] = f(geti_s(x,ii), ii) end
  end
  return r_
end

MI.map = MR.map

function MR.map2 (x, y, ij_, f, r_)
  if is_callable(ij_) or is_string(ij_) then f, r_, ij_ = ij_, f end -- right shift
  if is_scalar(y ) then y = rep(y) end
  if is_string(f ) then f = opstr[f] end
  if is_string(r_) and r_ == 'in' then r_ = x end
  local ij = ij_ or 1..size(x)
  assert(is_iterable(y ), "invalid argument #2 (scalar or iterable expected)")
  assert(is_iterable(ij), "invalid argument #3 (iterable expected)")
  assert(is_callable(f ), "invalid argument #4 (callable expected)")
  if is_nil(r_) then
    local iter, s, i, ii = ipairs(ij) ; i, ii = iter(s, i)
    local r0 = f(geti(x,ii), y[ii], ii) ; r_ = x:same(r0) ; r_[ii] = r0
    for _,ii in iter, s, i do r_[ii] = f(geti_s(x,ii), y[ii], ii) end
  else
    assert(is_iterable(r_), "invalid argument #5 (iterable expected)")
    for _,ii in ipairs(ij) do r_[ii] = f(geti_s(x,ii), y[ii], ii) end
  end
  return r_
end

MI.map2 = MR.map2

function MR.map3 (x, y, z, ij_, f, r_)
  if is_callable(ij_) or is_string(ij_) then f, r_, ij_ = ij_, f end -- right shift
  if is_scalar(y ) then y = rep(y) end
  if is_scalar(z ) then z = rep(z) end
  if is_string(f ) then f = opstr[f] end
  if is_string(r_) and r_ == 'in' then r_ = x end
  local ij = ij_ or 1..size(x)
  assert(is_iterable(y ), "invalid argument #2 (scalar or iterable expected)")
  assert(is_iterable(z ), "invalid argument #3 (scalar or iterable expected)")
  assert(is_iterable(ij), "invalid argument #4 (iterable expected)")
  assert(is_callable(f ), "invalid argument #5 (callable expected)")
  if is_nil(r_) then
    local iter, s, i, ii = ipairs(ij) ; i, ii = iter(s, i)
    local r0 = f(geti(x,ii), y[ii], z[ii], ii) ; r_ = x:same(r0) ; r_[ii] = r0
    for _,ii in iter, s, i do r_[ii] = f(geti_s(x,ii), y[ii], z[ii], ii) end
  else
    assert(is_iterable(r_), "invalid argument #6 (iterable expected)")
    for _,ii in ipairs(ij) do r_[ii] = f(geti_s(x,ii), y[ii], z[ii], ii) end
  end
  return r_
end

MI.map3 = MR.map3

-- errCMat:foldl('+', {})

function MR.foldl (x, f, x0_, d_, r_)
  if is_string(f) then f = opstr[f] end
  if is_string(x0_) then                           -- case 2',4',4": shift right
    x0_, d_, r_ = nil, x0_, is_nil(r_) and d_ or r_
  elseif is_nil(r_) and not is_string(d_) then        -- case 7',3": shift right
    d_, r_ = nil, d_
  end
  assert(is_callable(f)               , "invalid argument #2 (callable expected)")
  assert(is_nil(r_) or is_iterable(r_), "invalid argument #5 (iterable expected)")
  local nr, nc, rr, r = x:sizes()
  if is_nil(d_) or d_ == 'vec' then    -- fold x as vector, r_ is discarded
                            r  = geti(x,1)
    if not is_nil(x0_) then r  = f(x0_, r) end
    for i=2,nr*nc        do r  = f(r, geti(x,i)) end
  elseif d_ == 'diag' then             -- fold x diagonal
    local n = min(nr,nc)    r  = geti(x,1)
    if not is_nil(x0_) then r  = f(x0_, r) end
    for i=2,n            do r  = f(r, get(x,i,i)) end
  elseif d_ == 'row' then              -- fold x rows
    r = r_ or x:same(nr,1)
    for i=1,nr           do rr = get(x,i,1)
    if not is_nil(x0_) then rr = f(x0_, rr) end
    for j=2,nc           do rr = f(rr, get(x,i,j)) end r[i] = rr end
  elseif d_ == 'col' then              -- fold x columns
    r = r_ or x:same(1,nc)
    for j=1,nc           do rr = get(x,1,j)
    if not is_nil(x0_) then rr = f(x0_, rr) end
    for i=2,nr           do rr = f(rr, get(x,i,j)) end r[j] = rr end
  else
    error("invalid argument #4 (string 'vec', 'diag', 'row' or 'col' expected)")
  end
  return r
end

MI.foldl = MR.foldl

function MR.foldr (x, f, x0_, d_, r_)
  if is_string(f) then f = opstr[f] end
  if is_string(x0_) then                           -- case 2',4',4": shift right
    x0_, d_, r_ = nil, x0_, is_nil(r_) and d_ or r_
  elseif is_nil(r_) and not is_string(d_) then        -- case 7',3": shift right
    d_, r_ = nil, d_
  end
  assert(is_callable(f)               , "invalid argument #2 (callable expected)")
  assert(is_nil(r_) or is_iterable(r_), "invalid argument #5 (iterable expected)")
  local nr, nc, rr, r = x:sizes()
  if is_nil(d_) or d_ == 'vec' then    -- fold x as vector, r_ is discarded
                             r = geti(x,nr*nc)
    if not is_nil(x0_) then  r = f(r, x0_) end
    for i=nr*nc-1,1,-1   do  r = f(geti(x,i), r) end
  elseif d_ == 'diag' then             -- fold x diagonal
    local n = min(nr,nc)     r = get(x,n,n)
    if not is_nil(x0_) then  r = f(r, x0_) end
    for i=n-1,1,-1       do  r = f(get(x,i,i), r) end
  elseif d_ == 'row' then              -- fold x rows
    r = r_ or x:same(nr,1)
    for i=nr  ,1,-1      do rr = get(x,i,nc)
    if not is_nil(x0_) then rr = f(rr, x0_) end
    for j=nc-1,1,-1      do rr = f(get(x,i,j), rr) end r[i] = rr end
  elseif d_ == 'col' then              -- fold x columns
    r = r_ or x:same(1,nc)
    for j=nc  ,1,-1      do rr = get(x,nr,j)
    if not is_nil(x0_) then rr = f(rr, x0_) end
    for i=nr-1,1,-1      do rr = f(get(x,i,j), rr) end r[j] = rr end
  else
    error("invalid argument #4 (string 'vec', 'diag', 'row' or 'col' expected)")
  end
  return r
end

MI.foldr = MR.foldr

function MR.scanl (x, f, x0_, d_, r_)
  if is_string(f) then f = opstr[f] end
  if is_string(x0_) then                           -- case 2',4',4": shift right
    x0_, d_, r_ = nil, x0_, is_nil(r_) and d_ or r_
  elseif is_nil(r_) and not is_string(d_) then        -- case 7',3": shift right
    d_, r_ = nil, d_
  end
  if is_string(r_) and r_ == 'in' then r_ = x end
  assert(is_callable(f)               , "invalid argument #2 (callable expected)")
  assert(is_nil(r_) or is_iterable(r_), "invalid argument #5 (iterable expected)")
  local r, nr, nc, rr = r_ or x:same(), x:sizes()
  if is_nil(d_) or d_ == 'vec' then    -- scan x as vector
                            rr = geti(x,1)
    if not is_nil(x0_) then rr = f(x0_, rr) end    r[1] = rr
    for i=2,nr*nc        do rr = f(rr, geti(x,i))  r[i] = rr end
  elseif d_ == 'diag' then             -- scan x diagonal
    local n = min(nr,nc)    rr = geti(x,1)
    if not is_nil(x0_) then rr = f(x0_, rr) end    r[1] = rr
    for i=2,n            do rr = f(rr, get(x,i,i)) r[i] = rr end
    if isa_matrix(r) or is_imatrix(r) then r:reshape(n) end
  elseif d_ == 'row' then              -- scan x rows
    local k = 1
    for i=1,nr           do rr = get(x,i,1)
    if not is_nil(x0_) then rr = f(x0_, rr) end    r[k], k = rr, k+1
    for j=2,nc           do rr = f(rr, get(x,i,j)) r[k], k = rr, k+1 end end
  elseif d_ == 'col' then              -- scan x columns
    if isa_matrix(r) or is_imatrix(r) and r.ncol > 1 then
      for j=1,nc           do rr = get(x,1,j)
      if not is_nil(x0_) then rr = f(x0_, rr) end    r[idx(1,j,nc)] = rr
      for i=2,nr           do rr = f(rr, get(x,i,j)) r[idx(i,j,nc)] = rr end end
    else
      local k = 1
      for j=1,nc           do rr = get(x,1,j)
      if not is_nil(x0_) then rr = f(x0_, rr) end    r[k], k = rr, k+1
      for i=2,nr           do rr = f(rr, get(x,i,j)) r[k], k = rr, k+1 end end
    end
  else
    error("invalid argument #4 (string 'vec', 'diag', 'row' or 'col' expected)")
  end
  return r
end

MI.scanl = MR.scanl

function MR.scanr (x, f, x0_, d_, r_)
  if is_string(f) then f = opstr[f] end
  if is_string(x0_) then                           -- case 2',4',4": shift right
    x0_, d_, r_ = nil, x0_, is_nil(r_) and d_ or r_
  elseif is_nil(r_) and not is_string(d_) then        -- case 7',3": shift right
    d_, r_ = nil, d_
  end
  if is_string(r_) and r_ == 'in' then r_ = x end
  assert(is_callable(f)               , "invalid argument #2 (callable expected)")
  assert(is_nil(r_) or is_iterable(r_), "invalid argument #5 (iterable expected)")
  local r, nr, nc, rr = r_ or x:same(), x:sizes()
  if is_nil(d_) or d_ == 'vec' then    -- scan x as vector
                            rr = geti(x,nr*nc)
    if not is_nil(x0_) then rr = f(rr, x0_) end    r[nr*nc] = rr
    for i=nr*nc-1,1,-1   do rr = f(geti(x,i), rr)  r[i    ] = rr end
  elseif d_ == 'diag' then             -- scan x diagonal
    local n = min(nr,nc)    rr = get(x,n,n)
    if not is_nil(x0_) then rr = f(rr, x0_) end    r[n] = rr
    for i=n-1,1,-1       do rr = f(get(x,i,i), rr) r[i] = rr end
    if isa_matrix(r) or is_imatrix(r) then r:reshape(n) end
  elseif d_ == 'row'  then             -- scan x rows
    local k = nr*nc
    for i=nr  ,1,-1      do rr = get(x,i,nc)
    if not is_nil(x0_) then rr = f(rr, x0_) end    r[k], k = rr, k-1
    for j=nc-1,1,-1      do rr = f(get(x,i,j), rr) r[k], k = rr, k-1 end end
  elseif d_ == 'col' then              -- scan x columns
    if isa_matrix(r) or is_imatrix(r) and r.ncol > 1 then
      for j=nc  ,1,-1      do rr = get(x,nr,j)
      if not is_nil(x0_) then rr = f(rr, x0_) end    r[idx(nr,j,nc)] = rr
      for i=nr-1,1,-1      do rr = f(get(x,i,j), rr) r[idx(i ,j,nc)] = rr end end
    else
      local k = nr*nc
      for j=nc  ,1,-1      do rr = get(x,nr,j)
      if not is_nil(x0_) then rr = f(rr, x0_) end    r[k], k = rr, k-1
      for i=nr-1,1,-1      do rr = f(get(x,i,j), rr) r[k], k = rr, k-1 end end
    end
  else
    error("invalid argument #4 (string 'vec', 'diag', 'row' or 'col' expected)")
  end
  return r
end

MI.scanr = MR.scanr

-- special maps ---------------------------------------------------------------o

MR.abs   = \x,r_ -> x:map(abs  , r_)
MR.ceil  = \x,r_ -> x:map(ceil , r_)
MR.floor = \x,r_ -> x:map(floor, r_)
MR.frac  = \x,r_ -> x:map(frac , r_)
MR.trunc = \x,r_ -> x:map(trunc, r_)
MR.round = \x,r_ -> x:map(round, r_)
MR.sign  = \x,r_ -> x:map(sign , r_)
MR.sign1 = \x,r_ -> x:map(sign1, r_)

MR.sqrt  = \x,r_ -> x:map(sqrt , r_)
MR.exp   = \x,r_ -> x:map(exp  , r_)
MR.log   = \x,r_ -> x:map(log  , r_)
MR.log10 = \x,r_ -> x:map(log10, r_)

MR.sin   = \x,r_ -> x:map(sin  , r_)
MR.cos   = \x,r_ -> x:map(cos  , r_)
MR.tan   = \x,r_ -> x:map(tan  , r_)
MR.cot   = \x,r_ -> x:map(cot  , r_)
MR.sinh  = \x,r_ -> x:map(sinh , r_)
MR.cosh  = \x,r_ -> x:map(cosh , r_)
MR.tanh  = \x,r_ -> x:map(tanh , r_)
MR.coth  = \x,r_ -> x:map(coth , r_)
MR.asin  = \x,r_ -> x:map(asin , r_)
MR.acos  = \x,r_ -> x:map(acos , r_)
MR.atan  = \x,r_ -> x:map(atan , r_)
MR.acot  = \x,r_ -> x:map(acot , r_)
MR.asinh = \x,r_ -> x:map(asinh, r_)
MR.acosh = \x,r_ -> x:map(acosh, r_)
MR.atanh = \x,r_ -> x:map(atanh, r_)
MR.acoth = \x,r_ -> x:map(acoth, r_)

MR.tgamma= \x,r_ -> x:map(tgamma, r_)
MR.lgamma= \x,r_ -> x:map(lgamma, r_)

MR.wf    = \x,r_ -> x:map(wf    , r_)
MR.erf   = \x,r_ -> x:map(erf   , r_)
MR.erfc  = \x,r_ -> x:map(erfc  , r_)
MR.erfi  = \x,r_ -> x:map(erfi  , r_)
MR.erfcx = \x,r_ -> x:map(erfcx , r_)

MR.proj  = \x,r_ -> x:map(proj , r_)

MC.conj  = \x,r_ -> x:map(conj , r_)
MC.cabs  = \x,r_ -> x:map(cabs , r_)
MC.carg  = \x,r_ -> x:map(carg , r_)
MC.rect  = \x,r_ -> x:map(rect , r_)
MC.polar = \x,r_ -> x:map(polar, r_)

MI.abs   = \x,r_ -> x:map(abs  , r_)

MR.conj  = \ error("invalid argument #1 (cmatrix expected)")
MR.cabs  = \ error("invalid argument #1 (cmatrix expected)")
MR.carg  = \ error("invalid argument #1 (cmatrix expected)")
MR.rect  = \ error("invalid argument #1 (cmatrix expected)")
MR.polar = \ error("invalid argument #1 (cmatrix expected)")

-- special folds --------------------------------------------------------------o

local all = \p,r,x -> lbool(land(r, p(x)))
local any = \p,r,x -> lbool(lor (r, p(x)))

MR.min     = \x,d_,r_ -> x:foldl(min    , nil, d_, r_)
MR.max     = \x,d_,r_ -> x:foldl(max    , nil, d_, r_)
MR.sum     = \x,d_,r_ -> x:foldl(add    , nil, d_, r_)
MR.prod    = \x,d_,r_ -> x:foldl(mul    , nil, d_, r_)
MR.sumsqr  = \x,d_,r_ -> x:foldl(sumsqrl, 0  , d_, r_)
MR.sumabs  = \x,d_,r_ -> x:foldl(sumabsl, 0  , d_, r_)
MR.minabs  = \x,d_,r_ -> x:foldl(minabsl, inf, d_, r_)
MR.maxabs  = \x,d_,r_ -> x:foldl(maxabsl, 0  , d_, r_)

MR.all   = \x,p,d_,r_ =>
              assert(is_callable(p), "invalid argument #2 (callable expected)")
              return x:foldl(bind1st(all, p), true , d_, r_) end
MR.any   = \x,p,d_,r_ =>
              assert(is_callable(p), "invalid argument #2 (callable expected)")
              return x:foldl(bind1st(any, p), false, d_, r_) end

MI.min, MI.max, MI.minabs, MI.maxabs, MI.all, MI.any =
MR.min, MR.max, MR.minabs, MR.maxabs, MR.all, MR.any

-- special scans --------------------------------------------------------------o

-- left accumulation
MR.accmin    = \x,d_,r_ -> x:scanl(min    , nil, d_, r_)
MR.accmax    = \x,d_,r_ -> x:scanl(max    , nil, d_, r_)
MR.accsum    = \x,d_,r_ -> x:scanl(add    , nil, d_, r_)
MR.accprod   = \x,d_,r_ -> x:scanl(mul    , nil, d_, r_)
MR.accsumsqr = \x,d_,r_ -> x:scanl(sumsqrl, 0  , d_, r_)
MR.accsumabs = \x,d_,r_ -> x:scanl(sumabsl, 0  , d_, r_)
MR.accminabs = \x,d_,r_ -> x:scanl(minabsl, inf, d_, r_)
MR.accmaxabs = \x,d_,r_ -> x:scanl(maxabsl, 0  , d_, r_)

MR.accumulate = MR.accsum

-- right accumulation
MR.raccmin    = \x,d_,r_ -> x:scanr(min                  , nil, d_, r_)
MR.raccmax    = \x,d_,r_ -> x:scanr(max                  , nil, d_, r_)
MR.raccsum    = \x,d_,r_ -> x:scanr(add                  , nil, d_, r_)
MR.raccprod   = \x,d_,r_ -> x:scanr(mul                  , nil, d_, r_)
MR.raccsumsqr = \x,d_,r_ -> x:scanr(compose(sumsqrl,swap), 0  , d_, r_)
MR.raccsumabs = \x,d_,r_ -> x:scanr(compose(sumabsl,swap), 0  , d_, r_)
MR.raccminabs = \x,d_,r_ -> x:scanr(compose(minabsl,swap), inf, d_, r_)
MR.raccmaxabs = \x,d_,r_ -> x:scanr(compose(maxabsl,swap), 0  , d_, r_)

-- special filters ------------------------------------------------------------o

MR.filter_out = \x,ij_,p,r_ -> x:filter(ij_,compose(lnot,p), r_)

MI.filter_out = MR.filter_out

-- minmax ---------------------------------------------------------------------o

function MR.minmax (x, abs_)
  _C.mad_vec_minmax(x._dat, abs_ or false, ires, size(x), 1)
  return x._dat[ires[0]], x._dat[ires[1]]
end

function MC.minmax (x)
  _C.mad_cvec_minmax(x._dat, ires, size(x), 1)
  return x._dat[ires[0]], x._dat[ires[1]]
end

function MI.minmax (x)
  _C.mad_ivec_minmax(x._dat, ires, size(x), 1)
  return x._dat[ires[0]], x._dat[ires[1]]
end

function MR.iminmax (x, abs_)
  _C.mad_vec_minmax(x._dat, abs_ or false, ires, size(x), 1)
  return ires[0]+1, ires[1]+1
end

function MC.iminmax (x)
  _C.mad_cvec_minmax(x._dat, ires, size(x), 1)
  return ires[0]+1, ires[1]+1
end

function MI.iminmax (x, abs_)
  _C.mad_ivec_minmax(x._dat, abs_ or false, ires, size(x), 1)
  return ires[0]+1, ires[1]+1
end

-- mean, variance -------------------------------------------------------------o

function MR.mean (x)
  return _C.mad_vec_mean(x._dat, size(x), 1)
end

function MC.mean (x)
  _C.mad_cvec_mean(x._dat, cres, size(x), 1) ; return cres[0]
end

function MR.variance (x)
  return _C.mad_vec_var(x._dat, size(x), 1)
end

function MC.variance (x)
  _C.mad_cvec_var(x._dat, cres, size(x), 1) ; return cres[0]
end

-- Kahan's summation, Horner's evaluation -------------------------------------o


function MR.ksum (x) -- Neumaier variant
  return _C.mad_vec_ksum(x._dat, size(x), 1)
end

function MR.knorm (x) -- Neumaier variant
  return _C.mad_vec_knorm(x._dat, size(x), 1)
end

function MR.kdot (x, y) -- Neumaier variant
  assert(size(x) == size(y), "incompatible matrix sizes")
  return _C.mad_vec_kdot(x._dat, y._dat, size(x), 1)
end

MC.ksum  = \ error("not supported")
MC.knorm = \ error("not supported")
MC.kdot  = \ error("not supported")

function MR.eval (x, x0)
  return _C.mad_vec_eval(x._dat, x0, size(x), 1)
end

function MC.eval (x, x0)
  _C.mad_cvec_eval(x._dat, x0.re, x0.im, cres, size(x), 1) return cres[0]
end

-- conjugate, transpose -------------------------------------------------------o

MR.conjugate = MR.conj

function MR.transpose (x, r_)
  if is_string(r_) and r_ == 'in' then r_ = x end

  if r_ == x and (x.nrow == 1 or x.ncol == 1) then
    _C.mad_mat_reshape(x, x.ncol, x.nrow)
    return x
  else
    local r = chksizt(r_,x) or matrix_alloc(x:tsizes())
    _C.mad_mat_trans(x._dat, r._dat, x:sizes())         -- transpose
    return r
  end
end

MR.t = MR.transpose -- shortcut

function MC.transpose (x, r_, c_)
  if is_string(r_) and r_ == 'in' then r_ = x end
  if is_boolean(r_) and is_nil(c_) then r_, c_ = nil, r_ end

  if r_ == x and (x.nrow == 1 or x.ncol == 1) then
    _C.mad_cmat_reshape(x, x.ncol, x.nrow)           -- transpose (no conj.)
    if c_ ~= false then
      _C.mad_cmat_ctrans(x._dat, x._dat, x:sizes())  -- conjugate transpose
    end
    return x
  else
    local r = chksizt(r_,x) or cmatrix_alloc(x:tsizes())
    if c_ == false
    then _C.mad_cmat_trans (x._dat, r._dat, x:sizes())  -- transpose (no conj.)
    else _C.mad_cmat_ctrans(x._dat, r._dat, x:sizes())  -- conjugate transpose
    end
    return r
  end
end

MC.t = MC.transpose -- shortcut

function MI.transpose (x, r_)
  if is_string(r_) and r_ == 'in' then r_ = x end

  if r_ == x and (x.nrow == 1 or x.ncol == 1) then
    _C.mad_imat_reshape(x, x.ncol, x.nrow)
    return x
  else
    local r = chksizt(r_,x) or imatrix_alloc(x:tsizes())
    _C.mad_imat_trans(x._dat, r._dat, x:sizes())        -- transpose
    return r
  end
end

MI.t = MI.transpose -- shortcut

function MR.trace (x)
  local r, nr, nc = 0, x:sizes()
  local n = min(nr, nc)
  for i=0,n*nc,nc+1 do r = r + geti0(x,i) end
  return r
end

MR.tr = MR.trace -- shortcut

-- symplectic matrix ----------------------------------------------------------o

function MR.sympconj (x, r_) -- -J M' J = symplectic conjugate
  if is_string(r_) and r_ == 'in' then r_ = x end
  local nr, nc = x:sizes()
  assert(nr == nc and nr % 2 == 0, "invalid argument #1 (2n matrix expected)")
  local r = chksiz(r_,x) or matrix_alloc(nr,nr)
  _C.mad_mat_sympconj(x._dat, r._dat, nr)
  return r
end

MR.bar = MR.sympconj -- shortcut

function MC.sympconj (x, r_) -- -J M' J = symplectic conjugate
  if is_string(r_) and r_ == 'in' then r_ = x end
  local nr, nc = x:sizes()
  assert(nr == nc and nr % 2 == 0, "invalid argument #1 (2n matrix expected)")
  local r = chksiz(r_,x) or cmatrix_alloc(nr,nr)
  _C.mad_cmat_sympconj(x._dat, r._dat, nr)
  return r
end

MC.bar = MC.sympconj -- shortcut

function MR.symperr (x, r_) -- M' J M - J = symplectic deviation
  local nr, nc = x:sizes()
  assert(nr == nc and nr % 2 == 0, "invalid argument #1 (2n matrix expected)")
  if is_nil(r_) then
    return _C.mad_mat_symperr(x._dat, nil, nr)
  else
    chksiz(r_,x)
    return _C.mad_mat_symperr(x._dat, r_._dat, nr), r_
  end
end

function MC.symperr (x, r_) -- M' J M - J = symplectic deviation
  local nr, nc = x:sizes()
  assert(nr == nc and nr % 2 == 0, "invalid argument #1 (2n matrix expected)")
  if is_nil(r_) then
    return _C.mad_cmat_symperr(x._dat, nil, nr)
  else
    chksiz(r_,x)
    return _C.mad_cmat_symperr(x._dat, r_._dat, nr), r_
  end
end

-- inner, cross, mixed, outer -------------------------------------------------o

function MR.inner (x, y, r_)
  -- (x:t() * y):tr() without temporary, tr is called only if r_ == 'tr'
  assert(isa_matrix(y), "invalid argument #2 (matrix expected)")
  chksiz(x,y)
  local nr, nc = x:sizes()
  if nc == 1 or is_string(r_) and r_ == 'tr' then
    if is_matrix(y)
    then return _C.mad_vec_dot    (x._dat, y._dat,       nr*nc, 1)
    else        _C.mad_vec_dotv_r (x._dat, y._dat, cres, nr*nc, 1) return cres[0]
    end
  else
    assert(is_nil(r_) or r_.nrow == 1 and r_.ncol == nc,
           "incompatible matrix sizes")
    local r = r_ or x:same(1, nc, y[1])
    if is_matrix(y)
    then _C.mad_mat_dot  (x._dat, y._dat, r._dat, nr, nc)
    else _C.mad_mat_dotm (x._dat, y._dat, r._dat, nr, nc)
    end
    return r
  end
end

MR.dot = MR.inner -- shortcut

function MC.inner (x, y, r_)
  -- (x:t() * y):tr() without temporary, tr is called only if r_ == 'tr'
  assert(isa_matrix(y), "invalid argument #2 (matrix expected)")
  chksiz(x,y)
  local nr, nc = x:sizes()
  if nc == 1 or is_string(r_) and r_ == 'tr' then
    if is_matrix(y)
    then return _C.mad_cvec_dotv_r (x._dat, y._dat, cres, nr*nc, 1)
    else        _C.mad_cvec_dot_r  (x._dat, y._dat, cres, nr*nc, 1)
    end
    return cres[0]
  else
    assert(is_nil(r_) or r_.nrow == 1 and r_.ncol == nc,
           "incompatible matrix sizes")
    local r = r_ or x:same(1, nc)
    if is_matrix(y)
    then _C.mad_cmat_dotm (x._dat, y._dat, r._dat, nr, nc)
    else _C.mad_cmat_dot  (x._dat, y._dat, r._dat, nr, nc)
    end
    return r
  end
end

MC.dot = MC.inner -- shortcut

function MR.outer (x, y, r_)
  -- x * y:t() without temporary
  if is_string(r_) and r_ == 'in' then r_ = x end
  assert(isa_matrix(y), "invalid argument #2 (matrix expected)")
  local nr, nc = x.nrow, y.nrow
  assert(x .ncol == 1  and y .ncol == 1 and (is_nil(r_) or
         r_.nrow == nr and r_.ncol == nc), "incompatible matrix sizes")
  local r = r_ or x:same(nr, nc, x[1]+y[1])
  for i=0,nr-1 do
  for j=0,nc-1 do set0(r,i,j, geti0(x,i) * conj(geti0(y,j))) end end
  return r
end

function MR.cross (x, y, r_) -- TODO: move to mad_mat
  if is_string(r_) and r_ == 'in' then r_ = x end
  assert(isa_matrix(y), "invalid argument #2 (matrix expected)")
  local nr, nc = x:sizes()
  assert(nr == 3, "invalid matrix sizes")
  local r = chksiz(r_,x,y) or x:same(3, nc, x[1]+y[1])
  local r0, r1, r2
  -- single cross product
  if nc == 1 then
    r0 = geti0(x,1) * geti0(y,2) - geti0(x,2) * geti0(y,1)
    r1 = geti0(x,2) * geti0(y,0) - geti0(x,0) * geti0(y,2)
    r2 = geti0(x,0) * geti0(y,1) - geti0(x,1) * geti0(y,0)
    seti0(r,0,r0) ; seti0(r,1,r1) ; seti0(r,2,r2)
  else
  -- multiple cross products
    local i0, i1, i2 = 0, nc, 2*nc -- 1st, 2nd and 3rd rows
    for i=0,nc-1 do
      r0 = geti0(x,i1) * geti0(y,i2) - geti0(x,i2) * geti0(y,i1)
      r1 = geti0(x,i2) * geti0(y,i0) - geti0(x,i0) * geti0(y,i2)
      r2 = geti0(x,i0) * geti0(y,i1) - geti0(x,i1) * geti0(y,i0)
      seti0(r,i0,r0) ; seti0(r,i1,r1) ; seti0(r,i2,r2)
      i0, i1, i2 = i0+1, i1+1, i2+1
    end
  end
  return r
end

function MR.mixed (x, y, z, r_)
  -- diag( (uxv)'.w ) without temporary
  if is_string(r_) and r_ == 'in' then r_ = x end
  assert(isa_matrix(y), "invalid argument #2 (matrix expected)")
  assert(isa_matrix(z), "invalid argument #3 (matrix expected)")
  local nr, nc = x:sizes()
  assert(nr == 3, "invalid matrix sizes")
  assert(nr == y.nrow and nc == y.ncol and
         nr == z.nrow and nc == z.ncol, "incompatible matrix sizes")
  if nc == 1 then
  -- single mixed product (r_ ignored)
    return conj(geti0(x,1) * geti0(y,2) - geti0(x,2) * geti0(y,1)) * geti0(z,0) +
           conj(geti0(x,2) * geti0(y,0) - geti0(x,0) * geti0(y,2)) * geti0(z,1) +
           conj(geti0(x,0) * geti0(y,1) - geti0(x,1) * geti0(y,0)) * geti0(z,2)
  end
  -- multiple mixed products
  assert(is_nil(r_) or nc == r_.nrow and 1 == r_.ncol,
         "incompatible result matrix sizes")
  local r = r_ or x:same(1, nc, x[1]+y[1]+z[1])
  local i0, i1, i2 = 0, nc, 2*nc -- 1st, 2nd and 3rd rows
  for i=0,nc-1 do
    r._dat[i] = conj(geti0(x,i1) * geti0(y,i2) - geti0(x,i2) * geti0(y,i1)) * geti0(z,i0) +
                conj(geti0(x,i2) * geti0(y,i0) - geti0(x,i0) * geti0(y,i2)) * geti0(z,i1) +
                conj(geti0(x,i0) * geti0(y,i1) - geti0(x,i1) * geti0(y,i0)) * geti0(z,i2)
    i0, i1, i2 = i0+1, i1+1, i2+1
  end
  return r
end

-- norm, unit, center, angle (in place) ---------------------------------------o

function MR.norm (x)
  return _C.mad_vec_norm(x._dat, size(x), 1)
end

function MC.norm (x)
  return _C.mad_cvec_norm(x._dat, size(x), 1)
end

function MR.distance (x, y)
  assert(is_matrix(y), "invalid argument #2 (matrix expected)")
  return _C.mad_vec_dist(x._dat, y._dat, size(x), 1)
end

function MC.distance (x, y)
  assert(is_cmatrix(y), "invalid argument #2 (cmatrix expected)")
  return _C.mad_cvec_dist(x._dat, y._dat, size(x), 1)
end

function MR.unit (x, r_)
  if is_string(r_) and r_ == 'in' then r_ = x end
  local n = x:norm()
  assert(n ~= 0, "null matrix norm")
  local r = chksiz(r_,x) or x:same()
  _C.mad_vec_muln(x._dat, 1/n, r._dat, size(r), 1)
  return r
end

function MC.unit (x, r_)
  if is_string(r_) and r_ == 'in' then r_ = x end
  local n = x:norm()
  assert(n ~= 0, "null matrix norm")
  local r = chksiz(r_,x) or x:same()
  _C.mad_cvec_muln(x._dat, 1/n, r._dat, size(r), 1)
  return r
end

function MR.center (x, d_, r_) -- center vector or matrix row or col on mean
  if is_nil(r_) and not is_string(d_) then
    d_, r_ = nil, d_ -- shift right
  end
  if is_string(r_) and r_ == 'in' then r_ = x end
  local r = chksiz(r_,x) or x:same()
  if is_nil(d_) or d_ == 'vec'
  then _C.mad_vec_center(x._dat, r._dat, size(x), 1)
  else _C.mad_mat_center(x._dat, r._dat, x.nrow, x.ncol, d_=='col' and 2 or 1)
  end
  return r
end

function MC.center (x, d_, r_) -- center vector or matrix row or col on mean
  if is_nil(r_) and not is_string(d_) then
    d_, r_ = nil, d_ -- shift right
  end
  if is_string(r_) and r_ == 'in' then r_ = x end
  local r = chksiz(r_,x) or x:same()
  if is_nil(d_) or d_ == 'vec'
  then _C.mad_cvec_center(x._dat, r._dat, size(x), 1)
  else _C.mad_cmat_center(x._dat, r._dat, x.nrow, x.ncol, d_=='col' and 2 or 1)
  end
  return r
end

function MR.angle (x, y, n_)
  local w = x:inner(y)
  local v = x:norm() * y:norm()
  assert(v ~= 0, "null vector norm") -- convention: return pi/2 ?
  local a = acos(w / v) -- [0, pi]
  if n_ and x:mixed(y, n_) < 0 then a = -a end -- [-pi, pi]
  return a
end

-- operators ------------------------------------------------------------------o

MR.__unm  = \x,_,r_ -> x:map (   unm, r_) -- note: _ is dummy arg, see Lua specs.
MR.__mod  = \x,y,r_ -> x:map2(y, mod, r_) -- for now
MR.__emod = \x,y,r_ -> x:map2(y, mod, r_) -- incomplete
MR.__epow = \x,y,r_ -> x:map2(y, pow, r_) -- incomplete

MI.__unm, MI.__mod, MI.__emod, MI.__epow =
MR.__unm, MR.__mod, MR.__emod, MR.__epow

--[[ TODO
  mexp, mlog, msqrt, mpow using Padé approximants or eigen systems
]]

-- equal

function MR.__eq (x, y, tol_)
  if is_nil(y) or is_nil(x) then return false end
  tol_ = tol_ or 0
  assert(is_number(tol_), "invalid argument #3 (number expected)")
  if is_scalar(x) then                        -- num or cpx == mat
    x = complex(x)
    if abs(x.im) > tol_ then return false end
    for i=1,size(y) do
      if abs(geti(y,i) - x.re) > tol_ then return false end
    end
  elseif is_scalar(y) then                    -- mat == num or cpx
    y = complex(y)
    if abs(y.im) > tol_ then return false end
    for i=1,size(x) do
      if abs(geti(x,i) - y.re) > tol_ then return false end
    end
  elseif is_cmatrix(y) then                   -- mat == cmat
    if x.nrow ~= y.nrow or x.ncol ~= y.ncol then return false end
    for i=1,size(x) do
      if abs(geti(x,i) - geti(y,i).re) > tol_ or
         abs(            geti(y,i).im) > tol_ then return false end
    end
  elseif is_matrix(y) and is_matrix(x) then   -- mat == mat
    if x.nrow ~= y.nrow or x.ncol ~= y.ncol then return false end
    for i=1,size(x) do
      if abs(geti(x,i) - geti(y,i)) > tol_ then return false end
    end
  else
    return assert(gmm(y,'__eq_mat'), "invalid 'mat == ?' operation")(x, y, tol_)
  end
  return true
end

function MC.__eq (x, y, tol_)
  if is_nil(x) or is_nil(y) then return false end
  tol_ = tol_ or 0
  assert(is_number(tol_), "invalid argument #3 (number expected)")
  if is_scalar(x) then                        -- num or cpx == cmat
    x = complex(x)
    for i=1,size(y) do
      if abs(geti(y,i).re - x.re) > tol_ or
         abs(geti(y,i).im - x.im) > tol_ then return false end
    end
  elseif is_scalar(y) then                    -- cmat == num or cpx
    y = complex(y)
    for i=1,size(x) do
      if abs(geti(x,i).re - y.re) > tol_ or
         abs(geti(x,i).im - y.im) > tol_ then return false end
    end
  elseif is_matrix(y) then                    -- cmat == mat
    if x.nrow ~= y.nrow or x.ncol ~= y.ncol then return false end
    for i=1,size(x) do
      if abs(geti(x,i).re - geti(y,i)) > tol_ or
         abs(geti(x,i).im            ) > tol_ then return false end
    end
  elseif is_cmatrix(y) and is_cmatrix(x) then -- cmat == cmat
    if x.nrow ~= y.nrow or x.ncol ~= y.ncol then return false end
    for i=1,size(x) do
      if abs(geti(x,i).re - geti(y,i).re) > tol_ or
         abs(geti(x,i).im - geti(y,i).im) > tol_ then return false end
    end
  else
    return assert(gmm(y,'__eq_mat'), "invalid 'cmat == ?' operation")(x, y, tol_)
  end
  return true
end

function MI.__eq (x, y)
  if is_nil(x) or is_nil(y) then return false end
  if is_number(x) then                        -- idx == imat
    for i=1,size(y) do
      if geti(y,i) ~= x then return false end
    end
  elseif is_number(y) then                    -- imat == idx
    for i=1,size(x) do
      if geti(x,i) ~= y then return false end
    end
  elseif is_imatrix(y) and is_imatrix(x) then -- imat == imat
    if x.nrow ~= y.nrow or x.ncol ~= y.ncol then return false end
    for i=1,size(x) do
      if geti(x,i) ~= geti(y,i) then return false end
    end
  else
    return assert(gmm(y,'__eq_mat'), "invalid 'imat == ?' operation")(x, y)
  end
  return true
end

MR.__eq_cpx = MR.__eq
MC.__eq_cpx = MC.__eq

-- add (see also kadd)

function MR.__add (x, y, r)
  if is_number(x) then                           -- num + mat => num + vec
    r = chksiz(r,y) or matrix_alloc(y:sizes())
    _C.mad_vec_addn(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- mat + num => vec + num
    r = chksiz(r,x) or matrix_alloc(x:sizes())
    _C.mad_vec_addn(x._dat, y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- mat + cpx => vec + cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_vec_addc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) then                      -- mat + cmat => vec + cvec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_addv(y._dat, x._dat, r._dat, size(r), 1) return r
  elseif is_matrix(y) and is_matrix(x) then      -- mat + mat => vec + vec
    r = chksiz(r,x,y) or matrix_alloc(x:sizes())
    _C.mad_vec_add(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__add_mat'), "invalid 'mat + ?' operation")(x, y, r)
  end
end

function MR.__add_cpx (x, y, r)                  -- cpx + mat => cpx + vec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_vec_addc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

function MC.__add (x, y, r)
  if is_number(x) then                           -- num + cmat => num + cvec
    r = chksiz(r,y) or cmatrix_alloc(y:sizes())
    _C.mad_cvec_addn(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- cmat + num => cvec + num
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_addn(x._dat, y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- cmat + cpx => cvec + cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_addc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_matrix(y) then                       -- cmat + mat => cvec + vec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_addv(x._dat, y._dat, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) and is_cmatrix(x) then    -- cmat + cmat => cvec + cvec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_add(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__add_mat'), "invalid 'cmat + ?' operation")(x, y, r)
  end
end

function MC.__add_cpx (x, y, r)                  -- cpx + cmat => cpx + cvec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_cvec_addc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

function MI.__add (x, y, r)
  if is_number(x) then                           -- idx + imat => idx + ivec
    r = chksiz(r,y) or imatrix_alloc(y:sizes())
    _C.mad_ivec_addn(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- imat + idx => ivec + idx
    r = chksiz(r,x) or imatrix_alloc(x:sizes())
    _C.mad_ivec_addn(x._dat, y, r._dat, size(r), 1) return r
  elseif is_matrix(y) and is_matrix(x) then      -- imat + imat => ivec + ivec
    r = chksiz(r,x,y) or imatrix_alloc(x:sizes())
    _C.mad_ivec_add(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__add_mat'), "invalid 'imat + ?' operation")(x, y, r)
  end
end

-- sub (see also kadd)

function MR.__sub (x, y, r)
  if is_number(x) then                           -- num - mat => num - vec
    r = chksiz(r,y) or matrix_alloc(y:sizes())
    _C.mad_vec_subn(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- mat - num => vec + -num
    r = chksiz(r,x) or matrix_alloc(x:sizes())
    _C.mad_vec_addn(x._dat, -y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- mat - cpx => vec + -cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_vec_addc_r(x._dat, -y.re, -y.im, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) then                      -- mat - cmat => vec - cvec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_subv(y._dat, x._dat, r._dat, size(r), 1) return r
  elseif is_matrix(y) and is_matrix(x) then      -- mat - mat => vec - vec
    r = chksiz(r,x,y) or matrix_alloc(x:sizes())
    _C.mad_vec_sub(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__sub_mat'), "invalid 'mat - ?' operation")(x, y, r)
  end
end

function MR.__sub_cpx (x, y, r)                  -- cpx - mat => cpx - vec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_vec_subc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

function MC.__sub (x, y, r)
  if is_number(x) then                           -- num - cmat => num - cvec
    r = chksiz(r,y) or cmatrix_alloc(y:sizes())
    _C.mad_cvec_subn(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- cmat - num => cvec + -num
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_addn(x._dat, -y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- cmat - cpx => cvec + -cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_addc_r(x._dat, -y.re, -y.im, r._dat, size(r), 1) return r
  elseif is_matrix(y) then                       -- cmat - mat => cvec - vec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_subv(x._dat, y._dat, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) and is_cmatrix(x) then    -- cmat - cmat => cvec - cvec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_sub(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__sub_mat'), "invalid 'cmat - ?' operation")(x, y, r)
  end
end

function MC.__sub_cpx (x, y, r)                  -- cpx - cmat => cpx - cvec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_cvec_subc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

function MI.__sub (x, y, r)
  if is_number(x) then                           -- idx - imat => idx - ivec
    r = chksiz(r,y) or imatrix_alloc(y:sizes())
    _C.mad_ivec_subn(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- imat - idx => ivec + -idx
    r = chksiz(r,x) or imatrix_alloc(x:sizes())
    _C.mad_ivec_addn(x._dat, -y, r._dat, size(r), 1) return r
  elseif is_imatrix(y) and is_imatrix(x) then    -- imat - imat => ivec - ivec
    r = chksiz(r,x,y) or imatrix_alloc(x:sizes())
    _C.mad_ivec_sub(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__sub_mat'), "invalid 'imat - ?' operation")(x, y, r)
  end
end

-- mul

function MR.__mul (x, y, r)
  if is_number(x) then                           -- num * mat => num * vec
    r = chksiz(r,y) or matrix_alloc(y:sizes())
    _C.mad_vec_muln(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- mat * num => vec * num
    r = chksiz(r,x) or matrix_alloc(x:sizes())
    _C.mad_vec_muln(x._dat, y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- mat * cpx => vec * cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_vec_mulc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) then                      -- mat * cmat
    r = chksizm(r,x,y) or cmatrix_alloc(x.nrow, y.ncol)
    _C.mad_mat_mulm(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol) return r
  elseif is_matrix(y) and is_matrix(x) then      -- mat * mat
    r = chksizm(r,x,y) or matrix_alloc(x.nrow, y.ncol)
    _C.mad_mat_mul(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol) return r
  else
    return assert(gmm(y,'__mul_mat'), "invalid 'mat * ?' operation")(x, y, r)
  end
end

function MR.__mul_cpx (x, y, r)                  -- cpx * mat => cpx * vec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_vec_mulc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

function MC.__mul (x, y, r)
  if is_number(x) then                           -- num * cmat => num * cvec
    r = chksiz(r,y) or cmatrix_alloc(y:sizes())
    _C.mad_cvec_muln(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- cmat * num => cvec * num
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_muln(x._dat, y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- cmat * cpx => cvec * cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_mulc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_matrix(y) then                       -- cmat * mat
    r = chksizm(r,x,y) or cmatrix_alloc(x.nrow, y.ncol)
    _C.mad_cmat_mulm(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol) return r
  elseif is_cmatrix(y) and is_cmatrix(x) then    -- cmat * cmat
    r = chksizm(r,x,y) or cmatrix_alloc(x.nrow, y.ncol)
    _C.mad_cmat_mul(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol) return r
  else
    return assert(gmm(y,'__mul_mat'), "invalid 'cmat * ?' operation")(x, y, r)
  end
end

function MC.__mul_cpx (x, y, r)                  -- cpx * cmat => cpx * cvec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_cvec_mulc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

function MI.__mul (x, y, r)
  if is_number(x) then                           -- idx * imat => idx * ivec
    r = chksiz(r,y) or imatrix_alloc(y:sizes())
    _C.mad_ivec_muln(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- imat * idx => ivec * idx
    r = chksiz(r,x) or imatrix_alloc(x:sizes())
    _C.mad_ivec_muln(x._dat, y, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__mul_mat'), "invalid 'imat * ?' operation")(x, y, r)
  end
end

-- element wise mul (.*), also known as Hadamard product.

function MR.__emul (x, y, r)
  if is_number(x) then                           -- num .* mat => num * vec
    r = chksiz(r,y) or matrix_alloc(y:sizes())
    _C.mad_vec_muln(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- mat .* num => vec * num
    r = chksiz(r,x) or matrix_alloc(x:sizes())
    _C.mad_vec_muln(x._dat, y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- mat .* cpx => vec * cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_vec_mulc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) then                      -- mat .* cmat => vec * cvec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_mulv(y._dat, x._dat, r._dat, size(r), 1) return r
  elseif is_matrix(y) and is_matrix(x) then      -- mat .* mat => vec * vec
    r = chksiz(r,x,y) or matrix_alloc(x:sizes())
    _C.mad_vec_mul(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__emul_mat'), "invalid 'mat .* ?' operation")(x, y, r)
  end
end

function MR.__emul_cpx (x, y, r)                 -- cpx .* mat => cpx * vec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_vec_mulc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

function MC.__emul (x, y, r)
  if is_number(x) then                           -- num .* cmat => num * cvec
    r = chksiz(r,y) or cmatrix_alloc(y:sizes())
    _C.mad_cvec_muln(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- cmat .* num => cvec * num
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_muln(x._dat, y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- cmat .* cpx => cvec * cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_mulc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_matrix(y) then                       -- cmat .* mat => cvec * vec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_mulv(x._dat, y._dat, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) and is_cmatrix(x) then    -- cmat .* cmat => cvec * cvec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_mul(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__emul_mat'), "invalid 'cmat .* ?' operation")(x, y, r)
  end
end

function MC.__emul_cpx (x, y, r)                 -- cpx .* cmat => cpx * cvec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_cvec_mulc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

MI.__emul = MI.__mul

-- div

function MR.inv (x, r, rcond_)
  r = chksiz(r,x) or matrix_alloc(x:sizes())
  local rank = _C.mad_mat_invn(x._dat, 1, r._dat, x.nrow, x.ncol, rcond_ or -1)
  return r, rank
end

function MR.__div (x, y, r, rcond_)
  local rank
  if is_number(x) then                           -- num / mat
    r = chksiz(r,y) or matrix_alloc(y:sizes())
    rank = _C.mad_mat_invn(y._dat, x, r._dat, y.nrow, y.ncol, rcond_ or -1)
    return r, rank
  elseif is_number(y) then                       -- mat / num => vec / num
    r = chksiz(r,x) or matrix_alloc(x:sizes())
    _C.mad_vec_muln(x._dat, 1/y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- mat / cpx => vec / cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes()) ; y = 1/y
    _C.mad_vec_mulc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) then                      -- mat / cmat
    r = chksizd(r,x,y) or cmatrix_alloc(x.nrow, y.nrow)
    rank = _C.mad_mat_divm(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol, rcond_ or -1)
    return r, rank
  elseif is_matrix(y) and is_matrix(x) then      -- mat / mat
    r = chksizd(r,x,y) or matrix_alloc(x.nrow, y.nrow)
    rank = _C.mad_mat_div(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol, rcond_ or -1)
    return r, rank
  else
    return assert(gmm(y,'__div_mat'), "invalid 'mat / ?' operation")(x, y, r)
  end
end

function MR.__div_cpx (x, y, r, rcond_)          -- cpx / mat
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  local rank = _C.mad_mat_invc_r(y._dat, x.re, x.im, r._dat, y.nrow, y.ncol, rcond_ or -1)
  return r, rank
end

function MC.inv (x, r, rcond_)
  r = chksiz(r,x) or cmatrix_alloc(x:sizes())
  local rank = _C.mad_cmat_invn(x._dat, 1, r._dat, x.nrow, x.ncol, rcond_ or -1)
  return r, rank
end

function MC.__div (x, y, r, rcond_)
  local rank
  if is_number(x) then                           -- num / cmat
    r = chksiz(r,y) or cmatrix_alloc(y:sizes())
    rank = _C.mad_cmat_invn(y._dat, x, r._dat, y.nrow, y.ncol, rcond_ or -1)
    return r, rank
  elseif is_number(y) then                       -- cmat / num => cvec / num
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_muln(x._dat, 1/y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- cmat / cpx => cvec / cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes()) ; y = 1/y
    _C.mad_cvec_mulc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_matrix(y) then                       -- cmat / mat
    r = chksizd(r,x,y) or cmatrix_alloc(x.nrow, y.nrow)
    rank = _C.mad_cmat_divm(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol, rcond_ or -1)
    return r, rank
  elseif is_cmatrix(y) and is_cmatrix(x) then    -- cmat / cmat
    r = chksizd(r,x,y) or cmatrix_alloc(x.nrow, y.nrow)
    rank = _C.mad_cmat_div(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol, rcond_ or -1)
    return r, rank
  else
    return assert(gmm(y,'__div_mat'), "invalid 'cmat / ?' operation")(x, y, r)
  end
end

function MC.__div_cpx (x, y, r, rcond_)          -- cpx / cmat
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  local rank = _C.mad_cmat_invc_r(y._dat, x.re, x.im, r._dat, y.nrow, y.ncol, rcond_ or -1)
  return r, rank
end

function MI.__div (x, y, r)
  if is_number(y) then                           -- imat / idx => ivec / idx
    r = chksiz(r,x) or imatrix_alloc(x:sizes())
    _C.mad_ivec_divn(x._dat, y, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__div_mat'), "invalid 'imat / ?' operation")(x, y, r)
  end
end

-- element wise div (./), also known as Hadamard division.

function MR.__ediv (x, y, r)
  if is_number(x) then                           -- num ./ mat => num / vec
    r = chksiz(r,y) or matrix_alloc(y:sizes())
    _C.mad_vec_divn(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- mat ./ num => vec / num
    r = chksiz(r,x) or matrix_alloc(x:sizes())
    _C.mad_vec_muln(x._dat, 1/y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- mat ./ cpx => vec / cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes()) ; y = 1/y
    _C.mad_vec_mulc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) then                      -- mat ./ cmat => vec / cvec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_vec_divv(x._dat, y._dat, r._dat, size(r), 1) return r
  elseif is_matrix(y) and is_matrix(x) then      -- mat ./ mat => vec / vec
    r = chksiz(r,x,y) or matrix_alloc(x:sizes())
    _C.mad_vec_div(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__ediv_mat'), "invalid 'mat ./ ?' operation")(x, y, r)
  end
end

function MR.__ediv_cpx (x, y, r)                 -- cpx ./ mat => cpx / vec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_vec_divc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

function MC.__ediv (x, y, r)
  if is_number(x) then                           -- num ./ cmat => num / cvec
    r = chksiz(r,y) or cmatrix_alloc(y:sizes())
    _C.mad_cvec_divn(y._dat, x, r._dat, size(r), 1) return r
  elseif is_number(y) then                       -- cmat ./ num => cvec / num
    r = chksiz(r,x) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_muln(x._dat, 1/y, r._dat, size(r), 1) return r
  elseif is_complex(y) then                      -- cmat ./ cpx => cvec / cpx
    r = chksiz(r,x) or cmatrix_alloc(x:sizes()) ; y = 1/y
    _C.mad_cvec_mulc_r(x._dat, y.re, y.im, r._dat, size(r), 1) return r
  elseif is_matrix(y) then                       -- cmat ./ mat => cvec / vec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_divv(x._dat, y._dat, r._dat, size(r), 1) return r
  elseif is_cmatrix(y) and is_cmatrix(x) then    -- cmat ./ cmat => cvec / cvec
    r = chksiz(r,x,y) or cmatrix_alloc(x:sizes())
    _C.mad_cvec_div(x._dat, y._dat, r._dat, size(r), 1) return r
  else
    return assert(gmm(y,'__ediv_mat'), "invalid 'cmat ./ ?' operation")(x, y, r)
  end
end

function MC.__ediv_cpx (x, y, r)                 -- cpx ./ cmat => cpx / cvec
  r = chksiz(r,y) or cmatrix_alloc(y:sizes())
  _C.mad_cvec_divc_r(y._dat, x.re, x.im, r._dat, size(r), 1) return r
end

MI.__ediv = MI.__div

-- pow (for now)

function MR.__pow (x, n, r)
  assert(is_integer(n), "invalid argument #2 (integer expected)")
      if n == 0 then                        -- mat^0  => eye
    return (r or x:same()):eye()
  elseif n == 1 then                        -- mat^1  => copy
    return x:copy(r)
  elseif n == 2 then                        -- mat^2  => mat * mat
    return x:mul(x,r)
  elseif n == -1 then                       -- mat^-1 => mat:inv()
    return x:inv(r)
  elseif n == -2 then                       -- mat^-2 => mat:inv()^2
    return x:mul(x,r):inv(r)
  end

  local n, t = abs(n), n < 0 and x:inv() or x:copy()
  r = (r or x:same()):eye()

  while true do
    if n%2 == 1 then r = r:mul(t,r) end     -- r = r * t
    n = floor(n/2)
    if n == 0 then break end
    t:mul(t,t)                              -- t = t^2
  end

  return r
end

MC.__pow = MR.__pow -- fully polymorphic

-- kadd (in place)

local kmax = 20
local kr   = ffi.new(       'num_t [?]', kmax)
local kc   = ffi.new(      'cnum_t [?]', kmax)
local krd  = ffi.new('const  num_t*[?]', kmax)
local kcd  = ffi.new('const cnum_t*[?]', kmax)

function MR.kadd (r, a, x)
  assert(is_iterable(a), "invalid argument #1 (iterable expected)")
  assert(is_iterable(x), "invalid argument #2 (iterable expected)")
  local k = #x
  assert(k <= kmax, "too many matrices")
  assert(k == #a, "incompatible number of coefficients")
  assert(is_matrix(x[k]), "incompatible matrix type")
  assert(x[k].nrow == r.nrow and
         x[k].ncol == r.ncol, "incompatible matrix size")
  for i=1,k-1 do
    assert(is_matrix(x[i]), "incompatible matrix type")
    assert(x[i].nrow == x[i+1].nrow and
           x[i].ncol == x[i+1].ncol, "incompatible matrix size")
    kr[i-1], krd[i-1] = a[i], x[i]._dat
  end
  kr[k-1], krd[k-1] = a[k], x[k]._dat
  _C.mad_vec_kadd(k, kr, krd, r._dat, size(r), 1) return r
end

function MC.kadd (r, a, x)
  assert(is_iterable(a), "invalid argument #1 (iterable expected)")
  assert(is_iterable(x), "invalid argument #2 (iterable expected)")
  local k = #x
  assert(k <= kmax, "too many matrices")
  assert(k == #a, "incompatible number of coefficients")
  assert(is_cmatrix(x[k]), "incompatible matrix type")
  assert(x[k].nrow == r.nrow and
         x[k].ncol == r.ncol, "incompatible matrix size")
  for i=1,k-1 do
    assert(is_cmatrix(x[i]), "incompatible matrix type")
    assert(x[i].nrow == x[i+1].nrow and
           x[i].ncol == x[i+1].ncol, "incompatible matrix size")
    kc[i-1], kcd[i-1] = a[i], x[i]._dat
  end
  kc[k-1], kcd[k-1] = a[k], x[k]._dat
  _C.mad_cvec_kadd(k, kc, kcd, r._dat, size(r), 1) return r
end

-- tmul

function MR.tmul (x, y, r)
  if is_cmatrix(y) then                         -- mat' * cmat
    r = chksiztm(r,x,y) or cmatrix_alloc(x.ncol, y.ncol)
    _C.mad_mat_tmulm(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.nrow) return r
  elseif is_matrix(y) and is_matrix(x) then     -- mat' * mat
    r = chksiztm(r,x,y) or matrix_alloc(x.ncol, y.ncol)
    _C.mad_mat_tmul(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.nrow) return r
  else                                          -- mat' * ?
    return assert(gmm(y,'__tmul_mat'), "invalid 'mat^t * ?' operation")(x, y, r)
  end
end

function MC.tmul (x, y, r)
  if is_matrix(y) then                          -- cmat' * mat
    r = chksiztm(r,x,y) or cmatrix_alloc(x.ncol, y.ncol)
    _C.mad_cmat_tmulm(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.nrow) return r
  elseif is_cmatrix(x) and is_cmatrix(y) then   -- cmat' * cmat
    r = chksiztm(r,x,y) or cmatrix_alloc(x.ncol, y.ncol)
    _C.mad_cmat_tmul(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.nrow) return r
  else                                          -- cmat' * ?
    return assert(gmm(y,'__tmul_mat'), "invalid 'cmat^t * ?' operation")(x, y, r)
  end
end

-- mult

function MR.mult (x, y, r)
  if is_cmatrix(y) then                         -- mat * cmat'
    r = chksizmt(r,x,y) or cmatrix_alloc(x.nrow, y.nrow)
    _C.mad_mat_multm(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol) return r
  elseif is_matrix(y) and is_matrix(x) then     -- mat * mat'
    r = chksizmt(r,x,y) or matrix_alloc(x.nrow, y.nrow)
    _C.mad_mat_mult(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol) return r
  else                                          -- mat * ?
    return assert(gmm(y,'__mult_mat'), "invalid 'mat * ?^t' operation")(x, y, r)
  end
end

function MC.mult (x, y, r)
  if is_matrix(y) then                          -- cmat * mat'
    r = chksizmt(r,x,y) or cmatrix_alloc(x.nrow, y.nrow)
    _C.mad_cmat_multm(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol) return r
  elseif is_cmatrix(x) and is_cmatrix(y) then   -- cmat * cmat'
    r = chksizmt(r,x,y) or cmatrix_alloc(x.nrow, y.nrow)
    _C.mad_cmat_mult(x._dat, y._dat, r._dat, r.nrow, r.ncol, x.ncol) return r
  else                                          -- cmat * ?'
    return assert(gmm(y,'__mult_mat'), "invalid 'cmat * ?^t' operation")(x, y, r)
  end
end

-- least squares solvers ------------------------------------------------------o

function MR.solve (a, b, rcond_) -- min | b - Ax | using QR or LQ
  local np, nr, nc = b.ncol, a:sizes()
  local rx = matrix_alloc(nc, np)
  local rnk = _C.mad_mat_solve(a._dat, b._dat, rx._dat, nr, nc, np, rcond_ or eps)
  return rx, rnk  -- x = b:t():div(a:t()):t()
end

function MC.solve (a, b, rcond_)
  local np, nr, nc = b.ncol, a:sizes()
  local rx = cmatrix_alloc(nc, np)
  local rnk = _C.mad_cmat_solve(a._dat, b._dat, rx._dat, nr, nc, np, rcond_ or eps)
  return rx, rnk
end

function MR.nsolve (a, b, tol_, n_) -- min | b - Ax | using MICADO (best kick)
  local nr, nc = a:sizes()
  local rx, rr = matrix_alloc(nc, 1), matrix_alloc(nr, 1) -- solutions, residues
  local nx = _C.mad_mat_nsolve(a._dat, b._dat, rx._dat, nr, nc, n_ or 0, tol_ or eps, rr._dat)
  return rx, nx, rr
end

MC.nsolve = \ error("unsupported complex nsolve")

function MR.ssolve (a, b, rcond_) -- min | b - Ax | using SVD
  local np, nr, nc = b.ncol, a:sizes()
  local rx, rs = matrix_alloc(nc, np), matrix_alloc(min(nr,nc),1)
  local rnk = _C.mad_mat_ssolve(a._dat, b._dat, rx._dat, nr, nc, np, rcond_ or eps, rs._dat)
  return rx, rnk, rs
end

function MC.ssolve (a, b, rcond_)
  local np, nr, nc = b.ncol, a:sizes()
  local rx, rs = cmatrix_alloc(nc, np), matrix_alloc(min(nr,nc),1)
  local rnk = _C.mad_cmat_ssolve(a._dat, b._dat, rx._dat, nr, nc, np, rcond_ or eps, rs._dat)
  return rx, rnk, rs
end

function MR.gsolve (a, b, c, d) -- min | c - Ax | subject to Bx = d using QR or LQ
  local np, nr, nc = b.nrow, a:sizes()
  local rx = matrix_alloc(nc, 1)
  local info = _C.mad_mat_gsolve(a._dat, b._dat, c._dat, d._dat, rx._dat, nr, nc, np, res)
  return rx, res[0], info
end

function MC.gsolve (a, b, c, d)
  local np, nr, nc = b.nrow, a:sizes()
  local rx = cmatrix_alloc(nc, 1)
  local info = _C.mad_cmat_gsolve(a._dat, b._dat, c._dat, d._dat, rx._dat, nr, nc, np, res)
  return rx, res[0], info
end

function MR.gmsolve (a, b, d) -- min_x | y | subject to Ax + By = d using QR or LQ
  local np, nr, nc = b.ncol, a:sizes()
  local rx, ry = matrix_alloc(nc, 1), matrix_alloc(np, 1)
  local info = _C.mad_mat_gmsolve(a._dat, b._dat, d._dat, rx._dat, ry._dat, nr, nc, np)
  return rx, ry, info
end

function MC.gmsolve (a, b, d)
  local np, nr, nc = b.ncol, a:sizes()
  local rx, ry = cmatrix_alloc(nc, 1), cmatrix_alloc(np, 1)
  local info = _C.mad_cmat_gmsolve(a._dat, b._dat, d._dat, rx._dat, ry._dat, nr, nc, np)
  return rx, ry, info
end

-- system pre-conditionning ---------------------------------------------------o

function MR.pcacnd (a, n_, rcond_)
  local nr, nc = a:sizes()
  local rs, rc = matrix_alloc(min(nr,nc),1), imatrix_alloc(1,nc)
  local nc = _C.mad_mat_pcacnd(a._dat, rc._dat, nr, nc, n_ or 0, rcond_ or eps, rs._dat)
  if nc == 0 then return nil, rs end
  _C.mad_imat_reshape(rc, 1, nc)
  return rc, rs
end

function MC.pcacnd (a, n_, rcond_)
  local nr, nc = a:sizes()
  local rs, rc = matrix_alloc(min(nr,nc),1), imatrix_alloc(1,nc)
  local nc = _C.mad_cmat_pcacnd(a._dat, rc._dat, nr, nc, n_ or 0, rcond_ or eps, rs._dat)
  if nc == 0 then return nil, rs end
  _C.mad_imat_reshape(rc, 1, nc)
  return rc, rs
end

function MR.svdcnd (a, n_, rcond_, tol_)
  local nr, nc = a:sizes()
  local rs, rc = matrix_alloc(min(nr,nc),1), imatrix_alloc(1,nc)
  local nc = _C.mad_mat_svdcnd(a._dat, rc, nr, nc, n_ or 5, rcond_ or eps, rs._dat, tol_ or 0.02)
  if nc == 0 then return nil, rs end
  _C.mad_imat_reshape(rc, 1, nc)
  return rc, rs
end

MC.svdcnd = \ error("unsupported complex svdcnd")

-- svd, det, eigenvalue, eigenvector ------------------------------------------o

function MR.svd (x)
  local nr, nc = x:sizes()
  local rs, ru, rv = matrix_alloc(min(nr,nc),1), matrix_alloc(nr,nr), matrix_alloc(nc,nc)
  local info = _C.mad_mat_svd(x._dat, ru._dat, rs._dat, rv._dat, nr, nc)
  return ru, rs, rv, info
end

function MC.svd (x)
  local nr, nc = x:sizes()
  local rs, ru, rv = matrix_alloc(min(nr,nc),1), cmatrix_alloc(nr,nr), cmatrix_alloc(nc,nc)
  local info = _C.mad_cmat_svd(x._dat, ru._dat, rs._dat, rv._dat, nr, nc)
  return ru, rs, rv, info
end

function MR.det (x)
  local nr, nc = x:sizes()
  assert(nr == nc, "matrix must be square")
  if nr == 2 then -- fast stable 2x2 case
    local w = x._dat[1]*x._dat[2]
    local e = w - x._dat[1]*x._dat[2]
    return (x._dat[0]*x._dat[3] - w) + e, 0
  end
  local info = _C.mad_mat_det(x._dat, res, nr)
  return res[0], info
end

function MC.det (x)
  local nr, nc = x:sizes()
  assert(nr == nc, "matrix must be square")
  if nr == 2 then -- fast stable 2x2 case
    local w = x._dat[1]*x._dat[2]
    local e = w - x._dat[1]*x._dat[2]
    return (x._dat[0]*x._dat[3] - w) + e, 0
  end
  local info = _C.mad_cmat_det(x._dat, cres, nr)
  return cres[0], info
end

function MR.eigen (x)
  local nr, nc = x:sizes()
  assert(nr == nc, "matrix must be square")
  local w, vl, vr = cmatrix_alloc(nr, 1), matrix_alloc(nr,nr), matrix_alloc(nr,nr)
  local info = _C.mad_mat_eigen(x._dat, w._dat, vl._dat, vr._dat, nr)
  return w, vl, vr, info
end

function MC.eigen (x)
  local nr, nc = x:sizes()
  assert(nr == nc, "matrix must be square")
  local w, vl, vr = cmatrix_alloc(nr, 1), cmatrix_alloc(nr,nr), cmatrix_alloc(nr,nr)
  local info = _C.mad_cmat_eigen(x._dat, w._dat, vl._dat, vr._dat, nr)
  return w, vl, vr, info
end

-- FFT, convolution, correlation, covariance ----------------------------------o

function MR.fft (x, r_)
  local nr, nc = x:sizes()
  local r = chksiz(r_, x) or cmatrix_alloc(nr,nc)
  if nr == 1 or nc == 1
  then _C.mad_vec_fft(x._dat, r._dat, size(x))  -- 1D FFT
  else _C.mad_mat_fft(x._dat, r._dat, x:sizes()) -- 2D FFT
  end
  return r
end

function MC.fft (x, r_)
  local nr, nc = x:sizes()
  local r = chksiz(r_, x) or cmatrix_alloc(nr,nc)
  if nr == 1 or nc == 1
  then _C.mad_cvec_fft(x._dat, r._dat, size(x))  -- 1D FFT
  else _C.mad_cmat_fft(x._dat, r._dat, x:sizes()) -- 2D FFT
  end
  return r
end

MR.ifft = \ error("invalid argument #1 (cmatrix expected)")

function MC.ifft (x, r_)
  local nr, nc = x:sizes()
  local r = chksiz(r_, x) or cmatrix_alloc(nr,nc)
  if nr == 1 or nc == 1
  then _C.mad_cvec_ifft(x._dat, r._dat, size(x))  -- 1D FFT
  else _C.mad_cmat_ifft(x._dat, r._dat, x:sizes()) -- 2D FFT
  end
  return r
end

function MR.rfft (x, r_)
  local nr, nc, r = x:sizes()
  if nr == 1 or nc == 1 then -- 1D FFT
    nr, nc = floor(nr/2+1), floor(nc/2+1)
    r = r_ or cmatrix_alloc(nr,nc)
    assert(nr == r.nrow and nc == r.ncol, "incompatible matrix sizes")
    _C.mad_vec_rfft(x._dat, r._dat, size(x))
  else                       -- 2D FFT
    nc = floor(nc/2+1)
    r = r_ or cmatrix_alloc(nr,nc)
    assert(nr == r.nrow and nc == r.ncol, "incompatible matrix sizes")
    _C.mad_mat_rfft(x._dat, r._dat, x:sizes())
  end
  return r
end

MC.rfft  = \ error("invalid argument #1 (matrix expected)")
MR.irfft = \ error("invalid argument #1 (cmatrix expected)")

function MC.irfft (x, r)
  assert(is_matrix(r), "invalid argument #2 (matrix expected)")
  local nr, nc = r:sizes()
  if nr == 1 or nc == 1 then -- 1D FFT
    nr, nc = floor(nr/2+1), floor(nc/2+1)
    assert(nr == x.nrow and nc == x.ncol, "incompatible matrix sizes")
    _C.mad_cvec_irfft(x._dat, r._dat, size(r))
  else                       -- 2D FFT
    nc = floor(nc/2+1)
    assert(nr == x.nrow and nc == x.ncol, "incompatible matrix sizes")
    _C.mad_cmat_irfft(x._dat, r._dat, r:sizes())
  end
  return r
end

 -- convolution theorem
function MR.conv (x, y, r_)
  local r = r_ or x:same()
  local xf = x:rfft()
  if x._dat == y._dat
  then return xf:emul(xf      ,xf):irfft(r)
  else return xf:emul(y:rfft(),xf):irfft(r)
  end
end

function MC.conv (x, y, r_)
  local r = r_ or x:same()
  local xf = x:fft()
  if x._dat == y._dat
  then return xf:emul(xf     ,xf):ifft(r)
  else return xf:emul(y:fft(),xf):ifft(r)
  end
end

 -- correlation theorem
function MR.corr (x, y, r_)
  local r = r_ or x:same()
  local xf = x:rfft()
  if x._dat == y._dat
  then return xf:emul(xf      :conj(    ),xf):irfft(r)
  else return xf:emul(y:rfft():conj('in'),xf):irfft(r)
  end
end

function MC.corr (x, y, r_)
  local r = r_ or x:same()
  local xf = x:fft()
  if x._dat == y._dat
  then return xf:emul(xf     :conj(    ),xf):ifft(r)
  else return xf:emul(y:fft():conj('in'),xf):ifft(r)
  end
end

function MR.covar (x, y, d_, r_)
  local xc = x:center(x:same(), d_)
  if x._dat == y._dat
  then return xc:corr(xc                    , r_)
  else return xc:corr(y:center(y:same(), d_), r_)
  end
end

-- NFFT -----------------------------------------------------------------------o

function MR.nfft (x, p_, r_)
  if is_cmatrix(p_) and is_nil(r_) then p_, r_ = nil, p_ end -- right shift
  local r = r_ or x:same(0i)
  assert(is_cmatrix(r), "invalid argument #3 (cmatrix expected)")
  local nr, nc = (p_ and chksiz(x,p_) or x):sizes()
  if nr == 1 or nc == 1
  then _C.mad_vec_nfft(x._dat, p_ and p_._dat, r._dat, nr*nc , size(r)) -- 1D NFFT
  else _C.mad_mat_nfft(x._dat, p_ and p_._dat, r._dat, nr, nc, size(r)) -- 2D NFFT
  end
  return r
end

function MC.nfft (x, p_, r_)
  if is_cmatrix(p_) and is_nil(r_) then p_, r_ = nil, p_ end -- right shift
  local r = r_ or x:same(0i)
  assert(is_cmatrix(r), "invalid argument #3 (cmatrix expected)")
  local nr, nc = (p_ and chksiz(x,p_) or x):sizes()
  if nr == 1 or nc == 1
  then _C.mad_cvec_nfft(x._dat, p_ and p_._dat, r._dat, nr*nc , size(r)) -- 1D NFFT
  else _C.mad_cmat_nfft(x._dat, p_ and p_._dat, r._dat, nr, nc, size(r)) -- 2D NFFT
  end
  return r
end

MR.infft = \ error("invalid argument #1 (cmatrix expected)")

function MC.infft (x, p_, r_)
  if is_cmatrix(p_) and is_nil(r_) then p_, r_ = nil, p_ end -- right shift
  local r = p_ and (chksiz(r_, p_) or p_:same(0i)) or x:same(0i)
  assert(is_cmatrix(r), "invalid argument #3 (cmatrix expected)")
  local nr, nc = r:sizes()
  if nr == 1 or nc == 1
  then _C.mad_cvec_infft(x._dat, p_ and p_._dat, r._dat, nr*nc , size(x)) -- 1D NFFT
  else _C.mad_cmat_infft(x._dat, p_ and p_._dat, r._dat, nr, nc, size(x)) -- 2D NFFT
  end
  return r
end

-- linspace, logspace ---------------------------------------------------------o

local function linspace (start, stop_, size_)
  assert(is_scalar(start) and abs(start) < inf,
         "invalid argument #1 (finite scalar expected)")
  if is_nil(stop_) then start, stop_ = 0, start end
  assert(is_scalar(stop_) and abs(stop_) < inf,
         "invalid argument #2 (finite scalar expected)")
  if is_nil(size_) then size_ = 100 else size_ = math.ceil(size_) end
  assert(is_number(size_) and size_ > 0,
         "invalid argument #3 (positive number expected)")
  local v = (is_complex(start) or is_complex(stop_)) and cvector(size_) or vector(size_)
  local step = size_ > 1 and (stop_-start)/(size_-1) or 0
  for i=0,size_-1 do seti0(v, i, start+step*i) end
  return v
end

local function logspace (start, stop_, size_)
  assert(is_number(start) and start > 0 and start < inf or
         is_complex(start) and abs(start) < inf,
        "invalid argument #1 (positive finite number expected)")
  if is_nil(stop_) then start, stop_ = 1, start end
  assert(is_number(stop_) and stop_ > 0 and stop_ < inf or
         is_complex(stop_) and abs(stop_) < inf,
         "invalid argument #2 (positive finite number expected)")
  if is_nil(size_) then size_ = 100 else size_ = math.ceil(size_) end
  assert(is_number(size_) and size_ > 0,
         "invalid argument #3 (positive number expected)")
  local v = (is_complex(start) or is_complex(stop_)) and cvector(size_) or vector(size_)
  local logstart, logstop = log(start), log(stop_)
  local logstep = size_ > 1 and (logstop-logstart)/(size_-1) or 0
  for i=0,size_-1 do seti0(v, i, exp(logstart+logstep*i)) end
  return v
end

-- concatenation, conversion --------------------------------------------------o

MR.__len = size
MI.__len = size

function MR.__concat (x, y, d_, r_)
  assert(isa_matrix(x) or is_imatrix(x), "invalid argument #1 (matrix expected)")
  assert(isa_matrix(y) or is_imatrix(y), "invalid argument #2 (matrix expected)")
  if (isa_matrix(d_) or is_imatrix(d_)) and is_nil(r_) then r_, d_ = d_, nil end
  local nrx, ncx = x:sizes()
  local nry, ncy = y:sizes()
  local d = d_ or 'row'
  if d == 'row' then                   -- concat rows (horizontal)
    local nr, nc = nrx, ncx + ncy
    assert(nrx == nry and (is_nil(r_) or nr == r_.nrow and nc == r_.ncol),
           "incompatible matrix sizes")
    local r = r_ or x:same(nr,nc,x[1]+y[1])
    for i=0,nr-1 do
      for j=0,ncx-1 do set0(r,i,j    , get0(x,i,j)) end
      for j=0,ncy-1 do set0(r,i,j+ncx, get0(y,i,j)) end
    end
    return r
  elseif d == 'col' or d == 'vec' then -- concat columns (vectical)
    local nr, nc = nrx + nry, ncx
    assert(ncx == ncy and (is_nil(r_) or nr == r_.nrow and nc == r_.ncol),
           "incompatible matrix sizes")
    local r = r_ or x:same(nr,nc,x[1]+y[1])
    local nx, ny = nrx * nc, nry * nc
    for i=0,nx-1 do seti0(r,i   , geti0(x,i)) end
    for i=0,ny-1 do seti0(r,i+nx, geti0(y,i)) end
    if d == 'vec' then r:reshape(nr*nc) end
    return r
  end
  error("invalid argument #3 (string 'vec', 'row' or 'col' expected)")
end

MC.__concat = MC.__concat
MI.__concat = MR.__concat

function MR.tostring (x, sep_, lsep_)
  local nr, nc = x:sizes()
  local r, c = table.new(nr,0), table.new(nc,0)
  for i=0,nr-1 do
    for j=0,nc-1 do
      c[j+1] = tostring(get0(x,i,j))
    end
    r[i+1] = table.concat(c, sep_ or ' ')
  end
  return table.concat(r, lsep_ or '\n')
end

MI.tostring = MR.tostring

function MR.totable (x, v_, r_)
  if is_nil(r_) and is_table(v_) then
    r_, v_ = v_, nil -- right shift
  end
  assert(is_nil(v_) or is_boolean(v_), "invalid argument #2 (boolean expected)")
  assert(is_nil(r_) or is_table  (r_), "invalid argument #3 (table expected)")
  local nr, nc, r = x:sizes()
  if nc == 1 or v_ then
    r = r_ or table.new(nr*nc,0)
    for i=0,nr*nc-1 do r[i+1] = geti0(x,i) end
  else
    r = r_ or table.new(nr,0)
    for i=0,nr-1 do
      local c = r[i+1] or table.new(nc,0)
      assert(is_table(c), "invalid argument #3 (table of tables expected)")
      for j=0,nc-1 do c[j+1] = get0(x,i,j) end
      r[i+1] = c
    end
  end
  return r
end

MI.totable = MR.totable

-- I/O -----------------------------------------------------------------------o

function MR.write (x, filnam_, name_, eps_, line_, nl_)
  if is_nil(nl_) and is_string(eps_) then
    eps_, line_, nl_ = nil, eps_, line_ -- right shift
  end
  if is_number(name_) and is_nil(eps_) then
    name_, eps_ = nil, name_            -- right shift
  end

  local eps = eps_ or 0
  local lret = nl_ or '\n'
  local nsep = line_ == 'line' and ' '  or '  '
  local lsep = line_ == 'line' and ' ;' or lret
  local file = assert(openfile(filnam_, 'w', '.dat'),
                      "unable to open Matrix file in write mode")
  local nr, nc, v = x:sizes()
  local tostr, char, zero

      if is_cmatrix(x) then tostr, char, zero = tostring, 'i', 0i
  elseif is_imatrix(x) then tostr, char, zero = int2str , 'n', 0
  else                      tostr, char, zero = num2str , '' , 0
  end

  if name_ or not line_ then
    file:write(name_ or '', '[',nr,'x',nc,char,'] =')
  end

  file:write(lsep == '\n' and lsep or '')
  for i=0,nr-1 do
    file:write(nsep)
    for j=0,nc-1 do
      v = get0(x,i,j)
      file:write(tostr(abs(v) >= eps and v or zero), j<nc-1 and nsep or '')
    end
    file:write(i<nr-1 and lsep or lret)
  end

  if is_string(filnam_) then file:close() else file:flush() end
  return x
end

MI.write = MR.write

function MR.print (x, name_, eps_, line_, nl_)
  return x:write(nil, name_, eps_, line_, nl_)
end

MI.print = MR.print

function MR.read (_, filnam_)
  local file = assert(openfile(filnam_, 'r', '.dat'),
                      "unable to open Matix file in read mode")
  local def = file:read()
  if not def then return end

  local _, _, nrs, ncs, cpx = string.find(def, "^[^[]*%[(%d+)x(%d+)(i?)%]%s*=")
  local nr, nc = tonumber(nrs), tonumber(ncs)
  local i, x, v, to, row, ncol = 0, nil

      if cpx == 'i' or cpx == 'I' then x, toval = cmatrix(nr, nc), tocomplex
  elseif cpx == 'n' or cpx == 'N' then x, toval = imatrix(nr, nc), tonumber
  else                                 x, toval =  matrix(nr, nc), tonumber
  end

  -- TODO: read 'line' mode.
  for line in file:lines() do
    if i == nr then break end
    i = i+1
    row, ncol = strsplitall(line, " \t", nil, row)
    assertf(ncol == nc,
            "invalid format row %d (%d columns expected, got %d)", i, nc, ncol)

    for j=1,nc do
      v = toval(row[j])
      if is_nil(v) then
        errorf("invalid input row %d column %d (scalar expected, got '%s')",
               i, j, row[j])
      end
      x:set(i,j, v)
    end
  end
  assertf(i == nr, "invalid format (%d rows expected, got %d)", nr, i)

  if is_string(filnam_) then file:close() end
  return x
end

MI.read = MR.read

-- metamethods ----------------------------------------------------------------o

MR.unm = \x,r_ -> MR.__unm(x,nil,r_)

MI.unm = MR.unm

MR.  add, MR.  sub, MR.  mul, MR.  div, MR.  mod, MR.  pow =
MR.__add, MR.__sub, MR.__mul, MR.__div, MR.__mod, MR.__pow

MC.  add, MC.  sub, MC.  mul, MC.  div, MC.  mod, MC.  pow =
MC.__add, MC.__sub, MC.__mul, MC.__div, MC.__mod, MC.__pow

MI.  add, MI.  sub, MI.  mul, MI.  div, MI.  mod, MI.  pow =
MI.__add, MI.__sub, MI.__mul, MI.__div, MI.__mod, MI.__pow

MR.  eq, MR.  same, MR.  copy, MR.  concat =
MR.__eq, MR.__same, MR.__copy, MR.__concat

MC.  eq, MC.  same, MC.  copy, MC.  concat =
MC.__eq, MC.__same, MC.__copy, MC.__concat

MI.  eq, MI.  same, MI.  copy, MI.  concat =
MI.__eq, MI.__same, MI.__copy, MI.__concat

MR.  emul, MR.  ediv, MR.  emod, MR.  epow =
MR.__emul, MR.__ediv, MR.__emod, MR.__epow

MC.  emul, MC.  ediv, MC.  emod, MC.  epow =
MC.__emul, MC.__ediv, MC.__emod, MC.__epow

MI.  emul, MI.  ediv, MI.  emod, MI.  epow =
MI.__emul, MI.__ediv, MI.__emod, MI.__epow

local function iter (x, i)
  if i < size(x) then return i+1, geti0(x, i) end
end

!MR.__call   = MR.get -- dangerous to make matrix callable, see fold

MR.__ipairs = \s -> (iter, s, 0)
MC.__ipairs = MR.__ipairs
MI.__ipairs = MR.__ipairs

function MR.__index (s, i)
  if type(i) == 'number'
  then return geti_s(s, i)
  else return MR[i]
  end
end

function MC.__index (s, i)
  if type(i) == 'number'
  then return geti_s(s, i)
  else return MC[i]
  end
end

function MI.__index (s, i)
  if type(i) == 'number'
  then return geti_s(s, i)
  else return MI[i]
  end
end

function MR.__newindex (s, i, x)
  if type(i) == 'number'
  then seti_s(s, i, x)
  else error("invalid matrix member '".. tostring(i) .."'")
  end
end

function MC.__newindex (s, i, x)
  if type(i) == 'number'
  then seti_s(s, i, x)
  else error("invalid cmatrix member '".. tostring(i) .."'")
  end
end

function MI.__newindex (s, i, x)
  if type(i) == 'number'
  then seti_s(s, i, x)
  else error("invalid imatrix member '".. tostring(i) .."'")
  end
end

-- MR -> MC -------------------------------------------------------------------o

for k,v in pairs(MR) do
  if is_nil(MC[k]) then MC[k] = v end
end

-- only MR

local MROT = require 'madl_matrot' -- rotation matrices (in place)

for k,v in pairs(MROT) do
  assert(is_nil(MR[k]), "duplicated matrix method detected (unexpected)")
  MR[k] = v
end

-- env ------------------------------------------------------------------------o

MAD.typeid.is_vector  = is_vector
MAD.typeid.is_cvector = is_cvector
MAD.typeid.is_ivector = is_ivector
MAD.typeid.isa_vector = isa_vector
MAD.typeid.isy_vector = isy_vector

MAD.typeid.is_matrix  = is_matrix
MAD.typeid.is_cmatrix = is_cmatrix
MAD.typeid.is_imatrix = is_imatrix
MAD.typeid.isa_matrix = isa_matrix
MAD.typeid.isy_matrix = isy_matrix

-- metatables -----------------------------------------------------------------o

MR.__metatable = MR
MC.__metatable = MC
MI.__metatable = MI

ffi.metatype( matrix_ctor , MR)
ffi.metatype(cmatrix_ctor , MC)
ffi.metatype(imatrix_ctor , MI)

-- end ------------------------------------------------------------------------o
return {
   vector  =  vector,
  cvector  = cvector,
  ivector  = ivector,

   matrix  =  matrix,
  cmatrix  = cmatrix,
  imatrix  = imatrix,

  linspace = linspace,
  logspace = logspace,
}
