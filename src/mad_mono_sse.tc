#ifndef MAD_MONO_SSE_TC
#define MAD_MONO_SSE_TC

/*
 o----------------------------------------------------------------------------o
 |
 | SSE2 optimization for monimials
 |
 | Methodical Accelerator Design - Copyright CERN 2015
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o----------------------------------------------------------------------------o
 */

#include "mad_sse.h"

void
mad_mono_add (int n, const ord_t a[n], const ord_t b[n], ord_t r[n])
{
  assert(a && b && r);
  __m128i ra, rb, rr, rm;
  int i=0, nn=MAD_SSE_CRND(n), nm=MAD_SSE_CMOD(n);

  for (; i < nn; i+=MAD_SSE_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_adds_epi8(ra,rb);
    _mm_storeu_si128((__m128i*)&r[i],rr);
  }

  if (nm) {
    rm = _mm_load_si128 ((__m128i*)mad_sse_msk2[nm]);
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_adds_epi8(ra,rb);
    _mm_maskmoveu_si128(rr, rm, (char*)&r[i]);
  }
}

void
mad_mono_sub (int n, const ord_t a[n], const ord_t b[n], ord_t r[n])
{
  assert(a && b && r);
  __m128i ra, rb, rr, rm;
  int i=0, nn=MAD_SSE_CRND(n), nm=MAD_SSE_CMOD(n);

  for (; i < nn; i+=MAD_SSE_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_subs_epi8(ra,rb);
    _mm_storeu_si128((__m128i*)&r[i],rr);
  }

  if (nm) {
    rm = _mm_load_si128 ((__m128i*)mad_sse_msk2[nm]);
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_subs_epi8(ra,rb);
    _mm_maskmoveu_si128(rr, rm, (char*)&r[i]);
  }
}

int
mad_mono_leq (int n, const ord_t a[n], const ord_t b[n])
{
  assert(a && b);
  __m128i ra, rb, rr, rm;
  int i=0, nn=MAD_SSE_CRND(n), nm=MAD_SSE_CMOD(n);

  for (; i < nn; i+=MAD_SSE_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr)) return 0;
  }

  if (nm) {
    rm = _mm_load_si128((__m128i*)mad_sse_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[i]));
    rb = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&b[i]));
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr)) return 0;
  }

  return 1;
}

int
mad_mono_ord (int n, const ord_t a[n])
{
  assert(a);
  __m128i ra, rs, rm, zero = _mm_setzero_si128();
  int i=0, s=0, nn=MAD_SSE_CRND(n), nm=MAD_SSE_CMOD(n);

  for (; i < nn; i+=MAD_SSE_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rs = _mm_sad_epu8(ra, zero);
    s += _mm_cvtsi128_si32(_mm_srli_si128(rs,MAD_SSE_CSIZ/2));
    s += _mm_cvtsi128_si32(rs);
  }

  if (nm) {
    rm = _mm_load_si128((__m128i*)mad_sse_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[i]));
    rs = _mm_sad_epu8(ra, zero);
    s += _mm_cvtsi128_si32(_mm_srli_si128(rs,MAD_SSE_CSIZ/2));
    s += _mm_cvtsi128_si32(rs);
  }
  
  return s;
}

// ---------------------------------------------------------------------------o

#endif // MAD_MONO_SSE_TC

