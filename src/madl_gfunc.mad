--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic functional module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a set of generic functions for functional programming.

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.gfunc = [=[
NAME
  gfunc -- provide generic functions for functional programming

SYNOPSIS
  functor, is_functor,
  ident, first, second, swap, repeater, compose, compose_bottom,
  foreach, map, map2, map3, foldl, foldr, filter.

DESCRIPTION
  The gfunc module provides useful utility functions:
  - ident is the identity function.
  - first, second and swap return arguments #1, #2 and #2 #1 respectively
    (i.e. #1 #2 swapped).
  - gen TODO
  - rep returns a sequence holding the same element n-times (or inf).
  - compose composes two callable objects.
  - compose_bottom allows to compose (right to left) callable objects using ^.
  - TODO

RETURN VALUES
  These utility functions.

ERRORS
  Functors constructor trigs an error if the argument #1 is not a function.

SEE ALSO
  Object.
]=]

-- locals ---------------------------------------------------------------------o

local tostring = tostring

local is_nil, is_function, is_table in MAD.typeid
local is_callable                   in MAD.concept

-- implementation -------------------------------------------------------------o

local gfunc = {

  ident   = \...     -> ...,
  forget  = \        -> (),
  first   = \a       -> (a),
  second  = \a,b     -> (b),
  swap    = \a,b     -> (b,a),
  swapv   = \a,b,... -> (b,a,...),

}

-- functors

-- hidden keys
local _fun, _fun2, _arg, _arg2, _nab, _ini, _idx = {}, {}, {}, {}, {}, {}, {}
-- forward declarations
local fct_mt, fct_mtc, fct_mtb, fct_mb1, fct_mtb2, fct_mtb12

function gfunc.functor (f)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  return setmetatable({[_fun]=f}, fct_mt)
end

function gfunc.compose (f, g)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  assert(is_callable(g), "invalid argument #2 (callable expected)")
  return setmetatable({[_fun]=f, [_fun2]=g}, fct_mtc)
end

function gfunc.bind (f, ...)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  local n = select('#',...)
  return setmetatable({[_fun]=f, [_arg]={...}, [_ini]=table.new(n,0),
                       [_nab]=n}, fct_mtb)
end
function gfunc.bind1st (f, a)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  return setmetatable({[_fun]=f, [_arg]=a}, fct_mtb1)
end

function gfunc.bind2nd (f, a)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  return setmetatable({[_fun]=f, [_arg]=a}, fct_mtb2)
end

function gfunc.bind2st (f, a, b)
  assert(is_callable(f), "invalid argument #1 (callable expected)")
  return setmetatable({[_fun]=f, [_arg]=a, [_arg2]=b}, fct_mtb12)
end

function gfunc.is_functor (a)
  return is_table(a) and not is_nil(rawget(a,_fun))
end

function gfunc.is_placeholder (a)
  return is_table(a) and not is_nil(rawget(a,_idx))
end

local str = \s -> string.format("<functor> %p", s)
local err = \  -> error("forbidden access to functor", 2)

fct_mt = {
  __pow       = gfunc.compose,
  __call      = \s,... -> rawget(s,_fun)(...),
  __index     = \s,k -> s(k),
  __tostring  = str,
  __len = err, __newindex = err, __ipairs = err, __pairs = err,
}

fct_mtc = {
  __pow       = gfunc.compose,
  __call      = \s,... -> rawget(s,_fun)(rawget(s,_fun2)(...)),
  __index     = \s,k -> s(k),
  __tostring  = str,
  __len = err, __newindex = err, __ipairs = err, __pairs = err,
}

fct_mtb1 = {
  __pow       = gfunc.compose,
  __call      = \s,... -> rawget(s,_fun)(rawget(s,_arg), ...),
  __index     = \s,k -> s(k),
  __tostring  = str,
  __len = err, __newindex = err, __ipairs = err, __pairs = err,
}

fct_mtb2 = {
  __pow       = gfunc.compose,
  __call      = \s,a,... -> rawget(s,_fun)(a, rawget(s,_arg), ...),
  __index     = \s,k -> s(k),
  __tostring  = str,
  __len = err, __newindex = err, __ipairs = err, __pairs = err,
}

fct_mtb12 = {
  __pow       = gfunc.compose,
  __call      = \s,... -> rawget(s,_fun)(rawget(s,_arg), rawget(s,_arg2), ...),
  __index     = \s,k -> s(k),
  __tostring  = str,
  __len = err, __newindex = err, __ipairs = err, __pairs = err,
}

gfunc._1 = {[_idx]=1}
gfunc._2 = {[_idx]=2}
gfunc._3 = {[_idx]=3}
gfunc._4 = {[_idx]=4}
gfunc._5 = {[_idx]=5}
gfunc._6 = {[_idx]=6}
gfunc._7 = {[_idx]=7}
gfunc._8 = {[_idx]=8}
gfunc._9 = {[_idx]=9}

local is_placeholder in gfunc

local function bindcall(s, ...) -- slow (faster solution?)
  local nab, argb = rawget(s,_nab), rawget(s,_arg)
  local arg, argc = rawget(s,_ini), {...}
  for i=1,nab do
    if is_placeholder(argb[i]) then
      arg[i] = argc[argb[i][_idx]]
    else
      arg[i] = argb[i]
    end
  end
  return rawget(s,_fun)(unpack(arg, 1, nab))
end

fct_mtb = {
  __pow       = gfunc.compose,
  __call      = bindcall,
  __index     = \s,k -> s(k),
  __tostring  = str,
  __len = err, __newindex = err, __ipairs = err, __pairs = err,
}

gfunc.bottom = gfunc.functor(gfunc.ident)
gfunc._      = gfunc.bottom

__help['gfunc.functor'] = [=[
NAME
  functor           -- encapsulate a callable into a functor
  compose           -- compose two callables into a functor
  bind              -- bind a callable non placeholder arguments into a functor
  bind1st           -- bind a callable first argument into a functor
  bind2nd           -- bind a callable second argument into a functor
  bind2st           -- bind a callable two first arguments into a functor
  bottom or _       -- functor that trigs chain of composition
  is_functor        -- check if the argument is a functor
  is_placeholder    -- check if the argument is a placeholder
  _1,_2,...,_9      -- placeholders

SYNOPSIS
  functor(fun)
  compose(fun1, fun2)
  bind(fun, [arg|_N]+)
  bind1st(fun, arg)
  bind2nd(fun, arg)
  bind2st(fun, arg1, arg2)
  is_functor(val)
  is_placeholder(val)

DESCRIPTION
  The functor function is a constructor that encapsulates true functions into
  functors (i.e. some special readonly objects that behaves like functions). It
  is used by the object model (i.e. set_function) to avoid the default
  function-as-value semantic. The is_functor function checks if a value is a
  functor.

RETURN VALUES
  The functor function returns the functor object that encapsulates the function
  func. The is_functor function returns true if val is a functor, false
  otherwise.

ERRORS
  The functor function trigs an error if argument #1 is not a valid function.

EXAMPLES
  local obj = Object {}
    : set_variable { hello := print"hello" }
    : set_function { world := print"world" }
  print( is_functor(obj.hello) )               -- false (print "hello" too)
  print( is_functor(obj.world) )               -- true  (no extra print)
  a = obj.hello                                -- print "hello"
  obj.world()                                  -- print "world"
  obj.hello = functor \ print"hello"           -- set variable with a functor
  print( is_functor(obj.hello) )               -- true  (no extra print)
  obj.hello()                                  -- print "hello"

SEE ALSO
  Object.
]=]
__help['gfunc.compose']         = __help['gfunc.functor']
__help['gfunc.bind']            = __help['gfunc.functor']
__help['gfunc.bind1st']         = __help['gfunc.functor']
__help['gfunc.bind2nd']         = __help['gfunc.functor']
__help['gfunc.bind2st']         = __help['gfunc.functor']
__help['gfunc.bottom']          = __help['gfunc.functor']
__help['gfunc.is_functor']      = __help['gfunc.functor']
__help['gfunc.is_placeholder']  = __help['gfunc.functor']
__help['typeid.is_functor']     = __help['gfunc.functor']
__help['typeid.is_placeholder'] = __help['gfunc.functor']
__help['gfunc._']               = __help['gfunc.functor']
__help['gfunc._1']              = __help['gfunc.functor']
__help['gfunc._2']              = __help['gfunc.functor']
__help['gfunc._3']              = __help['gfunc.functor']
__help['gfunc._4']              = __help['gfunc.functor']
__help['gfunc._5']              = __help['gfunc.functor']
__help['gfunc._6']              = __help['gfunc.functor']
__help['gfunc._7']              = __help['gfunc.functor']
__help['gfunc._8']              = __help['gfunc.functor']
__help['gfunc._9']              = __help['gfunc.functor']

-- env ------------------------------------------------------------------------o

MAD.typeid.is_functor     = gfunc.is_functor
MAD.typeid.is_placeholder = gfunc.is_placeholder

-- end ------------------------------------------------------------------------o
return {
  gfunc  = gfunc,
  __help = __help,
}

