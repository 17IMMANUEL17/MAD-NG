--[=[
 o-----------------------------------------------------------------------------o
 |
 | MAD environement (sandbox)
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Load in order all the modules of the MAD application and flatten them into
    the MAD environment for direct 1-level access using local 'in' table syntax.

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  MAD -- Methodical Accelerator Design environment

SYNOPSIS
  local component_list in MAD

DESCRIPTION
  The MAD environement provides direct 1-level access to all embedded modules
  of the MAD application. This module also provides online help for modules and
  other components, and it allows to export/import modules, objects, functions
  etc. from/to the MAD environment. This is the recommended way to
  extract/extend the MAD environment with components not embedded in the
  application.

  The MAD environment is automatically loaded in the global environment (i.e.
  _G) when the MAD application is started, unless the -M option is used. Hence,
  all components of MAD can be accessed using table access on the MAD
  environment or retieved in local variables (recommended) using <local in
  table> syntax extension as in the example below.

RETURN VALUE
  A table containing all MAD components.

ERRORS
  None.

EXAMPLES
  local Sequence, Drift, Multipole in MAD    -- local in table syntax
  local quad = MAD.Quadrupole                -- local assignment

  To clear the global environment from MAD, set it to nil:
  MAD = nil                           -- release global reference
  local mad = require 'MAD'           -- retain  local  reference
  local Drift in mad                  -- retrieve Drift from the local reference

SEE ALSO
  None.
]=]

-- locals ---------------------------------------------------------------------o

local modules = {
  'utils',
  'object',
--  'gmath',
--  'xrange',

-- 'cmad',
-- 'complex',
-- 'matrix',
--
-- 'mono',
-- 'tpsa',
-- 'ctpsa',
--
-- 'beam',
-- 'element',
-- 'line',
-- 'sequence',
-- 'table',
--
-- 'mflow',
-- 'survey',
-- 'track',
}

local is_nil, is_boolean, is_string, is_table, is_rawtable,
      is_iterable, is_indexable in require 'madl_utils'

-- implementation -------------------------------------------------------------o

M.__help.import = [=[
NAME
  import -- import modules, tables, functions, etc. to MAD environment

SYNOPSIS
  import('module' [, override])
  import(rawtable [, 'name' [, override]])
  import(component, 'name' [, override])

DESCRIPTION
  The import function imports modules, tables, functions, objects, etc. into the
  MAD environment. If the argument #1 is a string, it will be treated as the
  name of a module and replaced by the value returned by require before further
  processing. If the argument #1 is a raw table (eventually after the require)
  and argument #2 is not a string, each key-value pairs of this table will be
  added individually to the MAD environment (i.e. flatten). If the argument #2
  is a string (key), the argument #1 (value) will be added as a key-value pair
  to the MAD environment, even if argument #1 is a raw table.

RETURN VALUE
  None.

ERRORS
  The import function trigs an error in the following conditions:
    - If the module to load is not found,
    - If the component is not a raw table and the name is missing,
    - If a key already exists in the MAD environment before insertion and
      overriding is not allowed by argument #2 or #3 of the forms above.

EXAMPLES
  local import in MAD
  import('module')               -- import module (load and flatten)
  import('module', true)         -- import module but allow override
  import(func, 'fname')          -- import named function
  import(func, 'fname', true)    -- import function but allow override
  import({...})                  -- import anonymous raw table (flatten)
  import({...},'constants')      -- import named raw table (don't flatten)
  import({...}, true)            -- import raw table but allow override

SEE ALSO
  MAD.export.
]=]

M.import = function (a, b, override)
  if is_boolean(b) then
    override, b = b -- shift args right
  end
  if is_string(a) then
    b, a = a, require('madl_'..a) or require(a); -- shift args right
    assert(a ~= nil, "module not found: "..b)
    if is_rawtable(a) then b = nil end -- module exports anonymous rawtable
  end

  -- collect and check
  local t = { obj = {}, hlp = {} } -- make a local copy first in case of error
  if is_rawtable(a) and not is_string(b) then -- flatten anonymous raw table
    for k,v in pairs(a) do
      if k ~= '__help' then
        assert(M[k] == nil or override, "cannot override definition for "..k)
        t.obj[k] = v
        if is_indexable(v) and v.__help and v.__help.self then
          t.hlp[k] = v.__help.self
        end
      end
    end
  else
    assert(is_string(b), "invalid argument #2 (string expected)")
    if b ~= '__help' then
      assert(M[b] == nil or override, "cannot override definition for "..b)
      t.obj[b] = a
      if is_indexable(a) and a.__help and a.__help.self then
        t.hlp[b] = a.__help.self
      end
    end
  end

  -- finalize the transaction
  for k,v in pairs(t.obj) do M[k] = v end
  for k,v in pairs(t.hlp) do M.__help[k] = v end
end

M.__help.export = [=[
NAME
  export -- export modules, tables, functions, etc. from MAD environment

SYNOPSIS
  export(['pattern' [, context [, override]]])

DESCRIPTION
  The export function exports tables, functions, objects, etc. from the MAD
  environment to the specified context or global context if none is specified.
  The argument #1 provides a matching pattern to select the components to export
  (only string keys can be exported). The argument #2 specifies the destination
  context or _G if none is specified.

RETURN VALUE
  The destination context.

ERRORS
  The export function trigs an error in the following conditions:
    - If the pattern argument is not a string,
    - If the destination context is not indexable,
    - If a key already exists in the destination context before insertion and
      overriding is not allowed by argument #3 of the form above.

EXAMPLES
  local export in MAD
  export()                       -- export all MAD components to _G
  export('.*')                   -- export all MAD components to _G
  export('.*',_G)                -- export all MAD components to _G
  export('help')                 -- export help function to _G
  export('^is_.*$')              -- export all is_* functions to _G
  ctx = export('^is_.*$',{})     -- export all is_* functions to table

SEE ALSO
  MAD.import.
]=]

M.export = function (pat_, ctx_, override)
  local pat = pat_ or '.*'
  local ctx = ctx_ or _G
  assert(is_string(pat), "invalid argument #1 (string expected)")
  assert(is_indexable(ctx), "invalid argument #2 (indexable expected)")
  for k,v in pairs(M) do
    if is_string(k) and string.find(k, pat) then
      assert(ctx[k] == nil or override, "cannot override definition for "..k)
      ctx[k] = v
    end
  end
  return ctx
end

M.__help.help = [=[
NAME
  help -- display help for modules and functions

SYNOPSIS
  help('topic')

DESCRIPTION
  The help function looks for embedded helps for modules and functions and tries
  to build a list of 'Related topics' automatically.

  If the help function is exported from the MAD environment, it can be used
  directly, as follow:
    MAD.export 'help'
    help 'topic'

RETURN VALUE
  None.

ERROR
  None.

EXAMPLES
  local help in MAD
  help 'help'   -- help on help
  help 'Object' -- help on root object 'Object'
  help 'gmath'  -- help on gmath module

SEE ALSO
  MAD.export.
]=]

M.help = function (a)
  assert(is_string(a), "invalid argument #1 (string expected)")
  local dot = string.find(a, '.', 1, true)
  local mod = dot and string.sub(a, 1, dot-1) or a
  local fun = dot and string.sub(a, dot+1) or 'self'
  local ctx = package.loaded[mod] or package.loaded['madl_'..mod] or M[mod]
  local ref

  -- find help context
  if is_indexable(ctx) and ctx.__help and ctx.__help[fun] then
    ref = ctx
  elseif is_iterable(ctx) then
    for k,v in pairs(ctx) do
      if is_indexable(v) and v.__help and v.__help[fun] then
        ref = v ; break
      end
    end
  end
  if not ref then
    io.write("  No help found for '"..a.."'.\n")
    return
  end
  io.write(ref.__help[fun]);

  -- find related (sub) topics
  if is_indexable(ref[fun]) and ref[fun].__help then
    ref = ref[fun]
  end
  local sub = {}
  for k,_ in pairs(ref.__help) do
    if k ~= 'self' then sub[#sub+1] = k end
  end
  table.sort(sub)
  local len = 2 -- tab
  for i,v in ipairs(sub) do
    len = len + #v + 2 -- sep
    if len > 80 then sub[i] = '\n  '..v ; len = #v + 2 end
  end
  local str = table.concat(sub, ', ')
  if str ~= '' then
    io.write("\nRelated topics:\n  ", str, '.\n')
  end
end

-- environment ----------------------------------------------------------------o

-- load MAD modules
for _,v in ipairs(modules) do
  M.import(v)
end

-- protect MAD environment (foolproof protection, no more)
local mad = setmetatable({},{__index=M})

-- set global
MAD = mad

-- end ------------------------------------------------------------------------o
return mad
