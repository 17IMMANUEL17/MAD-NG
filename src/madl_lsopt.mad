--[=[
 o-----------------------------------------------------------------------------o
 |
 | Least Squares Optimizer module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'
local _C in MAD

local abs in math

ffi.cdef [[
enum {
 /* extra MAD algorithms */
  NLOPT_LN_LMDIF = NLOPT_NUM_ALGORITHMS, /* start where NLOPT stops */
  NLOPT_LD_LMDIF,

  NLOPT_LN_JACOBIAN,
  NLOPT_LD_JACOBIAN,

  NLOPT_NUM_ALGOS, /* not an algorithm, just the number of them */
}
]]

-- LSOPT lib ------------------------------------------------------------------o

local function lsoptrun (env)
  local var = env.__var
  local arg

  error("NYI")

!  TODO
!  arg[0].algo    = var.method.id
!
!  arg[0].fun     = fun_cb
!  arg[0].fval    = var.fval
!  arg[0].fmin    = var.fmin
!  arg[0].ftol    = var.ftol
!  arg[0].frtol   = var.frtol
!
!  arg[0].n       = var.n
!  arg[0].x       = x.data
!  arg[0].xstp    = var.xstp.data
!  arg[0].xmin    = var.xmin.data
!  arg[0].xmax    = var.xmax.data
!  arg[0].xwgt    = var.xwgt.data
!  arg[0].xtol    = var.xtol.data
!  arg[0].xrtol   = var.xrtol
!
!  arg[0].p       = var.p
!  arg[0].efun    = efun_cb
!  arg[0].etol    = var.p>0 and var.etol.data or nil
!  arg[0].edat    = nil
!
!  arg[0].q       = var.q
!  arg[0].lfun    = lfun_cb
!  arg[0].ltol    = var.q>0 and var.ltol.data or nil
!  arg[0].ldat    = nil
!
!  arg[0].maxcall = var.maxcall
!  arg[0].maxtime = var.maxtime
!
!  arg[0].debug   = env.debug
!  arg[0].status  = var.status

  -- optimize (protected call to C API)
  local status, errmsg = pcall(fnil, arg)

  return status, errmsg
end

-- end ------------------------------------------------------------------------o
return lsoptrun
