--[=[
 o-----------------------------------------------------------------------------o
 |
 | MFlow module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides full set of functions and operations on mflow.
  - Support real and complex scalars and GTPSA as inhomogeneous variables.

 o-----------------------------------------------------------------------------o
]=]

local MR, MC = {}, {}

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'

local min, max in math

local _C, gtpsad, tpsa, ctpsa, vector, cvector, matrix, cmatrix    in MAD

local is_nil, is_number, is_integer, is_complex, is_string, is_table,
      is_tpsa, is_ctpsa, is_matrix, is_cmatrix, is_indexable,
      is_mappable                                                  in MAD.typeid

-- types ----------------------------------------------------------------------o

-- hidden key.
local _var = {}

local   int_arr = ffi.typeof 'int [?]'
local  tpsa_arr = ffi.typeof 'struct  tpsa* [?]'
local ctpsa_arr = ffi.typeof 'struct ctpsa* [?]'

local is_mapflow  = \a -> is_table(a) and rawget(a,_var) ~= nil and is_tpsa (a.x)
local is_cmapflow = \a -> is_table(a) and rawget(a,_var) ~= nil and is_ctpsa(a.x)
local isa_mapflow = \a -> is_table(a) and rawget(a,_var) ~= nil

-- variable names -------------------------------------------------------------o

-- explicit variable names and indexes
local vnam = {'x', 'px', 'y', 'py', 't', 'pt',
               x=1, px=2, y=3, py=4, t=5, pt=6}

-- add upper case variable names at negative indexes
for i=1,#vnam do vnam[-i] = string.upper(vnam[i]) end

-- ctors ----------------------------------------------------------------------o

local function map_alloc (td, mt)
  local ct = mt == MR and tpsa or ctpsa
  local ta = mt == MR and tpsa_arr(td.nmv) or ctpsa_arr(td.nmv)
  local mo = td.mvar_ords
  local mv = table.new(td.nmv, #vnam+3) -- __td, __ta, pz

  mv[1] = ct(td, mo[0]):scalar(0,1) ; mv.x , ta[0] = mv[1], mv[1]
  mv[2] = ct(td, mo[1]):scalar(0,2) ; mv.px, ta[1] = mv[2], mv[2]
  mv[3] = ct(td, mo[2]):scalar(0,3) ; mv.y , ta[2] = mv[3], mv[3]
  mv[4] = ct(td, mo[3]):scalar(0,4) ; mv.py, ta[3] = mv[4], mv[4]
  mv[5] = ct(td, mo[4]):scalar(0,5) ; mv.t , ta[4] = mv[5], mv[5]
  mv[6] = ct(td, mo[5]):scalar(0,6) ; mv.pt, ta[5] = mv[6], mv[6]

  -- extra map variables (unamed)
  for i=6,td.nmv-1 do
    mv[i+1] = ct(td, mo[i]):scalar(0,i+2)
    ta[i] = mv[i+1]
  end

  mv.pz = ct(td, max(mo[1], mo[3], mo[5])) -- px, py, pt
  mv.__td, mv.__ta = td, ta

  return setmetatable({[_var]=mv}, mt)
end

local function map_ctor(arg, mt)
  -- default specification by planes.
  local xy = arg.xy or 2
  local pt = arg.pt or xy
  local t  = arg.t  or pt
  local mo = {xy, xy, xy, xy, t, pt} -- 6D phase space

  if arg.mo then -- overidden by custom definition
    if is_integer(arg.mo) then
      for i=1,6 do mo[i] = arg.mo end
    elseif is_iterable(arg.mo) then
      for i,o in ipairs(arg.mo) do mo[i] = arg.mo[i] end
    else
      error("invalid map variables orders (number or iterable expected)", 2)
    end
  end

  local td = gtpsad{nv=arg.nv, mo=mo, nk=arg.nk, ko=arg.ko, dk=arg.dk, vo=arg.vo}

  return map_alloc(td, mt)
end

--[=[
  arg content:
    - planes orders: 'xy'=o, 'pt'=o, 't'=o
    - otherwise same as gtpsad{}.
--]=]

local function mapflow (arg)
  arg = arg or {}
  assert(is_mappable(arg), "invalid argument #1 (mappable expected)")
  return map_ctor(arg, MR)
end

local function cmapflow (arg)
  arg = arg or {}
  assert(is_mappable(arg), "invalid argument #1 (mappable expected)")
  return map_ctor(arg, MC)
end

-- same, copy -----------------------------------------------------------------o

function MR.__same (x, y_, e_)
  if is_nil(e_) and is_complex(y_) then -- shift right
    e_, y_ = y_
  end
  assert(is_nil(y_) or isa_mapflow(y_), "invalid argument #2 (mapflow expected)")
  return map_alloc(x.__td, (is_complex(e_) or is_cmapflow(y_)) and MC or MR)
end

function MC.__same (x)
  return map_alloc(x.__td, MC)
end

function MR.__copy (x, y_)
  if is_nil(y_) then
    x, y_ = map_alloc(x.__td, MR), x
  else
    assert(is_mapflow(y_), "invalid argument #2 (mapflow expected)")
    assert(x.__td == y.__td, "incompatible mapflows")
  end
  for i=1,#x do
    _C.mad_tpsa_copy(y_[i], x[i])
  end
  return x
end

function MC.__copy (x, y_)
  if is_nil(y_) then
    x, y_ = map_alloc(x.__td, MC), x
  else
    assert(is_cmapflow(y_), "invalid argument #2 (cmapflow expected)")
    assert(x.__td == y.__td, "incompatible cmapflows")
  end
  for i=1,#x do
    _C.mad_ctpsa_copy(y_[i], x[i])
  end
  return x
end

-- get/set tbl/vec/mat ------------------------------------------------------------o

function MR.get0 (x, v)
  v = v or vector(#x)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,#x do v[i] = x[i].coef[0] end
  return v
end

function MC.get0 (x, v)
  v = v or cvector(#x)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,#x do v[i] = x[i].coef[0] end
  return v
end

function MR.set0 (x, v)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,min(#x,#v) do
    _C.mad_tpsa_set0(x[i], 0, v[i])
  end
  return x
end

function MC.set0 (x, v)
  assert(is_iterable(v), "invalid argument #2 (iterable expected)")
  for i=1,min(#x,#v) do
    local b = complex(v[i])
    _C.mad_ctpsa_set0_r(x[i], 0, 0, b.re, b.im)
  end
  return x
end

function MR.get1 (x, m)
  m = m or matrix(#x, x.__td.nv)
  assert(is_matrix(m), "invalid argument #2 (matrix expected)")
  local nr, nc = m:sizes()
  for i=1,min(#x,nr) do
    _C.mad_tpsa_getv(x[i], 1, nc, m.data+(i-1)*nc)
  end
  return m
end

function MC.get1 (x, m)
  m = m or cmatrix(#x, x.__td.nv)
  assert(is_cmatrix(m), "invalid argument #2 (cmatrix expected)")
  local nr, nc = m:sizes()
  for i=1,min(#x,nr) do
    _C.mad_ctpsa_getv(x[i], 1, nc, m.data+(i-1)*nc)
  end
  return m
end

function MR.set1 (x, m)
  assert(is_matrix(m), "invalid argument #2 (matrix expected)")
  local nr, nc = m:sizes()
  for i=1,min(#x,nr) do
    _C.mad_tpsa_setv(x[i], 1, nc, m.data+(i-1)*nc)
  end
  return x
end

function MC.set1 (x, m)
  assert(is_cmatrix(m), "invalid argument #2 (cmatrix expected)")
  local nr, nc = m:sizes()
  for i=1,min(#x,nr) do
    _C.mad_ctpsa_setv(x[i], 1, nc, m.data+(i-1)*nc)
  end
  return x
end

-- inv, pinv, normal, compose -------------------------------------------------o

-- map inverse: r = x^-1

function MR.inv (x, r)
  r = r or map_alloc(x.__td, MR)
  assert(is_mapflow(r), "invalid argument #2 (mapflow expected)")
  assert(r.__td == x.__td, "incompatible mapflow (GTPSA descriptors differ)")
  _C.mad_tpsa_minv(#x, x.__ta, #r, r.__ta)
  return r
end

function MC.inv (x, r)
  r = r or map_alloc(x.__td, MC)
  assert(is_cmapflow(r), "invalid argument #2 (cmapflow expected)")
  assert(r.__td == x.__td, "incompatible cmapflow (GTPSA descriptors differ)")
  _C.mad_ctpsa_minv(#x, x.__ta, #r, r.__ta)
  return r
end

-- partial map inverse on selected variables (rows)

function MR.pinv (x, sel, r)
  r = r or map_alloc(x.__td, MR)
  assert(is_table(sel), "invalid argument #2 (table expected)")
  assert(is_mapflow(r), "invalid argument #3 (mapflow expected)")
  assert(r.__td == x.__td, "incompatible mapflow (GTPSA descriptors differ)")
  local s = int_arr(#x) ; for i=1,#x do s[i-1] = sel[i] end
  _C.mad_tpsa_pminv(#x, x.__ta, #r, r.__ta, s)
  return r
end

function MC.pinv (x, sel, r)
  r = r or map_alloc(x.__td, MC)
  assert(is_table(sel) , "invalid argument #2 (table expected)")
  assert(is_cmapflow(r), "invalid argument #3 (cmapflow expected)")
  assert(r.__td == x.__td, "incompatible cmapflow (GTPSA descriptors differ)")
  local s = int_arr(#x) ; for i=1,#x do s[i-1] = sel[i] end
  _C.mad_ctpsa_pminv(#x, x.__ta, #r, r.__ta, s)
  return r
end

-- map normal form
-- x = a r a^-1, where r is the normalized map (containing tunes and dampings)

function MR.normal (x, r, a)
  error("NYI: high order normal form")
  r, a = r or map_alloc(x.__td, MC), a or map_alloc(x.__td, MC)
  assert(is_cmapflow(r), "invalid argument #2 (cmapflow expected)")
  assert(is_cmapflow(a), "invalid argument #3 (cmapflow expected)")
  assert(r.__td == x.__td and a.__td == x.__td,
                        "incompatible mapflow (GTPSA descriptors differ)")
  _C.mad_ctpsa_tnormal(#x, x.__ta, #r, r.__ta, #a, a.__ta)
  return r, a
end

function MC.normal (x, r, a)
  error("NYI: high order normal form")
  r, a = r or map_alloc(x.__td, MC), a or map_alloc(x.__td, MC)
  assert(is_cmapflow(r), "invalid argument #2 (cmapflow expected)")
  assert(is_cmapflow(a), "invalid argument #3 (cmapflow expected)")
  assert(r.__td == x.__td and a.__td == x.__td,
                        "incompatible cmapflow (GTPSA descriptors differ)")
  _C.mad_ctpsa_normal(#x, x.__ta, #r, r.__ta, #a, a.__ta)
  return r, a
end

-- maps composition : r = x(y)

function MR.compose (x, y, r)
  r = r or map_alloc(x.__td, MR)
  assert(is_mapflow(y), "invalid argument #2 (mapflow expected)")
  assert(is_mapflow(r), "invalid argument #3 (mapflow expected)")
  assert(r.__td == x.__td, "incompatible mapflow (GTPSA descriptors differ)")
  assert(r.__td == y.__td, "incompatible mapflow (GTPSA descriptors differ)")
  _C.mad_tpsa_compose(#x, x.__ta, #y, y.__ta, #r, r.__ta)
  return mr
end

function MC.compose (x, y, r)
  r = r or map_alloc(x.__td, MC)
  assert(is_cmapflow(y), "invalid argument #2 (cmapflow expected)")
  assert(is_cmapflow(r), "invalid argument #3 (cmapflow expected)")
  assert(r.__td == x.__td, "incompatible cmapflow (GTPSA descriptors differ)")
  assert(r.__td == y.__td, "incompatible cmapflow (GTPSA descriptors differ)")
  _C.mad_ctpsa_compose(#x, x.__ta, #y, y.__ta, #r, r.__ta)
  return r
end

-- I/O ------------------------------------------------------------------------o

function MR.write (x, file_, eps_)
  for i=1,#x do
    x[i]:write(file_, vnam[-i] or i, eps_)
  end
  return x
end

function MR.read (_, file_)
  error("NYI")
end

-- metamethods ----------------------------------------------------------------o

MR.__len = \s -> s[_var].__td.nmv

MR.__index = \s,k -> s[_var][k] or MR[k]
MC.__index = \s,k -> s[_var][k] or MC[k]

MR.__tostring = \s -> string.format("mapflow: %p", s)
MC.__tostring = \s -> string.format("cmapflow: %p", s)

function MR.__newindex (s, k, x)
  local v = s[_var][k]

  if v == nil then -- new var
    if is_tpsa(x)
    then s[_var][k] = x  -- keep tpsa under control
    else rawset(s, k, x) -- uncontrolled variable
    end
    return
  end

  -- useful?
  assert(is_tpsa(v), "forbidden access to readonly variable")

  if is_number(x) then
    _C.mad_tpsa_scalar(v, x, vnam[k] or 0)
  elseif is_tpsa(x) then
    _C.mad_tpsa_copy(x, v)
  else
    error("invalid assignment (scalar or real GTPSA expected)")
  end
end

function MC.__newindex (s, k, x)
  local v = s[_var][k]

  if v == nil then  -- new var
    if is_ctpsa(x)
    then s[_var][k] = x  -- keep tpsa under control
    else rawset(s, k, x) -- uncontrolled variable
    end
    return
  end

  -- useful?
  assert(is_ctpsa(v), "forbidden access to readonly variable")

  if is_number(x) then x = complex(x) end

  if is_complex(x) then
    _C.mad_ctpsa_scalar_r(v, x.re, x.im, vnam[k] or 0)
  elseif is_ctpsa(x) then
    _C.mad_ctpsa_copy(x, v)
  else
    error("invalid assignment (scalar or complex GTPSA expected)")
  end
end

MR.  same, MR.  copy, MR.length =
MR.__same, MR.__copy, MR.__len

MC.  same, MC.  copy, MC.length =
MC.__same, MC.__copy, MC.__len

-- MR -> MC -------------------------------------------------------------------o

for k,v in pairs(MR) do
  if is_nil(MC[k]) then MC[k] = v end
end

-- TODO: set concepts for MR and MC

-- env ------------------------------------------------------------------------o

MAD.typeid.is_mapflow  = is_mapflow
MAD.typeid.is_cmapflow = is_cmapflow
MAD.typeid.isa_mapflow = isa_mapflow

-- end ------------------------------------------------------------------------o
return {
   mapflow =  mapflow,
  cmapflow = cmapflow,
}
