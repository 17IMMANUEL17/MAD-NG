--[=[
 o-----------------------------------------------------------------------------o
 |
 | MFlow module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides full set of functions and operations on mflow.
  - Support real and complex scalars and GTPSA as inhomogeneous variables.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local ffi = require 'ffi'

local _C in MAD

local is_nil, is_number, is_string, is_iterable in MAD.typeid
local setkeys in MAD.utility

local tpsa, ctpsa, gtpsad in MAD

-- required and allowed variable names
local name_req = setkeys{'x', 'px', 'y', 'py', 't', 'pt', 'pz'}
local name_lst = setkeys{'x', 'px', 'y', 'py', 't', 'pt', 'pz'}

-- types ----------------------------------------------------------------------o

-- hidden key.
local _var = {}

local  tpsa_arr  = ffi.typeof 'struct  tpsa* [?]'
local ctpsa_arr  = ffi.typeof 'struct ctpsa* [?]'

local is_mflow = \x -> is_table(a) and rawget(a,_var) ~= nil

-- ctors ----------------------------------------------------------------------o

--[=[
  nv: number of map variables (when mo is a value)
  mo: map variables orders (array or value)
  vo: variables orders (array) with vo[i] <= mo[i]
  ko: max 'knobs' cross-orders (max order of cross terms)

  ex0:    gtpsad(nil)                           : 6 mvars of order 2.
  ex1.0:  gtpsad(3)         -> mo=3             : 6 mvars of order 3.
  ex2.0:  gtpsad(4,3)       -> nv=4,mo=3        : 4 mvars of order 3.
  ex3.0:  gtpsad{3,3}       -> mo={3,3}         : 2 mvars of order 3.
  ex1.1:  gtpsad{mo=3}      -> mo=3             : 6 mvars of order 3.
  ex2.1:  gtpsad{nv=4,mo=3} -> nv=4,mo=3        : 4 mvars of order 3.
  ex3.1:  gtpsad{mo={3,3}}  -> mo={3,3}         : 2 mvars of order 3.
  ex4.1:  gtpsad{mo={3,3}, vo={2,2,1,1}, ko=1}  : 2 mvars of order 3,
          each mvars contains 4 vars (2 mvars + 2 knobs) of orders 2,2,1,1,
                            knobs x-order is limited to 1 (no cross-terms).
--]=]

--[=[
  nv: number of variables (if mo is a value)
  mo: map variables orders with mo[i] > vo[i]
  vo: variables orders (array or value)
  nk: number of knobs (if ko is a value)
  ko: knobs orders (array or value)
  dk: max knobs 'cross' orders (degres)
  ex0: {nv=2, mo=3 [,vo=2]}
  ex1: {mo={3,3} [, vo={2,2}] [, v={'x', 'px'}] [, ko={1,1,1}] [, dk=2]}
  ex2: {mo={3,3} [, vo={2,2}] [, v={'x', 'px'}] [, nk=3,ko=1] [, dk=2]}
--]=]

--[=[
  planes orders: 'xy'=o, 'pt'=o, 't'=o
  vo: variables orders (array) with vo[i] <= mo[i]
  ko: max 'knobs' cross-orders (max order of cross terms)

--]=]

local function mflow (arg)
  local o_xy = arg.xy or 2
  local o_pt = arg.pt or o_xy
  local o_t  = arg.t  or o_pt
  local mo = { o_xy, o_xy, o_xy, o_xy, o_t, o_pt }

  local d = gtpsad{mo=mo, vo=vo, ko=ko}
end

-- env ------------------------------------------------------------------------o

MAD.typeid.is_mflow = is_mflow

-- end ------------------------------------------------------------------------o
return {
   mflow = mflow,
  __help = require 'madh_mflow',
}
