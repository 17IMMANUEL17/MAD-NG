--[=[
 o-----------------------------------------------------------------------------o
 |
 | Object module (object model)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide an object model to support prototype-based programming with value
    semantic for functions stored in variables and further extensions.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local is_nil, is_boolean, is_number, is_string, is_table, is_rawtable,
      is_function, is_functor, is_metaname      in MAD.typeid
local bset, btst, bclr, bnot, lt                in MAD.operator
local is_callable, is_iterable, is_mappable     in MAD.concept
local functor, bind2st                          in MAD.gfunc
local bsearch                                   in MAD.algorithm

-- implementation -------------------------------------------------------------o

-- Root of all objects
local Object

-- object members
local _var = {} -- key

-- reserved flags (bits)
local _flg = {} -- key
local flg_ro, flg_cl = 0, 1 -- flags id for readonly and class
local flg_free = flg_cl+1   -- used flags (0-1), free flags (2 - 31)

-- instance and metatable of 'incomplete objects' proxy
local var0 = setmetatable({}, {
  __index     := error("forbidden read access to incomplete object" , 2),
  __newindex  := error("forbidden write access to incomplete object", 2),
  __metatable = false,
})

-- helpers

local function name (a)
  return rawget(rawget(a,_var),'__id') or '? <: ' .. a.name
end

local function init (a)
  local init = rawget(getmetatable(a), '__init')
  if init then return init(a) end
  return a
end

local function parent (a)
  return getmetatable(rawget(a,'__index'))
end

local function fclass (a)
  return btst(rawget(a,_flg) or 0, flg_cl)
end

local function freadonly (a)
  return btst(rawget(a,_flg) or 0, flg_ro)
end

local function is_object (a) -- exported
  return is_table(a) and not is_nil(rawget(a,_var))
end

local function is_class (a) -- exported
  return is_table(a) and fclass(a)
end

local function is_readonly (a) -- exported
  return is_table(a) and freadonly(a)
end

local function set_class (a) -- not exported
  rawset(a,_flg, bset(rawget(a,_flg) or 0, flg_cl))
  return a
end

-- metamethods

local MT = {}

-- objects are proxies controlling variables access and inheritance
function MT:__call (a, b) -- object constructor (define the object-model)
  if is_string(a) then                                  -- named object
    if is_nil(b) then
      local obj = {__id=a, [_var]=var0, __index=rawget(self,_var)} -- proxy
      return setmetatable(obj, getmetatable(self))      -- incomplete object
    elseif is_rawtable(b) then
      local obj = {[_var]=b, __index=rawget(self,_var)} -- proxy
      b.__id=a  setmetatable(b, obj)  set_class(self)   -- set fast inheritance
      return init(setmetatable(obj, getmetatable(self)))-- complete object
    end
  elseif is_rawtable(a) then
    if rawget(self,_var) == var0 then                   -- finalize named object
      a.__id, self.__id = self.__id
      rawset(self,_var, setmetatable(a, self));         -- set fast inheritance
      set_class(parent(self))
      return init(self)
    else                                                -- unnamed object
      local obj = {[_var]=a, __index=rawget(self,_var)} -- proxy
      setmetatable(a, obj)  set_class(self)             -- set fast inheritance
      return init(setmetatable(obj, getmetatable(self)))-- complete object
    end
  end
  error(is_nil(b) and "invalid argument #1 (string or raw table expected)"
                  or  "invalid argument #2 (raw table expected)", 2)
end

function MT:__index (k)
  local v = rawget(self,_var)[k]                     -- inheritance of variables
  if is_function(v)
  then return v(self)                            -- function with value semantic
  else return v end
end

function MT:__newindex (k, v)
  if freadonly(self) then
    error("forbidden write access to readonly object '" .. name(self) .. "'", 2)
  end
  rawget(self,_var)[k] = v
end

function MT:__len ()
  local var = rawget(self,_var)
  if is_nil(var[1]) then return 0 end -- fast
  while is_nil(rawget(var,1)) do      -- slow
    var  = rawget(self,'__index')
    self = getmetatable(var)
  end
  return rawlen(var)
end

function MT:__pairs ()
  return pairs(rawget(self,_var))
end

function MT:__ipairs()
  return ipairs(rawget(self,_var))
end

function MT:__tostring()
  return string.format("'%s' <object> %p", name(self), self)
end

-- methods

local function set_parent (self, p) -- exported
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_object(p)   , "invalid argument #2 (object expected)")
  if freadonly(self) then
    error("forbidden write access to readonly object '" .. name(self) .. "'", 2)
  end
  rawset(self,'__index', rawget(p,_var))
  return self
end

local function set_readonly (a, b) -- exported
  assert(a ~= Object, "invalid argument #1 (forbidden access to 'Object')")
  assert(is_nil(b) or is_boolean(b),
                      "invalid argument #2 (boolean or nil expected)")
  if b ~= false
  then rawset(a,_flg, bset(rawget(a,_flg) or 0, flg_ro))
  else rawset(a,_flg, bclr(rawget(a,_flg) or 0, flg_ro)) end
  return a
end

local function is_instanceOf (a, b) -- exported
  assert(is_object(b), "invalid argument #2 (object expected)")
  if not is_object(a) then return false end
  while a and a ~= b do a = parent(a) end
  return a == b
end

local function len_raw (self)
  return rawlen(rawget(self,_var))    -- no inheritance
end

local function var_raw (self, k)
  return rawget(self,_var)[k]         -- no function evaluation (w inheritance)
end

local function get_raw (self, k)
  return rawget(rawget(self,_var),k)  -- no inheritance nor function evaluation
end

local function set_raw (self, k, v)
  rawset(rawget(self,_var),k,v)       -- no protection
  return self
end

local function get_variable (self, lst, eval)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_iterable(lst), "invalid argument #2 (iterable expected)")
  local var, res = rawget(self,_var), {}
  if eval ~= false
  then for _,k in ipairs(lst) do res[k] = self[k] end
  else for _,k in ipairs(lst) do res[k] = var [k] end
  end
  return res
end

local function set_variable (self, tbl, override)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(tbl), "invalid argument #2 (mappable expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  local var = rawget(self,_var)
  for k,v in pairs(tbl) do
    assert(is_nil(rawget(var,k)) or override~=false, "cannot override variable")
    rawset(var, k, v)
  end
  return self
end

local function wrap_variable (self, tbl)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(tbl), "invalid argument #2 (mappable expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  local var = rawget(self,_var)
  for k,f in pairs(tbl) do
    local v = var[k]
    assert(is_callable(f), "invalid wrapper (callable expected)")
    assert(not is_nil(v) , "invalid variable (nil value)")
    if not is_callable(v) then v=\ v end -- symplify user's side, always call.
    local newv = f(v)                    -- capture.
    if is_functor(v) and not is_functor(newv) then
      newv = functor(newv)               -- newv must maintain v semantic.
    end
    rawset(var, k, newv)
  end
  return self
end

local function set_function (self, tbl, override, strict)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(tbl), "invalid argument #2 (mappable expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  local var = rawget(self,_var)
  for k,f in pairs(tbl) do
    assert(is_callable(f) or strict==false, "invalid value (callable expected)")
    assert(is_nil(rawget(var,k)) or override~=false, "cannot override function")
    rawset(var, k, is_function(f) and functor(f) or f)
  end
  return self
end

local function set_metamethod (self, tbl, override, strict)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(tbl), "invalid argument #2 (mappable expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  local sm, pm = getmetatable(self), getmetatable(parent(self)) or MT
  if sm == pm then -- create new metatable if same as parent
    assert(not fclass(self), "invalid metatable (class unexpected)")
    sm={} for k,v in pairs(pm) do sm[k] = v end
  end
  for k,mm in pairs(tbl) do
    assert(is_metaname(k) or strict==false, "invalid key (metamethod expected)")
    assert(is_nil(rawget(sm,k)) or override==true, "cannot override metamethod")
    rawset(sm, k, mm)
  end
  return setmetatable(self, sm)
end

local function get_varkey (self, class)
  class = class or Object
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_object(class), "invalid argument #2 (object expected)")
  local lst, key = {}, {}
  while self and self ~= class do
    for k,v in pairs(rawget(self,_var)) do
      if is_string(k) and not is_functor(v) and not key[k] and
         string.sub(k,1,2) ~= '__' then
        lst[#lst+1], key[k] = k, k
      end
    end
    self = parent(self)
  end
  assert(self == class, "invalid argument #2 (parent of argument #1 expected)")
  return lst
end

local function remove_array (self, pos)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  return table.remove(rawget(self,_var), pos)
end

local function insert_array (self, pos, val)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  table.insert(rawget(self,_var), pos, val)
  return self
end

local function sort_array (self, cmp_)
  local cmp = cmp_ or lt
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_callable(cmp), "invalid argument #2 (callable expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  table.sort(rawget(self,_var), \a,b => -- see __index
               if is_function(a) then a = a(self) end
               if is_function(b) then b = b(self) end
               return cmp(a, b)
             end)
  return self
end

local function bsearch_array (self, val, cmp_)
  local cmp = cmp_ or lt
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_callable(cmp), "invalid argument #3 (callable expected)")
  return bsearch(self, val, cmp_)
end

local function clear_array (self)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  local var = rawget(self,_var)
  for i=1,#var do var[i] = nil end
  return self
end

local function clear_variable (self)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  local var = rawget(self,_var)
  local id, len = var.__id, #var
  if len == 0 then
    table.clear(var)
  else
    local bak = table.new(len,0) -- unfortunately, Lua doesn't provide kpairs.
    for i=1,len do bak[i] = var[i] end
    table.clear(var)
    for i=1,len do var[i] = bak[i] end
  end
  var.__id = id
  return self
end

local function clear_all (self)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(not freadonly(self), "forbidden write access to readonly object")
  local var = rawget(self,_var)
  local id = var.__id
  table.clear(var)
  var.__id = id
  return self
end

-- flags

local function set_flag (self, n)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(n >= flg_free and n <= 31, "invalid flag number")
  rawset(self,_flg, bset(rawget(self,_flg) or 0, n))
  return self
end

local function test_flag (self, n)
  assert(is_object(self), "invalid argument #1 (object expected)")
  return btst(rawget(self,_flg) or 0, n)
end

local function clear_flag (self, n)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(n >= flg_free and n <= 31, "invalid flag number")
  local flg = rawget(self,_flg) -- avoid to create slot _flg if not needed
  if flg ~= nil then rawset(self,_flg, bclr(flg, n)) end
  return self
end

-- environments

local _env = {} -- key

local function open_env (self, level)
  level = is_function(level) and level or is_number(level) and level+1 or 2
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_function(level) or is_number(level) and level >= 2,
                          "invalid argument #2 (level < 1)")
  assert(is_nil(rawget(self,_env)), "invalid environment (already open)")
  rawset(self, _env, { lvl=level, env=getfenv(level) })
  rawset(self, self.__id, self) -- self reference
  setfenv(level, self)
  return self
end

local function is_open_env (self)
  assert(is_object(self), "invalid argument #1 (object expected)")
  return not is_nil(rawget(self,_env))
end

local function reset_env (self) -- if an error occurs while in the environment
  assert(is_object(self), "invalid argument #1 (object expected)")
  rawset(self, _env, nil)
  rawset(self, self.__id, nil) -- clear self reference
  return self
end

local function close_env (self)
  assert(is_object(self), "invalid argument #1 (object expected)")
  local env = rawget(self,_env)
  assert(not is_nil(env), "invalid environment (not open)")
  setfenv(env.lvl, env.env)
  return reset_env(self)
end

local function dump_env (self) -- for debug
  for k,v in pairs(self) do
    if is_rawtable(v) then
      for k,v in pairs(v) do
        print(k,'=',v)
      end
    elseif is_object(v) then
      print(k,'=',name(v))
    else
      print(k,'=',v)
    end
  end
end

-- TODO: show command...

-- debug

local function strdump (self, class, pattern)
  class, pattern = class or Object, pattern or ''
  assert(is_object(self)   , "invalid argument #1 (object expected)")
  assert(is_object(class)  , "invalid argument #2 (object expected)")
  assert(is_string(pattern), "invalid argument #3 (string expected)")
  local tostring in MAD
  local cnt, res, spc, str = {}, {}, ""
  while self and self ~= class do
    local var = rawget(self,_var)
    -- header
    str = rawget(var, '__id') and (" '"..var.__id.."'") or ""
    res[#res+1] = spc.."+ "..tostring(self)
    spc = spc .. "   "
    -- variables
    for k,v in pairs(var) do
      if is_string(k) and string.sub(k,1,2) ~= '__' and string.find(k, pattern) then
        str = spc .. tostring(k)
        if is_string (v) then
          str = str.." : '"..tostring(v):sub(1,15).."'"
        elseif is_function (v) then
          str = str.." := "..tostring(v(self))
        else
          str = str.." :  "..tostring(v)
        end
        if cnt[k]
        then str = str.." ("..string.rep('*', cnt[k])..")" -- mark overrides
        else cnt[k] = 0 end
        cnt[k] = cnt[k] + 1
        res[#res+1] = str
      end
    end
    self = parent(self)
  end
  assert(self == class, "invalid argument #2 (parent of argument #1 expected)")
  res[#res+1] = ''
  return table.concat(res, '\n')
end

-- members
M.__id  = 'Object'
M.__par = parent

-- methods
M.is_class       = functor( is_class       )
M.is_readonly    = functor( is_readonly    )
M.is_instanceOf  = functor( is_instanceOf  )
M.set_parent     = functor( set_parent     )
M.set_readonly   = functor( set_readonly   )
M.get_varkey     = functor( get_varkey     )
M.get_variable   = functor( get_variable   )
M.set_variable   = functor( set_variable   )
M.wrap_variable  = functor( wrap_variable  )
M.set_function   = functor( set_function   )
M.set_metamethod = functor( set_metamethod )
M.insert_array   = functor( insert_array   )
M.remove_array   = functor( remove_array   )
M.sort_array     = functor( sort_array     )
M.bsearch_array  = functor( bsearch_array  )
M.clear_array    = functor( clear_array    )
M.clear_variable = functor( clear_variable )
M.clear_all      = functor( clear_all      )
M.rawlen         = functor( len_raw        )
M.rawvar         = functor( var_raw        )
M.rawget         = functor( get_raw        )
M.rawset         = functor( set_raw        )
M.set_flag       = functor( set_flag       )
M.test_flag      = functor( test_flag      )
M.clear_flag     = functor( clear_flag     )
M.open_env       = functor( open_env       )
M.is_open_env    = functor( is_open_env    )
M.reset_env      = functor( reset_env      )
M.close_env      = functor( close_env      )
M.strdump        = functor( strdump        )

-- aliases
M.name   = \s -> s.__id
M.parent = parent
M.get    = M.get_variable
M.set    = M.set_variable
M.wrap   = M.wrap_variable
M.getk   = M.get_varkey
M.fset   = M.set_flag
M.ftst   = M.test_flag
M.fclr   = M.clear_flag

-- env ------------------------------------------------------------------------o

MAD.typeid.is_class      = is_class
MAD.typeid.is_object     = is_object
MAD.typeid.is_readonly   = is_readonly
MAD.typeid.is_instanceOf = is_instanceOf

-- metatables -----------------------------------------------------------------o

-- root Object variables = module
Object = setmetatable({[_var]=M, [_flg]=bset(0,flg_ro)}, MT)

 -- parent link
setmetatable(M, Object)

-- end ------------------------------------------------------------------------o
return {
  Object = Object,

  __help  = require 'madh_object',
  __check = { Object=M, object=M },
}
