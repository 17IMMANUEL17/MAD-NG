--[=[
 o-----------------------------------------------------------------------------o
 |
 | object module (object model)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide an object model to support prototype-based programming with value
    semantic for functions stored in variables and further extensions.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local is_nil, is_boolean, is_number, is_string, is_table, is_rawtable,
      is_function, is_functor, is_metaname, is_callable, is_iterable,
      is_mappable                                               in MAD.typeid
local fbit, fnot, fset, fcut, fclr, ftst                        in MAD.operator
local bsearch, lsearch, kpairs, openfile, assertf, errorf       in MAD.utility
local functor                                                   in MAD.gfunc

local type, assert, error, getmetatable, setmetatable =
      type, assert, error, getmetatable, setmetatable

local rawget, rawset, rawequal, rawlen, ipairs, pairs, tostring =
      rawget, rawset, rawequal, rawlen, ipairs, pairs, tostring

local string, table =
      string, table

-- implementation -------------------------------------------------------------o

-- Root of all objects, forward declaration
local object

-- object kind
local _id = {} -- unique identifier

-- object flags (protected)
local oflg = {
  class    = fbit(31),
  final    = fbit(30),
  readonly = fbit(29),

  rocls    = fset(fbit(29),fbit(31)),
  protect  = fnot(fset(fbit(29),fbit(30),fbit(31))),
}

-- instance and metatable of 'incomplete objects' proxy
local var0 = setmetatable({}, {
  __index    := error("forbidden read access to incomplete object." , 2),
  __newindex := error("forbidden write access to incomplete object.", 2),
  __metatable = false,
})

-- object model variants ------------------------------------------------------o

local cachelookup = false -- MAD.option.omcachelookup
local cachemethod = false -- MAD.option.omcachemethod

local flg_cls = cachelookup and oflg.rocls or oflg.class

-- helpers --------------------------------------------------------------------o

local function init (a)
  local init = getmetatable(a).__init
  if init then return init(a) end
  return a
end

local function parent (a)
  return getmetatable(a.__index)
end

local function name (a)
  local par = parent(a)
  return par and a.__id == par.__id and ('? <: '..a.__id) or a.__id
end

local function ffinal (a)
  return ftst(a.__flg, oflg.final)
end

local function fclass (a)
  return ftst(a.__flg, oflg.class)
end

local function freadonly (a)
  return ftst(a.__flg, oflg.readonly)
end

local function set_class (a)
  a.__flg = fset(a.__flg, flg_cls)
  return a
end

local function is_object (a) -- exported
  local mt = getmetatable(a)
  return mt ~= nil and mt.__obj == _id
end

local function copy_methods (a, m)
  local c = table.new(0,32)
  for k,v in pairs(m) do c[k] = v end
  a.__mth = c -- set new methods
  return c
end

local function copy_metamethods (a, m)
  local c = table.new(0,8)
  for k,v in pairs(m) do c[k] = v end
  m.__metatable = nil -- unprotect change
  setmetatable(a, c) -- set new metamethods
  m.__metatable, c.__metatable = m, c -- restore/set protection(s)
  return c
end

-- metamethods ----------------------------------------------------------------o

local MT = {__obj=_id}

-- object model (and variants):
-- objects are proxies controlling variables access and inheritance

if cachemethod then          -- object model with cached methods
  function MT:__call (a, b)  -- object constructor (define the object-model)
    if type(a) == 'string' or type(a) == 'nil' then       -- [un]named object
      a = a or self.__id
      if type(b) == 'nil' then
        local obj = {__id=a, __flg=0, __var=var0, __mth=var0, __index=self.__var}
        return setmetatable(obj, getmetatable(self))      -- incomplete object
      elseif is_rawtable(b) then
        local obj = {__id=a, __flg=0, __var=b, __mth=self.__mth, __index=self.__var}
        setmetatable(b, obj) ; set_class(self)            -- set fast inheritance
        return init(setmetatable(obj, getmetatable(self)))-- complete object
      end
    elseif is_rawtable(a) then
      if self.__var == var0 then                          -- finalize named object
        self.__var = setmetatable(a, self)                -- set fast inheritance
        local par = parent(self) ; set_class(par)
        self.__mth = par.__mth                            -- set shared methods
        return init(self)
      else                                                -- unnamed object
        local obj = {__id=self.__id, __flg=0, __var=a, __mth=self.__mth, __index=self.__var}
        setmetatable(a, obj) ; set_class(self)            -- set fast inheritance
        return init(setmetatable(obj, getmetatable(self)))-- complete object
      end
    end
    error(is_nil(b) and "invalid argument #1 (string or raw table expected)"
                    or  "invalid argument #2 (raw table expected)", 2)
  end

else -- default              -- object model
  function MT:__call (a, b)  -- object constructor (define the object-model)
    if type(a) == 'string' or type(a) == 'nil' then       -- [un]named object
      a = a or self.__id
      if type(b) == 'nil' then
        local obj = {__id=a, __flg=0, __var=var0, __index=self.__var} -- proxy
        return setmetatable(obj, getmetatable(self))      -- incomplete object
      elseif is_rawtable(b) then
        local obj = {__id=a, __flg=0, __var=b, __index=self.__var}-- proxy
        setmetatable(b, obj) ; set_class(self)            -- set fast inheritance
        return init(setmetatable(obj, getmetatable(self)))-- complete object
      end
    elseif is_rawtable(a) then
      if self.__var == var0 then                          -- finalize named object
        self.__var = setmetatable(a, self)                -- set fast inheritance
        set_class(parent(self))
        return init(self)
      else                                                -- unnamed object
        local obj = {__id=self.__id, __flg=0, __var=a, __index=self.__var}-- proxy
        setmetatable(a, obj) ; set_class(self)            -- set fast inheritance
        return init(setmetatable(obj, getmetatable(self)))-- complete object
      end
    end
    error(is_nil(b) and "invalid argument #1 (string or raw table expected)"
                    or  "invalid argument #2 (raw table expected)", 2)
  end
end

-- object model variants try to optimize lookup of object attributes.

if cachemethod and cachelookup then -- object model with cached lookup and methods
  function MT:__index (k)
    local v = self.__mth[k]         -- methods have the precedence over variables
    if type(v) == nil
    then v = self.__var[k] ; self.__var[k] = v
    else return v end
    if type(v) == 'function' and type(k) == 'string'
    then return v(self)
    else return v end
  end

elseif cachemethod then             -- object model with lookup and cached methods
  function MT:__index (k)
    local v = self.__mth[k]         -- methods have the precedence over variables
    if type(v) == nil
    then v = self.__var[k]
    else return v end
    if type(v) == 'function' and type(k) == 'string'
    then return v(self)
    else return v end
  end

elseif cachelookup then             -- object model with cached lookup
  function MT:__index (k)
    local v = self.__var[k] ; self.__var[k] = v
    if type(v) == 'function' and type(k) == 'string'
    then return v(self)
    else return v end
  end

else -- default                     -- object model with lookup
  function MT:__index (k)
    local v = self.__var[k]
    if type(v) == 'function' and type(k) == 'string'
    then return v(self)
    else return v end
  end
end

function MT:__newindex (k, v)
  if freadonly(self) or type(k) == 'string' and string.sub(k,1,2) == '__' then
    error("forbidden write access to '" .. name(self) .. "." .. tostring(k)
          .. "' (readonly object, method or variable)", 2)
  end
  self.__var[k] = v      -- note: must use [k] for var0
end

function MT:__len ()
  local var = self.__var
  if type(var[1]) == 'nil' then return 0 end -- fast
  while type(rawget(var,1)) == 'nil' do      -- slow
    var  = self.__index
    self = getmetatable(var)
  end
  return rawlen(var)
end

local function iter (var, key) -- scan only numbers and strings
  local k, v = next(var, key)
  while type(k) ~= 'string' and type(k) ~= 'number' and k do
    k, v = next(var, k)
  end
  return k, v
end

local function pairs_iter (self)
  return iter, self.__var, nil
end

local function ipairs_iter (self)
  return ipairs(self.__var)
end

MT.__pairs  =  pairs_iter
MT.__ipairs = ipairs_iter

function MT:__tostring()
  return string.format("object: '%s' %p", name(self), self)
end

-- methods (member functions) -------------------------------------------------o

local MF = {}

function MF:raw_len ()
  return rawlen(self.__var)           -- no inheritance
end

function MF:raw_get (k)
  return rawget(self.__var,k)         -- no inheritance nor function evaluation
end

if cachemethod then
  function MF:mth_raw (k)
    return self.__mth[k]              -- no function evaluation with inheritance
  end

else
  function MF:mth_raw (k)
    local m = self.__var[k]           -- methods are variables, no separate lookup
    return is_functor(m) and m or nil
  end
end

function MF:var_raw (k)
  return self.__var[k]                -- no function evaluation with inheritance
end

function MF:var_val (k, v)            -- string key with value function
  if type(v) == 'function' and type(k) == 'string'
  then return v(self)
  else return v end
end

function MF:var_get (k)             -- named __index, can return multiple values
  local v = self.__var[k]
  if type(v) == 'function' and type(k) == 'string'
  then return v(self)
  else return v end
end

function MF:is_class ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return fclass(self)
end

function MF:is_final ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return ffinal(self)
end

function MF:is_readonly ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return freadonly(self)
end

function MF:is_instanceOf (c)
  assert(is_object(self), "invalid argument #1 (object expected)")
  if is_object(c) and fclass(c) then
    repeat self = parent(self) until not self or rawequal(self,c)
    return not not self
  end
  return false
end

function MF:set_readonly (set_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  if set_ ~= false
  then self.__flg = fset(self.__flg, oflg.readonly)
  else self.__flg = fclr(self.__flg, oflg.readonly)
  end
  return self
end

local function efinal (self)
  error("invalid object creation ('"..name(self).."' is final)", 2)
end

function MF:set_final (set_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  if set_ ~= false then
    if fclass(self) then
      errorf("cannot set final to '%s' (unexpected class)", name(self))
    end
    self:set_metamethods({__call=efinal}, true)
    self.__flg = fset(self.__flg, oflg.final)
  else
    self.__flg = fclr(self.__flg, oflg.final)
  end
  return self
end

function MF:get_variables (lst, noeval_)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_iterable(lst), "invalid argument #2 (iterable expected)")
  local n   = #lst
  local res = table.new(0,n)
  local get = noeval_ == true and MF.var_raw or MT.__index
  for i=1,n do res[lst[i]] = get(self, lst[i]) end
  return res -- key -> val
end

function MF:set_variables (tbl, override_) -- default: override = true
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(tbl), "invalid argument #2 (mappable expected)")
  if freadonly(self) and override_ ~= 'init' then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var = self.__var
  for k,v in pairs(tbl) do
    assertf(override_ ~= false and (type(k) ~= 'string' or string.sub(k,1,2) ~= '__')
            or is_nil(var[k]), "cannot override variable '%s'",k)
    var[k] = v
  end
  return self
end

function MF:copy_variables (src, lst_, override_) -- default: override = true
  assert(is_object (self), "invalid argument #1 (object expected)")
  assert(is_mappable(src), "invalid argument #2 (mappable expected)")
  if freadonly(self) and override_ ~= 'init' then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var, svar, lst = self.__var, src.__var, lst_ or self.__attr
  assert(is_iterable(lst), "invalid list of attributes (iterable expected)")
  for _,k in ipairs(lst) do
    assertf(override_ ~= false and (type(k) ~= 'string' or string.sub(k,1,2) ~= '__')
            or is_nil(var[k]), "cannot override variable '%s'",k)
    var[k] = src[k]
  end
  if svar and is_iterable(lst.noeval) then
    for _,k in ipairs(lst.noeval) do
      assertf(override_ ~= false and (type(k) ~= 'string' or string.sub(k,1,2) ~= '__')
              or is_nil(var[k]), "cannot override variable '%s'",k)
      var[k] = svar[k]
    end
  end
  return self
end

function MF:wrap_variables (tbl, override_)
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  assert(is_mappable(tbl)   , "invalid argument #2 (mappable expected)")
  if freadonly(self) and override_ ~= 'init' then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var = self.__var
  for k,f in pairs(tbl) do
    local v, newv = var[k]
    assert(not is_nil(v) , "invalid variable (nil value)")
    assert(is_callable(f), "invalid wrapper (callable expected)")
    if is_callable(v) then newv = f(v) else newv = f(\ v) end -- simplify user's side.
    if is_functor(v) and not is_functor(newv) then
      newv = functor(newv)                   -- newv must maintain v's semantic.
    end
    var[k] = newv
  end
  return self
end

function MF:set_methods (tbl, override_) -- default: override = true
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(tbl), "invalid argument #2 (mappable expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  if fclass(self) and (override_ ~= 'init' or cachemethod) then
    errorf("cannot set methods to '%s' (unexpected class)", name(self))
  end
  if cachemethod then -- object model with cached methods
    local sm, pm = self.__mth, parent(self).__mth -- or MF
    if sm == pm then sm = copy_methods(self, pm) end
    for k,m in pairs(tbl) do
      assertf(is_string(k)  , "invalid key '%s' (string expected)", k)
      assertf(is_callable(m), "invalid value for key '%s' (callable expected)", k)
      assertf(override_ ~= false and (type(k) ~= 'string' or string.sub(k,1,2) ~= '__')
              or is_nil(sm[k]), "cannot override method '%s'",k)
      sm[k] = m
    end
  else -- default
    local var = self.__var
    for k,m in pairs(tbl) do
      assertf(is_string(k)  , "invalid key '%s' (string expected)", k)
      assertf(is_callable(m), "invalid value for key '%s' (callable expected)", k)
      assertf(override_ ~= false and (type(k) ~= 'string' or string.sub(k,1,2) ~= '__')
              or is_nil(var[k]), "cannot override method '%s'",k)
      var[k] = is_function(m) and functor(m) or m
    end
  end
  return self
end

function MF:set_metamethods (tbl, override_) -- default: override = false
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_mappable(tbl), "invalid argument #2 (mappable expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  if fclass(self) then
    errorf("cannot set metamethods to '%s' (unexpected class)", name(self))
  end
  local sm, pm = getmetatable(self), getmetatable(parent(self)) -- or MT
  if sm == pm then sm = copy_metamethods(self, pm) end
  for k,m in pairs(tbl) do
    assertf(type(k) == 'string' and string.sub(k,1,2) == '__',
            "invalid key '%s' (string starting with __ expected)", tostring(k))
    assertf(override_ == true or is_nil(sm[k]), "cannot override metamethod '%s'",k)
    sm[k] = m
  end
  return self
end

function MF:set_parent (newp, override_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_object(newp), "invalid argument #2 (object expected)")
  if freadonly(self) and override_ ~= 'init' then
    error("forbidden write access to readonly object '" .. name(self) .. "'", 2)
  end
  local spar = self.parent
  if getmetatable(newp) ~= getmetatable(spar) then
    error("new and current parent do not share same metamethods")
  end
  if newp.parent ~= spar.parent then
    error("new and current parent do not inherit from same direct parent")
  end
  self.__index = newp.__var
  set_class(newp)
  return self
end

function MF:get_varkeys (class_)
  assert(is_object(self)                    , "invalid argument #1 (object expected)")
  assert(is_nil(class_) or is_object(class_), "invalid argument #2 (object expected)")
  local lst, key = table.new(8,1), table.new(0,8)
  while self and not rawequal(self, class_) do
    for k,v in kpairs(self) do
      if not (key[k] or is_functor(v)) and is_string(k) and string.sub(k,1,2) ~= '__'
      then lst[#lst+1], key[k] = k, k
      end
    end
    self = parent(self)
  end
  assert(rawequal(self, class_),"invalid argument #2 (parent of argument #1 expected)")
  return lst, key
end

function MF:insert (idx_, val)
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  table.insert(self.__var, idx_, val)
  return self
end

function MF:remove (idx_)
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  return table.remove(self.__var, idx_)
end

function MF:move (idx1, idx2, idxto, dest_)
  dest_ = dest_ or self
  assert(is_object(self)     , "invalid argument #1 (object expected)")
  assert(is_object(dest_)    , "invalid argument #2 (object expected)")
  if not freadonly(dest_) then
    errorf("forbidden write access to readonly object '%s'", name(dest_))
  end
  table.move(self.__var, idx1, idx2, idxto, dest_.__var)
  return dest_
end

function MF:sort (cmp_)
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  table.sort(self.__var, cmp_)
  return self
end

function MF:bsearch (val, cmp_, low_, high_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  return bsearch(self.__var, val, cmp_, low_, high_)
end

function MF:lsearch (val, equ_, low_, high_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  return lsearch(self.__var, val, equ_, low_, high_)
end

function MF:clear_array ()
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var = self.__var
  for i=1,rawlen(var) do var[i]=nil end
  return self
end

function MF:clear_variables ()
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var = self.__var
  for k in kpairs(self) do
    if type(k) ~= 'string' or string.sub(k,1,2) ~= '__' then
      var[k]=nil
    end
  end
  return self
end

function MF:clear_all ()
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  if freadonly(self) then
    errorf("forbidden write access to readonly object '%s'", name(self))
  end
  local var = self.__var
  for k in pairs_iter(self) do -- table.clear destroys all keys
    if type(k) ~= 'string' or string.sub(k,1,2) ~= '__' then
      var[k]=nil
    end
  end
  return self
end

-- copy

function MF:same (name_)
  assert(is_object(self)                  ,"invalid argument #1 (object expected)")
  assert(is_nil(name_) or is_string(name_),"invalid argument #2 (string expected)")
  -- same shares the same parent
  local par = parent(self)
  local sam = par(name_ or self.__id, {})
  -- metamethods
  local sm, pm = getmetatable(self), getmetatable(par)
  if sm ~= pm then copy_metamethods(sam, sm) end
  -- methods
  if cachemethod then
    local sm, pm = self.__mth, par.__mth
    if sm ~= pm then copy_methods(sam, sm) end
  end
  return sam
end

function MF:copy (name_)
  assert(is_object(self)                  ,"invalid argument #1 (object expected)")
  assert(is_nil(name_) or is_string(name_),"invalid argument #2 (string expected)")
  local cpy = MF.same(self, name_)
  local var, cvar = self.__var, cpy.__var
  for k,v in pairs_iter(self) do
    if type(k) ~= 'string' or string.sub(k,1,2) ~= '__' then
      cvar[k] = v
    end
  end
  return cpy
end

MT.__same = MF.same
MT.__copy = MF.copy

-- flags

function MF:get_flag ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return fcut(self.__flg, oflg.protect)
end

function MF:test_flag (flgs)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_number(flgs), "invalid argument #2 (number expected)")
  return ftst(self.__flg, fcut(flgs, oflg.protect))
end

function MF:set_flag (flgs)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_number(flgs), "invalid argument #2 (number expected)")
  self.__flg = fset(self.__flg, fcut(flgs, oflg.protect))
  return self
end

function MF:clear_flag (flgs)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_number(flgs), "invalid argument #2 (number expected)")
  self.__flg = fclr(self.__flg, fcut(flgs, oflg.protect))
  return self
end

-- environments

function MF:open_env (ctx_)
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(is_nil(ctx_) or is_function(ctx_) or is_number(ctx_) and ctx_ >= 1,
                          "invalid argument #2 (not a function or < 1)")
  ctx_ = is_function(ctx_) and ctx_ or is_number(ctx_) and ctx_+1 or 2
  assert(is_nil(rawget(self,'__env')), "invalid environment (already open)")
  rawset(self, '__env', { ctx=ctx_, env=getfenv(ctx_) })
  rawset(self, self.__id, self) -- self reference
  setfenv(ctx_, self)
  return self
end

function MF:is_open_env ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  return not is_nil(rawget(self,'__env'))
end

function MF:reset_env () -- if an error occurs while in the environment
  assert(is_object(self), "invalid argument #1 (object expected)")
  local env = rawget(self,'__env')
  if env then
    setfenv(env.ctx, env.env)
    rawset(self, '__env', nil)
    rawset(self, self.__id, nil) -- clear self reference
  end
  return self
end

function MF:close_env ()
  assert(is_object(self), "invalid argument #1 (object expected)")
  assert(not is_nil(rawget(self,'__env')), "invalid environment (not open)")
  return MF.reset_env(self)
end

function MF:load_env (loader)
  assert(is_object(self), "invalid argument #1 (object expected)")
  if is_string(loader) then loader = assert(loadfile(loader)) end
  assert(is_callable(loader), "invalid argument #2 (filename or callable expected)")
  self:open_env(loader)
  local st, err = pcall(loader)
  self:reset_env()
  assert(st, err)
  return self
end

function MF:dumpenv () -- for debug
  assert(is_object(self), "invalid argument #1 (object expected)")
  for k,v in pairs(self.__var) do
    if is_rawtable(v) then
      for k,v in pairs(v) do
        print(k,'=',v)
      end
    elseif is_object(v) then
      print(k,'=',name(v))
    else
      print(k,'=',v)
    end
  end
end

-- I/O ------------------------------------------------------------------------o

-- dump obj members (including controlled inheritance)
function MF:dumpobj (filnam_, class_, pattern_)
  if is_object(filnam_) and is_nil(pattern_) then
    filnam_, class_, pattern_ = nil, filnam_, class_ -- right shift
  end
  if is_string(class_) and is_nil(pattern_) then
    class_, pattern_ = nil, class_                   -- right shift
  end

  class_, pattern_ = class_ or object, pattern_ or ''
  assert(is_object(self)    , "invalid argument #1 (object expected)")
  assert(is_object(class_)  , "invalid argument #3 (object expected)")
  assert(is_string(pattern_), "invalid argument #4 (string expected)")

  local tostring in MAD
  local n, cnt, res, spc, str = 0, {}, {}, ""
  while self and not rawequal(self, class_) do
    local var = self.__var
    -- header
    n, str = n+1, " '" .. self.__id .. "'"
    res[n] = spc .. "+ " .. tostring(self)
    spc = spc .. "   "
    -- variables
    for k,v in kpairs(self) do
      if is_string(k) and string.sub(k,1,2) ~= '__' and string.find(k,pattern_) then
        str = spc .. tostring(k)
        if is_string(v) then
          str = str .. " : '" .. tostring(v):sub(1,15) .. "'"
        elseif is_function(v) then
          str = str .. " := " .. tostring(v(self))
        else
          str = str .. " :  " .. tostring(v)
        end
        if cnt[k]
        then str = str .. " (" .. string.rep('*', cnt[k]) .. ")" -- mark overrides
        else cnt[k] = 0
        end
        cnt[k], n = cnt[k]+1, n+1
        res[n] = str
      end
    end
    self = parent(self)
  end
  assert(rawequal(self, class_), "invalid argument #2 (parent of argument #1 expected)")

  -- return result as a string
  if filnam_ == '-' then return table.concat(res, '\n') end

  -- dump to file
  local file = openfile(filnam_, 'w', '.dat')
  for _,s in ipairs(res) do file:write(s,'\n') end
  if is_string(filnam_) then file:close() else file:flush() end

  return self
end

-- variables ------------------------------------------------------------------o

local MV = {}

MV.__par = parent

-- aliases
MV.parent = parent
MV.name   = \s -> s.__id
MF.setvar = MF.set_variables
MF.getvar = MF.get_variables

-- env ------------------------------------------------------------------------o

MAD.typeid.is_object = is_object

-- object ---------------------------------------------------------------------o

-- add variables, methods and metamethods, and set as readonly
if cachemethod then
  object = setmetatable({__id='object', __flg=0, __var=MV, __mth=MF, __index={}}, MT)
             :set_readonly()
else
  object = MF.set_methods(
           setmetatable({__id='object', __flg=0, __var=MV, __index={}}, MT), MF)
             :set_readonly()
end

 -- parent link
setmetatable(MV, object)

-- protect against changing metatable
MT.__metatable = MT

-- end ------------------------------------------------------------------------o
return { object = object }
