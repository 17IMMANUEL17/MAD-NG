--[=[
 o-----------------------------------------------------------------------------o
 |
 | Object module (object model)
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide an object model to support prototype-based programming with value
    semantic for functions stored in variables and further extensions.

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  object -- creates objects

SYNOPSIS
  obj1 = Object {}               -- create a new empty object
  obj2 = Object { ... }          -- create a new object with values
  obj3 = Object 'name' { ... }   -- create a new object with name and values
  obj4 = obj3 'name' { ... }     -- create a new object from parent (class)

DESCRIPTION
  The object module implements the necessary machinery to support prototype-
  based programming with value semantic for functions and further extensions:
  - On read, the lookup of values and functions follows the inheritance down to
    Object with the following precedence: immediate methods (object), variables,
    inherited methods (parent). If the retrieved value is a function, it is
    called with self passed as argument #1 (can be ignored) and the result is
    returned (i.e. function with value semantic).
  - On write, the value is simply stored in the current object (no lookup). To
    override this behavior, just (re)defined the __newindex metamethod using
    set_metamethod with allowed overriding (use with care!).
  - On build, the new instance is connected to its parent (inheritance). If the
    new instance has a defined __init metamethod (shared), it will be called on
    the new instance and non-nil result or the new instance will be returned.
    This feature is particularly useful to copy immediate methods to new
    instances.
  - To set:
    + functions with arguments or avoid value semantic, use set_function.
    + immediate methods (inherited), use set_method.
    + metamethods (shared), use set_metamethod.
  - Root 'Object' defines the following variables:
    + 'name'  points to 'self' name unless overridden (alias)
    + '__par' points to 'self' parent unless overridden (alias)
    + '__var' points to 'self' variables unless overridden (alias)
    + '__id'  holds 'self' name if provided (variable)
  - Each object inherits the following methods:
    #, name, is_object, is_instanceOf, isa, set, set_function, set_method,
    set_metamethod, set_parent, dump (for debug).

RETURN VALUES
  A table constaining Object, the root constructor of objects, and the helpers
  is_object and is_instanceOf for function-like usage in case the argument #1
  might not be a valid object.

ERROR
  Objects constructors trig an error if the optional argument #1 (name) is not a
  string or if the argument #1 (if a name is provided) or #2 is not a raw table.
  Using an object incompletely initialized (e.g. with a name but no value) trigs
  an error.

EXAMPLES
  Point = MAD.Object {}          -- point is an instance of Object
  p1 = Point { x=2, y=2 }        -- p1 is an instance of Point
  p2 = p1 { x=3 }                -- p2 is an instance of p1 and inherits p1.y
  p1.x, p1.z = 1, 3              -- set p1.x, p1.z
  print(p1.x, p1.y, p1.z)        -- print 1 2 3
  print(p2.x, p2.y, p2.z)        -- print 3 1 3

SEE ALSO
  None.
]=]

-- documentation --------------------------------------------------------------o

M.__help.object_model_scheme = [=[

Schematic object-model representation:
--------------------------------------

  o0 = MAD.Object
  o1 = o0 'obj1' {*o1-var*}
  o2 = o1 'obj2' {*o2-var*}
  o3 = o1 'obj3' {*o3-var*}                    +-------------+
                             +---------------+>| *meta-tbl*  |<------------+
+---------+                  |   +---------+ | | metamethods | +---------+ |
|  *o2*   |                  |   |  *o1*   | | +-------------+ |  *o0*   | |
|  [meta] |------------------+   |  [meta] |-+                 |  [meta] |-+
|   [par] |------------------|-->|   [par] |------------------>|   [par] |--->.
| __index |------------------|-+ | __index |-----------------+ | __index |--->.
|         |  +-----------+   | | |         |  +-----------+  | |         |
|   [var] |->|  *o2-var* |   | | |   [var] |->| *o1-var*  |  | |   [var] |-+
| methods |  |    [meta] |-+ | | | methods |  |    [meta] |-+| | methods | |
+---------+  | variables | | | | +---------+  | variables | || +---------+ |
     ^       +-----------+ | | |      ^       +-----------+ ||        +----+
     +---------------------+ | |      |             ^       ||        v
+---------+                  | |      +-------------|-------+|  +-----------+
|  *o3*   |                  | |      |             |        |  | *o0-var*  |
|  [meta] |------------------+ |      |             |        +->|    [meta] |->.
|   [par] |--------------------|------+             |           | variables |
| __index |--------------------+--------------------+           +-----------+
|         |  +-----------+
|   [var] |->| *o3-var*  |
| methods |  |    [meta] |-+
+---------+  | variables | |
     ^       +-----------+ |
     +---------------------+
]=]
-- For details, see the 3 lines of the 'unamed obj' compound statement in __call
-- constructor

-- examples -------------------------------------------------------------------o

M.__help.object_model_examples = [=[

Catching creation:
------------------
  Example how to count the number of objects created

  local count = 0
  local function set_counter (self)
    local mm = function (self)
      count = count + 1
      return self
    end
    self:set_metamethod('__init', mm)
  end
  set_counter(MAD.Object) -- before any child creation

Catching writes:
----------------
  Example how to set a notification-on-write with logging

  local function set_notification (self)
    local nwidx = rawget(getmetatable(self),'__newindex')
    local mm = function (self, k, v)
      trace(self, k, v) -- logging
      nwidx(self, k, v) -- forward, mandatory!
    end
    self:set_metamethod('__newindex', mm, true) -- override!
  end
  set_notification(MAD.Object) -- before any child creation
]=]

-- locals ---------------------------------------------------------------------o

local is_string, is_rawtable, is_function, is_callable
      in require 'madl_utils'

-- implementation -------------------------------------------------------------o

-- metamethods
local meta = { -- from lj_obj.h + __init
  '__add', '__call', '__concat', '__div', '__eq', '__gc', '__index', '__init',
  '__ipairs', '__le', '__len', '__lt', '__metatable', '__mod', '__mode',
  '__mul', '__new', '__newindex', '__pairs', '__pow', '__sub', '__tostring',
  '__unm',
}
for _,v in ipairs(meta) do meta[v]=v end -- build dictionary

-- special protected key to store parent and object members
local par, var, var0 = {}, {}, setmetatable({}, {
  __index   =\ error "incomplete object initialization",
  __newindex=\ error "incomplete object initialization",
})

-- metatable of 'Object'
local MT = {}

-- metatable of 'true function' proxy
local MF = {
  __call    =\t,... -> t[1](...),
  __index   =\ error "private object",
  __newindex=\ error "private const object",
}

-- helpers

local function is_proxy (a)
  return type(a) == 'table' and getmetatable(a) == MF
end

local function is_object (a)
  return type(a) == 'table' and rawget(a,var) ~= nil
end

local function is_instanceOf (a, b)
  assert(is_object(b), "invalid argument #2 (object expected)")
  if not is_object(a) then return false end
  while a and a ~= b do a = rawget(a,par) end
  return a == b
end

-- objects are proxies controlling variables access and inheritance

local function init(a)
  local m = rawget(getmetatable(a), '__init')
  return m and m(a) or a
end

function MT:__call (a) -- object ctor (define object-model)
  if is_string(a) then -- named obj
    local obj = {__id=a, [par]=self, [var]=var0, __index=self[var]} -- proxy
    return setmetatable(obj, getmetatable(self)) -- incomplete obj
  elseif is_rawtable(a) then
    if self[var] == var0 then -- finalize named obj
      if rawget(self,'__id') ~= nil then a.__id, self.__id = self.__id, nil end
      self[var] = setmetatable(a, self); -- set fast inheritance
      return init(self)
    else -- unnamed obj
      local obj = {[par]=self, [var]=a, __index=self[var]} -- proxy
      setmetatable(a, obj)                               -- set fast inheritance
      return init(setmetatable(obj, getmetatable(self))) -- complete obj
    end
  end
  error("invalid object constructor argument (string or table expected)")
end

local function get (self, k) -- object lookup
  return self and (rawget(self,k) or get(rawget(self,par),k))
end

function MT:__index (k) -- (+eval+inheritance)
  local v = self[var][k]                       -- inheritance of variables
  if is_function(v) then return v(self)        -- function with value semantic
  else return v or get(rawget(self,par),k) end -- inheritance of methods
end

function MT:__newindex (k, v)
  self[var][k] = v
end

function MT:__len   () return #self[var]        end
function MT:__pairs () return pairs(self[var])  end
function MT:__ipairs() return ipairs(self[var]) end

-- object methods

M.__help.isa = [[
NAME
  is_object, is_instanceOf, isa   -- identify parent (class) of objects

SYNOPSIS
  Object.is_object(obj)
  Object.is_instanceOf(obj,class)
  Object.isa(obj,class)

  obj:is_object()
  obj:is_instanceOf(class)
  obj:isa(class)

DESCRIPTION
  Method is_instanceOf follows and check the objects hierarchy from 'obj' down
  to 'class'. Method is_object(obj) is equivalent to is_instanceOf(obj, Object)
  but faster. Method isa is an alias for is_instanceOf.

RETURN VALUES
  is_object, is_instanceOf return true if obj inherits from Object or class
  respectively.

ERROR
  is_instanceOf trig an error if the argument #2 is not a valid object.

SEE ALSO
  None.
]]
M.__help.is_object     = M.__help.isa
M.__help.is_instanceOf = M.__help.isa

M.is_object     = is_object
M.is_instanceOf = is_instanceOf
M.isa           = is_instanceOf

M.__help.set = [[
NAME
  set, set_function, set_method, set_metamethod, set_parent.

SYNOPSIS
  Object.set(obj, {...})
  Object.set_function(obj, 'fname', func)
  Object.set_method(obj, 'fname', func)
  Object.set_metamethod(obj, '__name', metafunc, override)
  Object.set_parent()

  obj:set({...})
  obj:set_function('fname', func)
  obj:set_method('fname', func)
  obj:set_metamethod('__name', metafunc, override)
  obj:set_parent()

DESCRIPTION

RETURN VALUES
  The object.

SEE ALSO
  None.
]]

function M:set (tbl)
  assert(is_object(self) , "invalid argument #1 (object expected)")
  assert(is_rawtable(tbl), "invalid argument #2 (raw table expected)")
  local var = self[var]
  for k,v in pairs(tbl) do
    rawset(var, k, v)
  end
  return self
end

function M:set_function (name, func)
  assert(is_object(self)               , "invalid argument #1 (object expected)")
  assert(is_callable(func) or func==nil, "invalid argument #3 (callable expected)")
  self[var][name] = is_function(func) and setmetatable({func}, MF) or func
  return self
end

function M:set_method (name, func)
  assert(is_object(self)               , "invalid argument #1 (object expected)")
  assert(meta[name] ~= name            , "invalid argument #2 (metamethod detected)")
  assert(is_callable(func) or func==nil, "invalid argument #3 (callable expected)")
  rawset(self, name, func)
  return self
end

function M:set_metamethod (name, func, override)
  assert(is_object(self)               , "invalid argument #1 (object expected)")
  assert(meta[name] == name            , "invalid argument #2 (metamethod expected)")
  assert(is_callable(func) or func==nil, "invalid argument #3 (callable expected)")
  local sm, pm = getmetatable(self), getmetatable(rawget(self,par))
  assert(rawget(sm, name) == nil or override, "cannot override inherited behavior")
  if sm == pm then -- create a new metatable if shared with parent
    sm={} ; for _,v in ipairs(meta) do sm[v] = pm[v] end
    setmetatable(self, sm)
  end
  rawset(sm, name, func)
  return self
end

function M:set_parent (class, name)
  assert(self ~= M          , "'Object' must stay the root of objects")
  assert(is_object(self) or is_rawtable(self)
                            , "invalid argument #1 (raw table or object expected)")
  assert(is_object(class)   , "invalid argument #2 (object expected)")
  rawset(self, par, class)
  rawset(self, '__index', class[var])
  if is_rawtable(self) then
    rawset(self, var, setmetatable({__id=name},self))
  end
  setmetatable(self, getmetatable(class))
  return self
end

-- debug

function M:dump (file_, level_, indent_, vars_)
  local sv = self[var]
  local file, level, indent, vars =
    file_ or io.stdout, level_ or 1e6, indent_ or 1, vars_ or {}
  -- header
  for i=1,indent-1 do file:write("  ") end -- indent
  file:write("+ [", tostring(sv), "]\n")
  -- variables
  for k,v in pairs(sv) do
    for i=1,indent do file:write("  ") end -- indent
    file:write(tostring(k))
        if is_string(v) then file:write(": '", tostring(v)   , "'")
    elseif is_proxy (v) then file:write(": [", tostring(v[1]), "]")
                        else file:write(":  ", tostring(v)) end
    if vars[k] and string.sub(k,1,2) ~= '__' then -- mark overrides
      file:write(" (")
      for i=1,vars[k] do file:write('*') end
      file:write(")");
    end
    vars[k] = (vars[k] or 0)+1
    file:write("\n")
  end
  -- parent
  if level > 1 and self ~= M then
    self[par]:dump(file, level-1, indent+1, vars)
  end
end

-- root Object = module

M[var] = {
  __id ='Object',
  __par=\s rawget(s,par), -- alias
  __var=\s rawget(s,var), -- alias
  name =\s s.__id,        -- alias
}

-- end ------------------------------------------------------------------------o
return {
  Object        = setmetatable(M,MT),
  is_object     = is_object,
  is_instanceOf = is_instanceOf,
}
