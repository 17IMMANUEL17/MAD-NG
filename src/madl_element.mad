--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide the hierarchy (taxonomy) of the lattice elements

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local object                                       in MAD
local is_nil, is_number, is_table, is_object       in MAD.typeid
local fbit, fset, tobit                            in MAD.operator
local set_flag, clear_flag, test_flag              in object

local _nyi

-- root object ----------------------------------------------------------------o

local Element = object 'element' {
  kind='element', is_element=true,
  l=0, lrad=0, angle=0, tilt=0, e1=0, e2=0,                  -- number required!
  f1=0, f2=0, h1=0, h2=0, hgap=0, fint=0, fintx=false,       -- number required!
  k0 =false, k1 =false, k2 =false, k3 =false, k4 =false, k5 =false,
  k0s=false, k1s=false, k2s=false, k3s=false, k4s=false, k5s=false,
  knl={}, ksl={}, dknl={}, dksl={}, dknlr={}, dkslr={}, radius=false, -- *r NYI
  pnl={}, psl={}, dpnl={}, dpsl={},                                   --    NYI
  fringe=0, fringemax=2, kill_ent_fringe=false, kill_exi_fringe=false,
  aperture={kind='square', tilt=false, offset=false, tol=false, 1},
  model=false, method=false,
}

-- identity -------------------------------------------------------------------o

local _id = {}

local function is_element (a)
  local mt = getmetatable(a)
  return mt ~= nil and mt.__elem == _id
end

-- flags ----------------------------------------------------------------------o

M.flags = {
  -- general
  selected = fbit(0),

  -- monitors & kickers (e.g. orbit correction)
  enabled  = fbit(1),

  -- survey, track, twiss
  observe  = fbit(2),

  -- implicit elements (e.g. implicit drifts)
  implicit = fbit(3),

  -- plot layout
  layout   = fbit(4),
  layangle = fbit(5),

  -- bits 6..29 are free

  -- reserved (i.e. object model)
  reserved1 = fbit(30),
  reserved2 = fbit(31),

  -- fringe fields (elements fringe attribute)
  fringe = {
    std    = fset(fbit(0),fbit(1)),
    bend   = fbit(0),
    mult   = fbit(1),
    qsad   = fbit(2),
    rfcav  = fbit(0),
    sadstd = fset(fbit(0),fbit(1),fbit(2)),
    all    = tobit(-1)
  }
}

-- members --------------------------------------------------------------------o

local selected, enabled, implicit, observe, fringe in M.flags

Element :set_methods {
  is_selected = \s,f ->  test_flag(s, f or selected),
  select      = \s,f ->   set_flag(s, f or selected),
  deselect    = \s,f -> clear_flag(s, f or selected),
  -- specializations
  is_enabled  = \s   ->  test_flag(s, enabled ),
  is_observed = \s   ->  test_flag(s, observe ),
  is_implicit = \s   ->  test_flag(s, implicit),

} :set_metamethods ({
  -- identity
  __elem = _id,
  -- concatenation
  __add = \a,b -> M.bline { a, b },
  -- repetition
  __mul = \a,b => if is_number(b) then a,b = b,a end
                  return M.bline { __rep=a, b } end,
  -- reflection
  __unm = \a -> M.bline { __rep=-1, a },
  -- dump
  __tostring = \s -> string.format("%s: '%s' %p", s.kind, s.__id, s),

}, true) :set_readonly()

-- taxonomy -------------------------------------------------------------------o

-- element kinds

M. thin_element = Element  'thin_element' { is_thin    = true }
M.drift_element = Element 'drift_element' { is_drift   = true }
M.thick_element = Element 'thick_element' { is_thick   = true }
M.patch_element = Element 'patch_element' { is_patch   = true }
M.extra_element = Element 'extra_element' { is_extra   = true }
M.specl_element = Element 'specl_element' { is_special = true }

-- assembler elements

M.sequence    = M.extra_element 'sequence'     { }
M.assembly    = M.extra_element 'assembly'     { }
M.bline       = M.extra_element 'bline'        { }

-- special elements

M.marker      = M.specl_element 'marker'       { }
M.slink       = M.specl_element 'slink'        { }

-- drift elements

M.drift       = M.drift_element 'drift'        { }
M.collimator  = M.drift_element 'collimator'   { }
M.instrument  = M.drift_element 'instrument'   { }
M.placeholder = M.drift_element 'placeholder'  { }

-- thick elements

M.sbend       = M.thick_element 'sbend'        { fringe=fringe.std }
M.rbend       = M.thick_element 'rbend'        { fringe=fringe.std, true_rbend=false }
M.quadrupole  = M.thick_element 'quadrupole'   { fringe=fringe.std }
M.sextupole   = M.thick_element 'sextupole'    { fringe=fringe.std }
M.octupole    = M.thick_element 'octupole'     { fringe=fringe.std }
M.decapole    = M.thick_element 'decapole'     { fringe=fringe.std }
M.dodecapole  = M.thick_element 'dodecapole'   { fringe=fringe.std }
M.solenoid    = M.thick_element 'solenoid'     { fringe=fringe.std, ks=0, ksi=0 }
M.tkicker     = M.thick_element 'tkicker'      { fringe=fringe.std, hkick=0, vkick=0 }
M.wiggler     = M.thick_element 'wiggler'      { fringe=fringe.std, _nyi }
M.elseparator = M.thick_element 'elseparator'  { fringe=fringe.std, ex=0, ey=0, exl=0, eyl=0 }
M.rfcavity    = M.thick_element 'rfcavity'     { fringe=fringe.std, volt=0, freq=0, lag=0, harmon=0, n_bessel=0, totalpath=true }
M.generic     = M.thick_element 'generic'      { damap=nil, nslice=1 }

-- thin elements

M.beambeam    = M.thin_element  'beambeam'     { beam=false, xma=0, yma=0, dir=0 }
M.multipole   = M.thin_element  'multipole'    { }

-- patch elements

M.xrotation   = M.patch_element 'xrotation'    { }
M.yrotation   = M.patch_element 'yrotation'    { }
M.srotation   = M.patch_element 'srotation'    { }
M.translate   = M.patch_element 'translate'    { }
M.changeref   = M.patch_element 'changeref'    { }
M.changedir   = M.patch_element 'changedir'    { }
M.changenrj   = M.patch_element 'changenrj'    { }

-- specializations

M.rfmultipole = M.rfcavity      'rfmultipole'  { } -- no pnl, psl support yet
M.crabcavity  = M.rfmultipole   'crabcavity'   { _nyi } -- needed?

M.monitor     = M.instrument     'monitor'     { }
M.hmonitor    = M.monitor       'hmonitor'     { }
M.vmonitor    = M.monitor       'vmonitor'     { }

M.kicker      = M.tkicker        'kicker'      { chkick=0, cvkick=0 }
M.hkicker     = M. kicker       'hkicker'      { kick=0 }
M.vkicker     = M. kicker       'vkicker'      { kick=0 }

-- build kind and is_xxx keys of elements -------------------------------------o

for k,e in pairs(M) do
  if is_object(e) then
    assert(is_element(e), "non-element '"..e.__id.."'detected in Element")
    if k ~= string.lower(e.__id) then
      error("inconsistent element kind '"..k.."' detected in '".. e.__id .."'")
    end
-- warning: class protection set by alt. nolookup object model can be BYPASSED
--          because classes are modified before any use of 'kind' and 'is_xxx'
--          attributes by any children at the time of module loading...
    e:setvar({ kind=k, ['is_'.. k]=true }, 'init')
  end
end

-- env ------------------------------------------------------------------------o

-- local is_implicit, is_observed, is_selected in Element

MAD.typeid.is_element  = is_element
-- MAD.typeid.is_implicit = is_implicit
-- MAD.typeid.is_observed = is_observed
-- MAD.typeid.is_selected = is_selected

-- end ------------------------------------------------------------------------o
return { element = M }
