--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide the hierarchy (taxonomy) of the lattice elements

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- help -----------------------------------------------------------------------o

local __help = {}
__help.element = [=[
NAME
  element -- define MAD elements

SYNOPSIS

DESCRIPTION
  The module element is a front-end to the factory of all MAD elements.

RETURN VALUES

EXAMPLES
  local quadrupole in MAD.element
  mq = quadrupole 'mq' {}
  qf = mq { k1  =  0.1   } -- focusing quadrupole
  qd = mq { k1 := -qf.k1 } -- defocusing quadrupole

SEE ALSO
  sequence, bline, beam, object
]=]

-- locals ---------------------------------------------------------------------o

local Object                      in MAD
local is_nil, is_number, is_table in MAD.typeid

-- flags
local flg_sel = 3

-- root object ----------------------------------------------------------------o

local _elm = {}

Element = Object 'Element' { kind='element', [_elm]=true }

local function is_element (a)
  return is_table(a) and not is_nil(a[_elm])
end

Element:set_metamethod {
  -- concatenation
  __add = \a,b -> M.bline { a, b },
  -- repetition
  __mul = \a,b => if is_number(b) then a,b = b,a end
                  return M.bline { __rep=a, b } end,
  -- reflection
  __unm = \a -> M.bline { __rep=-1, a },
}

-- taxonomy -------------------------------------------------------------------o

-- root

M.Element = Element

-- frames

M.   thin_element = M.Element 'thin_element'    { is_thin   =true, l=0, angle=0, tilt=0 }
M.  patch_element = M.Element 'patch_element'   { is_patch  =true, l=0, angle=0, tilt=0 }
M.  drift_element = M.Element 'drift_element'   { is_drift  =true, l=0, angle=0, tilt=0 }
M. strait_element = M.Element 'strait_element'  { is_strait =true, l=0, angle=0, tilt=0 }
M. curved_element = M.Element 'curved_element'  { is_curved =true, l=0, angle=0, tilt=0 }
M.special_element = M.Element 'special_element' { is_special=true, l=0, angle=0, tilt=0 }
M.  extra_element = M.Element 'extra_element'   { is_extra  =true, l=0, angle=0, tilt=0 }

-- assembler elements

M.assembly    = M.extra_element   'assembly'   { kind='assembly'    }
M.bline       = M.extra_element   'bline'      { kind='bline'       }

-- special elements

M.marker      = M.special_element 'marker'     { kind='marker'      }
M.slink       = M.special_element 'slink'      { kind='slink'       }
M.spause      = M.special_element 'spause'     { kind='spause'      }

-- factory

M.drift       = M.drift_element  'drift'       { kind='drift'       }
M.collimator  = M.drift_element  'collimator'  { kind='collimator'  }
M.instrument  = M.drift_element  'instrument'  { kind='instrument'  }
M.placeholder = M.drift_element  'placeholder' { kind='placeholder' }
M.monitor     = M.drift_element  'monitor'     { kind='monitor'     }

M.sbend       = M.curved_element 'sbend'       { kind='sbend'       }

M.rbend       = M.strait_element 'rbend'       { kind='rbend'       }
M.quadrupole  = M.strait_element 'quadrupole'  { kind='quadrupole'  }
M.sextupole   = M.strait_element 'sextupole'   { kind='sextupole'   }
M.octupole    = M.strait_element 'octupole'    { kind='octupole'    }
M.decapole    = M.strait_element 'decapole'    { kind='decapole'    }
M.dodecapole  = M.strait_element 'dodecapole'  { kind='dodecapole'  }
M.kicker      = M.strait_element 'kicker'      { kind='kicker'      }
M.solenoid    = M.strait_element 'solenoid'    { kind='solenoid'    }
M.wiggler     = M.strait_element 'wiggler'     { kind='wiggler'     }
M.elseparator = M.strait_element 'elseparator' { kind='elseparator' }
M.rfcavity    = M.strait_element 'rfcavity'    { kind='rfcavity'    }

M.multipole   = M.  thin_element 'multipole'   { kind='multipole'   }
M.rfmultipole = M.  thin_element 'rfmultipole' { kind='rfmultipole' }

M.srotation   = M. patch_element 'srotation'   { kind='srotation'   }
M.xrotation   = M. patch_element 'xrotation'   { kind='xrotation'   }
M.yrotation   = M. patch_element 'yrotation'   { kind='yrotation'   }
M.translate   = M. patch_element 'translate'   { kind='translate'   }

-- specializations

M.twcavity    = M.rfcavity       'twcavity'    { kind='twcavity'    }
M.crabcavity  = M.rfmultipole    'crabcavity'  { kind='crabcavity'  }

M.hkicker     = M.kicker         'hkicker'     { kind='hkicker'     }
M.vkicker     = M.kicker         'vkicker'     { kind='vkicker'     }

M.hmonitor    = M.monitor        'hmonitor'    { kind='hmonitor'    }
M.vmonitor    = M.monitor        'vmonitor'    { kind='vmonitor'    }

M.bpm         = M.monitor        'bpm'         { kind='bpm'         }
M.blm         = M.monitor        'blm'         { kind='blm'         }

-- build is_xxx keys
do
  for k,v in pairs(M) do
    if is_element(v) then v['is_'..k] = true end
  end
end

-- members --------------------------------------------------------------------o

Element:set_function {
  -- reversed logic, that is elements are selected by default.
  is_selected = \s,f -> s: test_flag(f or flg_sel) == false,
  select      = \s,f -> s:clear_flag(f or flg_sel),
  deselect    = \s,f -> s:  set_flag(f or flg_sel),
}:set_readonly()

-- env ------------------------------------------------------------------------o

MAD.typeid.is_element = is_element

-- end ------------------------------------------------------------------------o
return {
  element = M,
  __help  = __help,
}

-- TODO?
--[[ To move in Object or element:set_function(...) ?
local function show_inheritance(self, depth, sep)
  show_list(self, element_fields, sep)
  if depth > 0 and not rawget(self:class(), 'kind') then
    show_inheritance(self:class(), depth-1)
  end
end

local function show_properties(self, disp, sep)
  local show = type(disp) == 'number' and show_inheritance or show_list
  show(self, disp, sep)
end

local printf in MAD.utility

function MT:show(disp)
  printf("   %-25s '%s' { at= %g, ", self:class().name ...)
  show_properties(self, disp)
  io.write(' },\n')
end

function MT:show_madx(disp)
  printf("  %-25s:%s, at= %g, ", self.name, self:class().name, self.s_pos)
  show_properties(self, disp, {'= ', ', '})
  io.write(';\n')
end
]]



