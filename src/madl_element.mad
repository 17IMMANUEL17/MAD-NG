--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide the hierarchy (taxonomy) of the lattice elements

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local Object                      in MAD
local is_nil, is_number, is_table in MAD.typeid

-- root object ----------------------------------------------------------------o

local _elem = {}

local Element = Object 'Element' {
  kind='element', l=0, angle=0, tilt=0,
  [_elem]=true,
}

local function is_element (a)
  return is_table(a) and a[_elem] ~= nil
end

Element :set_metamethods ({
  -- concatenation
  __add = \a,b -> M.bline { a, b },
  -- repetition
  __mul = \a,b => if is_number(b) then a,b = b,a end
                  return M.bline { __rep=a, b } end,
  -- reflection
  __unm = \a -> M.bline { __rep=-1, a },

  -- dump
  __tostring = \s -> string.format("%s: '%s' %p", s.kind, s.__id, s),
}, true)

-- taxonomy -------------------------------------------------------------------o

-- frames

M.   thin_element = Element    'thin_element'  { is_thin    = true  }
M.  drift_element = Element   'drift_element'  { is_drift   = true  }
M.  thick_element = Element   'thick_element'  { is_thick   = true  }
M.  patch_element = Element   'patch_element'  { is_patch   = true  }
M.  extra_element = Element   'extra_element'  { is_extra   = true  }
M.special_element = Element 'special_element'  { is_special = true  }

-- assembler elements

M.sequence    = M.extra_element   'sequence'   { kind='sequence'    }
M.assembly    = M.extra_element   'assembly'   { kind='assembly'    }
M.bline       = M.extra_element   'bline'      { kind='bline'       }

-- special elements

M.marker      = M.special_element 'marker'     { kind='marker'      }
M.slink       = M.special_element 'slink'      { kind='slink'       }

-- factory

M.drift       = M.drift_element  'drift'       { kind='drift'       }
M.collimator  = M.drift_element  'collimator'  { kind='collimator'  }
M.instrument  = M.drift_element  'instrument'  { kind='instrument'  }
M.placeholder = M.drift_element  'placeholder' { kind='placeholder' }
M.monitor     = M.drift_element  'monitor'     { kind='monitor'     }

M.sbend       = M.thick_element 'sbend'        { kind='sbend'       }
M.combined    = M.thick_element 'combined'     { kind='combined'    }
M.rbend       = M.thick_element 'rbend'        { kind='rbend'       }
M.quadrupole  = M.thick_element 'quadrupole'   { kind='quadrupole'  }
M.sextupole   = M.thick_element 'sextupole'    { kind='sextupole'   }
M.octupole    = M.thick_element 'octupole'     { kind='octupole'    }
M.decapole    = M.thick_element 'decapole'     { kind='decapole'    }
M.dodecapole  = M.thick_element 'dodecapole'   { kind='dodecapole'  }
M.kicker      = M.thick_element 'kicker'       { kind='kicker'      }
M.solenoid    = M.thick_element 'solenoid'     { kind='solenoid'    }
M.wiggler     = M.thick_element 'wiggler'      { kind='wiggler'     }
M.elseparator = M.thick_element 'elseparator'  { kind='elseparator' }
M.rfcavity    = M.thick_element 'rfcavity'     { kind='rfcavity'    }
M.twcavity    = M.thick_element 'twcavity'     { kind='twcavity'    }
M.compound    = M.thick_element 'compound'     { kind='compound'    }

M.multipole   = M.thin_element   'multipole'   { kind='multipole'   }
M.rfmultipole = M.thin_element   'rfmultipole' { kind='rfmultipole' }

M.srotation   = M.patch_element  'srotation'   { kind='srotation'   }
M.xrotation   = M.patch_element  'xrotation'   { kind='xrotation'   }
M.yrotation   = M.patch_element  'yrotation'   { kind='yrotation'   }
M.translation = M.patch_element  'translation' { kind='translation' }
M.changedir   = M.patch_element  'changedir'   { kind='changedir'   }
M.changeref   = M.patch_element  'changeref'   { kind='changeref'   }

-- specializations

M.crabcavity  = M.rfmultipole    'crabcavity'  { kind='crabcavity'  }

M.hkicker     = M.kicker         'hkicker'     { kind='hkicker'     }
M.vkicker     = M.kicker         'vkicker'     { kind='vkicker'     }

M.hmonitor    = M.monitor        'hmonitor'    { kind='hmonitor'    }
M.vmonitor    = M.monitor        'vmonitor'    { kind='vmonitor'    }

-- build is_xxx keys
do
  for k,v in pairs(M) do
    if is_element(v) then v['is_'..k] = true end
  end
end

-- flags ----------------------------------------------------------------------o

M.flags = {
  selected = Element.first_free_flag,               -- inherited from Object
  observe  = Element.first_free_flag+1,
  shared   = Element.first_free_flag+2,
  layout   = Element.first_free_flag+3,
  layangle = Element.first_free_flag+4,
}

Element.first_free_flag = Element.first_free_flag+5 -- overridden in Element

-- members --------------------------------------------------------------------o

local selected in M.flags

Element :set_methods {
  -- default flag is for selected.
  is_selected = \s,f -> s: test_flag(f or selected),
  select      = \s,f -> s:  set_flag(f or selected),
  deselect    = \s,f -> s:clear_flag(f or selected),
} :set_readonly()

-- env ------------------------------------------------------------------------o

MAD.typeid.is_element = is_element

-- end ------------------------------------------------------------------------o
return {
  element = M,
  __help  = require 'madh_element',
}

--[[ TODO?
ELEMENT DISPLAY

local function show_inheritance(self, depth, sep)
  show_list(self, element_fields, sep)
  if depth > 0 and not rawget(self:class(), 'kind') then
    show_inheritance(self:class(), depth-1)
  end
end

local function show_properties(self, disp, sep)
  local show = type(disp) == 'number' and show_inheritance or show_list
  show(self, disp, sep)
end

local printf in MAD.utility

function MT:show(disp)
  printf("   %-25s '%s' { at= %g, ", self:class().name ...)
  show_properties(self, disp)
  io.write(' },\n')
end

function MT:show_madx(disp)
  printf("  %-25s:%s, at= %g, ", self.name, self:class().name, self.spos)
  show_properties(self, disp, {'= ', ', '})
  io.write(';\n')
end
]]



