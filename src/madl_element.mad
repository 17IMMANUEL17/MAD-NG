--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide the hierarchy (taxonomy) of the lattice elements

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  element -- define MAD elements

SYNOPSIS

DESCRIPTION
  The module element is a front-end to the factory of all MAD elements.

RETURN VALUES

EXAMPLES
  local quadrupole in MAD.elements
  mq = quadrupole 'mq' {}
  qf = mq { k1  =  0.1   } -- focusing quadrupole
  qd = mq { k1 := -qf.k1 } -- defocusing quadrupole

SEE ALSO
  sequence, line, beam, object
]=]

-- locals ---------------------------------------------------------------------o

local Object, is_number in MAD

-- functions ------------------------------------------------------------------o

--[[ To move in Object or element:set_function(...) ?
local function show_inheritance(self, depth, sep)
  show_list(self, element_fields, sep)
  if depth > 0 and not rawget(self:class(), 'kind') then
    show_inheritance(self:class(), depth-1)
  end
end

local function show_properties(self, disp, sep)
  local show = type(disp) == 'number' and show_inheritance or show_list
  show(self, disp, sep)
end

function MT:show(disp)
  io.write('  ', string.format('%-25s',self:class().name.." '"..self.name.."' "), '{ at= ', self.s_pos, ', ')
  show_properties(self, disp)
  io.write(' },\n')
end

function MT:show_madx(disp)
  io.write('  ', string.format('%-25s',self.name..': '..self:class().name..', '), 'at= ', self.s_pos, ', ')
  show_properties(self, disp, {'= ', ', '})
  io.write(';\n')
end
]]

-- taxonomy -------------------------------------------------------------------o

local E = {}

-- elements

E.element = Object 'element' { kind='element', is_element=true }

E.element:set_metamethod {
  -- concatenation
  __add = \a,b -> E.line { a, b },

  -- repetition
  __mul = \a,b => if is_number(b) then a,b = b,a end
                  return E.line { _rep=a, b } end,
}

-- lines

E.line = E.element 'line' { kind='line', is_line=true }

E.line:set_metamethod {
  -- reflection
  __unm = \a -> E.line { _rep=-1, a },
}

-- assembly

E.assembly = E.element 'assembly' { kind='assembly', is_assembly=true }

-- objects

E.marker        = E.element 'marker'        { kind='marker'       , is_marker =true }
E.slink         = E.element 'slink'         { kind='slink'        , is_slink  =true }
E.patch         = E.element 'patch'         { kind='patch'        , is_patch  =true }
E.thin_element  = E.element 'thin_element'  { kind='thin_element' , is_thin   =true }
E.thick_element = E.element 'thick_element' { kind='thick_element', is_thick  =true }

-- frames

E.strait_element = E.thick_element 'strait_element' { kind='strait_element', is_strait=true }
E.curved_element = E.thick_element 'curved_element' { kind='curved_element', is_curved=true }

-- references

E.drift          = E.strait_element 'drift'       { kind='drift'         }
E.dipole         = E.strait_element 'dipole'      { kind='dipole'        }
E.quadrupole     = E.strait_element 'quadrupole'  { kind='quadrupole'    }
E.sextupole      = E.strait_element 'sextupole'   { kind='sextupole'     }
E.octupole       = E.strait_element 'octupole'    { kind='octupole'      }
E.decapole       = E.strait_element 'decapole'    { kind='decapole'      }
E.dodecapole     = E.strait_element 'dodecapole'  { kind='dodecapole'    }
E.multipole      = E.  thin_element 'multipole'   { kind='multipole'     }
E.kicker         = E.strait_element 'kicker'      { kind='kicker'        }
E.solenoid       = E.strait_element 'solenoid'    { kind='solenoid'      }
E.wiggler        = E.strait_element 'wiggler'     { kind='wiggler'       }
E.elseparator    = E.strait_element 'elseparator' { kind='elseparator'   }
E.rfcavity       = E.strait_element 'rfcavity'    { kind='rfcavity'      }
E.rfmultipole    = E.strait_element 'rfmultipole' { kind='rfmultipole'   }
E.collimator     = E.strait_element 'collimator'  { kind='collimator'    }
E.instrument     = E.strait_element 'instrument'  { kind='instrument'    }
E.placeholder    = E.strait_element 'placeholder' { kind='placeholder'   }

E.sbend          = E.curved_element 'sbend'       { kind='sbend'         }
E.rbend          = E.dipole         'rbend'       { kind='rbend'         }

-- specializations

E.twcavity       = E.rfcavity       'twcavity'    { kind='twcavity'      }
E.crabcavity     = E.rfmultipole    'crabcavity'  { kind='crabcavity'    }

E.hkicker        = E.kicker         'hkicker'     { kind='hkicker'       }
E.vkicker        = E.kicker         'vkicker'     { kind='vkicker'       }

E.bpm            = E.instrument     'bpm'         { kind='bpm'           }
E.blm            = E.instrument     'blm'         { kind='blm'           }

-- hook
M.element = E

-- end ------------------------------------------------------------------------o
return MAD.utility.defhelp(M) -- todo: per function help -> 'element'
