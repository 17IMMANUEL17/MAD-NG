--[=[
 o-----------------------------------------------------------------------------o
 |
 | Constant module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a set of math and physical constants

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.constant = [=[
NAME
  constant -- constants for math and physics

SYNOPSIS
  local cst in MAD.constant

DESCRIPTION
  The module constant provides a set of math and physics constants. The physics
  constants are taken from the Particle Data Group publication.
  List of constants: clight, mu0, epsilon0, qelect, hbar, emass, pmass, nmass,
  mumass, deumass, eradius.

EXAMPLES
  local emass, clight in MAD.constant

SEE ALSO
  math.
]=]

__help['constant: Particle Data Group References'] = [=[
PDG 2012: J. Beringer et al. (Particle Data Group), Phys. Rev. D86, 010001 (2012).
PDG 2014: K.A. Olive  et al. (Particle Data Group), Chin. Phys. C, 38, 090001 (2014).
CODATA OF FUNDAMENTAL PHYSICAL CONSTANTS: 2014, arXiv:1507.07956, Sep 2015.
]=]

-- locals ---------------------------------------------------------------------o

local Object, _C in MAD

-- implementation -------------------------------------------------------------o

local constant = Object {
  minlen     = _C.mad_cst_minlen  ,             -- m   minimum length tolerance
  minang     = _C.mad_cst_minang  ,             -- rad minimum angle  tolerance

  E          = _C.mad_cst_E       ,             -- e
  log2e      = _C.mad_cst_LOG2E   ,             -- log_2 e
  log10e     = _C.mad_cst_LOG10E  ,             -- log_10 e
  ln2        = _C.mad_cst_LN2     ,             -- log_e 2
  ln10       = _C.mad_cst_LN10    ,             -- log_e 10
  pi         = _C.mad_cst_PI      ,             -- pi
  pi_2       = _C.mad_cst_PI_2    ,             -- pi/2
  pi_4       = _C.mad_cst_PI_4    ,             -- pi/4
  one_pi     = _C.mad_cst_1_PI    ,             -- 1/pi
  two_pi     = _C.mad_cst_2_PI    ,             -- 2/pi
  two_sqrtpi = _C.mad_cst_2_SQRTPI,             -- 2/sqrt(pi)
  sqrt2      = _C.mad_cst_SQRT2   ,             -- sqrt(2)
  one_sqrt2  = _C.mad_cst_1_SQRT2 ,             -- 1/sqrt(2)

  clight     = _C.mad_cst_CLIGHT  ,             -- m/s
  mu0        = _C.mad_cst_MU0     ,             -- T.m/A (or N/A^2)
  epsilon0   = _C.mad_cst_EPSILON0,             -- F/m
  qelect     = _C.mad_cst_QELECT  ,             -- C
  hbar       = _C.mad_cst_HBAR    ,             -- GeV.s
  emass      = _C.mad_cst_EMASS   ,             -- GeV
  pmass      = _C.mad_cst_PMASS   ,             -- GeV
  nmass      = _C.mad_cst_NMASS   ,             -- GeV
  mumass     = _C.mad_cst_MUMASS  ,             -- GeV
  deumass    = _C.mad_cst_DEUMASS ,             -- GeV
  eradius    = _C.mad_cst_ERADIUS ,             -- m (electromagnetic radius)

} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  constant = constant,
  __help   = __help,
}
