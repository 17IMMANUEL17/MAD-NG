--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.survey = [[
NAME
  survey -- Survey

SYNOPSIS
  TODO

DESCRIPTION
  The module survey provides...

RETURN VALUES
  The survey command

SEE ALSO
  element, sequence, track
]]

-- locals ---------------------------------------------------------------------o

local abs, sin, cos            in math
local vector, matrix, element  in MAD
local is_nil, is_sequence      in MAD.typeid
local minlen, minang           in MAD.constant

-- special --------------------------------------------------------------------o

local function empty_survey () end

local function invalid_survey (elm)
  error(string.format("invalid element %s of kind %s with length %s",
                      elm.name, elm.kind, elm.l))
end

element.  patch_element :set_functions { survey = invalid_survey } -- no default
element.  extra_element :set_functions { survey = invalid_survey } -- not valid
element.special_element :set_functions { survey =   empty_survey } -- default

-- angles adjustment ----------------------------------------------------------o

local function update_angles (m)
  local A, W in m
  A[1], A[2], A[3] = W:torotmad(A[1], A[2], A[3])
end

-- drifts ---------------------------------------------------------------------o

local function straight_drift (_, m, l)
  if l < minlen then return end

  m.R :fill {0, 0, l}
  m.V = m.W * m.R + m.V
end

element.drift_element :set_functions {
  survey = \e,m -> straight_drift(nil, m, e.l)
}

-- patches --------------------------------------------------------------------o

-- S-rotation (roll, tilt)

local function srotation (_, m, angle) -- Rz(angle)
  if abs(angle) < minang then return end

  m.S :rotz(angle*m.dir)
  m.W = m.W * m.S
end

-- Y-rotation (yaw)

local function yrotation (_, m, angle) -- Ry(-angle)
  if abs(angle) < minang then return end

  m.S :roty(-angle*m.dir)
  m.W = m.W * m.S
end

-- X-rotation (pitch)

local function xrotation (_, m, angle) -- Rx(-angle)
  if abs(angle) < minang then return end

  m.S :rotx(-angle*m.dir)
  m.W = m.W * m.S
end

-- Translation (ds treated as drift length)

local function translate (_, m, dx, dy, dz)
  if abs(dx)+abs(dy)+abs(dz) < minlen then return end

  m.R :fill {dx*m.dir, dy*m.dir, dz}
  m.V = m.W * m.R + m.V
end

-- Changeref/Forward/Backward patches

local function changeref (elm, m)
  local x, y, z, theta, phi, psi in elm
  xrotation(elm, m, phi   or 0)    -- phi  : Elevation angle.
  yrotation(elm, m, theta or 0)    -- theta: Azimuthal angle.
  srotation(elm, m, psi   or 0)    -- psi  : Roll      angle.
  translate(elm, m, x or 0, y or 0, z or 0)
end

local function forward_patch (elm, m)
  local x, y, z, theta, phi, psi in elm
  xrotation(elm, m, phi   or 0)    -- phi  : Elevation angle.
  yrotation(elm, m, theta or 0)    -- theta: Azimuthal angle.
  srotation(elm, m, psi   or 0)    -- psi  : Roll      angle.
  translate(elm, m, x     or 0, y or 0, z or 0)
end

local function backward_patch (elm, m)
  local x, y, z, theta, phi, psi in elm
  translate(elm, m, x     or 0, y or 0, z or 0)
  srotation(elm, m, psi   or 0)    -- psi  : Roll      angle.
  yrotation(elm, m, theta or 0)    -- theta: Azimuthal angle.
  xrotation(elm, m, phi   or 0)    -- phi  : Elevation angle.
end

-- patch_element(s)

element.srotation :set_functions {
  survey = \e,m -> srotation(e, m, e.psi or e.angle),
}

element.yrotation :set_functions {
  survey = \e,m -> yrotation(e, m, e.theta or e.angle),
}

element.xrotation :set_functions {
  survey = \e,m -> xrotation(e, m, e.phi or e.angle),
}

element.translation :set_functions {
  survey = \e,m -> translate(e, m, e.dx or 0, e.dy or 0, e.dz or 0),
}

element.changeref :set_functions {
  survey = \e,m -> changeref(e, m),
}

-- frame kinds ----------------------------------------------------------------o

local function thin_survey (elm, m) -- e.g. multipole
  local angle in elm
  if abs(angle) < minang then return end

  local dir in m
  m.S :roty(-angle * dir)

  local tilt in elm
  if abs(tilt) >= minang then
    m.T :rotz(tilt * dir)
    m.S = m.T * m.S * m.T:t()
  end

  m.W = m.W * m.S
end

local function thick_survey (elm, m) -- e.g. sbend, rbend, quadrupole, ...
  local l in elm
  if l < minlen then
    return thin_survey(elm, m)
  end

  local angle in elm
  if abs(angle) < minang then
    return straight_drift(nil, m, l)
  end

  local dir in m
  angle = angle*dir
  local rho = l/angle
  m.R :fill {rho*(cos(angle)-1), 0, rho*sin(angle)}
  m.S :roty(-angle)

  local tilt in elm
  if abs(tilt) >= minang then
    m.T :rotz(tilt*dir)
    m.R = m.T * m.R
    m.S = m.T * m.S * m.T:t()
  end

  m.V = m.W * m.R + m.V
  m.W = m.W * m.S
end

element. thin_element :set_functions { survey =  thin_survey }
element.thick_element :set_functions { survey = thick_survey }

-- survey command -------------------------------------------------------------o

local mtable, Command in MAD
local observe in MAD.element.flags

local _srv = {}

local function make_mtable (self)
  if self.mtable then return self.mtable end -- already built
  if not self.save then return nil end       -- nothing to build

  local sequence, drift, range, nturn in self
  local name, direction in sequence
  local nrow = sequence:length_of(range, nturn) * (drift and 2 or 1)

  return mtable 'survey' {
    type='survey', title=name, direction=direction,
    {'name'}, 'kind', 's', 'l', 'angle', 'tilt',
    'x', 'y', 'z', 'theta', 'phi', 'psi', 'globaltilt',
    [_srv]=_srv,
  } :reserve(math.min(nrow, 1e5))
end

local function fill_mtable (tbl, name, kind, m, s, l, ang, til)
  local V, A, dir in m
  local x, y, z      = V[1], V[2], V[3]
  local th, phi, psi = A[1], A[2], A[3]
  ang = ang and ang ~= 0 and ang*dir or 0
  til = til and til ~= 0 and til*dir or 0
  -- keep order!
  tbl = tbl + { name, kind, s, l, ang, til, x, y, z, th, phi, psi, psi+til }
end

local function make_mflow (self)
  local sequence, mflow in self

  if not is_nil(mflow) then
    if sequence ~= mflow.seq then -- new sequence -> update
      local len, dir = #sequence, sequence.direction
      mflow.ds, mflow.len, mflow.dir, mflow.seq = 0, len, dir, sequence
    end
    return mflow
  end

  local x, y, z, theta, phi, psi, X0, A0 in self
  x     = x     or X0.x     or X0[1] or 0
  y     = y     or X0.y     or X0[2] or 0
  z     = z     or X0.z     or X0[3] or 0
  theta = theta or A0.theta or A0[1] or 0
  phi   = phi   or A0.phi   or A0[2] or 0
  psi   = psi   or A0.psi   or A0[3] or 0

  local save, drift in self
  local len, dir = #sequence, sequence.direction
  local V   = vector(3):fill{x,y,z}
  local W   = matrix(3):rotmad(theta, phi, psi)
  local A   = vector(3):fill{theta, phi, psi}
  local R, S, T = vector(3), matrix(3), matrix(3)

  return { A=A, V=V, W=W,                                   -- initial vars
           R=R, S=S, T=T,                                   -- internal vars
           s=0, ds=0, len=len, dir=dir, ndft=0,             -- internal status
           seq=sequence, save=save, drift=save and drift,   -- user status
           [_srv]=_srv }
end

local function exec (self)
  assert(self[_srv], "invalid argument #1 (survey expected)")
  local seq = assert(self.sequence, "missing sequence")
  assert(is_sequence(seq), "invalid sequence")

  local map = make_mflow (self)
  local tbl = make_mtable(self)

  assert(is_nil(tbl) or tbl[_srv] == _srv, "invalid survey mtable")
  assert(               map[_srv] == _srv, "invalid survey mflow" )

  local s, ds, len, ndft, save, drift in map
  local range, nturn in self

  -- affine tracking
  for i,elm in seq:iter(range, nturn) do
    local l in elm

    -- implicit drift
    if ds >= minlen then
      straight_drift(nil, map, ds)
      if drift and elm:is_selected(observe) then
        ndft = ndft+1
        fill_mtable(tbl, 'DRIFT_'..ndft, 'drift', map, s+ds, ds)
      end
    elseif ds <= -minlen then
      error(string.format("negative implicit drift %s in %s['%s'] at %s",
            ds, seq.name, elm.name, s))
    end
    s = s+ds

    -- sequence element
    do
      local tbl, map = elm:survey(map)
      if tbl then return tbl, map end -- stop (e.g. slink)
    end
    update_angles(map)
    if save and elm:is_selected(observe) then
      local name, kind, angle, tilt in elm
      fill_mtable(tbl, name, kind, map, s+l, l, angle, tilt)
    end
    s  = s+l
    ds = i < len and seq:spos(i+1) - (seq:spos(i)+l) or 0
  end
  map.s, map.ds, map.ndft = s, ds, ndft

  return tbl, map
end

local survey = Command 'survey' {
  X0={0,0,0}, A0={0,0,0}, nturn=0, drift=true, save=true,
  exec=exec, [_srv]=true,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  survey = survey,
  __help = __help,
}

