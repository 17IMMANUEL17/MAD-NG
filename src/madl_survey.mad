--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.survey = [[
NAME
  survey -- Survey

SYNOPSIS
  TODO

DESCRIPTION
  The module survey provides...

RETURN VALUES
  The survey command

SEE ALSO
  element, sequence, track
]]

-- locals ---------------------------------------------------------------------o

local abs, sin, cos            in math
local vector, matrix           in MAD
local is_nil, is_sequence      in MAD.typeid
local minlen, minang           in MAD.constant

-- implementation -------------------------------------------------------------o

local function invalid_survey (elm)
  error(string.format("invalid element %s of kind %s with length %s",
                      elm.name, elm.kind, elm.l))
end

local function empty_survey ()
end

-- Update adjusted angles

local function update_angles (m)
  local A in m
  A[1], A[2], A[3] = m.W:torotmad(A[1], A[2], A[3])
end

-- drift

local function drift_surv (m, l)
  m.R :fill {0, 0, l}
  m.V = m.W * m.R + m.V
end

-- maps

local function srot_survey(elm, m) -- Rz(angle)
  m.S :rotz(elm.angle * m.dir)
  m.W = m.W * m.S
end

local function yrot_survey(elm, m) -- Ry(-angle)
  m.S :roty(-elm.angle * m.dir)
  m.W = m.W * m.S
end

local function xrot_survey(elm, m) -- Rx(angle)
  m.S :rotx(elm.angle * m.dir)
  m.W = m.W * m.S
end

local function tran_survey(elm, m)
  local dx, dy, ds in elm
  local dir in m

  m.R :fill {dx*dir, dy, ds}
  m.V = m.W * m.R + m.V
end

local function patch_survey(elm, m) -- Rx(th).Ry(-phi).Rz(psi)
  local dx, dy, ds, theta, phi, psi in elm
  local dir in m

  m.R :fill {dx*dir, dy, ds}
  m.S :rotmad(theta*dir, phi*dir, psi*dir)

  m.V = m.W * m.R + m.V
  m.W = m.W * m.S
end

-- frame kinds ----------------------------------------------------------------o

local function thin_survey (elm, m) -- e.g. multipole
  local angle, tilt in elm
  local dir in m

  if abs(angle) >= minang then
    m.S :roty(-angle * dir)

    if abs(tilt) >= minang then
      m.T :rotz(tilt * dir)
      m.S = m.T * m.S * m.T:t()
    end

    m.W = m.W * m.S
  end
end

local function strait_survey (elm, m) -- e.g. rbend, quadrupole
  local l, angle in elm

  if abs(angle) >= minang then
    error("invalid strait element angle (too curved): " .. elm.name)
  end

  if l >= minlen then
    drift_surv(m, l)
  end
end

local function curved_survey (elm, m) -- e.g. sbend
  local l, angle, tilt in elm
  local dir in m
  local rho

  if l < minlen then
    error("invalid curved element length (too short): " .. elm.name)
  elseif abs(angle) < minang then
    error("invalid curved element angle (too strait): " .. elm.name)
  end

  angle = angle*dir
  rho   = l/angle
  m.R :fill {rho*(cos(angle)-1), 0, rho*sin(angle)}
  m.S :roty(-angle)

  if abs(tilt) >= minang then
    m.T :rotz(tilt*dir)
    m.R = m.T * m.R
    m.S = m.T * m.S * m.T:t()
  end

  m.V = m.W * m.R + m.V
  m.W = m.W * m.S
end

-- load survey maps into elements ---------------------------------------------o

local element in MAD

element.    thin_element :set_functions { survey =    thin_survey }
element.   patch_element :set_functions { survey =   patch_survey }
element.   drift_element :set_functions { survey =  strait_survey }
element.  strait_element :set_functions { survey =  strait_survey }
element.  curved_element :set_functions { survey =  curved_survey }
element. special_element :set_functions { survey =   empty_survey }
element.   extra_element :set_functions { survey = invalid_survey }

element.       srotation :set_functions { survey =    srot_survey }
element.       xrotation :set_functions { survey =    xrot_survey }
element.       yrotation :set_functions { survey =    yrot_survey }
element.       translate :set_functions { survey =    tran_survey }

-- survey command -------------------------------------------------------------o

local mtable, Command in MAD

local _srv = {}

local function make_table (self)
  if not self.save then return nil end
  local seq = self.sequence
  local name, direction in seq
  local drift, range, nturn in self
  local nrow = seq:length_of(range, nturn) * (drift and 2 or 1)

  return mtable 'survey' {
    type='survey', title=name, direction=direction,
    {'name'}, 'kind', 's', 'l', 'angle', 'tilt',
    'x', 'y', 'z', 'theta', 'phi', 'psi', 'globaltilt',
    [_srv]=_srv,
  } :reserve(nrow < 2e5 and nrow or 2e5)
end

local function fill_table (tbl, name, kind, m, s, l, ang, til)
  local V, A, dir in m
  local x, y, z      = V[1], V[2], V[3]
  local th, phi, psi = A[1], A[2], A[3]
  ang = ang and ang ~= 0 and ang*dir or 0
  til = til and til ~= 0 and til*dir or 0
  -- keep order!
  tbl = tbl + { name, kind, s, l, ang, til, x, y, z, th, phi, psi, psi+til }
end

local function make_map (self)
  local x, y, z, theta, phi, psi, X0, A0 in self

  x     = x     or X0.x     or X0[1] or 0
  y     = y     or X0.y     or X0[2] or 0
  z     = z     or X0.z     or X0[3] or 0
  theta = theta or A0.theta or A0[1] or 0
  phi   = phi   or A0.phi   or A0[2] or 0
  psi   = psi   or A0.psi   or A0[3] or 0

  local V   = vector(3):fill{x,y,z}
  local W   = matrix(3):rotmad(theta, phi, psi)
  local A   = vector(3):fill{theta, phi, psi}
  local R, S, T = vector(3), matrix(3), matrix(3)

  local seq = self.sequence
  local len, dir = #seq, seq.direction

  return { A=A, V=V, W=W, R=R, S=S, T=T,
           s=0, ds=0, len=len, dir=dir, ndrift=0,
           [_srv]=_srv }
end

-- survey command exec
local function exec (self)
  assert(self[_srv], "invalid argument #1 (survey expected)")
  local seq = assert(self.sequence, "missing sequence")
  assert(is_sequence(seq), "invalid sequence")

  local map = self.map   or make_map  (self)
  local tbl = self.table or make_table(self)

  assert(is_nil(tbl) or tbl[_srv] == _srv, "invalid survey table")
  assert(               map[_srv] == _srv, "invalid survey map"  )

  local s, ds, len, ndrift in map
  local save, range, nturn in self
  local drift = save and self.drift

  -- affine tracking
  for i,elm in seq:iter(range, nturn) do
    local l in elm

    -- implicit drift
    if ds >= minlen then
      drift_surv(map, ds)
      if drift and elm:is_selected() then
        ndrift = ndrift+1
        fill_table(tbl, 'DRIFT_'..ndrift, 'drift', map, s+ds, ds)
      end
    elseif ds <= -minlen then
      error(string.format("negative implicit drift %s in %s['%s'] at %s",
            ds, seq.name, elm.name, s))
    end
    s = s+ds

    -- sequence element
    elm:survey(map) ; update_angles(map)
    if save and elm:is_selected() then
      local name, kind, angle, tilt in elm
      fill_table(tbl, name, kind, map, s+l, l, angle, tilt)
    end
    s  = s+l
    ds = i < len and seq:spos(i+1) - (seq:spos(i)+l) or 0
  end
  map.s, map.ds, map.ndrift = s, ds, ndrift

  return tbl, map
end

local survey = Command 'survey' {
  X0={0,0,0}, A0={0,0,0}, nturn=0, drift=true, save=true,
  exec=exec, [_srv]=true,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return {
  survey = survey,
  __help = __help,
}
