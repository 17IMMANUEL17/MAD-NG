--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

--[=[
Notes about directions and quantities:
  element direction   edir: affects curvatures (edir = seq.dir).
  track direction (s) sdir: affects lengths    (sdir = cmd.dir).
  time direction  (t) tdir: affects angles     (tdir = edir x sdir).
  beam direction      bdir: affects strengths  (bdir = edir x sdir x chg).
]=]

-- locals ---------------------------------------------------------------------o

local vector, matrix, element, mtable, command, option           in MAD

local is_sequence, is_boolean, is_number, is_integer,
      is_table, is_callable, is_mappable, is_matrix              in MAD.typeid
local fnone, ffalse, ftrue, functor, chain, achain               in MAD.gfunc
local rangle                                                     in MAD.gmath
local atins                                                      in MAD.symint
local tblcat, errorf, printf                                     in MAD.utility
local minlen, minang                                             in MAD.constant

local abs, min in math

local is_implicit = element.drift.is_implicit

-- integrator schemes ---------------------------------------------------------o

local thinonly, thickonly, driftonly                             in MAD.symint

-- geometric maps -------------------------------------------------------------o

local strex_drift, curex_thick, curex_thin                       in MAD.geomap

local xrotation, yrotation, srotation, translate,
      changeref, changedir, changenrj, misalign                  in MAD.geomap

-- debug ----------------------------------------------------------------------o

local shtfmt = "% -.6e % -.6e % -.6e "
local lngfmt = "% -.16e % -.16e % -.16e "
local mapfmt = shtfmt -- lngfmt

local nodump = {marker=true}

local function mdump (mflw, elm, str_)
  if str_ and mflw.ndump <= 1 then return end

  if is_number(elm) then
    printf("@@ %-15s %-15s % -.16e\n", 'number', str_, elm) return
  end
  if nodump[elm.kind] then return end

  printf("@@ %-15s %-15s ", elm.name, str_ or 'exit')

  local V, W in mflw

  printf(mapfmt, V[1], V[2], V[3])

  for i=1,W.nrow do
    printf(mapfmt, W:get(i,1), W:get(i,2), W:get(i,3))
  end
  printf('\n')
end

-- element tracking -----------------------------------------------------------o

local function trackelm (elm, m, track, thick, thin)
  local sdir, tlt in m
  local mis = m.misalign and misalign or fnone
  local rot = abs(tlt) >= minang and srotation or fnone

  mis  (elm, m,  sdir)
  rot  (tlt, m,  sdir)
  track(elm, m,    1 , thick, thin)
  rot  (tlt, m, -sdir)
  mis  (elm, m, -sdir)
end

-- kinds ----------------------------------------------------------------------o

local function track_marker (elm, m)
  m.el, m.ang, m.tlt = 0, 0, 0
  thinonly(elm, m, 1, nil, fnone)
end

local function track_thin (elm, m)
  local tdir in m
  m.el, m.ang, m.tlt = 0, elm.angle*tdir, elm.tilt*tdir
  trackelm(elm, m, thinonly, nil, curex_thin)
end

local function track_thick (elm, m)
  local ds, tdir in m
  m.el, m.ang, m.tlt = ds, elm.angle*tdir, elm.tilt*tdir
  local thick = abs(ds) >= minlen and thickonly or driftonly
  trackelm(elm, m, thick, curex_thick)
end

local function track_drift (elm, m)
  local ds, tdir in m
  m.el, m.ang, m.tlt = ds, 0, 0
  if is_implicit(elm) then
    local track = m.implicit and
                  abs(ds) >= minlen and thickonly or driftonly
    track(elm, m, 1, strex_drift)
  else
    m.tlt = elm.tilt*tdir
    local thick = abs(ds) >= minlen and thickonly or driftonly
    trackelm(elm, m, thick, strex_drift)
  end
end

-- load maps into elements ----------------------------------------------------o

local invalid = \e ->
  errorf("invalid survey element %s of kind %s with length %s",
         e.name, e.kind, e.l)

local E = element

-- warning: class protection set by alt. 'nolookup' object model can be BYPASSED
--          because classes are modified before any use of 'survey' attribute
--          by any children at the time of module loading...

-- kind maps

E. thin_element:setv({ survey = functor( track_thin   ) }, 'init')
E.drift_element:setv({ survey = functor( track_drift  ) }, 'init')
E.thick_element:setv({ survey = functor( track_thick  ) }, 'init')
E.specl_element:setv({ survey = functor( track_marker ) }, 'init')
E.patch_element:setv({ survey = functor( invalid      ) }, 'init') -- avoid missing definition
E.extra_element:setv({ survey = functor( invalid      ) }, 'init') -- forbidden in track

-- patches

E.xrotation:setv({ survey = functor( xrotation ) }, 'init')
E.yrotation:setv({ survey = functor( yrotation ) }, 'init')
E.srotation:setv({ survey = functor( srotation ) }, 'init')
E.translate:setv({ survey = functor( translate ) }, 'init')
E.changeref:setv({ survey = functor( changeref ) }, 'init')
E.changedir:setv({ survey = functor( changedir ) }, 'init')
E.changenrj:setv({ survey = functor( changenrj ) }, 'init')

-- survey mtable --------------------------------------------------------------o

local function save_dat (elm, mflw, lw, islc)
  if mflw.savesel(elm, mflw, lw, islc) == false then
    return false
  end

  local name, kind in elm
  local A, V, W, ds, ang, eidx, clw, tlt, sdir, tdir, spos, turn,
        mtbl, mapsave in mflw

  local lw = islc<0 and -1-islc or clw
  local dsw = ds*lw

  local x, y, z = V[1], V[2], V[3]
  local phi, the, psi = W:torotzxy()
  the, psi = rangle(the, A[1]), rangle(psi, A[3])
  A[1], A[2], A[3] = the, phi, psi

  W = mapsave and W:copy()
  eidx = is_implicit(elm) and eidx+0.5*sdir or eidx

  -- keep order!
  mtbl = mtbl + { name, kind, spos+dsw, dsw, ang*lw, tlt,
                  x, y, z, the, phi, psi, psi + (islc < 0 and tlt or 0),
                  islc, turn, tdir, eidx, W }
  return true
end

local function save_obs (elm, mflw, lw, islc)
  if elm:is_observed() and mflw.turn % mflw.observe == 0 then
    return save_dat(elm, mflw, lw, islc)
  end
  return false
end

local header = {
  'direction', 'observe', 'implicit', 'misalign',
}

local function make_mtable (self, obs)
  local title, range, nturn, dir, implicit, misalign, mapsave in self
  local sequ, nrow = self.sequence

  if obs > 0 then
    nrow = nturn+1 -- assume 1 observation point per turn
  else
    nrow = sequ:length_of(range, nturn)*(implicit and 2 or 1)
  end

  -- keep order!
  return mtable(self.__id, {
    name=self.name, title=title or sequ.name, type='survey', header=header,
    direction=dir, observe=obs, implicit=implicit, misalign=misalign,
    reserve=nrow,
    {'name'}, 'kind', 's', 'l', 'angle', 'tilt',
    'x', 'y', 'z', 'theta', 'phi', 'psi', 'globaltilt',
    'slc', 'turn','tdir',   -- t-direction of the tracking: sdir * seq.dir
    'idx',                  -- index of element in the sequence
    mapsave and 'W' or nil, -- optional column to save the orientation matrix
  })
end

-- trace survey internal actions ----------------------------------------------o

local act2str = {
  [fnone   ] = 'fnone'   , [ftrue   ] = 'ftrue'   , [ffalse] = 'ffalse',
  [save_dat] = 'save_all', [save_obs] = 'save_obs',
}

local function trace_action (mflw)
  local atentry, atslice, atexit, atsave in mflw

  local estr = act2str[atentry] or 'usrdef'
  local sstr = act2str[atslice] or 'usrdef'
  local xstr = act2str[atexit ] or 'usrdef'
  local ostr = act2str[atsave ] or 'usrdef'

  trace(2, "survey actions: atentry=%s, atslice=%s, atexit=%s, atsave=%s",
           estr, sstr, xstr, ostr)
end

-- reset mflow iterator (e.g. survey again) -----------------------------------o

local function reset_iter (mflw)
  local sequ, sdir, __sitr in mflw
  local s0, range, nturn in __sitr
  local iter, state, init = sequ:siter(range, nturn, sdir)

  __sitr.iter=iter
  __sitr.state=state

  mflw.s0, mflw.ds, mflw.spos, mflw.eidx, mflw.turn = s0, 0, 0, init, 1

  return mflw
end

-- survey mflow ---------------------------------------------------------------o

local function make_mflow (self)
  -- check sequence
  local sequ = assert(self.sequence, "missing sequence")
  assert(is_sequence(sequ), "invalid sequence")

  -- build iterator (track direction)
  local range, dir, nturn in self
  local iter, state, init = sequ:siter(range, nturn, dir)

  -- saving data, build mtable
  local save, observe, implicit in self
  if is_boolean(observe) then observe = observe and 1 or 0 end
  assert(is_boolean(save)    , "invalid save (boolean expected)")
  assert(is_boolean(implicit), "invalid implicit (boolean expected)")
  assert(is_integer(observe) and observe >= 0
                             , "invalid observe (positive integer expected)")

  local savesel = self:var_raw'savesel'
  assert(is_callable(savesel), "invalid savesel (callable expected)")

  -- sequence and time direction
  local edir = sequ.dir
  local tdir = dir*edir
  assert(tdir == 1 or tdir == -1, "invalid time direction (1 or -1 expected)")

  -- setup default sclicing
  local nslice = self:var_raw 'nslice'
  local nslc = is_number(nslice) and nslice or is_callable(nslice) and 1
                                            or is_iterable(nslice) and #nslice
  assert(is_integer(nslc) and nslc > 0,
         "invalid nslice (integer>0 or iterable of or generator of slice weights expected)")


  -- setup default misalign
  local misalign in self
  assert(is_boolean(misalign), "invalid misalign (boolean expected)")

  -- retrieve default actions (avoid evaluation in case of functions)
  local atentry = self:var_raw 'atentry'
  local atslice = self:var_raw 'atslice'
  local atexit  = self:var_raw 'atexit'
  local atsave  = self:var_raw 'atsave'

  assert(is_callable(atentry), "invalid atentry (callable expected)")
  assert(is_callable(atslice), "invalid atslice (callable expected)")
  assert(is_callable(atexit ), "invalid atexit (callable expected)")
  assert(is_callable(atsave ), "invalid atsave (callable expected)")

  local mtbl
  if save then
    mtbl = make_mtable(self, observe)
  else
    atsave = ffalse
  end

  if atsave ~= ffalse then -- prepare atsave
    local fill = observe > 0 and save_obs or save_dat
    atsave = atsave == ftrue and fill or achain(fill, atsave)
  end

  if atexit ~= ffalse then -- chain atsave to atexit
    atexit = atexit == ftrue and atsave or chain(atexit, atsave)
  end

  if atslice == ftrue then -- exec atsave inside body
    atslice = achain(atins, atsave)
  end

  -- retrieve initial conditions
  local s0, X0, A0, W0, mapsave in self
  assert(is_number  (s0)    , "invalid s0 (number expected)")
  assert(is_mappable(X0)    , "invalid X0 (mappable expected)")
  assert(is_mappable(A0)    , "invalid A0 (mappable expected)")
  assert(is_boolean(mapsave), "invalid mapsave (boolean expected)")

  if W0 then
    assert(is_matrix(W0), "invalid W0 (matrix expected)")
    local phi, the, psi = W0:torotzxy()
    A0[1], A0[2], A0[3] = rangle(the, A0[1]), phi, rangle(psi, A0[3])
  end

  -- create mflw
  local mflw = table.new(0,50)

  -- precedence of initial conditions
  local x   = X0[1] or X0.x     or 0
  local y   = X0[2] or X0.y     or 0
  local z   = X0[3] or X0.z     or 0
  local the = A0[1] or A0.theta or 0
  local phi = A0[2] or A0.phi   or 0
  local psi = A0[3] or A0.psi   or 0

  -- complete mflow
  mflw.sequ=sequ             -- current sequence
  mflw.mtbl=mtbl             -- current mtable (nil if no save)
  mflw.sdir=dir              -- s-direction of tracking
  mflw.tdir=tdir             -- t-direction of tracking
  mflw.edir=edir             -- current element direction

  mflw.s0=s0                 -- initial s-position (i.e. offset)
  mflw.ds=0                  -- current element s-length (signed)
  mflw.spos=0                -- current element s-position (signed)
  mflw.eidx=init             -- current element index
  mflw.turn=1                -- current turn index
  mflw.nstep=-1              -- current number of remaining steps

  mflw.nslc=nslc             -- minimum number of slices for all element
  mflw.nslice=nslice         -- slices for each element (num, fun or iterable)
  mflw.implicit=implicit     -- slice also implicit elements (e.g. for plots)
  mflw.misalign=misalign     -- consider misalignment errors

  mflw.save=save             -- save data
  mflw.observe=observe       -- save observed elements every n turns
  mflw.savesel=savesel       -- save selector

  mflw.atentry=atentry       -- action when entering an element
  mflw.atslice=atslice       -- action after each element slices
  mflw.atexit=atexit         -- action when exiting an element
  mflw.atsave=atsave         -- action after saving in mtable

  mflw.mapsave=mapsave       -- save orientation matrix

  mflw.usrdef=self.usrdef    -- user defined data

  mflw.ndump=0               -- dump level of matrix
  mflw.dump=fnone            -- dump matrix

  -- global frame (exposed vars)
  mflw.V=vector(3):fill{x,y,z}          -- displacement vector
  mflw.W=matrix(3):rotzxy(-phi,the,psi) -- orientation matrix (rotations)
  mflw.A=vector(3):fill{the,phi,psi}    -- oriented angles

  -- for processing sequence elements by nstep
  mflw.__sitr={iter=iter, state=state,          -- sequence iterator state
               s0=s0, range=range, nturn=nturn} -- sequence iterator reset
  mflw.ireset=reset_iter

  -- for processing elements local frame
  mflw.__edat = setmetatable({
    el=0,                    -- current element length
    clw=0,                   -- current element cumulated length weights
    ang=0,                   -- current element angle
    tlt=0,                   -- current element tilt angle
    nsl=0,                   -- current element number of slices
  }, {__index=mflw})

  return mflw
end

-- survey command -------------------------------------------------------------o

local _id = {} -- identity (unique)

local function exec (self)
  local mflw, mtbl

  -- retrieve or build mflw (and mtbl)
  if self.mflow then
    assert(self.mflow.__surv == _id, "invalid mflow (survey mflow expected)")
    mflw = self.mflow
  else
    mflw = make_mflow(self)
    mflw.__surv = _id
  end
  mtbl = mflw.mtbl

  -- check number of elements to track
  local nstep in self
  if nstep == 0 then return mtbl, mflw end
  mflw.nstep = nstep

  -- debug maps
  local mapdump in self
  if mapdump then
    mflw.ndump = mapdump == true and 1 or mapdump
    mflw.dump = mflw.ndump > 0 and mdump or fnone
  end

  -- debug actions
  if option.debug >= 2 then trace_action(mflw) end

  -- retrieve information
  local s0, eidx, sequ, atentry, atexit, __sitr, __edat in mflw
  local iter, state in __sitr
  local ne = #sequ

  -- geometric tracking
  for ei,elm,spos,ds in iter, state, eidx do
    mflw.eidx, mflw.spos, mflw.ds, __edat.clw = ei, s0+spos, ds, 0
    atentry   (elm, __edat, 0, -1)
    elm:survey(     __edat       )
    atexit    (elm, __edat, 0, -2)
    mflw:dump (elm)
    mflw.nstep = mflw.nstep-1

    -- check remaining number of elements to track
    if mflw.nstep == 0 then return mtbl, mflw, ei end
    -- check for end of turn
    if ei == ne then mflw.turn = mflw.turn+1 end
  end

  return mtbl, mflw
end

local survey = command 'survey' {
  sequence=nil,     -- sequence (required)                                (mflw)
  range=nil,        -- range of tracking                                  (iter)
  dir=1,            -- s-direction of tracking (1 or -1)                  (mflw)

  s0=0,             -- initial s                                          (mflw)
  X0={0,0,0},       -- initial coordinates x, y, z                        (mflw)
  A0={0,0,0},       -- initial angles theta, phi, psi                     (mflw)
  W0=nil,           -- initial W matrix (companion of X0)                 (mflw)

  mapsave=false,    -- save the orientation matrix W (rotations)          (mflw)
  mapdump=false,    -- dump V and W after each element                    (mflw)

  nturn=1,          -- number of turns                                    (iter)
  nstep=-1,         -- number of elements to track                        (iter)
  nslice=1,         -- number of slices (or weights) for each element     (mflw)
  implicit=false,   -- slice implicit elements too (e.g. plots)           (mflw)
  misalign=false,   -- consider misalignment                              (mflw)

  save=true,        -- create mtable and save results                     (mtbl)
  title=nil,        -- title of mtable (default seq.name)                 (mtbl)
  observe=false,    -- save only in observed elements (every n turns)     (mtbl)
  savesel=fnone,    -- save selector (predicate)                          (mtbl)

  atentry=ftrue,    -- action called when entering an element (ataper)    (mflw)
  atslice=fnone,    -- action called after each element slices            (mflw)
  atexit=ftrue,     -- action called when exiting an element (atsave)     (mflw)
  atsave=ftrue,     -- action called when saving in mtable                (mflw)

  usrdef=nil,       -- user defined data attached to the mflow            (mflw)

  mflow=nil,        -- mflow, exclusive with other attributes except nstep
  exec=exec,        -- command to execute upon children creation

  __attr = {        -- list of all setup attributes
    'sequence', 'range', 'dir', 's0', 'X0', 'A0', 'W0', 'mapsave', 'mapdump',
    'nturn', 'nstep', 'implicit', 'misalign', 'save', 'title', 'observe',
    'usrdef',
    noeval = {'atentry', 'atslice', 'atexit', 'atsave', 'nslice', 'savesel'},
  }
} :set_readonly()   -- reference survey command is readonly

-- end ------------------------------------------------------------------------o
return { survey = survey }
