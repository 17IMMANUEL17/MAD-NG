--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

--[=[
Notes about directions and quantities:
  element direction   edir: affects curvatures (edir = seq.dir).
  track direction (s) sdir: affects lengths    (sdir = cmd.dir).
  time direction  (t) tdir: affects angles     (tdir = edir x sdir).
  beam direction      bdir: affects strengths  (bdir = edir x sdir x chg).
]=]

-- locals ---------------------------------------------------------------------o

local vector, matrix, mtable, command, element, show            in MAD

local is_sequence, is_boolean, is_number, is_integer,
      is_callable, is_mappable, is_matrix                       in MAD.typeid
local fnil, ffalse, chain, achain, swapv                        in MAD.gfunc
local rangle                                                    in MAD.gmath
local atins, atins1, action, actionat                           in MAD.symint
local printf                                                    in MAD.utility
local tobit, band                                               in MAD.operator
local is_implicit                                               in element.drift

local io, type, assert =
      io, type, assert

-- load survey methods into elements ------------------------------------------o

require 'madl_esurv'

-- helper ---------------------------------------------------------------------o

local function mshow (mflw)
  show(mflw)
  if mflw.debug >= 3 then mflw.W:print(nil,'line') end
end

-- debug ----------------------------------------------------------------------o

--[[ Unix command to retrieve debug=4 values in a matrix
./mad script_dump.mad | \
  awk 'BEGIN{printf("MAD.matrix{")} END{printf("}")}
  /@@/{printf("{");for(i=4;i<=NF;i++)printf("%s, ",$i);printf("},\n")}'
--]]

local shtfmt = "% -.6e % -.6e % -.6e "
local lngfmt = "% -.16e % -.16e % -.16e "
local nodump = {marker=true}

local function mdump (mflw, elm, str_)
  if str_ and mflw.debug <= 2 then return end

  if is_number(elm) then
    printf("@@ %-15s %-15s % -.16e\n", 'number', str_, elm) return
  end
  if nodump[elm.kind] then return end

  printf("@@ %-15s %-15s ", elm.name, str_ or 'exit')

  local V, W in mflw
  local fmt = mflw.debug >= 4 and lngfmt or shtfmt

  printf(fmt, V[1], V[2], V[3])

  for i=1,W.nrow do
    printf(fmt, W:get(i,1), W:get(i,2), W:get(i,3))
  end
  io.write('\n')
end

-- survey mtable --------------------------------------------------------------o

local function save_dat (elm, mflw, lw, islc)
  if mflw.savesel(elm, mflw, lw, islc) == false then
    return false
  end

  local name, kind in elm
  local A, V, W, ds, ang, eidx, clw, tlt, sdir, tdir, spos, turn,
        mtbl, savemap in mflw

  local lw = islc<0 and -1-islc or clw
  local dsw = ds*lw

  local x, y, z = V[1], V[2], V[3]
  local phi, the, psi = W:torotzxy()
  the, psi = rangle(the, A[1]), rangle(psi, A[3])
  A[1], A[2], A[3] = the, phi, psi

  W = savemap and W:copy()
  eidx = is_implicit(elm) and eidx+0.5*sdir or eidx

  -- keep order!
  mtbl = mtbl + { name, kind, spos+dsw, dsw, ang*lw, tlt,
                  x, y, z, the, phi, psi, islc, turn, tdir, eidx, W }
  return true
end

local function save_obs (elm, mflw, lw, islc)
  if elm:is_observed() and mflw.turn % mflw.observe == 0 then
    return save_dat(elm, mflw, lw, islc)
  end
  return false
end

local header = {
  'direction', 'observe', 'implicit', 'misalign',
}

local function make_mtable (self, range, nosav, obs)
  local title, nturn, dir, implicit, misalign, savemap in self
  local sequ, nrow = self.sequence

  if nosav then
    nrow = 0
  elseif obs > 0 then
    nrow = nturn+1 -- assume 1 observation point per turn
  else
    nrow = sequ:length_of(range, nturn)*(implicit and 2 or 1)
  end

  -- keep order!
  return mtable(sequ.name, {
    name=self.name, type='survey', title=title, header=header,
    direction=dir, observe=obs, implicit=implicit, misalign=misalign,
    range=range, reserve=nrow, __seq=sequ,
    {'name'}, 'kind', 's', 'l', 'angle', 'tilt',
    'x', 'y', 'z', 'theta', 'phi', 'psi',
    'slc', 'turn','tdir',       -- t-direction of the tracking: sdir * seq.dir
    'eidx',                     -- index of element in the sequence
    savemap and '__map' or nil, -- optional column to save the orientation matrix
  })
end

-- reset sequence iterator (e.g. survey again) --------------------------------o

local function sireset (mflw)
  local sequ, sdir, __sitr in mflw
  local s0, range, nturn in __sitr
  local iter, state, init = sequ:siter(range, nturn, sdir)

  __sitr.iter=iter
  __sitr.state=state

  mflw.s0, mflw.ds, mflw.spos, mflw.eidx, mflw.turn = s0, 0, 0, init, 1

  return mflw
end

-- survey mflow ---------------------------------------------------------------o

-- see (track)
local slicebit = { [false]=tobit(0), [true]=tobit(4),
                   atentry=tobit(1), atslice=tobit(2), atexit=tobit(4),
                   atbound=tobit(5), atbody =tobit(6), atall =tobit(7) }

local function make_mflow (self)
  -- check sequence
  local sequ = assert(self.sequence, "missing sequence")
  assert(is_sequence(sequ), "invalid sequence")

  -- get range (nil == "#s/#e")
  local range = self.range or sequ.range

  -- build iterator (track direction)
  local dir, nturn in self
  local iter, state, init = sequ:siter(range, nturn, dir)

  -- saving data, build mtable
  local save, implicit, observe in self
  local savebit = slicebit[save]

  assert(is_number(savebit)  ,
              "invalid save directive (boolean or valid atxxx string expected)")
  assert(is_boolean(implicit), "invalid implicit (boolean expected)")
  assert(is_integer(observe) and observe >= 0
                             , "invalid observe (positive integer expected)")

  local savesel = self:var_raw'savesel'
  assert(is_callable(savesel), "invalid savesel (callable expected)")

  -- sequence and time direction
  local edir = sequ.dir
  local tdir = dir*edir
  assert(tdir == 1 or tdir == -1, "invalid time direction (1 or -1 expected)")

  -- setup default sclicing
  local nslice = self:var_raw 'nslice'
  local nslc = is_number(nslice) and nslice or is_callable(nslice) and 1
                                            or is_iterable(nslice) and #nslice
  assert(is_integer(nslc) and nslc > 0,
         "invalid nslice (integer>0 or iterable of or generator of slice weights expected)")

  -- setup default misalign
  local misalign in self
  assert(is_boolean(misalign), "invalid misalign (boolean expected)")

  -- retrieve default actions (avoid evaluation in case of functions)
  local atentry = self:var_raw 'atentry'
  local atslice = self:var_raw 'atslice'
  local atexit  = self:var_raw 'atexit'
  local atsave  = self:var_raw 'atsave'

  assert(is_callable(atentry), "invalid atentry (callable expected)")
  assert(is_callable(atslice), "invalid atslice (callable expected)")
  assert(is_callable(atexit ), "invalid atexit (callable expected)")
  assert(is_callable(atsave ), "invalid atsave (callable expected)")

  local mtbl
  if save then
    local nosave = atsave == ffalse
    mtbl = make_mtable(self, range, nosave, observe)

    if not nosave then
      local fill = observe > 0 and save_obs or save_dat
      atsave = atsave == fnil and fill or achain(fill, atsave)

      if savebit > 0 then
        local saveact, ex = action 'atsave'
        if band(savebit, slicebit.atentry) ~= 0 then
          atentry = atentry == fnil and saveact or chain(atentry, saveact)
        end
        if band(savebit, slicebit.atexit) ~= 0 then
          atexit = atexit == fnil and saveact or chain(atexit, saveact)
          ex = true
        end
        if band(savebit, slicebit.atslice) ~= 0 then
          local saveact = actionat('atsave', ex and atins or atins1)
          atslice = atslice == fnil and saveact or chain(atslice, saveact)
        end
      end
    end
  end

  -- retrieve initial conditions
  local s0, X0, A0, savemap in self
  if rawequal(X0,0) then X0 = {0,0,0} end
  if rawequal(A0,0) then A0 = {0,0,0}
  elseif is_matrix(A0) and A0:size() == 9 then
    A0 = { swapv( A0:torotzxy() ) }
  end
  assert(is_number  (s0)    , "invalid s0 (number expected)")
  assert(is_mappable(X0)    , "invalid X0 (mappable expected)")
  assert(is_mappable(A0)    , "invalid A0 (mappable expected)")
  assert(is_boolean(savemap), "invalid savemap (boolean expected)")

  -- create mflw
  local mflw = table.new(0,50)

  -- precedence of initial conditions
  local x   = X0[1] or X0.x     or 0
  local y   = X0[2] or X0.y     or 0
  local z   = X0[3] or X0.z     or 0
  local the = A0[1] or A0.theta or 0
  local phi = A0[2] or A0.phi   or 0
  local psi = A0[3] or A0.psi   or 0

  -- complete mflow
  mflw.sequ=sequ             -- current sequence
  mflw.mtbl=mtbl             -- current mtable (nil if no save)
  mflw.sdir=dir              -- s-direction of tracking
  mflw.tdir=tdir             -- t-direction of tracking
  mflw.edir=edir             -- current element direction

  mflw.s0=s0                 -- initial s-position (i.e. offset)
  mflw.ds=0                  -- current element s-length (signed)
  mflw.spos=0                -- current element s-position (signed)
  mflw.eidx=init             -- current element index
  mflw.turn=1                -- current turn index
  mflw.nstep=-1              -- current number of remaining steps

  mflw.nslc=nslc             -- minimum number of slices for all element
  mflw.nslice=nslice         -- slices for each element (num, fun or iterable)
  mflw.implicit=implicit     -- slice also implicit elements (e.g. for plots)
  mflw.misalign=misalign     -- consider misalignment errors

  mflw.save=save             -- save data
  mflw.observe=observe       -- save observed elements every n turns
  mflw.savesel=savesel       -- save selector
  mflw.savemap=savemap       -- save orientation matrix

  mflw.atentry=atentry       -- action when entering an element
  mflw.atslice=atslice       -- action after each element slices
  mflw.atexit=atexit         -- action when exiting an element
  mflw.atsave=atsave         -- action after saving in mtable

  mflw.info=self.info or 0   -- information level
  mflw.debug=self.debug or 0 -- debugging information level
  mflw.usrdef=self.usrdef    -- user defined data

  -- for debugging
  mflw.mdump=fnil            -- dump W matrix
  mflw.show=mshow            -- show the mflow

  -- global frame (exposed vars)
  mflw.V=vector(3):fill{x,y,z}          -- displacement vector
  mflw.W=matrix(3):rotzxy(-phi,the,psi) -- orientation matrix (rotations)
  mflw.A=vector(3):fill{the,phi,psi}    -- oriented angles

  -- for processing sequence elements by nstep
  mflw.__sitr={iter=iter, state=state,          -- sequence iterator state
               s0=s0, range=range, nturn=nturn} -- sequence iterator reset
  mflw.sireset=sireset

  -- for processing elements local frame (pre-alloc to avoid rehash)
  mflw.__edat = setmetatable({
    el=0,                    -- current element length and curvature
    tlt=0,                   -- current element tilt angle
    ang=0,                   -- current element angle
    clw=0,                   -- current element cumulated length weights
    nsl=0,                   -- current element number of slices
  }, {__index=mflw})

  -- for processing (thin) subelements (pre-alloc to avoid rehash)
  mflw.__sdat = setmetatable({
    el=0,                    -- current subelement length
    tlt=0,                   -- current subelement tilt angle
    ang=0,                   -- current subelement angle
    clw=0,                   -- current subelement cumulated length weights
  }, {__index=mflw})

  return mflw
end

-- survey command -------------------------------------------------------------o

local _id = {} -- identity (unique)

local function is_geomflow (a)
  return type(a) == "table" and a.__surv == _id
end

local function exec (self)
  local mflw

  -- retrieve or build mflw (and mtbl)
  if self.mflow then
    assert(self.mflow.__surv == _id, "invalid mflow (survey mflow expected)")
    mflw = self.mflow
  else
    mflw = make_mflow(self)
    mflw.__surv = _id
  end

  -- retrieve mtbl (if any)
  local mtbl = mflw.mtbl

  -- check number of elements to track
  local nstep, debug in self
  if nstep == 0 then return mtbl, mflw end

  -- update fields
  mflw.nstep, mflw.debug = nstep or mflw.nstep, debug or mflw.debug
  mflw.mdump = mflw.debug >= 2 and mdump or fnil

  -- retrieve information
  local s0, eidx, sequ, __sitr, __edat in mflw
  local iter, state in __sitr
  local ne, ie = #sequ, nil

  -- geometric tracking
  for ei,elm,spos,ds in iter, state, eidx do
    mflw.eidx, mflw.spos, mflw.ds, __edat.clw = ei, s0+spos, ds, 0
    elm:survey(__edat)
    mflw.nstep = mflw.nstep-1

    -- check remaining number of elements to track
    if mflw.nstep == 0 then ie = ei break end
    -- check for end of turn
    if ei == ne then mflw.turn = mflw.turn+1 end
  end

  return mtbl, mflw, ie
end

local survey = command 'survey' {
  sequence=nil,     -- sequence (required)                                (mflw)
  range=nil,        -- range of tracking (or sequence.range)              (iter)
  dir=1,            -- s-direction of tracking (1 or -1)                  (mflw)

  s0=0,             -- initial s-position offset [m]                      (mflw)
  X0=0,             -- initial coordinates x, y, z [m]                    (mflw)
  A0=0,             -- initial angles theta, phi, psi [rad] or matrix W0  (mflw)

  nturn=1,          -- number of turns to track                           (iter)
  nstep=-1,         -- number of elements to track                        (iter)
  nslice=1,         -- number of slices (or weights) for each element     (mflw)
  implicit=false,   -- slice implicit elements too (e.g. plots)           (mflw)
  misalign=false,   -- consider misalignment                              (mflw)

  save=true,        -- create mtable and save results                     (mtbl)
  title=nil,        -- title of mtable (default seq.name)                 (mtbl)
  observe=0,        -- save only in observed elements (every n turns)     (mtbl)
  savesel=fnil,     -- save selector (predicate)                          (mtbl)
  savemap=false,    -- save the orientation matrix W in the column __map  (mflw)

  atentry=fnil,     -- action called when entering an element             (mflw)
  atslice=fnil,     -- action called after each element slices (atsave)   (mflw)
  atexit=fnil,      -- action called when exiting an element   (atsave)   (mflw)
  atsave=fnil,      -- action called when saving in mtable                (mflw)

  info=nil,         -- information level (output on terminal)             (mflw)
  debug=nil,        -- debugging information level (output on terminal)   (mflw)
  usrdef=nil,       -- user defined data attached to the mflow            (mflw)

  mflow=nil,        -- mflow, exclusive with other attributes except nstep
  exec=exec,        -- command to execute upon children creation

  __attr = {        -- list of all setup attributes
    'sequence', 'range', 'dir', 's0', 'X0', 'A0', 'W0',
    'nturn', 'implicit', 'misalign',
    'save', 'title', 'observe', 'savemap', 'info', 'debug', 'usrdef',
    noeval = {'nslice', 'atentry', 'atslice', 'atexit', 'atsave', 'savesel'},
  }
} :set_readonly()   -- reference survey command is readonly

-- env ------------------------------------------------------------------------o

MAD.typeid.is_geomflow = is_geomflow

-- end ------------------------------------------------------------------------o
return { survey = survey }
