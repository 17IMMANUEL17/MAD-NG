--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local vector, matrix, element, mtable, command               in MAD
local is_nil, is_sequence                                    in MAD.typeid
local minlen, minang                                         in MAD.constant
local observe                                                in element.flags
local errorf                                                 in MAD.utility

local abs, sin, cos                                          in math

-- maps -----------------------------------------------------------------------o

local geomaps = require "madl_geomap"

-- special --------------------------------------------------------------------o

local empty_survey = \ -> ()

local invalid_survey = \e ->
  errorf("invalid element %s of kind %s with length %s", e.name, e.kind, e.l)

-- load maps into elements ----------------------------------------------------o

local E = element

E.  extra_element :set_methods { survey = invalid_survey } -- not valid
E.special_element :set_methods { survey =   empty_survey } -- default

E. thin_element   :set_methods { survey = geomaps.thin }
E.drift_element   :set_methods { survey = geomaps.drift }
E.patch_element   :set_methods { survey = geomaps.patch }
E.thick_element   :set_methods { survey = geomaps.thick }

E.changedir       :set_methods { survey = geomaps.changedir   }
E.srotation       :set_methods { survey = geomaps.srotation   }
E.yrotation       :set_methods { survey = geomaps.yrotation   }
E.xrotation       :set_methods { survey = geomaps.xrotation   }
E.translation     :set_methods { survey = geomaps.translation }

-- angles adjustment ----------------------------------------------------------o

local function update_angles (m)
  local A, W in m
  A[1], A[2], A[3] = W:torotmad(A[1], A[2], A[3])
end

-- survey command -------------------------------------------------------------o

local _srv = {}

local function make_mtable (self)
  if self.mtable then return self.mtable end -- already built
  if not self.save then return nil end       -- nothing to build

  local sequence, drift, range, nturn in self
  local name, direction in sequence
  local nrow = sequence:length_of(range, nturn) * (drift and 2 or 1)

  return mtable 'survey' {
    type='survey', title=name, direction=direction, reserve=nrow,
    {'name'}, 'kind', 's', 'l', 'angle', 'tilt',
    'x', 'y', 'z', 'theta', 'phi', 'psi', 'globaltilt',
    [_srv]=_srv,
  }
end

local function fill_mtable (tbl, name, kind, m, l, ang, til)
  local V, A, s, dir in m
  local x, y, z      = V[1], V[2], V[3]
  local th, phi, psi = A[1], A[2], A[3]
  ang, til = (ang or 0)*dir, (til or 0)*dir
  -- keep order!
  tbl = tbl + { name, kind, s+l, l, ang, til, x, y, z, th, phi, psi, psi+til }
end

local function make_mflow (self)
  local sequence, mflow in self

  if not is_nil(mflow) then
    if sequence ~= mflow.seq then -- new sequence -> update
      local len, dir = #sequence, sequence.direction
      mflow.ds, mflow.iturn, mflow.dir, mflow.nlen = 0, 0, dir, len
      mflow.seq = sequence
    end
    return mflow
  end

  local x, y, z, theta, phi, psi, X0, A0 in self
  x     = x     or X0.x     or X0[1] or 0
  y     = y     or X0.y     or X0[2] or 0
  z     = z     or X0.z     or X0[3] or 0
  theta = theta or A0.theta or A0[1] or 0
  phi   = phi   or A0.phi   or A0[2] or 0
  psi   = psi   or A0.psi   or A0[3] or 0

  local save, drift in self
  local len, dir = #sequence, sequence.direction
  local V   = vector(3):fill{x,y,z}
  local W   = matrix(3):rotmad(theta, phi, psi)
  local A   = vector(3):fill{theta, phi, psi}
  local R, S, T = vector(3), matrix(3), matrix(3)

  return { A=A, V=V, W=W,                                   -- initial vars
           R=R, S=S, T=T,                                   -- internal vars
           s=0, ds=0, iturn=0, dir=dir, nlen=len, ndft=0,   -- internal status
           seq=sequence, save=save, drift=save and drift,   -- user status
           [_srv]=_srv }
end

local dft = element.drift { l=0 } -- implicit drift template

local function exec (self)
  assert(self[_srv], "invalid argument #1 (survey expected)")
  local seq = assert(self.sequence, "missing sequence")
  assert(is_sequence(seq), "invalid sequence")

  -- build or update mflow and mtable
  local map = make_mflow (self)
  local tbl = make_mtable(self)

  assert(is_nil(tbl) or tbl[_srv] == _srv, "invalid survey mtable")
  assert(               map[_srv] == _srv, "invalid survey mflow" )

  -- retrieve information
  local nlen, ndft, save, drift in map
  local range, nturn in self

  -- affine tracking
  for i,elm in seq:iter(range, nturn) do -- TODO: recover spos

    -- implicit drift
    local ds in map
    if ds >= minlen then
      dft.l = ds ; geomaps.drift(dft, map)
      -- dftmap(ds, map)
      if drift and elm:is_selected(observe) then
        ndft = ndft+1
        fill_mtable(tbl, 'DRIFT_'..ndft, 'drift', map, ds)
      end
      map.s, map.ds = map.s+ds, 0
    elseif ds <= -minlen then
      errorf("negative implicit drift %s in %s['%s'] at %s",
             ds, seq.name, elm.name, map.s)
    end

    -- sequence element
    local tbl2, map2 = elm:survey(map)
    if tbl2 then return tbl2, map2 end -- stop (e.g. slink)
    update_angles(map)
    if save and elm:is_selected(observe) then
      fill_mtable(tbl, elm.name, elm.kind, map, elm.l, elm.angle, elm.tilt)
    end

    -- update map s, ds, iturn
    if i < nlen then
      map.ds = seq:spos(i+1) - (seq:spos(i)+elm.l) -- patch z+dz?
    else
      map.ds, map.iturn = 0, map.iturn+1
    end
    map.s = map.s+elm.l
  end

  map.ndft = ndft
  return tbl, map
end

local survey = command 'Survey' {
  X0={0,0,0}, A0={0,0,0}, nturn=0, drift=true, save=true,
  exec=exec, [_srv]=true,
} :set_readonly()

-- end ------------------------------------------------------------------------o
return { survey = survey }
