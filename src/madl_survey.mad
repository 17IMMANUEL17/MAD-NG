--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [[
NAME
  survey -- Survey

SYNOPSIS
  TODO

DESCRIPTION
  The module survey provides...

RETURN VALUES
  The survey command

SEE ALSO
  element
]]

-- locals ---------------------------------------------------------------------o

local Command, element, sequence, table            in MAD
local is_nil, is_number, vector, matrix, is_matrix in MAD
local abs, sin, cos                                in MAD

local minlen, minang = 1e-14, 1e-14

local _tbl = {}

-- implementation -------------------------------------------------------------o

local function invalid_survey (elem, m)
  error(string.format("invalid element %s of kind %s with length %s",
                      elem.name, elem.kind, l and tostring(l) or 0))
end

local function drift_survey (l, m)
  m.R:fill {0, 0, l}
  m.V = m.W * m.R + m.V
end

local function thin_survey (elem, m)
  local l, angle, tilt in elem

  if l ~= 0 then
    error("invalid thin element length: " .. elem.name)
  end

  if abs(angle) >= minang then
    m.S:roty(-angle)

    if abs(tilt) >= minang then
      m.T:rotz(tilt)
      m.S = m.T * m.S * m.T:t()
    end

    m.W = m.W * m.S
  end
  return 0
end

local function strait_survey (elem, m)
  local l, angle in elem

  if angle ~= 0 then
    error("invalid strait element angle: " .. elem.name)
  end

  if l >= minlen then
    drift_survey(l, m)
  end
  return l
end

local function curved_survey (elem, m)
  local l, angle, tilt in elem

  if angle == 0 then
    error("invalid curved element angle: " .. elem.name)
  end

  if l >= minlen then
    local rho = l/angle
    m.R:fill {rho*(cos(angle)-1), 0, rho*sin(angle)}
  else
    m.R:zeros()
  end

  if abs(angle) >= minang then
    m.S:roty(-angle)
  else
    m.S:eye()
  end

  if abs(tilt) >= minang then
    m.T:rotz(tilt)
    m.R = m.T * m.R
    m.S = m.T * m.S * m.T:t()
  end

  m.V = m.W * m.R + m.V
  m.W = m.W * m.S
  return l
end

-- load survey maps into elements

element.element       :set_function { survey = invalid_survey }
element.thin_element  :set_function { survey = thin_survey    }
element.strait_element:set_function { survey = strait_survey  }
element.curved_element:set_function { survey = curved_survey  }

-- survey command helpers

local function fill_table (tbl, name, m, s, l, a, t)
  local x, y, z      = m.V[1], m.V[2], m.V[3]
  local th, phi, psi = m.A[1], m.A[2], m.A[3]
  th, phi, psi = m.W:torotmad(th, phi, psi)

  -- update angles
  m.A[1], m.A[2], m.A[3] = th, phi, psi

  -- add table row (order matters!)
  tbl = tbl + { name, s, l, a, t, x, y, z, th, phi, psi, t+psi }
end

local function make_table (self)
  local seq, dft = self.sequence, self.drift
  local n = (dft == true and 2 or 1) * #seq
  return table 'survey' { type = 'survey', title = seq.name,
    {'name'}, 's', 'length', 'angle', 'tilt',
     'x', 'y', 'z', 'theta', 'phi', 'psi', 'globaltilt',
  } : reserve(n)
end

local function make_map (self)
  local X0, A0 in self
  local V = vector(3):fill(X0)
  local W = matrix(3):rotmad(A0[1],A0[2],A0[3])
  local A, R, S, T = A0, vector(3), matrix(3), matrix(3)
  return { V=V, W=W, A=A, R=R, S=S, T=T }
end

-- survey command exec
-- survey { sequence=seq, X0={x0,y0,z0}, A0={theta0,phi0,psi0},
--          drift=logical, range={start,stop} }
--> table

local function __exec (self)
  local seq = assert(self.sequence, "missing sequence")
  assert(seq.kind == 'sequence' and seq.is_sequence == true, "invalid sequence")

  local len, start, stop = #seq, self.range[1], self.range[2]
  assert(is_number(start) and is_number(stop), "invalid range")
  if start < 0 then start = len+start+1 end
  if stop  < 0 then stop  = len+stop +1 end
  assert(start >= 1 and start <= len and stop >= 1 and stop <= len,
         "range out of sequence")

  local tbl = self[_tbl] or make_table(self)
  local map = make_map(self)
  local drift in self
  local s_pos in seq

  -- affine tracking
  local n, end_pos = -1, 0
  for i=1,#seq do
    local elem, s = seq[i], s_pos[i]
    local ds = s - end_pos

    -- implicit drift
    if ds < 0 then
      error(string.format("negative drift %s in %s['%s'] at %s",
            tostring(ds), seq:get_key('name'), elem.name, tostring(s)))
    elseif ds >= minlen then
      drift_survey(ds, map)
      end_pos, n = s, n+1
      if drift then fill_table(tbl, 'DRIFT_'..n, map, end_pos, ds, 0, 0) end
    end

    -- sequence element
    ds = elem:survey(map)
    end_pos = end_pos + ds
    fill_table(tbl, elem.name, map, end_pos, ds, elem.angle or 0, elem.tilt or 0)
  end

  return tbl
end

-- survey command template

local survey = Command 'survey' {
  X0={0,0,0}, A0={0,0,0},             -- default options
  drift=true, range={1,-1},
  noexec=true,                        -- make template only
} : set_metamethod({ __exec = __exec }, true) : set_readonly()

-- end ------------------------------------------------------------------------o
return {
  survey = survey,

  __help = M.__help,
}
