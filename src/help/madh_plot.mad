--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module (help)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A. Bloch , aurelien.bloch at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- plot help ------------------------------------------------------------------o

__help.plot = [=[
NAME
  plot

SYNOPSIS
  my_plot = plot 'myplot' { parameters... }

DESCRIPTION
  This module provides a high level interface to 'gnuplot' a cross-platform
  command-line graphing utility (see http://www.gnuplot.info). It requires
  gnuplot 5+ to be installed to work and this documentation heavily lean on the
  gnuplot manual (available at http://www.gnuplot.info/docs_5.0/gnuplot.pdf).

  It works by generating a gnuplot script and passing it to an instance of
  gnuplot using gplot to manage these resources (see gplot).

  This command offers two main functionalities:
  - A user-friendly way to dump data to gnuplot (to generate plots)
  - The generation of a gnuplot script to create a layout from a sequence.

  To see the complete list of available parameters, their default value, and the
  way to define them properly see "plot: options"Â .

RETURN VALUE
  The plot command.

EXAMPLES
  This simple example shows how to plot the "y1" column of table tbl against the
  line indexes as well as the layout of sequence seq on the top. See tests for
  more examples.

  plot {
    sequence = seq,
    table    = tbl,
    x1y1     = "y1",
  }

  For complete and working examples involving all kinds of parameters refer to
  the unit tests of the plot command (see tests/utest/plot.mad)

SEE ALSO
  gplot, mtable, sequence, command.
]=]

__help['plot: options'] = [=[
DESCRIPTION
  This section presents the list of all available plot attributes with their
  corresponding default values. On the right side, the comments describe the
  the accepted kind of values for each attributes.

OPTIONS
  -- stream id
  sid         = 1,          -- 1 <= n <= 25

  -- windows setup
  term        = "wxt",
  wsizex      = 800,        -- x > 0
  wsizey      = 500,        -- y > 0

  -- output
  output      = nil,        -- ("filename") -> pdf | number -> wid
  scrdump     = nil,        -- ("filename")

  -- table or data input
  data        = nil,        -- { x=tbl.x, y=vec } (precedence over table)
  table       = nil,        -- mtable
  tablerange  = nil,        -- compatible table range

  -- sequence and survey input
  sequence    = nil,        -- seq | { seq1, seq2, ... } | "keep"
  range       = nil,        -- sequence iterator range
  nturn       = 1,          -- sequence iterator nturn, n >= 1
  misalign    = nil,        -- survey misalign level
  s0          = nil,        -- s0                | {s0, s0, ...}
  X0          = {0, 0, 0},  -- {x, y, z }        | { {...}, {...}, ...}
  A0          = nil,        -- {theta, phi, psi} | { {...}, {...}, ...}
  W0          = nil,        -- W0                | {W0, W0, ...}

  -- layout style
  laypos      = "top",      -- "top" | "bottom" | "middle" | "in" | 0 < y < 1
  laysize     = nil,        -- 0 < y < 1
  layonly     = nil,        -- boolean
  laydisty    = 0,          -- y >= 0 | { y1, y2, ... }
  laydistx    = 0,          -- x >= 0 | { x1, x2, ... }
  layshift    = 0,          -- x >= 0
  layangle    = true,       -- boolean
  elemsel     = ftrue,      -- element selector (i.e. predicate)
  elemname    = true,       -- boolean
  elemwidth   = nil,        -- unsigned size of element before elemscale
  elemscale   = 1,          -- multiplier or default size
  kindcolor   = true,       -- {
                            --   quadrupole = "blue",
                            --   sbend = {
                            --     fillcolor = "red",
                            --     fillstyle = "solid",
                            --     linecolor = "green",
                            --     dashtype  = "..  ",
                            --   }
                            -- }
                            -- true  -> use default
                            -- false -> no color

  -- axis selection (and names)
  x1y1        = nil,        -- x1y1 = { x1 = {"y1", "y2"}, x2 = {"y3", "y4"}}
  x1y2        = nil,        -- x1y1 = { x1 = {"y1", "y2"}, x2 = "y3"}
  x2y1        = nil,        -- x1y1 = { x2 = {"y1", "y2"}, "y3"},
  x2y2        = nil,        -- x1y1 = { x1 = {"y1", "y2"}},
                            -- x1y1 = { x2 = "y1", "y2"},
                            -- x1y1 = { x1 = "y1"},
                            -- x1y1 = {"y1", "y2"},
                            -- x1y1 = "y1",

  -- labels
  title       = "${name} MAD ${version}, ${date}, ${time}",
  legend      = nil,        -- { y = "distance" }
  xlabel      = nil,        -- strings
  x2label     = nil,        -- strings
  ylabel      = nil,        -- strings
  y2label     = nil,        -- strings

  -- axis ranges
  xrange      = nil,        -- { min, max }
  x2range     = nil,        -- { min, max }
  yrange      = nil,        -- { min, max }
  y2range     = nil,        -- { min, max }

  -- plot command customization
  prolog      = nil,        -- string
  epilog      = nil,        -- string
  plotcfg     = nil,        -- string
  plotcmd     = nil,        -- string
  plotvar     = nil,        -- table

  -- plot style
  originx     = nil,        -- 0 < x < 1
  originy     = nil,        -- 0 < y < 1
  psizex      = nil,        -- 0 < x < 1
  psizey      = nil,        -- 0 < y < 1

  -- data style
  smooths     = nil,        -- { y = "csplines" }
  styles      = nil,        -- { y = "lines"    }
  colors      = nil,        -- { y = "green"    }
  dashtypes   = nil,        -- { y = "..-- "    }
  linewidths  = nil,        -- { y = 2.3        }
  pointtypes  = nil,        -- { y = 2          }
  pointsizes  = nil,        -- { y = 2.3        }
  datastyles  = { },        -- { y = { style = "lines", color = "blue"} }

  -- decoration
  font        = nil,        -- string
  fontsize    = nil,        -- n > 0
  titlefont   = nil,        -- string
  titlesize   = nil,        -- n > 0
  legendfont  = nil,        -- string
  legendsize  = nil,        -- n > 0
  legendpos   = "left top", -- string
  grid        = nil,        -- string
  border      = nil,        -- 0 <= n <= 15

  -- object shift
  oshft       = 1000000,    -- n >= 0

  -- build the command (do not execute)
  exec        = exec,
]=]

__help['plot.sid'] = [=[
NAME
  sid

SYNOPSIS
  plot.sid

DESCRIPTION
  The sid is used by the plot command to configure the gplot object (see
  gplot.sid for details). You might want to use multiple gnuplot instances (i.e.
  subprocesses for many reasons but here are a few possibilities:
  - If you want to have multiple pdf open for creation, then use one sid per
    pdf because changing the name of the output pdf will close the previous one
    and once closed, it cannot be extended anymore.
  - If you want to have multiple interactive windows at the same time, then
    you should use one sid per window because inside a same gnuplot instances
    only the last one will be interactive.

SEE ALSO
  gplot.sid, plot.output
]=]

__help['plot.term'] = [=[
NAME
  term, wsizex, wsizey

SYNOPSIS
  plot.term
  plot.wsizex
  plot.wsizey

DESCRIPTION
  The term attribute holds the name of the gnuplot windows terminal used by the
  command. Its default value is "wxt". The attributes wsizex and wsizey define
  the width and height of the graphical window in pixels.

EXAMPLES
  The following example shows how to use the QT terminal with a window of
  800x500 pixels.

  plot {
    [...]
    term   = "qt",
    wsizex = 800,
    wsizey = 500,
  }

SEE ALSO
  None.
]=]
__help['plot.wsizex'] = __help['plot.term']
__help['plot.wsizey'] = __help['plot.term']

__help['plot.output'] = [=[
NAME
  output, scrdump

SYNOPSIS
  plot.output
  plot.scrdump

DESCRIPTION
  The output attribute sets the output mode.
  - A number value will use the windows terminal set by the "term" parameter
    and create a window with this number as id. A single gnuplot instance can
    have multiple windows designated by the output number.
  - A string value will use the "pdfcairo" terminal and generate a pdf
    file with this string as a name.
  The attribute scrdump holds the name of the file where the gnuplot script will
  be saved. A nil value means that the scrdump is not saved (default).

EXAMPLES
  The following example creates a "wxt" window with an id of 2 and does not save
  the script.

  plot {
    [...]
    output  = 2,
    scrdump = nil,
  }

  The next example generates a pdf file named "plot.pdf" and save the script in
  the file named "plot.gp".

  plot {
    [...]
    output  = "plot.pdf",
    scrdump = "plot.gp",
  }

SEE ALSO
  None.
]=]
__help['plot.scrdump'] = __help['plot.output']

__help['plot.data'] = [=[
NAME
  data, table, tablerange

SYNOPSIS
  plot.data
  plot.table
  plot.tablerange

DESCRIPTION
  Both data (i.e. a table) and table (i.e. a mtable) must contain the columns of
  data to be plotted. The columns to plot are selected by their names (i.e. see
  plot.x1y1) with higher precedence for data, and must be either arrays (i.e.
  tables) of numbers or vectors, both of correct length. The columns from table
  can be restricted by the attribute tablerange to match the correct length.

EXAMPLES
  The following example plots 'y1' against 'x1' and 'y2' against 'x2', where
  'x1' is a vector and 'y2' is a table taken from data, and 'x2', 'y2' are
  columns taken from the table mtbl restricted to values within tablerange.

  local tbl = { [...] }
  local vec = vector(#tbl):fill{ [...] }
  plot {
    [...]
    table = mtbl,
    tablerange = { 10, 110 },
    data  = { x1 = vec , y2 = tbl  },
    x1y1  = { x1 = 'y1', x2 = 'y2' },
  }

SEE ALSO
  mtable, plot.x1y1, plot.x1y2, plot.x2y1, plot.x2y2.
]=]
__help['plot.table'     ] = __help['plot.data']
__help['plot.tablerange'] = __help['plot.data']

__help['plot.sequence'] = [=[
NAME
  sequence, range, nturn, s0, X0, A0, W0

SYNOPSIS
  plot.sequence
  plot.range
  plot.nturn
  plot.s0
  plot.X0
  plot.A0
  plot.W0

DESCRIPTION
  The sequence attribute holds the sequence or a list of sequences to display in
  the layout part of the plot. The range attribute holds the sequence range or a
  list of ranges matching the list of sequences to restrict the layout for each
  sequences respectively. The attributes nturn, s0, X0, A0 and W0 are forwarded
  to the survey command run to build the layout when laypos is "in".

EXAMPLES
  The following example plots the survey of lhcb1 from IP2 to IP4 with X0 and A0
  as initial survey conditions.

  plot {
    [...]
    sequence = lhcb1,
    laypos   = "in",
    range    = { "IP2"   , "IP4"      },
    X0       = { -1231.18, 0, 2970.46 },
    A0       = { -pi/4   , 0, 0       },
  }

SEE ALSO
  sequence and survey.
]=]
__help['plot.range'   ] = __help['plot.sequence']
__help['plot.nturn'   ] = __help['plot.sequence']
__help['plot.survey'  ] = __help['plot.sequence']
__help['plot.misalign'] = __help['plot.survey']
__help['plot.s0'      ] = __help['plot.survey']
__help['plot.X0'      ] = __help['plot.survey']
__help['plot.A0'      ] = __help['plot.survey']
__help['plot.W0'      ] = __help['plot.survey']

__help['plot.layout'] = [=[
NAME
  laypos, laysize, laydisty, laydistx, layshift, layangle,
  elemsel, elemname, elemwidth, elemscale, kindcolor

SYNOPSIS
  plot.laypos
  plot.laysize
  plot.laydisty
  plot.laydistx
  plot.layshift
  plot.layangle
  plot.elemsel
  plot.elemname
  plot.elemwidth
  plot.elemscale
  plot.kindcolor

DESCRIPTION
  The attribute laypos defines the position of the layout amongst "top",
  "bottom", "middle" or "in". It can also be a number in the interval (0, 1)
  representing the relative position along the y-axis, using screen coordinates
  (see gnuplot manual). The special case "in" will draw the layout inside the
  plot using survey to place the elements of the sequence.
    The attribute laysize defines the total size taken by the layout along the
  y-axis in screen coordinates. The attributes laydisty (resp. laydistx) defines
  the vertical (resp. horizontal) positions of the 2..n sequences along the
  y-axis (resp. x-axis) relatively to the first sequence of the list. The
  attribute layshift shifts all sequences along the x-axis (similar to s0 for
  suyvey). The boolean attribute layangle enables the layangle flags of elements
  to take into account their angle in the layout.
    The attribute elemsel defines a predicate used to select (or filter out)
  elements to draw. The boolean attribute elemname enables the labeling of the
  elements (name and kind) displayed in interactive terminal (e.g. wxt) when the
  mouse is moved over the center of an element. The attributes elemwidth and
  elemscale are respectively the base width and its multiplier for the layout of
  elements. The attribute kindcolor allows to define the fillcolor and fillstyle
  (see gnuplot manual) for each element kind. Setting it to true will use
  default color and fillstyle.

EXAMPLES
  The example hereafter plots the layout of the two lhc beams around IP5. The
  laydisty attribute uses the mechanical separation to adjust the distance
  between the two beams along the y-axis while the layshift attribute shifts the
  two beams to the correct s-position (layout start at 0 by default).

  plot {
    [...]
    sequence = { lhcb1, lhcb2 },
    range    = { {"E.DS.L5.B1", "S.DS.R5.B1"}, {"E.DS.L5.B2", "S.DS.R5.B2"} },
    laydisty = lhcb2["E.DS.L5.B2"].mech_sep,
    layshift = lhcb1:spos(lhcb1:index_of("E.DS.L5.B1")),
  }

  The following example positions the layout of lhcb1 below the plot and covers
  40% of the screen. It sets the elements name and kind labeling, as well as
  their width and scale to 0.07 [m] and x1.5 respectively on the plot. The
  element selector elemsel will filter out all elements shorter than 3m that are
  not of kind sbend (colored in red) and quadrupole (colored in blue). Finally
  the angle of flagged elements will be used to deflect the layout on the
  bottom.

  kndsel = {sbend=true, quadrupole=true}
  plot {
    [...]
    sequence   = lhcb1
    laypos     = "bottom",                   -- default is "top"
    laysize    = 0.4,
    elemname   = true,
    elemwidth  = 0.07,
    elemscale  = 1.5,
    elemsel    = \e -> e.l >= 3 and kndsel[e.kind],
    layangle   = true
    kindcolor  = {
      "quadrupole" = "blue",                 -- if not specified it is fillcolor
      "sbend"      = { fillcolor = "red", fillstyle = "solid" }
    }
  }

SEE ALSO
  survey, gnuplot: screen coordinate, fillstyle, fillcolor.
]=]
__help['plot.laypos'   ] = __help['plot.layout']
__help['plot.laysize'  ] = __help['plot.layout']
__help['plot.laydisty' ] = __help['plot.layout']
__help['plot.laydistx' ] = __help['plot.layout']
__help['plot.layshift' ] = __help['plot.layout']
__help['plot.layangle' ] = __help['plot.layout']
__help['plot.elemsel'  ] = __help['plot.layout']
__help['plot.elemname' ] = __help['plot.layout']
__help['plot.elemwidth'] = __help['plot.layout']
__help['plot.elemscale'] = __help['plot.layout']
__help['plot.kindcolor'] = __help['plot.layout']

__help['plot.axes'] = [=[
NAME
  x1y1, x1y2, x2y1, x2y2

SYNOPSIS
  plot.x1y1
  plot.x1y2
  plot.x2y1
  plot.x2y2

DESCRIPTION
  Those four parameters allow to select by name from data or table the columns
  to be plotted and along which main axes: x1 bottom, x2, top, y1 left and y2
  right (see gnuplot Axes). If no abscissa columns is provided (i.e. x1y1 =
  "y1") then row indexes are used as abscissa.

EXAMPLES
  This example will plot: y1 and y2 against x1, y3 against x2, y4 against row
  indexes using x1y1 axis and y5 against x3 using x2y2 axis.

  plot {
    [...]
    x1y1 = { x1 = {"y1", "y2"}, x2 = "y3", "y4" }
    x2y2 = { x3 = "y5" }
  }

SEE ALSO
  plot.data, plot.table, gnuplot: axes (x1y1, x1y2, x2y1, x2y2).
]=]
__help['plot.x1y1'] = __help['plot.axes']
__help['plot.x1y2'] = __help['plot.axes']
__help['plot.x2y1'] = __help['plot.axes']
__help['plot.x2y2'] = __help['plot.axes']

__help['plot.title'] = [=[
NAME
  title, legend, xlabel, x2label, ylabel, y2label

SYNOPSIS
  plot.title
  plot.legend
  plot.xlabel
  plot.x2label
  plot.ylabel
  plot.y2label

DESCRIPTION
  The attribute title is a string used for the plot title. The legend must be a
  table matching the columns names used in axes selections (see plot.axes) or a
  string. The attributes xlabel, x2label, ylabel, y2label are the axis label
  strings.

EXAMPLES
  This example plots two lines and sets all labels, legend and title.

  plot {
    [...]
    title   = "My plot Title"
    x1y1    = { "y1", "y2" }
    legend  = { y1 = "My legend1", y2 = "My legend 2" }
    xlabel  = " X unit "
    x2label = " X2 unit "
    ylabel  = " Y unit "
    y2label = " Y2 unit "
  }

SEE ALSO
  plot.axes, gnuplot: title, legend, xlabel, x2label, ylabel, y2label.
]=]
__help['plot.legend' ] = __help['plot.title']
__help['plot.xlabel' ] = __help['plot.title']
__help['plot.x2label'] = __help['plot.title']
__help['plot.ylabel' ] = __help['plot.title']
__help['plot.y2label'] = __help['plot.title']

__help['plot.xrange'] = [=[
NAME
  xrange, x2range, yrange, y2range

SYNOPSIS
  plot.xrange
  plot.x2range
  plot.yrange
  plot.y2range

DESCRIPTION
  These parameters set the ranges by providing the minimal and maximal values
  for each axis. If the second value is lower than the first value, the axis is
  reversed (e.g. negative x right). In gnuplot 'set xrange [max:min]' is
  equivalent to 'set xrange [min:max] reverse' except that the latter still
  allows for autoscale with 'set xrange [] reverse' (see gnuplot manual).

EXAMPLES
  This example sets the range of the x1y1 axis to a square between -1e2
  and 1e2 reversed on x1 and the x2y2 axis to a square between -0.5 and 0.5.

  plot {
    [...]
    xrange  = {  1e2, -1e2 }
    yrange  = { -1e2,  1e2 }
    x2range = { -0.5,  0.5  }
    y2range = { -0.5,  0.5  }
  }

SEE ALSO
  gnuplot:  xrange, x2range, yrange, y2range.
]=]
__help['plot.x2range'] = __help['plot.xrange']
__help['plot.yrange' ] = __help['plot.xrange']
__help['plot.y2range'] = __help['plot.xrange']

__help['plot.prolog'] = [=[
NAME
  prolog, epilog, plotcfg, plotcmd, plotvar

SYNOPSIS
  plot.prolog
  plot.epilog
  plot.plotcfg
  plot.plotvar
  plot.plotcmd

DESCRIPTION
  These attributes are useful to customize the plot command or even replace the
  default gnuplot script generated for the plot itself (e.g. 3D plots). The
  structure of a script sent to gnuplot is as follow, where attributes
  surrounded by square brackets are optional user-defined attributes:

      [prolog]
    setup
    objects (layout)
    data
      [plotcfg]
    defaultcmd [%plotvar] | plotcmd [%plotvar]
      [epilog]

  The attribute plotcmd is a replacement string for the default gnuplot plot(s)
  command(s) and its attributes (see gnuplot manual). Both default and plotcmd
  strings will be interpolated by the optional plotvar table (see
  utility.strinterp). The plot command defines few variables that plotcmd can
  also use (see plot: interpolation).

EXAMPLES
  This example shows how to activate/deactivate gnuplot multiplot mode at the
  beginning and the end of the script.

  plot {
    [...]
    prolog = "set multiplot",
    epilog = "unset multiplot",
  }

  This example uses the ${data1} variable generated by plot to contain the
  name of the gnuplot datablock containing all columns data (here all the c*).
  plot {
    [...]
    x1y1 = { c1 = {"c2", "c3", "c4", "c5", "c6"} },
    plotcfg = "set pm3d map",
    plotcmd = "splot ${data1} matrix",
  }

SEE ALSO
  utility.strinterp, plot: interpolation, gnuplot: plot.
]=]
__help['plot.epilog' ] = __help['plot.prolog']
__help['plot.plotcfg'] = __help['plot.prolog']
__help['plot.plotcmd'] = __help['plot.prolog']
__help['plot.plotvar'] = __help['plot.prolog']

__help['plot: interpolation'] = [=[
DESCRIPTION
  This section describes how the string interpolation of MAD can be used
  to customize the gnuplot plot(s) command(s) using plotcmd and plotvar.

    First let's see how the default gnuplot plot(s) command(s) are generated
  using the string interpolations facility. Each data set plotted has its own
  gnuplot 'plot' command that starts from the default plotcmd string hereafter:

    "${cmd${id}}${data${id}}${index${id}}${using${id}}with ${style${id}}
     ${lines${id}}${points${id}}${color${id}}${title${id}}${axes${id}}"

    Then we interpolate this string by replacing the ${id} by the index of the
  gnuplot plot command number, for instance the first command will look has
  follow:

    "${cmd1}${data1}${index1}${using1}with ${style1}${lines1}${points1}${color1}
     ${title1}${axes1}"

    After the first interpolation, a second interpolation replaces all gnuplot
  plot command (numbered) variables by the prepared variables for its index #,
  and held by the default plotvar table:

    cmd#, data#, index#, using#, style#, lines#, points#, color#, title#, axes#

  The final output of the gnuplot plot command will typically look like:

  plot '$MAD_DATA' index 0 using 1:2 with lines dashtype '..   ' linewidth 2.3 \
          linecolor 'red' title 'y1' axes x1y1 ,\
       ''          index 0 using 1:3 with points pointsize 2 pointtype 2 \
          linecolor 'blue' title 'y3' axes x1y1 ,\
       ''          index 0 using 1:4 with linespoints dashtype '--  ' \
          linewidth 3.2 pointsize 4.1 pointtype 3 linecolor 'pink' title 'y4' \
          axes x1y1 ,\

  An interesting application combines commands interpolation and data block (see
  gnuplot manual). If in the previous example we define for instance a variable
  data2='$MAD_DATA2' in plotvar and a named datablock $MAD_DATA2 (see gnuplot
  datablock) in the prolog or plotcfg of the command, then the second gnuplot
  plot command will have the same setup as the first one but a different data
  set.
    A full customization can be obtained by providing both, a customized plotcmd
  that uses a customized set of (numbered) variables.

EXAMPLES
  This example uses of both features, using a customized plotcmd string and
  plotvar table to override color3.

  plot {
    [...]
    x1y1       = { x1 = {"y1", "y3", "y4" } },
    styles     = { y1 = "lines", y3 = "points", y4 = "linespoints" },
    colors     = { y1 = "red"  , y3 = "blue"  , y4 = "green"       },
    dashtypes  = { y1 = "..   ",                y4 = "--  "        },
    linewidths = { y1 = 2.3    ,                y4 = 3.2           },
    pointtypes = {               y3 = 2       , y4 = 3             },
    pointsizes = {               y3 = 2.0     , y4 = 4.1           },
    plotvar    = { color3 ="linecolor 'pink' " },
    plotcmd    = "\z
      ${cmd1}${data1}${index1}${using1}with ${style1}${lines1}${points1}${color1}${title1}${axes1},\\\n\z
      ${cmd2}${data2}${index2}${using2}with ${style2}${lines2}${points2}${color2}${title2}${axes2},\\\n\z
      ${cmd3}${data3}${index3}${using3}with ${style3}${lines3}${points3}${color3}${title3}${axes3},\\\n\z
    "
  }

  This example shows how to handle multiple interpolations at the user level
  using deferred expressions of MAD and the following simple lamda function T to
  prefix strings that need to be interpolated more than once by plotvar.

  T = \s\ctx -> s%ctx
  plot {
    [...]
    plotvar = {
      title2  = T"title '${mytitle}' ",
      mytitle = T"title for command (${cmd1}) on axes (${axes2})",
    }
  }

SEE ALSO
  plot.plotcfg, plot.plotcmd, plot.plotvar, utility.strinterp,
  gnuplot: datablocks.
]=]

__help['plot.originx'] = [=[
NAME
  originx, originy, psizex, psizey

SYNOPSIS
  plot.originx
  plot.originy
  plot.psizex
  plot.psizey

DESCRIPTION
  The attributes originx, originy set the x and y positions of the plot origin
  in screen coordinate (see gnuplot manual). The attributes psizex, psizey
  define the size of the plot along the x and y axes in screen coordinate.

EXAMPLES
  The following example generates a plot that has its origin in the center of
  the drawing and take a quarter of its surface (in the top right corner).

  plot {
    [...]
    originx =  0.5,
    originy =  0.5,
    psizex  =  0.5,
    psizey  =  0.5,
  }

SEE ALSO
  gnuplot: screen coordinate, origin, size.
]=]
__help['plot.originy'] = __help['plot.originx']
__help['plot.psizex' ] = __help['plot.originx']
__help['plot.psizey' ] = __help['plot.originx']

__help['plot.styles'] = [=[
NAME
    styles, colors, dashtypes, linewidths, pointtypes, pointsizes, datastyles

SYNOPSIS
  plot.styles
  plot.colors
  plot.dashtypes
  plot.linewidths
  plot.pointtypes
  plot.pointsizes
  plot.datastyles

DESCRIPTION
  The attributes styles, colors, dashtypes, linewidths, pointtypes, pointsizes
  allow to set gnuplot line style for each selected column to plot, matching
  directly gnuplot styles (see gnuplot manual). The attribute datastyles does
  the same using grouped styles for each column (see below).

EXAMPLES
  The two following examples set all possible styles for 'y1' using the two
  approach while generating the same result.

  plot {
    [...]
    x1y1       = "y1",
    datastyles = {
      y1 = {
        style     = "lines",
        color     = "green",
        dashtype  = "..-- ",
        linewidth = 2.3,
        pointtype = 2,
        pointsize = 2.3,
      }
    }
  }
  plot {
    [...]
    x1y1       = "y1",
    styles     = { y1 = "linespoints" },
    colors     = { y1 = "green" },
    dashtypes  = { y1 = "..-- " },
    linewidths = { y1 = 2.3     },
    pointtypes = { y1 = 2       },
    pointsizes = { y1 = 2.3     },
  }

SEE ALSO
  gnuplot: linecolor, linewidth, pointtype, pointsize, dashtype.
]=]
__help['plot.colors'    ] = __help['plot.styles']
__help['plot.dashtypes' ] = __help['plot.styles']
__help['plot.linewidths'] = __help['plot.styles']
__help['plot.pointtypes'] = __help['plot.styles']
__help['plot.pointsizes'] = __help['plot.styles']
__help['plot.datastyles'] = __help['plot.styles']

__help['plot.font'] = [=[
NAME
  font, fontsize, titlefont, titlesize, legendfont, legendsize, legendpos,
  grid, border

SYNOPSIS
  plot.font
  plot.fontsize
  plot.titlefont
  plot.titlesize
  plot.legendfont
  plot.legendsize
  plot.legendpos
  plot.grid
  plot.border

DESCRIPTION
  The attributes font, titlefont, legendfont (resp. fontsize, titlesize and
  legendsize) specify the name (resp. the size) of the fonts of all (strings),
  title and legend. The attribute legendpos is the string specifying the
  position of the legend (see gnuplot manual). The attribute grid allows to
  set/unset the background grid. The attribute border allows to set the border
  only on the sides of interest by adding the code of each side (see gnuplot
  manual).

EXAMPLES
  The following example generates a plot that as fonts "Arial Black" and
  "Aclonica"for title and legend with a size of 21 and 11 points respectively.
  The legend will be placed at the bottom right corner of the plot, the grid
  will not be drawn, and only the bottom and the right borders will be drawn.

  plot {
    [...]
    titlefont  = "Arial Black",
    titlesize  = 21,
    legendfont = "Aclonica",
    legendsize = 11,
    legendpos  = "bottom right",
    grid       = false,
    border     = 3,
  }

SEE ALSO
  gnuplot: fonts, terminal, title, key, grid, border.
]=]
__help['plot.fontsize'  ] = __help['plot.font']
__help['plot.titlefont' ] = __help['plot.font']
__help['plot.titlesize' ] = __help['plot.font']
__help['plot.legendfont'] = __help['plot.font']
__help['plot.legendsize'] = __help['plot.font']
__help['plot.legendpos' ] = __help['plot.font']
__help['plot.grid'      ] = __help['plot.font']
__help['plot.border'    ] = __help['plot.font']

__help['plot.objshft'] = [=[
NAME
  objshft

SYNOPSIS
  plot.objshft

DESCRIPTION
  It is most likely that you do not need to change objshft. The plot command
  uses gnuplot objects to represent the elements of a layout. Internally gnuplot
  uses indexes to reference objects, hence the plot command create objects with
  indexes starting at objshft (default 1000000). If you want to draw by yourself
  more than 1000000 objects before plotting the layout, you have to increase
  this attribute otherwise the plot command will override your objects with
  indexes above objshift.

EXAMPLES
  plot {
    [...]
    objshft = 1000000,
  }

SEE ALSO
  gnuplot: object.
]=]

-- gplot help -----------------------------------------------------------------o

__help.gplot = [=[
NAME
  gplot

SYNOPSIS
  my_gplot = gplot 'mygplot' {}

DESCRIPTION
  The object gplot is used to manage gnuplot instances (i.e. processes) by
  creating and writing to its channel (i.e. pipe). Its unique state is the
  stream id (sid) of the instance it currently handles.

RETURN VALUE
  An instance of the gplot object.

EXAMPLES
  gplot:set_sid(3)
  gplot:write("reset")
  gplot:printf("set xrange [%e:%e]", xmin, xmax)

SEE ALSO
  plot.
]=]

__help['gplot.sid'] = [=[
NAME
  sid

SYNOPSIS
  gplot.sid

DESCRIPTION
  The attribute sid holds the number id of the gnuplot instance that the gplot
  object is currently managing.

EXAMPLES
  gplot.sid          -- 1
  gplot:set_sid(2)
  gplot.sid          -- 2

SEE ALSO
  plot.sid.
]=]

__help['gplot:write'] = [=[
NAME
  write, printf

SYNOPSIS
  gplot:write(str)
  gplot:printf(fmt, ...)

DESCRIPTION
  The method write (resp. printf) writes the string argument (resp. the
  formatted variadic arguments) to the gnuplot instance currently managed by
  gplot (i.e. sid).

RETURN VALUE
  None.

SEE ALSO
  None.
]=]
__help['gplot:printf'] = __help['gplot:write']

__help['gplot:set_sid'] = [=[
NAME
  set_sid

SYNOPSIS
  gplot:set_sid(number)

DESCRIPTION
  The method set_sid changes the sid number of the current gnuplot instance
  managed by the gplot object.

RETURN VALUE
  None.

ERRORS
  set_sid triggers an error if the provided sid is not within the allowed range
  (currently 1 <= sid <= 25).

EXAMPLES
  gplot.sid          -- =1
  gplot:set_sid(2)
  gplot.sid          -- =2

SEE ALSO
  None.
]=]

__help['gplot:is_busy'] = [=[
NAME
  is_busy

SYNOPSIS
  gplot:is_busy()

DESCRIPTION

  The method is_busy tells if the current gnuplot instance is still processing
  the script provided by a plot command. Note that this method does not take
  into account the gnuplot commands directly sent through gplot. It can be used
  to test if the previous plot command has been fully processed by the current
  instance of gnuplot before executing a new one (avoiding a blocking state if
  the maximum number of tmpfile is reached: see clean_tmpFile).

RETURN VALUE
  It returns a boolean indicating if the current gnuplot instance is busy.

EXAMPLES
  gplot:is_busy()                       -- =false
  plot { prolog = "pause 5" }           -- pause during 5 seconds
  gplot:is_busy()                       -- =true

SEE ALSO
  None.
]=]

__help['gplot:clean_tmpfile'] = [=[
NAME
  clean_tmpfile

SYNOPSIS
  gplot:clean_tmpfile()

DESCRIPTION
  The method clean_tmpfile removes all unused temporary files from the tmp
  folder, which contains the gnuplot scripts not yet processed by gnuplot. This
  function can be used to remove all files that have not been properly removed
  (after a crash for example). The tmp files are created by the plot command in
  the directory "TMP_MAD_PLOT" of the current working directory. This folder
  should not be removed while MAD is running but can be manually removed
  afterward.

RETURN VALUE
  None.

SEE ALSO
  None.
]=]


-- end ------------------------------------------------------------------------o
return __help
