--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic math module (help)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.gmath = [=[
NAME
  gmath -- generic math functions and constants

SYNOPSIS
  eps, huge, tiny, inf, infi, nan, nani, pi, twopi, degrad, raddeg,  (constants)
  angle, abs, ceil, floor, round, frac, trunc, sqrt,         (generic functions)
  exp, log, log10, sin, cos, tan, asin, acos, atan, sinh, cosh, tanh,
  acosh, asinh, atanh, erf, erfc, erfi, erfcx, tgamma, lgamma,
  carg, real, imag, conj, proj, rect, polar,         (generic complex functions)
  unm, add, sub, mul, div, mod, pow,                    (operators as functions)
  atan2, hypot, hypot3, ldexp, frexp, fpow, fmod, modf, max,    (math functions)
  min, sign, step, sinc, deg, rad,
  randomseed, random, randf, randn, randp, gauss, tgauss, poisson.

DESCRIPTION
  The module gmath provides generic functions that wraps common math functions
  with object-oriented dispatch for non-numbers. It also adds few useful
  constants, functions and generic functions. The generic function
  angle(x,y) is equivalent to atan2(y,x) (for numbers only). The generic
  functions trunc and frac are equivalent to first(modf(x)) and second(modf(x))
  respectively (for numbers only). All operators have binary generic functions
  wrappers except unm (unary minus).

RETURN VALUES
  See ISO/IEC 9899:1999 (and ISO/IEC 9899:2011).

ERRORS
  See ISO/IEC 9899:1999 (and ISO/IEC 9899:2011).

SEE ALSO
  math, complex.
]=]

__help['gmath.randgen'] = [=[
EXAMPLE:
local rand, randnewgen, randsetgen in MAD.gmath
for i=1,10 do
  for j=1,10 do
    print(i,j,rand())
  end
  randsetgen(randnewgen()) -- set a new global stream
end
]=]

__help['gmath: trigonometric mnemonics'] = [=[
Trigonometric mnemonics:
------------------------

deg      0      30     45     60     90
rad      0     pi/6   pi/4   pi/3   pi/2
sin     √0/2   √1/2   √2/2   √3/2   √4/2
cos     √4/2   √3/2   √2/2   √1/2   √0/2   sin(90 - angle)
tan     0/√3   1/√3    1     √3/1   √3/0   sin/cos

45   : square 1-1  , diag.  √2  , hypot 1 -> sides √2/2
30-60: equil. 1-1-1, height √3/2, hypot 1 -> sides 1/2 and √3/2
]=]

__help['gmath: IEEE:IEC 60559 floating-point compliance'] = [=[
Discrepancies:
  max(0  ,  nan)    expected: 0    actual: nan
  max(0,nan,nan)    expected: 0    actual: nan
  max(nan,0,nan)    expected: 0    actual: nan
  min(0  ,  nan)    expected: 0    actual: nan
  min(nan,0,nan)    expected: 0    actual: nan
  min(0,nan,nan)    expected: 0    actual: nan
  1/ceil (-0)       expected:-inf  jit: inf
  1/floor(-0)       expected:-inf  jit: inf (rand)
  1/round(-0)       expected:-inf  jit: inf (rand)
  1/fmod (-0, 0.5)  expected:-inf  jit: inf
  1/fmod (-0,-0.5)  expected:-inf  jit: inf
  1/fmod (-0, 1  )  expected:-inf  jit: inf
  1/fmod (-0,-1  )  expected:-inf  jit: inf
  1/fmod (-0, 10 )  expected:-inf  jit: inf
  1/fmod (-0,-10 )  expected:-inf  jit: inf

Unexpected behavior:
  frac( inf) expected: 0    interpreter: nan  jit: 0
  frac(-inf) expected: 0    interpreter: nan  jit: 0
  lgamma(-0) expected:-inf  linux: inf
  1/rect(-0) expected:-inf  jit:   inf (rand)
]=]

-- end ------------------------------------------------------------------------o
return __help
