--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track module (help)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Shreyber, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.track = [=[
NAME
  track -- track

SYNOPSIS
  TODO

DESCRIPTION
  The module track provides...

RETURN VALUES
  The track command

SEE ALSO
  element, sequence, survey
]=]

__help['track: references'] = [=[
[Wolski14]    A. Wolski, "Beam Dynamics in High Energy Particle Accelerators".
[Forest98]    E. Forest, "Beam Dynamics, A New Attitude and Framework".
[Forest02]    E. Forest, "Introduction to Polymorphic Tracking Code",
              KEK report 2002-3.
[Forest06]    E. Forest, "Geometric Integration for Particle Accelerators",
              J.Phys. A, Math.Gen. 39 (2006) 5321-5377.
[Ripken95]    K. Heinemann, G. Ripken, and F. Schmidt. "Construction of
              Nonlinear Symplectic Six-dimensional Thin-lens Maps by
              Exponentiation", Technical Report 95-189, DESY, 1995.
[SixTrack]    R. De. Maria et al., "SixTrack Physics Manual", CERN,
              http://cern.ch/SixTrack/doc/physics_manual/sixphys.pdf, Sep. 2016.
[Yoshida90]   H. Yoshida, "Construction of higher order symplectic integrators",
              Phys.Let. A, Volume 150, number 5,6,7.
[Laskar01]    J. Laskar et al., "High Order Symplectic Integrators for Perturbed
              Hamiltonian Systems", Celestial Mechanics and Dynamical Astronomy
              80: 39â€“62, 2001.
[Burkhardt13] H. Burkhardt et al., "Improved Teapot Method and Tracking with
              Thick Quadrupoles for the LHC and its Upgrade", IPAC 2013.
[MADX-PTC]    MAD-X PTC Code, rev. 6099
]=]

__help['track: straight maps'] = [[
  [2] p.352, ch.12.1
      DKD: ch.12.1.3, p.353
      MKM: ch.12.1.4, p.354
  [3] DKD: p.72, Section K.4.2,
           PTC, Function INTER_STREX in file Sh_def_kind.f90)
      MKM: p.75, Section K.4.7,
           PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

__help['track: curved maps'] = [[
  [2] p.357, ch.12.2
  [3] PTC, p.76, Section K.4.9,Function INTER_TEAPOT in file Sh_def_kind.f90)
]]

__help['track: pushtkt'] = [[
[2] MKM: p.75, Section K.4.7,
[3] PTC, Function INTER_TKTF  in file Sh_def_kind.f90)
]]

__help['track: straight matrix-kick'] = [[
  [2] p.358, ch.12.2.2 Drift-Kick Split, drift in polar coordinates
  [3] p.76, PTC, Function SPROTR in file Sh_def_kind.f90)
]]

--[[TODO:
-Add charge, direction, mass(?)
-Deltap (recalculation of pt)
- KICKEX: how to read properly strength of thick element (i.e. convert
k1,k1s, k2 etc to knl,ksl)
-????KICKEX: add a check for thick element that there is only one strength,
i.e. quad only has k1 and not k0, k2 or???
]]
-- add patch, rotation + translation

--[[ METHOD:
2 - 2nd order, 1 kick per integration step
4 - Ruth-Neri-Yoshida 4th order, 3 kicks per step
6 - Yoshida 6th order, 7kicks per step
]]

--[[
  frame of integration:

 angle == 0 and k0 ~= 0 rbend on (??? rbend with the straight ref. frame ??)
 STRAIGHT REF. FRAME FOR RBEND : STREX

 angle == 0 and k0 == 0 rbend off (i.e. drift)
 DRIFT-TRACK

 angle ~= 0 and k0 ~= 0 sbend on
 SBEND, default RBEND:  TEAPOT

 angle ~= 0 and k0 == 0 sbend off( useless, what kind of element is this? broken sbend?)
       <=> rbend with l = l_arc and k0 = angle, what about errors?

 angle == 0 abd k0 == 0 but k[n] ~= 0: straight magnet
 DKD (model = 1 ): STREX ; MKM (model = 2): TKTF
]]

--[[
  Documentation....

  List of top level frame_track methods:
  --------------------------------------

  - patch_frame
  - drift_frame
    + l = 0 -> sub element only
  - thin_frame ignore l and angle but not patch and tilt
    + nmul == 0 and #elm > 0 -> drift_frame
  - thick_frames (all-in-one)
    + l = 0 -> thin_frame
    + nmul = 0 -> drift_frame
    + l > 0 and nmul > 0 and angle == 0 -> strait_frame
    + l > 0 and nmul > 0 and angle ~= 0 -> curved_frame

  - do we need curved and strait differenciation?
  - decompose entry and exit in more steps?
  - do we perform radiation and aperture check after each nst?
    + what about thin lens?

  - no more guards about lengths in thin, allow to store non-zero length
  - no more guards about lengths in thick, allow to be compatible with madx
  - check for angle and length to switch between integration schemes
]]

__help['track: classification of drift-kick models versus thick elements'] = [=[
              drift kind        kick kind        fringe kind
- angle=0
  rbend:      rbend_drift       rfcavity_kick    straight_fringe
  quadrupole: quadrupole_drift  quadrupole_kick  straight_fringe
  solenoid:   solenoid_drift    rfcavity_kick    solenoid_fringe
  rfcavity:   solenoid_drift    rfcavity_kick    rfcavity_fringe
  twcavity:   twcavity_drift    twcavity_kick    twcavity_fringe
- angle~=0
  sbend:      sbend_drift       polar_kick       sbend_fringe       sbend
  combined:   combined_drift    combined_kick    sbend_fringe       KTK, TKTF

- precedences (ordered):
  if ks ~=0   solenoid_drift    rfcavity_kick    solenoid_fringe
  if ang~=0   sbend_drift       polar_kick       sbend_fringe
  if k0 ~=0   rbend_drift       rfcavity_kick    straight_fringe
  if v  ~=0   rbend_drift       rfcavity_kick    rfcavity_fringe
  if k1 ~=0   quadrupole_drift  quadrupole_kick  straight_fringe
  default     straight_drift    straight_kick    straight_fringe

- fallbacks:
  straight_drift(l=0)      => (none)
  rbend_drift(k0=0)        => straight_drift
  solenoid_drift(ks=0)     => rbend_drift
  quadrupole_drift(k1=0)   => rbend_drift

  polar_drift(ang=0)       => rbend_drift (*)
  sbend_drift(k0=ang)      => polar_drift
  combined_drift(k1=0)     => sbend_drift

  straight_kick(nmul=0)    => (none)
  rfcavity_kick(v=0)       => straight_kick
  quadrupole_kick(k1=0)    => rfcavity_kick (*)

  polar_kick(ang=0)        => straight_kick (*)
  combined_kick(k1=0)      => polar_kick

  straight_fringe(nmul=0)  => (none)
  solenoid_fringe(ks=0)    => straight_fringe (*)
  rfcavity_fringe(v=0)     => straight_fringe (*)
  sbend_fringe(ang=0)      => straight_fringe (*)

  (*) fallbacks that should never occur according to precedences

- remarks:
  + fringe kind should be driven by element kind and not by precedence
  + quadrupole_drift = quadrupole matrix (linear) + drift correction (nonlinear)
    quadrupole_kick  = straight_kick - k1_kick
  + no solution for combined ang and/or k0 and ks ??
]=]

__help['track: drift-kick models and references'] = [=[
                   PTC KIND                         References
straight_drift:    DRIFT{R/P}
rbend_drift:       SPAR{R/P}
solenoid_drift:    KICK_SOL{R/P}
polar_drift:       SPROT{R/P}
sbend_drift:       SSEC{R/P}
quadrupole_kick:   PUSHTKT7{R/P}
combined_drift:    PUSHTKT7{R/P} ?                  KTK, TKTF

straight_kick:     KICKEX{R/P}
rfcavity_kick:     KICK_CAV{R/P}
polar_kick:        SKICK{R/P} (GETELECTRIC)
quadrupole_kick:   KICKPATH{R/P}+KICKTKT7{R/P}
combined_kick:     KICKPATH{R/P}+KICKTKT7{R/P}

twcavity(drift+kick): CAVE{R/P}_TRAV => RK{2,4,6}_CAV{R/P}+...

straight_fringe:   FRINGE_STRAIGHT{R/P}
sbend_fringe:      FRINGE_TEAPOT{R/P}
solenoid_fringe:   FRINGE_SOL{R/P}
rfcavity_fringe:   FRINGECAV{R/P}
twcavity_fringe:   FRINGE_CAV_TRAV{R/P}
]=]

__help['track: exact straight drift'] = [=[
  [Wolski14] p.86, ch. 3.1, eq. 3.13-3.18
  [Forest98] p.306, ch. 10.4.3.1, eq. 10.23a-10.23c
  [MADX-PTC] Function DRIFTR in file Sh_def_kind.f90
]=]

__help['track: exact rbend drift'] = [=[
  [Forest98] p.367, ch. 12.3.1, eq. 12.39a,12.39c, 12.39f
  [MADX-PTC] Function SPARR in file Sh_def_kind.f90
]=]

__help['track: exact solenoid drift'] = [=[
  [Forest98] p.377, ch. 12.5.2, eq. 12.50 and solution
  [MADX-PTC] Function KICK_SOL in file Sh_def_kind.f90
]=]

__help['track: drift to correct pseudo-exact combined kick'] = [=[
  [MADX-PTC] Function KICKPATHR in file Sh_def_kind.f90
]=]

__help['track: pseudo-exact quad drift'] = [=[
  [MADX-PTC] Function PUSHTKT7 in file Sh_def_kind.f90
]=]

__help['track: pseudo-exact combined drift'] = [=[
  [MADX-PTC] Function PUSHTKT7 in file Sh_def_kind.f90
]=]

__help['track: exact polar drift'] = [=[
  [Forest02] p.76, ch. K.4.9, (general explaination)
  [Forest06] p.5365, eq. 127, exact drift -- WRONG: ref is an yrotation
  [MADX-PTC] Function SPROTR in file Sh_def_kind.f90
]=]

__help['track: exact sbend drift'] = [=[
  [Forest06] p.5365, eq. 126, exact drift
]=]

__help['track: pseudo-exact combined drift'] = [=[
  [MADX-PTC] Function PUSHTKT7 in file Sh_def_kind.f90
]=]

__help['track: generic thin kick'] = [[
  [MADX-PTC] Function KICKTR in file Sh_def_kind.f90
]]

__help['track: straight kick'] = [[
  [Forest98] p.354, ch. 12.1.3, eq. 12.6
  [MADX-PTC] Function KICKEXR in file Sh_def_kind.f90
  [SixTrack] p.12, ch. 3.5 (thin multipole), eq. 91-94
  [Ripken95] p.26, ch. 4.6.2, eq. 4.23 (and solution)
]]

__help['track: exact quad kick'] = [=[
  [Forest98] p.354, ch. 12.1.3, eq. 12.6
  [MADX-PTC] Function KICKTKT7R in file Sh_def_kind.f90
]=]

__help['track: polar kick'] = [[
  [Forest98] p. 358-361, ch. 12.2.2, eq. 12.18a-12.18f
  [Forest02] p. 76
  [MADX-PTC] Function SKICKR in file Sh_def_kind.f90
  [Ripken95] p. 22, ch. 4.3 (bending magnet) eq. 4.12 (and solution)
  [SixTrack] Thin Dipole, ch. 3.2.2, eq. 48-50
]]

__help['track: pseudo-exact combined kick'] = [=[
Ref??
]=]

__help['track: exact cavity kick'] = [=[
[MADX-PTC] Function KICCAVR in file Sh_def_kind.f90
]=]

__help['track: straight fringe'] = [=[
  [Forest98] p. 389, ch. 13.2.2, eq. 13.31a-13.31f
]=]

__help['track: solenoid fringe'] = [=[

]=]

__help['track: rfcavity fringe'] = [=[
Ref??
]=]

__help['track: sbend fringe'] = [=[
Ref??
]=]

__help['track: exact sbend'] = [[
  [Forest98] p.360, ch. 12.2.3
  [Forest02] p.76 (general explaination)
  [Forest06] p.5365, eq. 126
  [MADX-PTC] Function SPROTR in file Sh_def_kind.f90
]]

--[[
      exact sbend SSEC
       DIR=EL%P%DIR*EL%P%CHARGE
       YL=elm.l
       B0=angle/YL (curvature)
       A=YL*EL%P%B0  => angle = k0*l
       R=1/EL%P%B0   => rho = 1/k0
       B=EL%P%BETA0  => beta
       DL=YL*LW

       PZ    = SQRT(1 + 2*pt/b + pt^2 - px^2 - py^2)
       pxl =   px*COS(A)+(PZ-k0*(R+x))*SIN(A)
       PT    = SQRT(1 + 2*pt/b + pt^2 -         py^2)
       PZS   = SQRT(1 + 2*pt/b + pt^2 - pxl^2 - py^2)
       DPX   = (-px*SIN(A)+(PZ-k0*(R+x))*COS(A))/k0              !DPX*R/B1

       XN(1) = PZS/k0 - DPX - R
       XN(3) = (A+ASIN(px/PT)-ASIN(pxl/PT))/k0
       XN(6) = t + XN(3)*(1/b+pt) + (T-1)*DL/beta
       XN(3) = y + XN(3)*py
]]

__help['track: comment on pz, dp and pt'] = [[
  s: (- ds, dp) => dp = (p-p0)/p0
  t: (-cdt, dE) => dE = (E-E0)/(p0.c) = pt
  (1+dp)^2 = 1 + 2pt/beta0 + pt^2
           = (1/beta0 + pt)^2 + (1 - 1/beta0^2)
           = (1/beta0 + pt)^2 - 1/(beta0.gamma0)^2
  pz = sqrt((1+dp)^2 - px^2 - py^2)                               [MADX]
     = sqrt(1 + 2pt/beta0 + pt^2 - px^2 - py^2)                   [Forest02,06]
     = sqrt((1/beta0 + pt)^2  - px^2 - py^2 - 1/(beta0.gamma0)^2) [Wolski14]
]]

-- end ------------------------------------------------------------------------o
return __help
