--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic type identification module (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.typeid = [=[
NAME
  typeid -- provide some utility functions to identify types

SYNOPSIS
  is_nil(a)          -- primitive types
  is_boolean(a)
  is_number(a)
  is_string(a)
  is_function(a)
  is_table(a)
  is_userdata(a)
  is_coroutine(a)
  is_cdata(a)

  is_true(a)         -- specialized boolean types
  is_false(a)

  is_nan(a)          -- specialized numeric types
  is_finite(a)
  is_infinite(a)
  is_positive(a)
  is_negative(a)
  is_integer(a)

  is_emptystring(a)  -- specialized string types

  is_rawtable(a)     -- specialized table types
  is_emptytable(a)

  is_file(a)         -- specialized file types
  is_emptyfile(a)

  is_value(a)

  is_metaname(a)



  is_cdata(a)
  is_complex(a)
  is_nan, is_infinite, is_positive, is_negative, is_integer,   (specializations)
  is_scalar, is_rawtable, is_file,
  is_metaname, has_metatable, get_metatable,                       (metamethods)
  is_lengthable, is_iterable, is_mappable, is_indexable, is_callable,    (concepts)
  is_comparable, is_orderable, is_concatenable, is_stringable, is_tablable,
  is_negatable, is_addable, is_subtractable, is_multipliable, is_dividable,
  is_modulable, is_powerable, has_member, has_method, has_metamethod,
  is_same.

DESCRIPTION
  The utils module provides useful utility functions:
  - is_nil, is_boolean, is_number, is_string, is_function, is_table, is_cdata,
    and is_complex return true if the argument is of expected type,
  - is_nan and is_infinite return true if argument is not-a-number or Â±infinity,
  - is_positive and is_negative return true if argument is >0 or <0 respectively,
  - is_integer returns true if the argument is an integer number within the
    interval of [-2^52, 2^52],
  - is_scalar returns true if the argument is a number or a complex,
  - is_rawtable returns true if the argument is a table without metatable,
  - is_empty returns true if the argument is an empty table,
  - is_ismetaname returns true if the argument is a valid metamethod name,
  - has_metatable returns true is the argument has a metatable,
  - get_metatable is a generic version of getmetatable that works also with
    cdata,
  - is_lengthable, is_iterable, is_mappable, is_indexable, is_callable,
    is_comparable, is_orderable, is_concatenable, is_stringable, is_tablable,
    is_negatable, is_addable, is_subtractable, is_multipliable, is_dividable,
    is_modulable, is_powerable, has_member, has_method and has_metamethod return
    true if the argument fulfills the concept requirements,
  - is_stringable and is_tablable check only if the argument supports
    respectively the __tostring and the __totable metamethods because objects
    are always stringable and tableable in MAD,
  - has_member, has_method and has_metamethod returns true if argument #1 has
    argument #2 as a member, a callable member and a meta member respectively,

RETURN VALUES
  Depends on the functions, generaly true, false or nil.

ERRORS
  None.

SEE ALSO
  None.
]=]

-- end ------------------------------------------------------------------------o
return __help
