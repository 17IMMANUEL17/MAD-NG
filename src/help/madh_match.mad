--[=[
 o-----------------------------------------------------------------------------o
 |
 | Match module (help)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.match = [=[
NAME
  match -- Match objectitves and constraints

SYNOPSIS
  TODO

DESCRIPTION
  The module match provides general interface to optimization routines...

RETURN VALUES
  The match command...

SEE ALSO
  sequence, track, cofind, twiss.
]=]

-- callback example -----------------------------------------------------------o

--[=[
local sqrt, huge in math

local my_count, my_ccount = 0, 0

local function my_objective(n, x, grad, data)
  assert(n == 2)

  my_count = my_count + 1

  if grad then
    grad[0] = 0
    grad[1] = 1 / ( 2*sqrt(x[1]) )
  end

  return sqrt(x[1])
end

local function my_contraints(m, res, n, x, grad, data)
  assert(m == 2 and n == 2)

  my_ccount = my_ccount + 1

  if grad then
    local a, b = 2, 0
    grad[0] = 3 * a * (a*x[0] + b) * (a*x[0] + b);
    grad[1] = -1.0;

    local a, b = -1, 1
    grad[2] = 3 * a * (a*x[0] + b) * (a*x[0] + b);
    grad[3] = -1.0;
  end

  local a, b = 2, 0
  res[0] = ((a*x[0] + b) * (a*x[0] + b) * (a*x[0] + b) - x[1])

  local a, b = -1, 1
  res[1] = ((a*x[0] + b) * (a*x[0] + b) * (a*x[0] + b) - x[1])
end

local printf in MAD.utility

local function exec (self)
  local f    = ffi.cast('objective_t*' , my_objective )
  local c    = ffi.cast('constraint_t*', my_contraints)
  local x    = vector{1.234, 5.678}
  local xmin = vector{-huge, 0}
  local xtol = vector{1e-4, 1e-4}
  local ctol = vector{1e-8, 1e-8}

  local arg = ffi.new 'nlopt_args_t[1]'

  arg[0].algorithm = _C.NLOPT_LD_MMA

  arg[0].x         = x.data
  arg[0].xmin      = xmin.data
  arg[0].xtol_rel  = xtol.data

  arg[0].n         = 2
  arg[0].f         = f

  arg[0].q         = 2
  arg[0].c_le      = c
  arg[0].ctol_le   = ctol.data

  _C.mad_nlopt(arg)

  printf('solution (%d, %d): (%g,%g), f=%g, status=%d\n',
      my_count, my_ccount, arg[0].x[0], arg[0].x[1], arg[0].fmin, arg[0].status)

  f:free()
  c:free()
end
--]=]

-- FODO example ---------------------------------------------------------------o

--[[
local beam, sequence              in MAD
local marker, drift, thin_element in MAD.element

local twiss      in MAD
local printf     in MAD.utility
local sqrt, huge in math

local my_count, my_ccount = 0, 0

local fodo = thinFODO()
local mtbl

local dx = 5e-5

-- initial guess
local k1_qf =  0.2828427125 --  0.3037241107
local k1_qd = -0.2828427125 -- -0.3037241107

local function thinFODO ()
  local nsl = 1 -- 10 -- for madx row by row compatibility
  local nth = 10
  local dl  = 1/nth
  local mk1 = marker       'mk1' {}
  local mk2 = marker       'mk2' {}
  local df1 = drift        'df1' { l=4, nslice=nsl }
  local df2 = drift        'df2' { l=4, nslice=nsl }
  local mq1 = thin_element 'mq1' { knl := {0, k1_qf/nth} }
  local mq2 = thin_element 'mq2' { knl := {0, k1_qd/nth} }
  local seq = sequence     'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2              },
      (nth/2-1)*mq1 {at=dl    , from='prev' },
                mk1 {at=0+dl/2, from='prev' },
                mq1 {at=0+dl/2, from='prev' },
      (nth/2-1)*mq1 {at=dl    , from='prev' },
--                df1 {at=1}, -- for madx row by row compatibility

                mq2 {at=5+dl/2              },
      (nth/2-1)*mq2 {at=dl    , from='prev' },
                mk2 {at=0+dl/2, from='prev' },
                mq2 {at=0+dl/2, from='prev' },
      (nth/2-1)*mq2 {at=dl    , from='prev' },
--                df2 {at=6}, -- for madx row by row compatibility
  }
  seq.beam = beam

--  seq:dumpseq()

  return seq
end


-- Quadrupole matching

-- MADX
--
-- match sequence = cell ;
--   ! search for quads strengths
--   vary name = k1.qf, step = 1e-5 ;
--   vary name = k1.qd, step = 1e-5 ;
--   ! for cell with phase advance of pi/2 (specified in 2*pi unit!)
--   constraint range = #e, mux = u.cell/(2*pi) ;
--   constraint range = #e, muy = u.cell/(2*pi) ;
--   lmdif calls = 20, tolerance = 1e-16 ;
-- endmatch ;
--
-- MADNG

match {

  variables = {
    { var = 'k1.qf', min= 0, max=2, step=1e-5 },
    { var = 'k1.qd', min=-2, max=0, step=1e-5 },
  },

  command = \ -> {twiss { sequence=seq1, X0=X1 },
                  twiss { sequence=seq2, X0=X2 }},

  equalities = {
    { var = 'mux', range='#e', expr=\tbl -> tbl[1][-1].mux - mux_ref, tol=tol1 },
    { var = 'muy', range='#e', expr=\tbl -> tbl[1][-1].muy - muy_ref, tol=tol2 },
    { var = 'q1' ,             expr=\tbl -> tbl[1].q1 - q1_ref      , tol=tol3 },
    { var = 'q2' ,             expr=\tbl -> tbl[1].q2 - q2_ref      , tol=tol4 },
  },

  inequalities = {
    { var = 'mux', range='#e', expr=\tbl -> tbl[1][-1].mux - mux_ref, tol=tol1 },
    { var = 'muy', range='#e', expr=\tbl -> tbl[1][-1].muy - muy_ref, tol=tol2 },
    { var = 'q1' ,             expr=\tbl -> tbl[1].q1 - q1_ref      , tol=tol3 },
    { var = 'q2' ,             expr=\tbl -> tbl[1].q2 - q2_ref      , tol=tol4 },
  },

  objective = {
    method = 'NLOPT_LN_COBYLA', stopval=0, tol=1e-16, rtol=1e-12, maxcalls=100,
    kind='minimize', exec = objective_function,
  },

  weights = { x=10, px=1, y=10, py=1, q1=1, q2=1 },
}
]]

-- end ------------------------------------------------------------------------o
return __help
