--[=[
 o-----------------------------------------------------------------------------o
 |
 | Complex number module (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.complex = [=[
NAME
  complex -- functions and operators on complex numbers

SYNOPSIS
  local complex in MAD
  local I = complex(0,1)
  local z1 = 2+3i
  local z2 = 2+3*I
  print(z1.re, z1.im)
  print(tostring(z2))

DESCRIPTION
  The complex module implements the operators and mathematical functions on
  complex numbers:
  same, copy,
  (minus) -, +, -, *, /, %, ^, ==,
  unm, add, sub, mul, div, mod, pow, eq,
  carg, real, imag, conj, proj, rect, polar, unit,
  ceil, floor, frac, trunc, round,
  angle, abs, sqrt, exp, log, log10,
  sin, cos, tan, sinh, cosh, tanh,
  asin, acos, atan, asinh, acosh, atanh,
  erf, erfc, erfi, erfcx, (tgamma, lgamma).

RETURN VALUES
  The constructed complex numbers.

ERRORS
  See ISO/IEC 9899:1999 and ISO/IEC 9899:2011.

SEE ALSO
  gmath, cmatrix, ctpsa
]=]

__help['complex: IEEE:IEC 60559 floating-point compliance'] = [=[
Discrepancies:
  log  (-0   + 0i  ),  expected: -inf+pi*1i  JIT:-inf
  atanh( 1   + 0i  ),  linux: inf + 0i       mac: inf  + (pi/4)i
  atanh( 0   + nani),  linux: 0   + nani     mac: nan  +  nani
  atanh( nan + infi),  linux: 0   + (pi/2)i  mac: nan  + (pi/2)i
  atanh( inf + nani),  linux: 0   + nani     mac: nan  + (pi/2)i
  atan ( 0   +   1i),  linux: 0   + inf      mac: inf  + (pi/4)i
  atan ( 0   +-  1i),  linux: 0   - infi     mac: pi/4 -  infi
   -- after Ubuntu 18.04
  tanh ( 0   + infi),  linux: 0   + nani     mac: nan  +  nani
  tanh ( 0   + nani),  linux: 0   + nani     mac: nan  +  nani
  acosh( 0   + nani),  linux: nan + (pi/2)i  mac: nan  +  nani

SEE ALSO
  IEEE:IEC 60559 floating-point compliance
]=]

-- end ------------------------------------------------------------------------o
return __help
