--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix module (help)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.matrix = [=[
NAME
  matrix, cmatrix -- real and complex vectors and matrices

SYNOPSIS
  mr1 = matrix(nrow [, ncol])          -- default ncol = nrow (square matrix)
  mr2 = matrix {{...}, ...}            -- from table (nrow length must be equal)

  mc1 = cmatrix(nrow [, ncol])         -- complex variant
  mc2 = cmatrix {{...}, ...}           -- complex variant

  vr1 = vector(nrow)                   -- vector = [nrow x 1] (column matrix)
  vr2 = vector {...}                   -- from table (column vector)

  vc1 = cvector(nrow)                  -- complex variant
  vc2 = cvector {...}                  -- complex variant

DESCRIPTION
  The module matrix implements the operators and math functions on matrices:
  is_matrix, is_cmatrix, isa_matrix, is_vector, is_cvector, isa_vector,
  nrow, ncol, size (length), sizes, tsizes, reshape, _reshapeto, _reshapeby,
  zeros, ones, eye, random, perm, symp, circ, fill, roll, shiftv,     (in place)
  get, get0, geti, geti0, getv, getdiag, getrow, getcol, getsub,
  set, set0, seti, seti0, setv, setdiag, setrow, setcol, setsub,
  same, copy, resize, concat, tostring, totable,
  foreach, map, map2, map3, foldl, foldr, scanl, scanr, filter, mapat, mapij,

  (minus) -, +, -, *, /, %, ^, ==, #, [], ..,
  unm, add, sub, kadd, mul, tmul, mult, emul, div, ediv, mod, pow, eq,
  transpose, t, conjugate, conj, trace, tr,
  dot, inner, cross, mixed, outer, norm, distance, unit, center,

  carg, real, imag, conj, rect, polar, proj,
  ceil, floor, frac, trunc, round,
  abs, angle, exp, log, log10, sqrt,
  sin, cos, tan, sinh, cosh, tanh,
  asin, acos, atan, asinh, acosh, atanh,
  erf, tgamma, lgamma,
  min, max, sum, product, all, any, filter_out,
  sumsqr, sumabs, minabs, maxabs,
  accmin, accmax, accsum, accumulate, accprod,
  accsumsqr, accsumabs, accminabs, accmaxabs,
  raccmin, raccmax, raccsum, raccprod,
  raccsumsqr, raccsumabs, raccminabs, raccmaxabs,

  rot, rotx, roty, rotz, rotxy, rotxz, rotyz, rotyx, rotzx, rotzy, rotxyz,
  torotxyz, rotzyx, rotv, torotv, rotq, torotq, rotpitch, rotyaw, rotroll,
  rotmad, torotmad,

  sympconj, symperr, symplectify (TODO),

  solve, svd, det, eigen,
  fft, ifft, rfft, irfft, nfft, infft, conv, corr, covar.

RETURN VALUES
  The constructed matrices, vectors are specialized matrices.

ERRORS
  TODO

EXAMPLES
  m1 = matrix(2,3)                    -- matrix [2 x 3]
  m2 = matrix(3)                      -- square matrix [3 x 3]
  m3 = vector(3)                      -- column vector [3 x 1]
  m4 = matrix {{1,2},{3,4},{5,6}}     -- from table [3 x 2]
  m5 = vector {1,2,3,4,5,6}           -- column vector [6 x 1] = {{1},{2},...}
  m6 = vector {{1,2,3,4,5,6}}         -- row vector [1 x 6]

  c1 = cmatrix(2,3)                   -- cmatrix [2 x 3]
  c2 = cmatrix {{1,2+2i},{3,4+2i},{5,6+2i}}
  c3 = cvector {1,2,3,4,5,6}          -- column cvector [6 x 1]
  c4 = cvector {{1,2,3,4,5,6}}        -- row cvector [1 x 6]
  c5 = c2:transpose()                 -- row cmatrix, transpose conjugate
  I6 = cmatrix(6):eye()               -- identity cmatrix [6 x 6]

SEE ALSO
  gmath, gfunc, complex
]=]
__help.vector   = __help.matrix
__help.cvector  = __help.matrix
__help.cmatrix  = __help.matrix
__help.linspace = __help.matrix
__help.logspace = __help.matrix

-- documentation --------------------------------------------------------------o

__help['matrix: 3D geometry'] = [=[
Useful relations of 3D geometry:
  inner prod:  u'.v = |u|.|v| cos(u^v)
  cross prod:  uxv = |u|.|v| sin(u^v) \vec{n}
  mixed prod:  (uxv)'.w = u'.(vxw) = det(u,v,w)
  outer prod:  u.v' = matrix
  dbl x-prod:  ux(vxw) = (u.w) v - (u.v) w
               (uxv)xw = (u.w) v - (v.w) u
  norm      :  |u| = sqrt(u'.u)
  angle     :  u^v = acos(u'.v / |u|.|v|)  in [0,pi] (or [-pi,pi] if n)
  unit      :  u / |u|
  projection:  u'.v
  projector :  I -   u.u' / u'.u
  reflector :  I - 2 u.u' / u'.u
  area      :  |uxv|
  volume    :  |(uxv)'.w|
  unitary   :  |u| = 1
  orthogonal:  u'.v = 0
  collinear :  |uxv| = 0
  coplanar  :  (uxv)'.w = 0
]=]

__help['matrix: properties'] = [=[
Useful properties of square matrix:
  normal    :  M M' = M'M
  symm/herm :  M = M', eig(M) in R, positive-definite: v' M v > 0, eig(M) in R^+
  skew/anti :  M = -M', eig(M) in Im, (skew-symmetric, skew-hermitian)
  invertible:  M M^-1 = M^-1 M = I (M^-1 exists)      det(M) ~=  0 (i.e. GL(n))
                                                      det(M)  = +1 (i.e. SL(n))
  orthogonal:  M M' = M'M = I => M^-1 = M',           det(M)  = Â±1 (i.e.  O(n))
               row/col form an orthonormal basis      det(M)  = +1 (i.e. SO(n))
  unitary   :  M M' = I, complex orthogonal,         |det(M)| = +1 (i.e.  U(n))
               row/col form an orthonormal basis      det(M)  = +1 (i.e. SU(n))
  symplectic:  M'S M = M S M' = S => M^-1 = S^-1 M'S  det(M)  = +1 (i.e. Sp(2n))
               Sp(2n) S = Diag [0 1 ; -1 0], S^-1 = S' = -S, S^2 = -I
               Sp(2)  M = [a b ; c d] => M^-1 = [d -b ; -c a], M + M^-1 = Tr(M)
               Sp(2n) M = [Aij], 1 <= (i,j) <= n => M^-1 = [Aji^-1]

Special cases:
  reflection:  SO(n) with det(M) = -1 and eig(M) = {-1,1,...,1}
  rotation  :  SO(n) with det(M) = +1 (even number of reflections ->   proper)
               SO(n) with det(M) = -1 (odd  number of reflections -> improper)
  projection:  M^2 = M, oblique: A (B'A)^-1 B', orthognal: A (A'A)^-1 A',
               eig(M) = {0,1}*
]=]

__help['matrix: 3D rotations'] = [=[
Column vectors and rotations directions vs. angles:      ^ z
  m:rotx(a)*v: a=pi/2 => v=y->z                          |      right
  m:roty(a)*v: a=pi/2 => v=z->x                          |      handed
  m:rotz(a)*v: a=pi/2 => v=x->y                   x <---(o) y   frame
]=]

__help['matrix: same specification'] = [=[
parameters:
  e: element sample for type promotion, nr & nc: sizes

type promotion:
  x  matrix and e real    returns a  matrix
  x  matrix and e complex returns a cmatrix
  x cmatrix and e real    returns a cmatrix
  x cmatrix and e complex returns a cmatrix

cases:
  1)  x:same(               )
  2)  x:same( nil, nr       )
  3)  x:same( nil, nil, nc  )
  4)  x:same( nil, nr , nc  )
  5)  x:same(   e           )
  6)  x:same(   e, nr       )          --> 4) with e as nr and nr as nc, see 7'
  7)  x:same(   e, nil, nc  )
  8)  x:same(   e, nr , nc  )

cases with left shift:
  2') x:same( nr            )          <=> 5) with nr as e  (ambiguity)
  3') x:same( nc            )          <=> 5) with nc as e  (ambiguity)
  4') x:same( nr, nc        )          --> 4) valid shift
  7') x:same( e , nc        )          --> 4) with e  as nr (ambiguity)
  3") x:same( nil, nc       )          <=> 2) with nc as nr (ambiguity)
  4") x:same( nr, nil, nc   )          <=> 7) with nr as e  (ambiguity)
]=]

__help['matrix: fold specification'] = [=[
parameters:
  f: callable, x0: initial value, d: ['vec', 'row', 'col'], r: iterable

special values:
  f: operator string -> operator function

default:
  x0 = x[ 1] or x[., 1] or x[ 1,.] for foldl
       x[#x] or x[.,nc] or x[nr,.] for foldr
   d = 'vec'  (r_ is discarded if any)
   r = scalar ['vec'] or x:same(nr,1) ['row'] or x:same(1,nc) ['col']

cases:
  1)  x:fold( f              )
  2)  x:fold( f, nil,   d    )
  3)  x:fold( f, nil, nil, r )
  4)  x:fold( f, nil,   d, r )
  5)  x:fold( f,  x0         )
  6)  x:fold( f,  x0,   d    )
  7)  x:fold( f,  x0, nil, r )
  8)  x:fold( f,  x0,   d, r )

cases with left shift:
  2') x:fold( f, d           )         --> 2)
  3') x:fold( f, r           )         <=> 3) with r as x0 (ambiguity)
  4') x:fold( f, d, r        )         --> 4)
  7') x:fold( f, x0, r       )         --> 7)
  3") x:fold( f, nil, r      )         --> 3)
  4") x:fold( f, d, nil, r   )         --> 4)
]=]

__help['matrix: scan specification'] = [=[
parameters:
  f: callable, x0: initial value, d: ['vec', 'row', 'col'], r: iterable

special values:
  f: operator string -> operator function
  r: 'in'            -> r = x

default:
  x0 = x[ 1] or x[., 1] or x[ 1,.] for scanl
       x[#x] or x[.,nc] or x[nr,.] for scanr
   d = 'vec'
   r = x:same() ['vec', row', 'col']

cases:
  1)  x:scan( f              )
  2)  x:scan( f, nil,   d    )
  3)  x:scan( f, nil, nil, r )
  4)  x:scan( f, nil,   d, r )
  5)  x:scan( f,  x0         )
  6)  x:scan( f,  x0,   d    )
  7)  x:scan( f,  x0, nil, r )
  8)  x:scan( f,  x0,   d, r )

cases with left shift:
  2') x:scan( f, d           )         --> 2)
  3') x:scan( f, r           )         <=> 3) with r as x0 (ambiguity)
  4') x:scan( f, d, r        )         --> 4)
  7') x:scan( f, x0, r       )         --> 7)
  3") x:scan( f, nil, r      )         --> 3)
  4") x:scan( f, d, nil, r   )         --> 4)
]=]

__help['matrix: norms'] = [=[
  L_p,q = M:foldl(\r,x r+abs(x)^p,'row',0):map(\x x^(q/p),'in'):foldl(add)^(1/q)
  L_max = M:foldl(\r,x max(r,abs(x)))

  Frobenius: sqrt( (x:t() * x):tr() )  (consistent with inner product)
  :norm() is the Frobenius norm L_2,2 without temporary
]=]

__help['matrix: nfft'] = [=[
  MAD.option.format="%.4g"
  m = MAD.vector{{1,2,3,4,5,6,7,8,9,10}}
  p = MAD.vector{{0,1,2,3,4,-5,-4,-3,-2,-1}}/#m       -- nodes
  =( m:nfft(p) - m:fft() ):norm()
  -- print 9.1471106157092e-14
  =( m:nfft(p):infft() - m ):norm()
  -- print 5.4711990133586e-14
  m = MAD.vector{{10,9,8,7,6,5,4,3,2,1}}
  =( m:nfft(p) - m:fft() ):norm()
  -- print 9.6563745514607e-14
  =( m:nfft(p):infft() - m ):norm()
  -- print 5.4711990133586e-14
]=]

-- end ------------------------------------------------------------------------o
return __help
