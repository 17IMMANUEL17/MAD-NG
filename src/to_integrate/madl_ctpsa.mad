--[=[
 o----------------------------------------------------------------------------o
 |
 | GTPSA module (complex)
 |
 | Methodical Accelerator Design - Copyright CERN 2015
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o----------------------------------------------------------------------------o

  Purpose:
  - provides full set of functions and operations on real and complex GTPSA

 o----------------------------------------------------------------------------o
]=]

local M = { __help = {}, __test = {} }

-- help ----------------------------------------------------------------------o

M.__help.self = [[
NAME
  ctpsa

SYNOPSIS
  local ctpsa = require 'ctpsa'

DESCRIPTION
  The module ctpsa implements the operators and math functions on
  complex GTPSA.

RETURN VALUES
  The constructor of complex GTPSA

SEE ALSO
  gmath, complex, matrix, cmatrix, tpsa
]]

-- modules -------------------------------------------------------------------o

local ffi   = require 'ffi'
local clib  = require 'cmad'
local gmath = require 'gmath'
local xtpsa = require 'xtpsa'

-- locals --------------------------------------------------------------------o

local istype, cast, sizeof, fill = ffi.istype, ffi.cast, ffi.sizeof, ffi.fill
local min, max = math.min, math.max
local isnum, isint, iscpx, isscl, istable, isctpsa =
      gmath.is_number, gmath.is_integer, gmath.is_complex, gmath.is_scalar,
      gmath.is_table, gmath.is_ctpsa

-- FFI type constructors
local tpsa  = xtpsa.tpsa
local ctpsa = xtpsa.ctpsa
local desc  = xtpsa.desc
local mono  = xtpsa.mono

local int_arr    = ffi.typeof '      int[?]'
local int_carr   = ffi.typeof 'const int[?]'

local ctpsa_arr  = ffi.typeof       'ctpsa_t* [?]'
local ctpsa_carr = ffi.typeof 'const ctpsa_t* [?]'

local cres = ffi.new 'complex[1]'

-- implementation ------------------------------------------------------------o

M.tpsa = ctpsa

function M.mono (t, tbl_)
  return mono(tbl_ or t.d.nv)
end

-- initialization ------------------------------------------------------------o

function M.copy (t, r_)
  local r = r_ or ctpsa(t)
  clib.mad_ctpsa_copy(t, r)
  return r
end

function M.conj (t, r_)
  local r = r_ or ctpsa(t)
  clib.mad_ctpsa_conj(t, r) -- conjugate
  return r
end

function M.real (t, r_)
  local r = r_ or tpsa(t)
  clib.mad_ctpsa_real(t, r) -- real part
  return r
end

function M.imag (t, r_)
  local r = r_ or tpsa(t)
  clib.mad_ctpsa_imag(t, r) -- imaginary part
  return r
end

function M.clear (t)
  clib.mad_ctpsa_clear(t)
  return t
end

function M.scalar (t, v)
  v = iscpx(v) and v or complex(v)
  clib.mad_ctpsa_scalar_r(t, v.re, v.im)
  return t
end

-- indexing ------------------------------------------------------------------o

function M.get_idx (t,tbl)
  local m = istable(tbl) and mono(tbl) or tbl
  return clib.mad_ctpsa_midx(t, m.n, m.ord)
end

function M.get_idx_sp (t,tbl)
  -- tbl = {idx1, ord1, idx2, ord2, ... }
  local n = #tbl
  local m = int_carr(n)
  for i=1,n do m[i-1] = tbl[i] end
  return clib.mad_ctpsa_midx_sp(t, n, m)
end

function M.get_mono (t, i, r_)
  local r = r_ or t:mono()
  clib.mad_ctpsa_mono(t, r.n, r.ord, i)
  return r
end

-- peek & poke ---------------------------------------------------------------o

function M.get0 (t)
  clib.mad_ctpsa_get0_r(t, cres)
  return cres[0]
end

function M.get (t, m)
  if isnum(m) then
    clib.mad_ctpsa_geti_r(t, m, cres)
    return cres[0]
  end
  m = istable(m) and mono(m) or m
  clib.mad_ctpsa_getm_r(t, m.n, m.ord, cres)
  return cres[0]
end

function M.get_sp (t, tbl)
  -- tbl = {idx1, ord1, idx2, ord2, ... }
  local n = #tbl
  local m = int_carr(n)
  for i=1,n do m[i-1] = tbl[i] end
  clib.mad_ctpsa_getm_sp_r(t, n, m, cres)
  return cres[0]
end

function M.set0 (t, a, b)
  if b == nil then a, b = 0, a end
  a = iscpx(a) and a or complex(a)
  b = iscpx(b) and b or complex(b)
  clib.mad_ctpsa_set0_r(t, a.re, a.im, b.re, b.im)
end

function M.set (t, i, a, b)
  if b == nil then a, b = 0, a end
  a = iscpx(a) and a or complex(a)
  b = iscpx(b) and b or complex(b)
  if isnum(i) then
    clib.mad_ctpsa_seti_r(t, i, a.re, a.im, b.re, b.im)
  end
  local m = istable(i) and mono(i) or i
  clib.mad_ctpsa_setm_r(t, m.n, m.ord, a.re, a.im, b.re, b.im)
end

function M.set_sp (t, tbl, a, b)
  if b == nil then a, b = 0, a end
  a = iscpx(a) and a or complex(a)
  b = iscpx(b) and b or complex(b)
  -- tbl = {idx1, ord1, idx2, ord2, ... }
  local n = #tbl
  local m = int_carr(n)
  for i=1,n do m[i-1] = tbl[i] end
  clib.mad_ctpsa_setm_sp_r(t, n, m, a.re, a.im, b.re, b.im)
end

-- unary operators -----------------------------------------------------------o

function M.unm (t, r_)
  local r = r_ or ctpsa(t)
  clib.mad_ctpsa_scl_r(t, -1, 0, r)
end

function M.abs (t, r_)
  local r = r_ or ctpsa(t)
  clib.mad_ctpsa_abs(t, r)
end

function M.arg (t, r_)
  local r = r_ or ctpsa(t)
  clib.mad_ctpsa_arg(t, r)
end

function M.nrm1 (t1, t2_)
  clib.mad_ctpsa_nrm1(t1, t2_, cres)
  return cres[0]
end

function M.nrm2 (t1, t2_)
  clib.mad_ctpsa_nrm2(t1, t2_, cres)
  return cres[0]
end

function M.der (t, ivar, r_)
  local r = r_ or ctpsa(t)
  clib.mad_ctpsa_der(t, r, ivar)
  return r
end

function M.mder (t, tbl, r_)
  local r = r_ or ctpsa(t)
  local m = mono(tbl)
  clib.mad_ctpsa_mder(t, r, m.n, m.ord)
  return r
end

function M.scale (t, v, r_)
  local r = r_ or ctpsa(t)
  v = iscpx(v) and v or complex(v)
  clib.mad_ctpsa_scl_r(t, v.re, v.im, r)
  return r
end

-- binary operators ----------------------------------------------------------o

function M.add (a, b, r_)
  local r
  if isscl(a) then       -- cpx + ctpsa
    if b.hi == 0 then return a + b.coef[0] end
    r = b:copy(r_)
    a = iscpx(a) and a or complex(a)
    clib.mad_ctpsa_set0_r(r, 1, 0, a.re, a.im)
  elseif isscl(b) then   -- ctpsa + cpx
    if a.hi == 0 then return a.coef[0] + b end
    r = a:copy(r_)
    b = iscpx(b) and b or complex(b)
    clib.mad_ctpsa_set0_r(r, 1, 0, b.re, b.im)
  elseif isctpsa(b) then -- ctpsa + ctpsa
    r = r_ or ctpsa(a, max(a.mo,b.mo))
    clib.mad_ctpsa_add(a, b, r)
  else error("invalid GTPSA (+) operands") end
  return r
end

function M.sub (a, b, r_)
  local r
  if isscl(a) then       -- cpx - ctpsa
    if b.hi == 0 then return a - b.coef[0] end
    r = r_ or ctpsa(b)
    a = iscpx(a) and a or complex(a)
    clib.mad_ctpsa_scl_r (b, -1, 0, r)
    clib.mad_ctpsa_set0_r(r,  1, 0, a.re, a.im)
  elseif isscl(b) then   -- ctpsa - cpx
    if a.hi == 0 then return a.coef[0] - b end
    r = a:copy(r_)
    b = iscpx(b) and b or complex(b)
    clib.mad_ctpsa_set0_r(r, 1, 0, -b.re, -b.im)
  elseif isctpsa(b) then -- ctpsa - ctpsa
    r = r_ or ctpsa(a, max(a.mo,b.mo))
    clib.mad_ctpsa_sub(a, b, r)
  else error("invalid GTPSA (-) operands") end
  return r
end

function M.mul (a, b, r_)
  local r
  if isscl(a) then       -- cpx * ctpsa
    if b.hi == 0 then return a * b.coef[0] end
    r = r_ or ctpsa(b)
    a = iscpx(a) and a or complex(a)
    clib.mad_ctpsa_scl_r(b, a.re, a.im, r)
  elseif isscl(b) then   -- ctpsa * cpx
    if a.hi == 0 then return a.coef[0] * b end
    r = r_ or ctpsa(a)
    b = iscpx(b) and b or complex(b)
    clib.mad_ctpsa_scl_r(a, b.re, b.im, r)
  elseif isctpsa(b) then -- ctpsa * ctpsa
    r = r_ or ctpsa(a, max(a.mo,b.mo))
    clib.mad_ctpsa_mul(a, b, r)
  else error("invalid GTPSA (*) operands") end
  return r
end

function M.div (a, b, r_)
  local r
  if isscl(a) then       -- cpx / ctpsa
    if b.hi == 0 then return a / b.coef[0] end
    r = r_ or ctpsa(b)
    a = iscpx(a) and a or complex(a)
    clib.mad_ctpsa_inv_r(b, a.re, a.im, r)
  elseif isscl(b) then   -- ctpsa / cpx
    if a.hi == 0 then return a.coef[0] / b end
    r = r_ or ctpsa(a)
    b = iscpx(b) and 1/b or complex(1/b)
    clib.mad_ctpsa_scl_r(a, b.re, b.im, r)
  elseif isctpsa(b) then -- ctpsa / ctpsa
    r = r_ or ctpsa(a, max(a.mo,b.mo))
    clib.mad_ctpsa_div(a, b, r)
  else error("invalid GTPSA (/) operands") end
  return r
end

function M.pow (a, n, r_)
  assert(isctpsa(a) and isint(n), "invalid GTPSA (^) operands")
  if a.hi == 0 then return a.coef[0] ^ n end
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_ipow(a, r, n)
  return r
end

function M.poisson(a, b, n, r_)
  local r = r_ or ctpsa(a, max(a.mo,b.mo))
  clib.mad_ctpsa_poisson(a, b, r, n)
  return r
end

-- functions -----------------------------------------------------------------o

function M.acc (a, v, r_)  -- r += v*a
  local r = r_ or ctpsa(a)
  v = iscpx(v) and v or complex(v)
  clib.mad_ctpsa_acc_r(a, v.re, v.im, r)
  return r
end

function M.inv (a, v, r_)  -- v/a
  local r = r_ or ctpsa(a)
  v = iscpx(v) and v or complex(v)
  clib.mad_ctpsa_inv_r(a, v.re, v.im, r)
  return r
end

function M.invsqrt (a, v, r_)
  local r = r_ or ctpsa(a)
  v = iscpx(v) and v or complex(v)
  clib.mad_ctpsa_invsqrt_r(a, v.re, v.im, r)
  return r
end

function M.sqrt (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_sqrt(a, r)
  return r
end

function M.exp (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_exp(a, r)
  return r
end

function M.log (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_log(a, r)
  return r
end

function M.sin (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_sin(a, r)
  return r
end

function M.cos (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_cos(a, r)
  return r
end

function M.tan (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_tan(a, r)
  return r
end

function M.cot (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_cot(a, r)
  return r
end

function M.sinh (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_sinh(a, r)
  return r
end

function M.cosh (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_cosh(a, r)
  return r
end

function M.tanh (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_tanh(a, r)
  return r
end

function M.coth (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_coth(a, r)
  return r
end

function M.asin (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_asin(a, r)
  return r
end

function M.acos (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_acos(a, r)
  return r
end

function M.atan (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_atan(a, r)
  return r
end

function M.acot (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_acot(a, r)
  return r
end

function M.asinh (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_asinh(a, r)
  return r
end

function M.acosh (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_acosh(a, r)
  return r
end

function M.atanh (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_atanh(a, r)
  return r
end

function M.acoth (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_acoth(a, r)
  return r
end

function M.erf (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_erf(a, r)
  return r
end

function M.sinc (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_sinc(a, r)
  return r
end

function M.sirx (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_sirx(a, r)
  return r
end

function M.corx (a, r_)
  local r = r_ or ctpsa(a)
  clib.mad_ctpsa_corx(a, r)
  return r
end

function M.sincos (a, rs_, rc_)
  local rs = rs_ or ctpsa(a)
  local rc = rc_ or ctpsa(a)
  clib.mad_ctpsa_sincos(a, rs, rc)
  return rs, rc
end

function M.sincosh (a, rs_, rc_)
  local rs = rs_ or ctpsa(a)
  local rc = rc_ or ctpsa(a)
  clib.mad_ctpsa_sincosh(a, rs, rc)
  return rs, rc
end

-- maps ----------------------------------------------------------------------o

-- TODO: these methods should be moved to the map module

function M.compose (ma, mb, mr)
  -- ma, mb, mr -- compatible lua arrays of TPSAs
  local cma, cmb, cmr =
        ctpsa_carr(#ma, ma), ctpsa_carr(#mb, mb), ctpsa_arr(#mr, mr)
  clib.mad_ctpsa_compose(#ma, cma, #mb, cmb, #mr, cmr)
end

function M.minv (ma, mr)
  -- ma, mr -- compatible lua arrays of TPSAs
  local cma, cmc = ctpsa_carr(#ma, ma), ctpsa_arr(#mr, mr)
  clib.mad_ctpsa_minv(#ma, cma, #mc, cmc)
end

function M.pminv (ma, mr, rows)
  -- ma, mr -- compatible lua arrays of TPSAs
  local cma, cmr = ctpsa_carr(#ma, ma), ctpsa_arr(#mr, mr)
  local sel = int_arr(#rows)
  for i=1,#rows do sel[i-1] = rows[i] end
  clib.mad_ctpsa_pminv(#ma, cma, #mr, cmr, sel)
end

-- I/O -----------------------------------------------------------------------o

M.print = clib.mad_ctpsa_print

function M.read (_, file)
  local t = ctpsa(clib.mad_ctpsa_scan_hdr(file))
  clib.mad_ctpsa_scan_coef(t, file)
  return t
end

------------------------------------------------------------------------------o

M.__unm = M.unm
M.__add = M.add
M.__sub = M.sub
M.__mul = M.mul
M.__div = M.div
M.__pow = M.pow

ffi.metatype('ctpsa_t', M)

------------------------------------------------------------------------------o
return ctpsa
