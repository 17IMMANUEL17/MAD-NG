--[=[
 o----------------------------------------------------------------------------o
 |
 | Line module (for sequence)
 |
 | Methodical Accelerator Design - Copyright (c) 2016
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o----------------------------------------------------------------------------o
  
  Purpose:
  - TODO
  
 o----------------------------------------------------------------------------o
]=]

local M = { __help = {}, __test = {} }

-- module --------------------------------------------------------------------o

M.__help.self = [[
NAME
  line -- build lines

SYNOPSIS
  line = require "line"
  my_line = line { element_list... }

DESCRIPTION
  The module line creates new lines (raw sequences) supported by MAD.
  The elements are not copied but referenced, i.e. store the orginal ones and the
  list are not flatten. They will be flatten only when put in a sequence.

RETURN VALUE
  The line (table) that represents the line unmodified (not flatten).

EXAMPLE
  line = require "line"
  elem = require "element"
  MB, MQ = elem.sbend, elem.quadrupole
  my_line = line {
    MQ 'QF', MB 'MB', MQ 'QD', MB 'MB',
  }

SEE ALSO
  sequence, element, beam
]]

-- requires --------------------------------------------------------------------

local object = require 'object'
local utils  = require 'utils'

-- locals ----------------------------------------------------------------------

local type, setmetatable = type, setmetatable
local is_list = utils.is_list

-- metatable for the root of all lines
local MT = object {} 

 -- make the module the root of all lines
MT (M)
M.name = 'line'
M.kind = 'line'
M.is_line = true

-- methods -------------------------------------------------------------------o

function M:mangled_name()
  local rep  = self._rep
  local name = rep and self[1].name or self.name

  if rep then
        if rep == -1 then name = '-'..name
    elseif rep ~=  1 then name = rep..'*'..name
    end
  end
  
  return name
end

-- metamethods ---------------------------------------------------------------o

-- constructor of lines, can be unamed (inherit its name)
function MT:__call(a)
  if type(a) == 'string' then
    return function(t)
      if is_list(t) then
        t.name = a
        self.__index = self         -- inheritance
        return setmetatable(t, self)
      end
      error ("invalid line constructor argument, list expected")
    end
  end

  if is_list(a) then
    self.__index = self             -- inheritance
    return setmetatable(a, self)
  end
  error ("invalid line constructor argument, string expected")
end

-- concatenation
function M.__add(a, b)
  return M { a, b }
end

-- repetition
function M.__mul(n, a)
  if type(a) == 'number' then n, a = a, n end
  return M { _rep=n, a }
end

-- reflection
function M.__unm(a, _)
  return M { _rep=-1, a }
end 

-- end -----------------------------------------------------------------------o

return M
