local lu  = require 'luaunit'
local g   = require 'gmath'
local C   = require 'complex'
local dat = require 'tests.complex_dat'

local isEqu      = lu.assertEquals
local isTrue     = lu.assertTrue
local isFalse    = lu.assertFalse
local isEquEps   = lu.assertAlmostEquals
local isTable    = lu.assertIsTable
local isErrMsgEq = lu.assertErrorMsgEquals

local inf = 1.0/0.0
local pi  = math.pi
local nan = 0.0/0.0
local eps = 1e-1

--function TestGmath:setUp()    end
--function TestGmath:tearDown() end

TestIntable = {}

function TestIntable:testGmath() 
  local abs, ceil, floor, max     = math.abs, math.ceil, math.floor, math.max
  local abs1, ceil1, floor1, max1 = abs, ceil, floor, max
  local abs, ceil, floor, max    in math
  
  local inp  = { 0.1, 2.2, -7, -2.1 }
  for i=1,#inp do
    isEqu( abs(inp[i])  , abs1(inp[i])   )
    isEqu( ceil(inp[i]) , ceil1(inp[i])  )
    isEqu( floor(inp[i]), floor1(inp[i]) )
    isEqu( max(inp[i])  , max(inp[i])    )
  end
end

function TestIntable:testSin()
  local sin1 = g.sin
  local sin in g

  for i=1,#dat.z do
    local ref  = dat.sin[i]
    local res  = sin( dat.z[i] )
    local res1 = sin1( dat.z[i])

    isEquEps( res.re , ref.re, eps )
    isEquEps( res.im , ref.im, eps )
    isEquEps( res1.re, res.re, eps )
    isEquEps( res1.im, res.im, eps )
  end
end

function TestIntable:testCos()
  local cos1 = g.cos
  local cos in g

  for i=1,#dat.z do    
    local ref  = dat.cos[i]
    local res  = cos( dat.z[i] )
    local res1 = cos1( dat.z[i])

    isEquEps( res.re , ref.re, eps )
    isEquEps( res.im , ref.im, eps )
    isEquEps( res1.re, res.re, eps )
    isEquEps( res1.im, res.im, eps )
  end
end

function TestIntable:testTan()
  local tan1 = g.tan
  local tan in g

  for i=1,#dat.z do
    local ref  = dat.tan[i]
    local res  = tan( dat.z[i] )
    local res1 = tan1( dat.z[i])

    isEquEps( res.re , ref.re, eps )
    isEquEps( res.im , ref.im, eps )
    isEquEps( res1.re, res.re, eps )
    isEquEps( res1.im, res.im, eps )
  end
end

function TestIntable:testSinc() 
  local m     = require 'math'
  local sinc1 = m.sinc
  local sinc  in m

  local abs, sin in m
  local function sinc2  (x) return abs(x) < 1e-10 and 1.0 or sin(x)/x end

  local dat = 
  {
  { 1e-11,  1.000000000000000e0    },
  { 1e-9 ,  1.000000000000000e0    },
  { 1e-7 ,  9.999999999999983e-1   },
  { 1e-5 ,  9.999999999833333e-1   },
  { 1e-3 ,  9.9999983333334167e-1  },
  { 1e-1 ,  9.9833416646828152e-1  },
  { 1e1  , -5.4402111088936981e-2  },
  { 1e3  ,  8.2687954053200256e-4  },
  { 1e5  ,  3.5748797972016509e-7  },
  { 1e7  ,  4.2054779319078249e-8  },
  { 1e9  ,  5.4584344944869956e-10 },
  { 1e11 ,  9.2869366049659195e-12 },
  { 1e13 , -2.8888529481752512e-14 },
  }
  
  for i=1,#dat do
    local ref  = dat[i][2]
    local inp  = sinc(dat[i][1])
    local inp1 = sinc1(dat[i][1])
    local inp2 = sinc2(dat[i][1])

    isEquEps( inp , ref, eps )
    isEquEps( inp1, inp, eps )
    isEquEps( inp2, inp, eps )
  end
  for i=1,#dat do
    local ref  = -dat[i][2]
    local inp  = -sinc(dat[i][1])
    local inp1 = -sinc1(dat[i][1])
    local inp2 = -sinc2(dat[i][1])

    isEquEps( inp , ref, eps )
    isEquEps( inp1, inp, eps )
    isEquEps( inp2, inp, eps )
  end
end

os.exit( lu.LuaUnit.run() ) 
