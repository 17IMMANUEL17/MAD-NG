local lu  = require 'luaunit'
local R   = require 'range'
local V   = require 'vector'

local isEqu    = lu.assertEquals
local isTrue   = lu.assertTrue
local isFalse  = lu.assertFalse
local isEquEps = lu.assertAlmostEquals
local isStr    = lu.assertIsString
local isTable  = lu.assertIsTable
local isNil    = lu.assertIsNil
local isErrMsgEq = lu.assertErrorMsgEqualsO

local pi  = math.pi
local nan = 0.0/0.0
local inf = 1.0/0.0
local eps = 1e-16

TestRange = {}

--function TestRange:setUp()    end
--function TestRange:tearDown() end

function TestRange:testCtor() 
  isEqu( R(1,20)   , R(1,20,1)    )
  isEqu( R(-1,-20) , R(-1,-20,-1) )
  --isErrMsgEq( "range.lua:94: invalid range argument", R(1,10,0) )
end

function TestRange:testScale()  
  isEqu( R(1,20,1)   :scale(2)   , R(1,40,2)    )
  isEqu( R(1,20,1)   :scale(-3)  , R(1,-60,-3)  )
  isEqu( R(-1,20,1)  :scale(2.1) , R(-1,42,2.1) )
  isEqu( R(2,-20,-2) :scale(2)   , R(2,-40,-4)  
)  isEqu( R(-1,-20,-1):scale(-2)  , R(-1,40,2)   )
  isEqu( R(-1,-20,1) :scale(2)   , R(-1,-40,2)  )
  --isErrMsgEq( "invalid range argument", R(-1,-20,-1):scale(0) )
end

function TestRange:testTranslate()
  isEqu( R(1,20,2)    :translate(4)   , R(5,24,2)       ) 
  isEqu( R(1,20,2)    :translate(-4)  , R(-3,16,2)      ) 
  isEqu( R(-1,20,2)   :translate(-4)  , R(-5,16,2)      )
  isEqu( R(1,-20,-2)  :translate(4.1) , R(5.1,-15.9,-2) )
  isEqu( R(1,20,2)    :translate(0)   , R(1,20,2)       )
  isEqu( R(-1,-20,1)  :translate(1)   , R(0,-19,1)      )
  isEqu( R(1,-20.2,-2):translate(-2)  , R(-1,-22.2,-2)  )
end

function TestRange:testReverse()
  isEqu( R(1,20,2)     :reverse() , R(20,1,-2)      ) 
  isEqu( R(3,-30,-2)   :reverse() , R(-30,3,2)      )
  isEqu( R(-1,-20,-2)  :reverse() , R(-20,-1,2)     ) 
  isEqu( R(-1.1,20.2,2):reverse() , R(20.2,-1.1,-2) )
  isEqu( R(-1,-20,1)   :reverse() , R(-20,-1,-1)    )
end

function TestRange:testRange()
  local start, stop, step = R(1,10,1):range() 
  isEqu( start , 1  )
  isEqu( stop  , 10 )
  isEqu( step  , 1  )

  local start, stop, step = R(20.1,1,-0.1):range() 
  isEqu( start , 20.1 )
  isEqu( stop  , 1    )
  isEqu( step  ,-0.1  )

  local start, stop, step = R(-1,2.2,-0.1):range() 
  isEqu( start ,-1   )
  isEqu( stop  , 2.2 )
  isEqu( step  ,-0.1 )  


  local start, stop, step = R(-1,-20,1):range() 
  isEqu( start ,-1  )
  isEqu( stop  ,-20 )
  isEqu( step  , 1  )
end

function TestRange:testSize()
  isTrue ( R(1,20,1)     :size() == R(2,40,2):size() ) 
  isEqu  ( R(1,10,2)     :size() , 5   ) 
  isEqu  ( R(-1.1,10,0.1):size() , 112 )
  isEqu  ( R(10,-1,-1)   :size() , 12  )
  isEqu  ( R(2,1,0.1)    :size() , 0   )
end

function TestRange:testFirst()
  isEqu( R(1,10,2)     :first() , 1   )
  isEqu( R(2,-1,-0.1)  :first() , 2   )
  isEqu( R(-1.1,10,0.1):first() ,-1.1 )  
  isEqu( R(2,1,0.1)    :first() , nil )
end

function TestRange:testLast()
  isEquEps( R(-1.1,10.1,0.1)   :last() , 10.1, eps )  
  isEqu   ( R(1,10,2)          :last() , 9    ) 
  isEqu   ( R(2,-1,-0.1)       :last() ,-1    )
  isEqu   ( R(2,1,0.1)         :last() , nil  ) 
end

function TestRange:testIndex()
  isEqu( R(-1,2,0.1) :index(-0.9) , 2   )
  isEqu( R(10,20,0.1):index(10.3) , 4   )
  isEqu( R(1,-2,-0.1):index(-1.1) , 22  )
  isEqu( R(1,2,0.1)  :index(0)    , nil )
  isEqu( R(1,2,0.1)  :index(3)    , nil )
  isEqu( R(2,1,0.1)  :index(-3)   , nil )
end

function TestRange:testValue()
  isEquEps( R(1,-2,-0.1):value(13) ,-0.2 , eps )
  isEqu   ( R(10,20,0.1):value(2)  , 10.1 )
  isEqu   ( R(2,20,2)   :value(10) , 20   )
  isEqu   ( R(1,10,1)   :value(11) , nil  )
  isEqu   ( R(1,10,1)   :value(-4) , nil  )
  isEqu   ( R(1,10,1)   :value(0)  , nil  )
  isEqu   ( R(10,1,1)   :value(1)  , nil  )
end

function TestRange:testElement()
  isTrue ( R(1,10,1)   :element(3)    )
  isTrue ( R(10,20,0.1):element(10.1) )
  isTrue ( R(2,1,-0.1) :element(1.1)  )
  --isTrue ( R(1,-2,-0.1):element(-1.9) )
  --isTrue ( R(2,-2,-0.1):element(-0.6) )
  
  --isNil  ( R(1,12,0.1) :element(-1)   ) -- isNil "attempt to compare nil with number"
  --isFalse( R(1,12,0.1) :element(0)    ) -- or errMsgTest simply
  --isErrMsgEq( " attempt to compare nil with number", R(1,12,0.1) :element(-1)  )   
end

function TestRange:testMinmax()
  local min,max = R(1,2,0.1):minmax() 
  isEqu( min , 1 )
  isEqu( max , 2 )
  
  local min,max = R(-2,2,0.1):minmax() 
  isEqu( min ,-2 )
  isEqu( max , 2 )

  local min,max = R(-2,-2.2,-0.1):minmax() 
  isEqu( min ,-2.2 )
  isEqu( max ,-2   )
  
  local min,max = R(2,-2.2,-0.1):minmax() 
  isEqu( min ,-2.2 )
  isEqu( max , 2 )
  
  local min,max = R(2,1,0.1):minmax() 
  isEqu( min , nil )
  isEqu( max , nil )
end 

function TestRange:testBounds()
  local start,stop = R(1,2,0.1):bounds() 
  isEqu( start , 1 )
  isEqu( stop  , 2 )
  
  local start,stop = R(-2,2,0.1):bounds() 
  isEqu( start ,-2 )
  isEqu( stop  , 2 )

  local start,stop = R(-2,-2.2,-0.1):bounds() 
  isEqu( start ,-2.2 )
  isEqu( stop  ,-2   )

  local start,stop = R(2,-2.2,-0.1):bounds() 
  isEqu( start ,-2.2 )
  isEqu( stop  , 2   )

  local start,stop = R(2,1,0.1):bounds() 
  isEqu( start , 2 )
  isEqu( stop  , 1 )
end

function TestRange:testOverlap()
  isTrue ( R(1,3,1)   :overlap(R(3,1,-1)) )
  isTrue ( R(5.1,1,-1):overlap(R(1,4,1))  )
  isFalse( R(6,9,1)   :overlap(R(5,1,-1)) )
  isFalse( R(2,1,0.1) :overlap(R(4,1,-1)) )
end

function TestRange:testTotable()
  isTable( R(2,2.2)       :totable() )
  isTable( R(-2,-2.2,-0.1):totable() )
  isTable( R(2,2.6,0.1)   :totable() )
  isTable( R(2,1,0.1)     :totable() )
end

function TestRange:testTovector()
  isEqu( R(1,3,1)       :tovector(), V{1,2,3}                     )
  isEqu( R(-2,-2.2,-0.1):tovector(), V{-2,-2.1,-2.2}              )
  isEqu( R(2,2.6,0.1)   :tovector(), V{2,2.1,2.2,2.3,2.4,2.5,2.6} )
  --isErrMsgEq("xmatrix.lua:140: invalid argument to matrix constructor, expecting (rows[,cols]) or table [of tables]", R(2,1,0.1):tovector() )
end

function TestRange:testTostring()
  isStr( R(2,2.2)       :tostring() )
  isStr( R(-2,-2.2,-0.1):tostring() )
  isStr( R(2,2.6,0.1)   :tostring() )
  isStr( R(2,1,0.1)     :tostring() )
end 

function TestRange:testEqual()  
  isTrue ( R(1,3,1)        == R(1,3,1)        )
  isTrue ( R(-2,-2.2,-0.1) == R(-2,-2.2,-0.1) )
  isTrue ( R(2,2.6,0.1)    == R(2,2.6,0.1)    )
  isTrue ( R(2,1,0.1)      == R(2,1,0.1)      )
  isFalse( R(2,10,0.1)     == R(2,11,0.1)     )
end

os.exit( lu.LuaUnit.run() )