local lu  = require 'luaunit'
local C   = require 'complex'
local dat = require 'tests.complex_dat'

local isEqu    = lu.assertEquals
local isNotEqu = lu.assertNotEquals
local isTrue   = lu.assertTrue
local isFalse  = lu.assertFalse
local isStr    = lu.assertIsString
local isEquEps = lu.assertAlmostEquals
local isItEqu  = lu.assertItemsEquals

local pi  = math.pi
local nan = 0.0/0.0
local inf = 1.0/0.0
local eps = 1e-16
local dbl_min = 2.2250738585072014e-308

TestComplex = {}

-- function TestComplex:setUp()    end
-- function TestComplex:tearDown() end

function TestComplex:testCtor()
  isEqu( C(1).re      ,    1 )
  isEqu( C(1).im      ,    0 )
  isEqu( C(0,1).re    ,    0 )
  isEqu( C(0,1).im    ,    1 )
  isEqu( C(-0.1,0).re , -0.1 )
  isEqu( C(-0.1,0).im ,    0 )
  isEqu( C(0,-0.1).re ,    0 )
  isEqu( C(0,-0.1).im , -0.1 )
  isEqu( C(0,1)       ,   1i )
  isEqu( C(0,-1)      ,  -1i )
end

function TestComplex:testReal()
  isEqu( C(1,1)   :real() ,    1 )
  isEqu( C(0,1)   :real() ,    0 )
  isEqu( C(1,0)   :real() ,    1 )
  isEqu( C(-0.1,1):real() , -0.1 )
end

function TestComplex:testImag()
  isEqu( C(1,1)   :imag() ,    1 )
  isEqu( C(1,0)   :imag() ,    0 )
  isEqu( C(0,1)   :imag() ,    1 )
  isEqu( C(1,-0.1):imag() , -0.1 )
end

function TestComplex:testConj()
  isEqu( C(1,1)   :conj() , C(1,-1)    )
  isEqu( C(0,1)   :conj() , C(0,-1)    )
  isEqu( C(1,0)   :conj() , C(1,-0)    )
  isEqu( C(-0.1,1):conj() , C(-0.1,-1) )
end

function TestComplex:testAbs()
  isEqu( C(0,-4):abs() , 4 )
  isEqu( C(0,0) :abs() , 0 )
  isEqu( C(1,0) :abs() , 1 )
  isEqu( C(0,1) :abs() , 1 )
  isEqu( C(1,1) :abs() , math.sqrt(2) )
end

function TestComplex:testArg()
  isEqu( C(1,0) :arg() ,  0.0   * pi )
  isEqu( C(-1,0):arg() ,  1.0   * pi )
  isEqu( C(1,1) :arg() ,  1.0/4 * pi )
  isEqu( C(0,1) :arg() ,  1.0/2 * pi )
  isEqu( C(0,-1):arg() , -1.0/2 * pi )
end

function TestComplex:testExp()
  for i=1,#dat.z do
    local ref = dat.exp[i]
    local res = dat.z[i]:exp()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):exp(), C(1,0) )
end

function TestComplex:testLog()
  for i=1,#dat.z do
    local ref = dat.log[i]
    local res = dat.z[i]:log()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(1,0) :log() , C(0,0)           )
  isEqu( C(0,0) :log() , C(-inf,0)        )
  isEqu( C(-1,0):log() , C(0,pi)          )
  isEqu( C(0,1) :log() , C(0, 1.0/2 * pi) )
  isEqu( C(0,-1):log() , C(0,-1.0/2 * pi) )
end

function TestComplex:testSqrt()
  for i=1,#dat.z do
    local ref = dat.sqrt[i]
    local res = dat.z[i]:sqrt()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):sqrt(), C(0,0) )
  isEqu( C(0,2):sqrt(), C(1,1) )
  isEqu( C(1,0):sqrt(), C(1,0) )
end


function TestComplex:testProj()
  isEqu( C(1,2)    :proj() , C(1,2)     )
  isEqu( C(inf,-1) :proj() , C(inf,-1)  )
  isEqu( C(0, -inf):proj() , C(0 ,-inf) )
end

function TestComplex:testSin()
  for i=1,#dat.z do
    local ref = dat.sin[i]
    local res = dat.z[i]:sin()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):sin(), C(0,0) )
end

function TestComplex:testCos()
  for i=1,#dat.z do
    local ref = dat.cos[i]
    local res = dat.z[i]:cos()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):cos(), C(1,0) )
end

function TestComplex:testTan()
  for i=1,#dat.z do
    local ref = dat.tan[i]
    local res = dat.z[i]:tan()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):tan() , C(0,0) )
end

function TestComplex:testSinh()
  for i=1,#dat.z do
    local ref = dat.sinh[i]
    local res = dat.z[i]:sinh()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):sinh() , C(0,0) )
end

function TestComplex:testCosh()
  for i=1,#dat.z do
    local ref = dat.cosh[i]
    local res = dat.z[i]:cosh()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):cosh() , C(1,0) )
end

function TestComplex:testTanh()
  for i=1,#dat.z do
    local ref = dat.tanh[i]
    local res = dat.z[i]:tanh()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):tanh(), C(0,0) )
end

function TestComplex:testAsin()
  for i=1,#dat.z do
    local ref = dat.asin[i]
    local res = dat.z[i]:asin()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0) :asin() , C(0,0)         )
  isEqu( C(1,0) :asin() , C(1/2 * pi,0)  )
  isEqu( C(-1,0):asin() , C(-1/2 * pi,0) )
end

function TestComplex:testAcos()
  for i=1,#dat.z do
    local ref = dat.acos[i]
    local res = dat.z[i]:acos()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(1,0) :acos() , C(0,0)        )
  isEqu( C(-1,0):acos() , C(pi,0)       )
  isEqu( C(0,0) :acos() , C(1/2 * pi,0) )
end

function TestComplex:testAtan()
  for i=1,#dat.z do
    local ref = dat.atan[i]
    local res = dat.z[i]:atan()

    if res.im==inf or res.im==-inf then
      print("i=", i, dat.z[i], ref, res)
      isEqu( res.re, ref.re )
      isEqu( res.im, ref.im )
    else
      isEquEps( res.re, ref.re, eps )
      isEquEps( res.im, ref.im, eps )
    end
  end

  isEqu( C(0,0)   :atan() , C(0,0)       )
  isEqu( C(0,1)   :atan() , C(0,inf)     )
  isEqu( C(0,-1)  :atan() , C(0,-inf)    )
  isEqu( C(inf,0) :atan() , C(1/2*pi,0)  )
  isEqu( C(-inf,0):atan() , C(-1/2*pi,0) )
end

function TestComplex:testAsinh()
  for i=1,#dat.z do
    local ref = dat.asinh[i]
    local res = dat.z[i]:asinh()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end

  isEqu( C(0,0):asinh() , C(0,0) )
end

function TestComplex:testAcosh()
  for i=1,#dat.z do
    local ref = dat.acosh[i]
    local res = dat.z[i]:acosh()

    isEquEps( res.re, ref.re, eps )
    isEquEps( res.im, ref.im, eps )
  end
end

function TestComplex:testAtanh()
  for i=1,#dat.z do
    local ref = dat.atanh[i]
    local res = dat.z[i]:atanh()

    if res.re == inf or res.re==-inf then
      isEqu( res.re, ref.re )
      isEqu( res.im, ref.im )
    else
      isEquEps( res.re, ref.re, eps )
      isEquEps( res.im, ref.im, eps )
    end
  end

  isEqu( C(0,0):atanh() , C(0,0) )
end

function TestComplex:testEqu()
  isTrue ( C(1,1)    == C(1,1)    )
  isTrue ( C(0,1)    == C(0,1)    )
  isTrue ( C(1,0)    == 1         )
  isTrue ( C(0,1)    == 1i        )
  isTrue ( C(1,0)    == C(1,0)    )
  isTrue ( C(-0.1,1) == C(-0.1,1) )
  isFalse( C(1,-1)   == C(2,1)    )
end

function TestComplex:testUnm()
  isEqu( -C(1,1)    , C(-1,-1)  )
  isEqu( -C(0,1)    , C(-0,-1)  )
  isEqu( -C(1,0)    , C(-1,-0)  )
  isEqu( -C(0,0)    , C(-0,-0)  )
  isEqu( -C(-0.1,1) , C(0.1,-1) )
end

function TestComplex:testAdd()
  isEqu( C(1,1)    + C(1,1) , C(2,2)   )
  isEqu( C(0,1)    + C(0,1) , C(0,2)   )
  isEqu( C(1,0)    + C(1,0) , C(2,0)   )
  isEqu( C(1,-1)   + C(2,1) , C(3,0)   )
  isEqu( C(-0.1,1) + C(1,1) , C(0.9,2) )
end

function TestComplex:testSub()
  isEqu( C(1,1)    - C(1,1) , C(0,0)    )
  isEqu( C(0,1)    - C(0,1) , C(0,0)    )
  isEqu( C(1,0)    - C(1,0) , C(0,0)    )
  isEqu( C(1,-1)   - C(2,1) , C(-1, -2) )
  isEqu( C(-0.1,1) - C(1,1) , C(-1.1,0) )
end

function TestComplex:testMul()
  isEqu( C(1,1)    * C(1,1) , C(0,2)      )
  isEqu( C(1,0)    * C(1,0) , C(1,0)      )
  isEqu( C(1,1)    * C(2,0) , C(2,2)      )
  isEqu( C(0,1)    * C(0,1) , C(-1,0)     )
  isEqu( C(1,-1)   * C(2,1) , C(3, -1)    )
  isEqu( C(-0.1,1) * C(1,1) , C(-1.1,0.9) )
end

function TestComplex:testDiv()
  isEqu( C(0,1)    / C(0,1)   , C(1,0)                  )
  isEqu( C(6,3)    / C(7,-5)  , C(27/74, 51/74)         )
  isEqu( C(1,0)    / C(1,5)   , C(1/26, (-5/26))        )
  isEqu( C(-0.1,1) / C(1,1)   , C(0.45,0.55)            )
  isEqu( C(0,1)    / C(0,10)  , C(0.1,0)                )
  isEqu( C(0,10)   / C(0,3)   , C(3.3333333333333333,0) )
  isEqu( (C(1,1)/ C(0,0)):tostring() , C(nan,nan):tostring() )
end

function TestComplex:testMod()
  local r = C(5,1) % C(1,-3)
  isEquEps( r.re , 2, dbl_min )
  isEqu   ( r.im , 0 )
end

function TestComplex:testPow()
  isTrue ( C(1,1)^0 == 1 )
  isEqu  ( C(1,1)^1, C(1,1)  )
  isEqu  ( C(1,1)^2, C(0,2)  )
  isEqu  ( C(1,1)^3, C(-2,2) )
end

function TestComplex:testTostring()
  isStr( C(0,0)   :tostring() )
  isStr( C(1,1)   :tostring() )
  isStr( C(0,0.1) :tostring() )
  isStr( C(-0.1,0):tostring() )
end

os.exit( lu.LuaUnit.run() )
