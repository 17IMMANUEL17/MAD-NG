local lu = require 'luaunit'
local G  = require 'gmath'
local m  = require 'math'
local C  = require 'complex'

local isEqu    = lu.assertEquals
local isTrue   = lu.assertTrue
local isFalse  = lu.assertFalse
local isEquEps = lu.assertAlmostEquals
local isStr    = lu.assertIsString
local isTable  = lu.assertIsTable
local isNil    = lu.assertIsNil
local isErrMsgEq = lu.assertErrorMsgEquals

local pi  = math.pi
local nan = 0.0/0.0
local inf = 1.0/0.0
local eps = 1e-16

TestGmath = {}

--function TestGmath:setUp()    end
--function TestGmath:tearDown() end

function TestGmath:testSign() 
  local sign = m.sign
  isEqu( sign(2)   ,  1 )
  isEqu( sign(7.2) ,  1 )
  isEqu( sign(-2)  , -1 )
  isEqu( sign(-4.1), -1 )
  isEqu( sign(0)   ,  1 )   
end

function TestGmath:testStep() 
  local step = m.step
  isEqu( step(2)   ,  1 )
  isEqu( step(7.2) ,  1 )
  isEqu( step(0)   ,  1 )
  isEqu( step(-2)  ,  0 )
  isEqu( step(-4.1),  0 )
end

function TestGmath:testSinc() 
  local sinc = m.sinc

  local dat = 
  {
  { 1e-11,  1.000000000000000e0    },
  { 1e-9 ,  1.000000000000000e0    },
  { 1e-7 ,  9.999999999999983e-1   },
  { 1e-5 ,  9.999999999833333e-1   },
  { 1e-3 ,  9.9999983333334167e-1  },
  { 1e-1 ,  9.9833416646828152e-1  },
  { 1e1  , -5.4402111088936981e-2  },
  { 1e3  ,  8.2687954053200256e-4  },
  { 1e5  ,  3.5748797972016509e-7  },
  { 1e7  ,  4.2054779319078249e-8  },
  { 1e9  ,  5.4584344944869956e-10 },
  { 1e11 ,  9.2869366049659195e-12 },
  { 1e13 , -2.8888529481752512e-14 },
  }
  
  for i=1,#dat do
    local inp = sinc(dat[i][1])
    local ref = dat[i][2]

    isEquEps( inp, ref, eps )
  end
  for i=1,#dat do
    local inp = -sinc(dat[i][1])
    local ref = -dat[i][2]

    isEquEps( inp, ref, eps )
  end
end

function TestGmath:testTrunc() 
  local trunc = m.trunc 
  isEqu( trunc(1.2) ,  1 )
  isEqu( trunc(7.9) ,  7 )
  isEqu( trunc(-1.2), -1 )
  isEqu( trunc(-2.8), -2 )
  isEqu( trunc(0)   ,  0 ) 
end

function TestGmath:testRound()
  local round = m.round 
  isEqu( round(1.2) ,  1 )
  isEqu( round(7.9) ,  8 )
  isEqu( round(-1.2), -1 )
  isEqu( round(-2.8), -3 )
  isEqu( round(0)   ,  0 ) 
end

function TestGmath:testIsint() 
  local isint = m.isint
  isTrue ( isint( 2)       ) 
  isTrue ( isint(-2)       )
  isFalse( isint(2^60)     )
  isFalse( isint( 2.2)     )
  isFalse( isint(-2.2)     )
end


function TestGmath:testIdent() 
local ident = G.ident
  isEquEps( ident(2.22)  ,  2.22, eps)
  isEquEps( ident(-3.22) , -3.22, eps)
  isEqu   ( ident(2)  ,  2 )
  isEqu   ( ident(-1) , -1 )
  isEqu   ( ident(0)  ,  0 )
end

function TestGmath:testUnm() 
local unm = G.unm
  isEquEps( unm(2.22)  , -2.22, eps)
  isEquEps( unm(-3.22) ,  3.22, eps)
  isEqu   ( unm(2)  , -2 )
  isEqu   ( unm(-1) ,  1 )
  isEqu   ( unm(0)  ,  0 )
end

function TestGmath:testAdd() 
  isEquEps(10.2 +  10.1  , 20.3, eps)
  isEquEps(-1.2 + (-7.5) , -8.7, eps)
  isEqu   ( 1 +  2  ,  3 )
  isEqu   ( 1 +(-2) , -1 )
  isEqu   (-1 +  0  , -1 )
end

function TestGmath:testSub() 
  isEquEps(10.2 - 10.1  , 0.1, eps)
  isEquEps(-1.2 -(-7.5) , 6.3, eps)
  isEqu   ( 1 -  0  ,  1 )
  isEqu   ( 1 -(-2) ,  3 )
  isEqu   (-1 -  2  , -3 )
end 

function TestGmath:testMul() 
  isEquEps(10.2 * 10.1,  103.02, eps)
  isEquEps(-1.2 * 7.4 , -8.88  , eps)
  isEqu   ( 1 *  2  ,  2 )
  isEqu   ( 2 *(-3) , -6 )
  isEqu   (-1 *  0  ,  0 )
end 

function TestGmath:testDiv() 
  isEquEps(20.2 / 10.1,  2                , eps)
  isEquEps( 7.4 /-1.2 , -6.166666666666666, eps)
  isEqu   ( 4 /  2  ,  2   )
  isEqu   ( 9 /(-3) , -3   )
  isEqu   (-1 /  2  , -0.5 )
end

function TestGmath:testMod() 
  isEquEps(20.2 % 10.1,  0, eps)
  isEquEps( 7.4 %-1.2 , -1, eps)
  isEqu   ( 4 %  2  ,  0   )
  isEqu   ( 4 %  3  ,  1   )
  isEqu   ( 9 %(-3) ,  0   )
  isEqu   ( 9 %(-2) , -1   )
  isEqu   (-1 %  2  ,  1   )
end

function TestGmath:testEq() 
  local eq = G.eq
  isTrue ( eq( 2.2,  2.2) )
  isTrue ( eq(-10 , -10 ) )
  isFalse( eq( 2  ,  3  ) )
  isFalse( eq(-3  , -2.2) )
  isFalse( eq( 2  , -2  ) )
end

function TestGmath:testNe()
  local ne = G.ne
  isTrue ( ne( 2.1,  2  ) )
  isTrue ( ne(-2.2,  4.3) )
  isTrue ( ne(-1  , -7  ) )
  isFalse( ne( 2  ,  2  ) )
  isFalse( ne(-7.2, -7.2) )
end

function TestGmath:testLt()
  local lt = G.lt
  isTrue ( lt( 2 ,  3.2 ) )
  isTrue ( lt(-4 ,  7   ) )
  isTrue ( lt(-17, -2   ) )
  isFalse( lt( 12,  10.1) )
  isFalse( lt(-20, -30  ) )
end

function TestGmath:testLe() 
  local le = G.le
  isTrue ( le( 2  ,  2   ) )
  isTrue ( le( 1.2,  2   ) )
  isTrue ( le(-2  ,  12  ) )
  isTrue ( le(-6  , -6   ) )
  isTrue ( le(-6.7, -6   ) )
  isFalse( le( 12 ,  2   ) )
  isFalse( le(-12 , -13.1) )
end

function TestGmath:testGt()
  local gt = G.gt
  isTrue ( gt( 21.1,  12 ) )
  isTrue ( gt(-2   , -22 ) )
  isFalse( gt( 2   ,  12 ) )
  isFalse( gt(-2   ,  1.1) )
  isFalse( gt(-12  , -1  ) )
end

function TestGmath:testGe()
  local ge = G.ge
  isTrue ( ge( 12 ,  12 ) )
  isTrue ( ge( 12 ,  2.1) )
  isTrue ( ge(-12 , -22 ) )
  isFalse( ge( 4.1,  8.2) )
  isFalse( ge(-2  ,  5  ) )
  isFalse( ge(-6  , -1  ) )
end

function TestGmath:testIs_number() 
  local is_number = G.is_number
  isTrue ( is_number( 2.2)     ) 
  isTrue ( is_number(-2.2)     )
  isTrue ( is_number( 10 )     )
  isFalse( is_number( '10')    )
  isFalse( is_number( C(1,2) ) )
  isFalse( is_number( {1,2,3}) )
end

function TestGmath:testIs_integer()   
  local is_integer = G.is_integer
  isTrue ( is_integer( 2)       ) 
  isTrue ( is_integer(-2)       )
  isFalse( is_integer(2^60)     )
  isFalse( is_integer( 2.2)     )
  isFalse( is_integer(-2.2)     )
  isFalse( is_integer( '10')    )
  isFalse( is_integer( C(1,2) ) )
  isFalse( is_integer( {1,2,3}) )
end

function TestGmath:testIs_complex() 
  local is_complex = G.is_complex
  isTrue ( is_complex( C(1,2)  ) ) 
  isTrue ( is_complex( C(-2,0) ) )
  isTrue ( is_complex( C(0,0)  ) )
  isTrue ( is_complex( C(1,0)  ) )
  isFalse( is_complex( {1,2,3} ) )
  isFalse( is_complex( 2.2)      )
  isFalse( is_complex(-2.2)      )
  isFalse( is_complex( '10')     )
end

function TestGmath:testIs_scalar() 
  local is_scalar = G.is_scalar
  isTrue ( is_scalar( C(1,2) ) )
  isTrue ( is_scalar(-2.2)     )
  isFalse( is_scalar( {1,2,3}) )
  isFalse( is_scalar( '10')    )
end

function TestGmath:testIs_function() 
  local is_function = G.is_function
  isTrue ( is_function( G.unm )       )
  isTrue ( is_function( is_function ) )
  isFalse( is_function( C(1,2) )      )
  isFalse( is_function( {1,2,3})      )
  isFalse( is_function(-2.2)          )
  isFalse( is_function( '10')         )
end

function TestGmath:testIs_table() 
  local is_table = G.is_table
  isTrue ( is_table( {1,2,3}) )
  isTrue ( is_table( {-3}   ) )
  isFalse( is_table( C(1,2) ) )
  isFalse( is_table(-2.2)     )
  isFalse( is_table( '10')    )
end

function TestGmath:testToString() 
  isStr( tostring(2)       )  
  isStr( tostring(-2.2)    ) 
  isStr( tostring(C(1,2))  ) 
  isStr( tostring('10')    ) 
  isStr( tostring({1,2,3}) ) 
end

os.exit( lu.LuaUnit.run() )
