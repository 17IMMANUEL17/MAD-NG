local gmath  = require 'gmath'
local matrix = require 'matrix'
local jit    = require('jit')
local jitv   = require('jit.v')
-- jit.opt.start("sizemcode=256","loopunroll=25")
jitv.start()

--

local tostring = gmath.tostring

gmath.format = "%18.15f"

local r, rs

-- inverse square matrix

local a = matrix {
  { 0.4032125448587642,   0.4544519082558596,   0.9005578069051242,   0.1437407818114377,   0.2668679435687973 },
  { 0.5147009476555988,   0.1192176819290671,   0.4329542955486570,   0.5745450825801700,   0.8609978899020621 },
  { 0.1671466601020707,   0.3378408838237784,   0.6970148851608999,   0.4796639354795131,   0.8647014821109018 },
  { 0.7752984786947111,   0.0768562092121985,   0.8025486753496502,   0.6753566610454607,   0.0806172416807381 },
  { 0.5270801689500546,   0.4337701645753538,   0.5123274537629410,   0.6234338295210139,   0.1579665326970039 },
 }

local b = matrix { -- inv(a)
  { 1.3432371064209743,   2.3629779166994016,  -2.7526637290235052,  -0.5040117380049667,   0.1764836980151585 },
  { 0.8380430260558129,   0.1245781600119874,  -0.6092125731476806,  -1.8838041613562246,   2.2013888160712698 },
  { 0.3287657022426845,  -1.2843186329691245,   1.2838015459756222,   1.2265735587473141,  -1.2086703887935846 },
  {-2.0629561227697018,  -1.3535082606880813,   1.7105802235520420,   0.8938181509534789,   1.0426651980801886 },
  { 0.2922722777001625,   1.2806348364715598,  -0.0571491633854777,  -0.6510945456267261,  -0.4983054301600705 },
}

r = 1/a
print("inverse =")
io.write(r:tostring(), '\n')

r = r-b
print("error =")
io.write(r:tostring(), '\n')
print("norm =")
print(r:norm())

-- print(a,b,r)

-- divide square system

rs = matrix { -- a/b
  { 0.799115224076095,    0.668471382314451,    1.439658055331075,    1.014477095874397,    1.331344496175478  },
  { 1.240521039030581,    0.812021898861657,    1.719122604303184,    1.274950071112271,    0.796706668187018  },
  { 1.185436086085737,    0.763663706493964,    1.610588606279363,    1.415491903274075,    1.113459256161848  },
  { 1.052406108238650,    0.719506953032165,    1.874173716243346,    1.046919157890417,    1.034220590967933  },
  { 1.088029400150524,    0.580766751597302,    1.600835263922610,    1.090250303218623,    1.032359246939122  },
}

r = a/b
print("divide =")
io.write(r:tostring(), '\n')

r = r-rs
print("error =")
io.write(r:tostring(), '\n')
print("norm =")
print(r:norm())

-- solve square system

rs = matrix { -- as/b
  { 0.799115224076095,   0.668471382314451,   1.439658055331075,   1.014477095874397,   1.331344496175478 },
  { 1.240521039030581,   0.812021898861657,   1.719122604303184,   1.274950071112271,   0.796706668187018 },
  { 1.185436086085737,   0.763663706493964,   1.610588606279363,   1.415491903274075,   1.113459256161848 },
}

local as = a:get_sub({1,1,3,5})

print("submatrix")
print(as)
r = as/b
print("divide =")
io.write(r:tostring(), '\n')

r = r-rs
print("error =")
io.write(r:tostring(), '\n')

print("norm =")
print(r:norm())

-- inverse non-square system

rs = matrix { -- 1/as
  { 0.924600615467859,   1.855517213727435,  -2.230645592334097 },
  { 0.362780472361968,  -0.687691631037748,   0.571184571128894 },
  { 0.796985417689048,  -0.597399397356058,   0.402908360396839 },
  {-0.362616152595255,   0.499942638351558,   0.107159153479602 },
  {-0.761745876942109,   0.114234408466649,   0.980271194159461 },
}

r = 1/as
print("inverse =")
io.write(r:tostring(), '\n')


r = r-rs
print("error =")
io.write(r:tostring(), '\n')

print("norm =")
print(r:norm())

-- solve non-square system

print("submatrix")
local bs = b:get_sub({1,1,3,5})
print(bs)

rs = matrix { -- as/bs
  {-0.00380738697011124,   0.14473535452298955,   0.21163005399428558 },
  { 0.05194484437658006,   0.28786185270818088,   0.34851377135629291 },
  {-0.08727658900428750,   0.14671108952064912,   0.04377890989102347 },
}

r = as/bs
print("divide =")
io.write(r:tostring(), '\n')


r = r-rs
print("error =")
io.write(r:tostring(), '\n')

print("norm =")
print(r:norm())

rs = matrix { -- bs/as
  {-0.0463056837284210,   2.2800226410712883,  -2.6366682185306596 },
  {-0.6592849526114762,   1.1429554533435407,  -0.0875855140521392 },
  { 1.3371466621532289,   1.2014479995799894,  -2.0030745573516646 },
}

r = bs/as
print("divide2 =")
io.write(r:tostring(), '\n')


r = r-rs
print("error2 =")
io.write(r:tostring(), '\n')

print("norm2 =")
print(r:norm())

rs = matrix { -- as'/bs'
  { 0.43158742726018784,  -0.11412011788671836,  -0.02663615928239610,  -0.02188602558410761,   0.04986530248814613 },
  { 0.42297902741331728,  -0.08170709391958372,  -0.04455131352308772,   0.06530442264380915,  -0.05868954135499649 },
  { 0.93021680395660322,  -0.20783850118604330,  -0.07568774961128222,   0.10414205142970118,  -0.07751559800109936 },
  { 0.59661073328838865,  -0.23559768984975293,   0.04113002369225011,  -0.00549930450721558,   0.05387837848924174 },
  { 1.01353338192244791,  -0.39022390951666580,   0.06339640894032950,   0.01663749018519511,   0.05914009640698657 },
}

r = as:t()/bs:t()
print("divide3 =")
io.write(r:tostring(), '\n')


r = r-rs
print("error3 =")
io.write(r:tostring(), '\n')

print("norm3 =")
print(r:norm())

rs = matrix { -- bs'/as'
  { 2.0636013513886198,   0.0987709131307695,   0.7023564376374731,  -0.0328757757096367,  -0.6051924306846299 },
  { 5.2808274542590876,   0.0379878991854659,   1.2913733095790834,  -0.9321985243307624,  -3.0447381329560792 },
  {-6.5392252542881097,   0.1536253756605239,  -1.3126352518091693,   0.8311600765731693,   3.2857108828050601 },
  {-6.6974915143435050,   1.8132306320004661,   1.2178902066579678,  -0.6275926410320412,   1.3711083364738172 },
  { 6.9440070534793064,  -2.1402257038014398,  -1.6614368228984588,   0.9070521974752619,  -1.0677861454694109 },
}

r = bs:t()/as:t()
print("divide4 =")
io.write(r:tostring(), '\n')


r = r-rs
print("error4 =")
io.write(r:tostring(), '\n')

print("norm4 =")
print(r:norm())

rs = matrix { -- a/bs
  {-0.00380738697011124,   0.14473535452298955,   0.21163005399428558 },
  { 0.05194484437658006,   0.28786185270818088,   0.34851377135629291 },
  {-0.08727658900428750,   0.14671108952064912,   0.04377890989102347 },
  { 0.15423725441681216,   0.23097637340898577,   0.67381781688452980 },
  { 0.14353838947935255,   0.07884770141708269,   0.35959994837089848 },
}

r = a/bs
print("divide5 =")
io.write(r:tostring(), '\n')


r = r-rs
print("error5 =")
io.write(r:tostring(), '\n')

print("norm5 =")
print(r:norm())

rs = matrix { -- b/as
  {-0.0463056837284210,   2.2800226410712883,  -2.6366682185306596 },
  {-0.6592849526114762,   1.1429554533435407,  -0.0875855140521392 },
  { 1.3371466621532289,   1.2014479995799894,  -2.0030745573516646 },
  {-2.1534881876832173,  -3.3529878415014762,   5.6357034754844033 },
  { 1.3049568948859709,  -0.6866582923300060,  -0.5017480833119887 },
}

r = b/as
print("divide6 =")
io.write(r:tostring(), '\n')


r = r-rs
print("error6 =")
io.write(r:tostring(), '\n')

print("norm6 =")
print(r:norm())

a = matrix {
  { 0.12329442182202503,   0.27683375232873370,   0.96564358358184688,   0.43194117006103999,   0.04994865424162513,   0.40832623167285270,   0.63764145061784405,   0.60772496558884503,   0.04732020418744469,   0.33247981091398510,   0.40925772651026288,  0.01694863114973104,   0.34946758612215095,   0.89592045187334768,   0.69538479283396692,   0.59963552845692547,   0.20088952275369015,   0.32705790495902759,   0.02063264088047871,   0.31813693935618731 },
  { 0.03419304194267363,   0.92254263295534678,   0.92163933421933419,   0.36228319864732389,   0.40967955864419642,   0.35939023130215492,   0.51643139631609392,   0.61932970585517622,   0.92036616115101932,   0.09703009575076708,   0.59715849832138368,  0.55961316869876543,   0.30774791367799009,   0.36334047010160958,   0.88200640900842275,   0.33086341138312531,   0.24237752621742698,   0.54031601618034764,   0.64606959214286663,   0.43107016846396434 },
  { 0.70726563084872751,   0.36406785280471804,   0.95252923814031432,   0.71896898318122726,   0.14946596067740153,   0.94740444654011857,   0.31822519796651622,   0.86769088636246305,   0.23176267269237533,   0.20266370348535595,   0.75933998074156039,  0.35586602892769198,   0.81761324056983897,   0.08114210214161281,   0.53194647032890663,   0.31213556956342831,   0.34585457422744098,   0.82471161197401111,   0.24011383554439364,   0.27939716205611359 },
  { 0.29539020934388954,   0.11997445236715236,   0.35309230964890187,   0.24320855540011094,   0.24829395791435876,   0.85103158290540015,   0.77215370902372660,   0.50082420247824511,   0.26263088609420332,   0.41708382711993347,   0.44918648870444106,  0.01075214238026250,   0.86730349265992057,   0.68830553487014035,   0.12545352902493773,   0.50948686545953181,   0.49218275162507968,   0.55842986441144771,   0.50908742995575229,   0.01527459983789785 },
  { 0.66903219067708586,   0.81682532850602874,   0.97991011215468726,   0.12816692070248653,   0.21168107932663721,   0.37681799288307921,   0.87613493695958622,   0.47374762500225259,   0.62808057480254642,   0.71085625460531099,   0.91488230832565387,  0.89568649566769376,   0.87099030550459167,   0.59455444819277803,   0.78797991512895149,   0.14246420343508842,   0.41000676075878634,   0.88059445280214432,   0.99134348979183662,   0.90489930004638464 },
  { 0.90825374512814006,   0.03096211703278633,   0.16356626653945811,   0.32708626964837945,   0.02115536007011347,   0.93814310719177441,   0.24916709005037047,   0.14213702320890159,   0.84928844885716581,   0.78597871569766065,   0.33262565963681850,  0.83619189203099920,   0.90459229029212762,   0.63881497868306536,   0.92689035545423459,   0.26899336750964947,   0.80212175942370567,   0.60494123332838690,   0.72800884211259043,   0.72133444769571842 },
  { 0.96387877297757341,   0.96044555149838640,   0.42236849717108721,   0.24615795080104780,   0.16542495018133380,   0.48828009931112476,   0.04202255588820973,   0.56110690480356440,   0.23317999277345253,   0.74069495487834258,   0.02193468954690829,  0.53279510554302256,   0.97444081305448405,   0.87482696335882038,   0.80651489775110075,   0.43223268865907122,   0.07294865628128482,   0.43108968764044669,   0.88574027541337408,   0.47507805408832732 },
  { 0.98019471223024290,   0.80439411899574453,   0.22607285616232869,   0.08756528887749819,   0.07587441021572465,   0.46253246435956447,   0.19472759370960041,   0.46664888570943069,   0.29857935465425850,   0.17621738866251163,   0.26963134688610152,  0.88915482834056814,   0.79514628111864183,   0.69280761808715019,   0.62067778679697938,   0.27322778252679242,   0.10821067087252871,   0.61916981499251189,   0.51756872057896997,   0.17907167335434543 },
  { 0.88269094508864077,   0.17951061926813067,   0.98573761775927682,   0.14659300137472170,   0.23091555723338558,   0.06652606348371619,   0.82599790633043513,   0.80834755208208309,   0.97493464218421144,   0.95996335108100872,   0.45763801074793459,  0.85623763606247350,   0.15074426794082546,   0.33818167590011000,   0.41963843506519977,   0.32185546144196847,   0.32663283017133143,   0.52954361206208189,   0.22383851279436812,   0.56264032946598563 },
  { 0.63648695952277190,   0.93561941478728861,   0.89864123753749836,   0.28690225826588628,   0.41594587141922040,   0.11837524371071721,   0.58847359034040658,   0.87435255044284377,   0.69150327311841864,   0.61346057871881432,   0.23666155921240811,  0.71483976968107543,   0.89634524474597588,   0.71207844639263695,   0.68040035862231796,   0.02486425520588491,   0.91577512230676261,   0.79810894414902589,   0.34143027965505218,   0.26822905097157596 },
  { 0.17742299727510197,   0.88669235369045241,   0.52210245977141678,   0.72074421009153933,   0.18988538762288248,   0.45064410862690180,   0.90629469412736574,   0.38567898481247903,   0.05963723823101090,   0.84446183741603509,   0.82981985357950361,  0.19342681291239244,   0.57186162878877034,   0.61267640533000012,   0.34737909339344702,   0.72409155042272677,   0.53689911023502490,   0.21968275109421215,   0.13555208787195711,   0.66892604005174949 },
  { 0.76283410004439012,   0.16382868464868289,   0.53016326916941892,   0.96384231573057655,   0.00783167413639001,   0.89579661585593162,   0.19696194805208739,   0.18331226411488716,   0.65604296560374531,   0.50785293027752754,   0.89219545020532220,  0.08986465295665096,   0.37348746954391815,   0.16588065648248268,   0.52505802743032137,   0.49053058069476324,   0.32612010548874609,   0.82284263165127736,   0.91229475279812899,   0.10926700118177372 },
  { 0.17939897530326249,   0.73637018883344707,   0.47133035372623039,   0.37802576381481906,   0.31279568449324985,   0.25326452063325905,   0.22574890823652444,   0.82926897315437953,   0.15431482641718902,   0.19828638205152965,   0.23865930855254297,  0.37822886905893721,   0.91479498321973207,   0.49036784684876361,   0.22683011269122272,   0.31151826410101952,   0.09786602317808706,   0.46666097606198137,   0.31944142473096709,   0.07147927446107076 },
  { 0.10066736685331849,   0.50948074370717999,   0.96645515141649030,   0.02064936524883780,   0.15602366784995808,   0.30291557208083514,   0.56066581681743743,   0.00409133460905280,   0.98611089223232129,   0.73946345509894584,   0.04522037052540022,  0.75853827767295834,   0.79338176254681647,   0.89987758570810139,   0.78267888632564064,   0.22655665083814464,   0.12773804466181798,   0.65214520060337289,   0.15357085987291136,   0.38755870822063526 },
  { 0.95080949979669493,   0.58786627892936694,   0.47847803817683948,   0.17782673748157113,   0.00456778351164804,   0.93158010304974181,   0.85115827438767122,   0.55391667800485700,   0.32618167547678095,   0.11436003029906720,   0.89969920890884725,  0.16629968081326302,   0.10041439038523108,   0.18867426189639774,   0.87848383492985538,   0.02811392752752333,   0.20243976207341546,   0.17996078580471314,   0.32486343915466415,   0.87313345335755355 },
  { 0.60914927773693517,   0.67068742524021818,   0.11648745810479348,   0.45389434366089304,   0.20484919416983133,   0.40092886851245929,   0.36457352066980381,   0.43101327559747221,   0.06565371811408853,   0.33790591141935394,   0.26166115548333341,  0.75366493771571996,   0.78742403380667825,   0.48691043543849705,   0.60133418744787248,   0.32591914137192329,   0.61629296994610083,   0.07747863015436855,   0.05976610752539772,   0.72786415902999479 },
  { 0.05929428720851175,   0.51649916666174378,   0.54144466934670965,   0.49334648383129936,   0.11204132510026492,   0.86493374727325190,   0.19244486267992283,   0.98477051422134532,   0.49553134135406324,   0.21044489923263793,   0.91996653148662244,  0.16618999414669217,   0.48926137693691091,   0.90231119823664607,   0.04402038375156007,   0.04867801840711687,   0.90720383152094053,   0.98502050797845242,   0.65429270246499482,   0.75217629419443177 },
  { 0.72889870621415009,   0.54587670766505003,   0.40423539864100838,   0.31903037865788669,   0.72338970571841033,   0.42416964345352143,   0.19305987187081847,   0.72452269054357732,   0.48093262181313928,   0.53381742540373500,   0.80172691022850473,  0.63448740617288135,   0.23755181546623411,   0.51066965669734565,   0.82006717109558858,   0.91509173142643796,   0.09719974518862466,   0.26729661279454980,   0.56910754055715107,   0.12018138202230814 },
  { 0.03811920932209638,   0.27626786648351470,   0.98574917053668831,   0.55339335286374114,   0.23334544905782212,   0.08463512872686522,   0.95088423539529254,   0.99155577419993379,   0.51405340914145592,   0.93501653016844966,   0.83286714715406307,  0.69078897941529505,   0.77724921749094489,   0.38540699593853561,   0.58339249389796199,   0.33969985456927737,   0.49144313986925409,   0.87959692331978268,   0.84449343761216900,   0.61511163063353147 },
  { 0.11333989314120511,   0.44999459468111763,   0.17051632789122600,   0.97544082961473400,   0.48437459400685262,   0.34419940422498435,   0.12349980614783089,   0.61130991779585320,   0.97384124757460011,   0.16821562301184473,   0.33978510077806096,  0.47418484731273275,   0.11176365931913405,   0.82408232654089641,   0.88260927959204261,   0.90149792510274962,   0.63119635694955067,   0.00564979060345421,   0.59958323718428452,   0.53771174793095211 },
}

as = a:get_sub({1,1,6,6})
bs = a:get_sub({1,1,6,6}):t()

r = as/bs
for i=1,1e6 do
  as:div(bs, r)
end
--[[
gmath.format = "%23.15e"

print("a =")
io.write(a:get_sub({1,1,5,5}):tostring(), '\n')
print("1/a =")
io.write(r:get_sub({1,1,5,5}):tostring(), '\n')
print("norm7 =")
print((as*r):norm())
]]