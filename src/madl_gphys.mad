--[=[
 o-----------------------------------------------------------------------------o
 |
 | Generic physics module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide useful function for physics computation.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local matrix, cvector, trace, warn, typeid                       in MAD
local is_nil, is_positive, is_table, is_matrix, is_cvector,
      wrestrict                                                  in MAD.typeid
local assertf, errorf, num2str                                   in MAD.utility
local twopi                                                      in MAD.constant
local max, abs, sqrt, sin, cos, atan2 in math

local assert, table =
      assert, table

-- helpers --------------------------------------------------------------------o

local function chkeigsiz (V, W)
  assert(is_matrix(V), "invalid argument #1 (matrix expected)")

  local nr, nc = V:sizes()
  assert(nr == 6 and nc == 6 or
         nr == 4 and nc == 4, "invalid eigenvectors (4D/6D matrix expected)")

  if W then
    assert(is_cvector(W) , "invalid argument #2 (cvector expected)")
    assert(W.nrow == nr, "invalid eigenvalues (4D/6D cvector expected)")
  end
end

-- implementation -------------------------------------------------------------o

local gphys = {

  -- tolerances
  var = {
    dpt_tol  = 1e-12,
    eig_tol  = 1e-12,
    nrm_tol  = 1e-12,
    symp_tol = 1e-12,
    ofun_tol = 1e-12,
  },

  -- default variable names (and indexes)
  vname = {
    {'x'                            , x=1                            , __n=1},
    {'x', 'y'                       , x=1,       y=2                 , __n=2},
    {'x', 'y' , 'z'                 , x=1,       y=2,       z=3      , __n=3},
    {'x', 'px', 'y', 'py'           , x=1, px=2, y=3, py=4           , __n=4},
    {'x', 'px', 'y', 'py', 'pt'     , x=1, px=2, y=3, py=4,      pt=5, __n=5},
    {'x', 'px', 'y', 'py', 't', 'pt', x=1, px=2, y=3, py=4, t=5, pt=6, __n=6},
  },

  -- optical functions names (index -> name)
  ofname = {
    'alfa11', 'beta11', 'gama11',
    'alfa22', 'beta22', 'gama22',
    'alfa33', 'beta33', 'gama33',
    'disp1' , 'disp2' , 'disp3' , 'disp4' ,
    'mu1'   , 'mu2'   , 'mu3'   ,
  },

  -- optical functions names with coupling terms (index -> name)
  ocfname = {
    'alfa11', 'beta11', 'gama11', 'alfa12', 'beta12', 'gama12', 'alfa13', 'beta13', 'gama13',
    'alfa21', 'beta21', 'gama21', 'alfa22', 'beta22', 'gama22', 'alfa23', 'beta23', 'gama23',
    'alfa31', 'beta31', 'gama31', 'alfa32', 'beta32', 'gama32', 'alfa33', 'beta33', 'gama33',
    'disp1' , 'disp2' , 'disp3' , 'disp4' ,
    'mu1'   , 'mu2'   , 'mu3'   ,
  },
}

-- variables ------------------------------------------------------------------o

function gphys.vname_dup (vn)
  local n = #vn
  local cvn = table.new(n, n+1)
  for i=1,n do cvn[i], cvn[vn[i]] = vn[i], i end
  cvn.__n = n
  return cvn
end

function gphys.vname_setki (vn)
  local n = #vn
  for i=1,n do vn[vn[i]] = i end
  vn.__n = n
  return vn
end

-- mflows ---------------------------------------------------------------------o

-- particles/damaps rank: X|R|Mset - stable - unstable - singular - lost
local mrnk = {Xset=1, Rset=1, Mset=1,
              stable=2, unstable=3, singular=4, lost=5}
gphys.mrnk = mrnk

-- compare particles/damaps by rank then id
function gphys.mcmp (ma, mb)
  local ra, rb = mrnk[ma.status], mrnk[ma.status]
  assert(ra and rb, "unknown status detected")
  return ra == rb and ma.id < mb.id or ra < rb
end

-- sort particles/damaps, adjust npar
function gphys.msort (mflw, cmp_)
  assert(typeid.is_dynmflow(mflw), "invalid argument #1 (dynamic mflow expected)")

  table.sort(mflw, cmp_ or gphys.mcmp)

  mflw.npar = #mflw
  for i=1,mflw.npar do
    if mrnk[mflw[i].status] > mrnk.stable then mflw.npar=i-1 break end
  end
  return mflw
end

-- checkers -------------------------------------------------------------------o

-- check if system is eigen using eigtol tolerance
-- check R*Vi = Wi*Vi

function gphys.is_eigsys (V, W, R, eigtol_)
  local tol = eigtol_ or gphys.var.eig_tol
  chkeigsiz(V, W) ; chkeigsiz(R, W)
  assert(is_positive(tol), "invalid argument #4 (positive number expected)")
  local cvec, getc = R.complex, R.getcol

--  print("checking eigen system")
--  R:print('R'); W:print('W'); V:print('V')

  for i=1,#W-1,2 do
    local dW = W[i]-W[i+1]:conj()
    if not dW:eq(0, tol) then
      warn("invalid eigenvalues #%d (conjugate pair deviates by %s)",
           i, num2str(dW:abs()))
      return false
    end

    local Vi = cvec(getc(V,i), getc(V,i+1))
    local Vc = Vi:conj()
    local dV1, dV2 = R*Vi-W[i]*Vi, R*Vc-W[i+1]*Vc
    if not (dV1:eq(0, tol) and dV2:eq(0, tol)) then
      warn("invalid eigen system #%d (R*V%d deviates from W%d*V%d by %s)",
           i, i ,i, i, num2str(max(dV1:norm(),dV2:norm())))
      return false
    end
  end

  return true
end

-- check one-turn map normalisation
-- check that N = (1/A * R * A) = Abar * R * A contains only rotations

function gphys.is_normal (A, R, nrmtol_)
  local tol = nrmtol_ or gphys.var.nrm_tol
  local get, set = A.get, A.set

  local N = (A:bar() * R * A) -- :print("N = Abar R A ")

  for i = 1,N.nrow-1,2 do
    local a1 = atan2( get(N,i,i+1), get(N,i  ,i  ))
    local a2 = atan2(-get(N,i+1,i), get(N,i+1,i+1))
    if abs(a1-a2) > tol then
      warn("invalid normal form #%d (deviates from a pure rotation by %s)",
           i, num2str(a1-a2))
      return false
    end
    N:setsub(i..i+1, i..i+1, 0)
  end
  if not N:eq(0, tol) then
    warn("invalid normal form N (contains coupling terms)")
    R:print('R') ; N:print('N')
    return false
  end

  return true
end

-- check for delta pt in one-turn map using dptol tolerance

function gphys.has_dpt (R, dptol_)
  local tol = dptol_ or gphys.var.dpt_tol
  assert(is_matrix(R)    , "invalid argument #1 (matrix expected)")
  assert(is_positive(tol), "invalid argument #2 (positive number expected)")

  local nr, nc = R:sizes()
  assert(nr >= 6 and nc >= 6, "invalid one-turn map (6D+ matrix expected)")

  local get = R.get
  local nodp = abs(get(R,6,6) - 1) <= tol

  for i=1,5 do
    nodp = nodp and abs(get(R,6,i)) <= tol
  end

  return not nodp
end

-- helpers --------------------------------------------------------------------o

-- conversion between momentum and energy deviation
-- dp = (P-P0)/P0, pt = (E-E0)/P0c
-- (1+dp)^2 = 1 + 2pt/beta + pt^2

function gphys.dp2pt (dp, beta)
  local _beta = 1/beta
  return dp ~= 0 and sqrt((1+dp)^2 + (_beta^2-1)) - _beta or 0
end

function gphys.pt2dp (pt, beta)
  return pt ~= 0 and sqrt(1 + 2*pt/beta + pt^2) - 1 or 0
end

-- retrieve eigenvalues from pairs of eigenvectors

function gphys.get_eigval (V, R, W)
  local nr = V.nrow

  W = W or cvector(nr)

  local cvec, getc = A.complex, A.getcol
  local v1 = cvec(getc(A,1), getc(A,2))
  local v2 = cvec(getc(A,3), getc(A,4))

    -- get eigenvalue Wi from R*Vi = Wi*Vi
  W[1] = get(R,1,1) + get(R,1,2)*get(v1,2,1)/get(v1,1,1)
  W[2] = W[1]:conj()
  W[3] = get(R,3,3) + get(R,3,4)*get(v2,4,1)/get(v2,3,1)
  W[4] = W[3]:conj()

  if nr >= 6 then
    local v3 = cvec(getc(A,5), getc(A,6))
    W[5] = get(R,5,5) + get(R,5,6)*get(v3,6,1)/get(v3,5,1)
    W[6] = W[5]:conj()
  end
  -- W:print('W')

  return W
end

-- symplectification ----------------------------------------------------------o

-- symplectifiy one-turn map R
-- Algorithm described in the doctoral thesis of Liam Healey.

function gphys.makesymp (R)
  chkeigsiz(R)

  local n, rnk, err = max(R:sizes())
  local I, A, V = R:same():eye()

  V, rnk = (I-R):div(I+R)
  if rnk == n then
    A = (V:bar()-V)/2
    V, rnk = (I+A):div(I-A)
    if rnk == n then R:copy(V) end
  end

  if rnk < n then
    warn("symplectification failed (singular matrix, left unchanged).")
  else
    trace(0, "symplectified deviation: %s", num2str(R:symperr()))
  end

  return R
end

-- normalization --------------------------------------------------------------o

-- order in place eigenvectors and eigenvvalues by planes (x,px), (y,py) and
-- (t,pt)

function gphys.order_eigen (V, W)
  chkeigsiz(V, W)

  local get, n = V.get, V.nrow

  for i=1,n-3,2 do
    local mv, k = 0

    for j=i,n-1,2 do
      local pv = get(V,i,j  )^2 + get(V,i+1,j  )^2 + -- real part
                 get(V,i,j+1)^2 + get(V,i+1,j+1)^2   -- imag part
      if pv > mv then mv, k = pv, j end
    end

    if i ~= k then
      -- swap eigenvectors pairs (i,i+1) with (k,k+1)
      local col = {1,2,3,4}
      col[i], col[i+1] = k, k+1
      V:swpcol(col)
      -- swap eigenvalues pairs (i,i+1) with (k,k+1)
      W[i], W[i+1], W[k], W[k+1] = W[k], W[k+1], W[i], W[i+1]
    end
  end

--  print("ordered eigen system")
--  W:print('W')
--  V:print('V')
  return V
end

-- normalize in place eigenvectors such that [x,px]=1, [y,py]=1 and [t,pt]=1

function gphys.norm_eigen (V, W)
  chkeigsiz(V, W)

  local get, n = V.get, V.nrow

  for i=1,n-1,2 do
    local pb = 0 -- poisson bracket
    for j = 1,n-1,2 do
      pb = pb + get(V,i,j) * get(V,i+1,j+1) - get(V,i,j+1) * get(V,i+1,j)
    end
    local spb = sqrt(abs(pb))
    if pb < 0 then -- swap eigenvalues
       W[i], W[i+1] = W[i+1], W[i]
    end
    for j=1,n do -- normalize plane
      V:set(i  ,j,  get(V,i  ,j) /  spb      )
      V:set(i+1,j,  get(V,i+1,j) * (spb / pb))
    end
  end

--  print("normalized eigen system")
--  W:print('W')
--  V:print('V')
  return V
end

-- rephase in place the eigenvectors such that V(1,2)=0 and mu1>0, V(3,4)=0 and
-- mu2>0 (and V(5,6)=0 and mu3>0)

function gphys.phas_eigen (V)
  chkeigsiz(V)

  local get, set = V.get, V.set
  local P = matrix(V.nrow):eye()

  local dx = sqrt(get(V,1,1)^2 + get(V,1,2)^2)
  set(P,1,1,  get(V,1,1) / dx )
  set(P,2,1,  get(V,1,2) / dx )
  set(P,1,2, -get(P,2,1) )
  set(P,2,2,  get(P,1,1) )

  local dy = sqrt(get(V,3,3)^2 + get(V,3,4)^2)
  set(P,3,3,  get(V,3,3) / dy )
  set(P,4,3,  get(V,3,4) / dy )
  set(P,3,4, -get(P,4,3) )
  set(P,4,4,  get(P,3,3) )

  if V.nrow == 6 then
    local dp = sqrt(get(V,5,5)^2 + get(V,5,6)^2)
    set(P,5,5,  get(V,5,5) / dp )
    set(P,6,5,  get(V,5,6) / dp )
    set(P,5,6, -get(P,6,5) )
    set(P,6,6,  get(P,5,5) )
  end

  V:mul(P,V) -- V = P*V

--  print("rephased eigen vectors")
--  V:print('V')
  return V
end

-- get linear normal form A of one-turn map R

function gphys.normal (R, nocheck_)
  chkeigsiz(R)

  local serr, Rerr = R:symperr(R:same())
  if serr > gphys.var.symp_tol then
    trace(0, "symplectic deviation: %s", num2str(serr))
    R:print('R') ; Rerr:print("R'JR-J") ;
    gphys.makesymp(R)
    serr, Rerr = R:symperr(Rerr)
    R:print('R') ; Rerr:print("R'JR-J") ;
  end

  -- get eigenvalues (W) and (right) eigenvectors (V) of R
  local W, _, V, info = R:eigen()

  -- check that system is eigen
  assert(nocheck_ == true or gphys.is_eigsys(V, W, R))

  -- reuse matrix returned for left eigenvectors
  local A = V:copy()

  -- normalize eigen system
  gphys.norm_eigen(A, W)

  -- order eigenvalues and eigenvectors by planes
  gphys.order_eigen(A, W)

  -- rephase eigen vectors
  gphys.phas_eigen(A)

  -- check that system is a normal form
  assert(nocheck_ == true or gphys.is_normal(A, R))

  return A, V, W, info
end

-- optical functions ----------------------------------------------------------o

local _id = {} -- identity

local function oval (x, tol)
  return abs(x) <= tol and 0 or x
end

-- identification

local function is_optfun (a)
  return type(a) == "table" and a.__ofun == _id
end

-- get phase advance from eigenvalues

function gphys.phasadv (W, optfun)
  local fun = optfun
  local tol = gphys.var.ofun_tol

  assert(is_cvector(W) , "invalid argument #1 (eigenvalues expected)")
  assert(is_optfun(fun), "invalid argument #2 (optfun expected)")

  local rk6 = W.nrow >= 6

  fun.mu1 =         oval( W[1]:carg() / twopi, tol)
  fun.mu2 =         oval( W[3]:carg() / twopi, tol)
  fun.mu3 = rk6 and oval( W[5]:carg() / twopi, tol) or 0

  if         fun.mu1 < 0 then fun.mu1 = 1+fun.mu1 end
  if         fun.mu2 < 0 then fun.mu2 = 1+fun.mu2 end
  if rk6 and fun.mu3 < 0 then fun.mu3 =  -fun.mu3 end

  return fun
end

-- get linear optical functions from normal form
-- this routine has to be fast and must match ofname list (see above)

function gphys.optfun (A, optfun_, optcpl_)
  chkeigsiz(A)

  local get = A.get
  local rk6 = A.nrow >= 6
  local fun = optfun_
  local tol = gphys.var.ofun_tol

  if fun then
    assert(is_optfun(fun), "invalid argument #2 (optfun expected)")
    table.clear(fun)
  else
    fun = table.new(0, 35)
  end
  fun.__ofun = _id

  -- options

  fun.rank = A.nrow
  fun.ocpl = optcpl_

  -- alpha, beta and gamma

  fun.alfa11 = oval( -(get(A,1,1) * get(A,2,1) + get(A,1,2) * get(A,2,2)), tol)
  fun.beta11 = oval(   get(A,1,1)^2            + get(A,1,2)^2            , tol)
  fun.gama11 = oval(   get(A,2,1)^2            + get(A,2,2)^2            , tol)

  fun.alfa22 = oval( -(get(A,3,3) * get(A,4,3) + get(A,3,4) * get(A,4,4)), tol)
  fun.beta22 = oval(   get(A,3,3)^2            + get(A,3,4)^2            , tol)
  fun.gama22 = oval(   get(A,4,3)^2            + get(A,4,4)^2            , tol)

  if optcpl_ then
    fun.alfa12 = oval( -(get(A,1,3) * get(A,2,3) + get(A,1,4) * get(A,2,4)), tol)
    fun.beta12 = oval(   get(A,1,3)^2            + get(A,1,4)^2            , tol)
    fun.gama12 = oval(   get(A,2,3)^2            + get(A,2,4)^2            , tol)

    fun.alfa21 = oval( -(get(A,3,1) * get(A,4,1) + get(A,3,2) * get(A,4,2)), tol)
    fun.beta21 = oval(   get(A,3,1)^2            + get(A,3,2)^2            , tol)
    fun.gama21 = oval(   get(A,4,1)^2            + get(A,4,2)^2            , tol)
  end

  if rk6 then
    fun.alfa33 = oval( -(get(A,5,5) * get(A,6,5) + get(A,5,6) * get(A,6,6)), tol)
    fun.beta33 = oval(   get(A,5,5)^2            + get(A,5,6)^2            , tol)
    fun.gama33 = oval(   get(A,6,5)^2            + get(A,6,6)^2            , tol)

    if optcpl_ then
      fun.alfa13 = oval( -(get(A,1,5) * get(A,2,5) + get(A,1,6) * get(A,2,6)), tol)
      fun.beta13 = oval(   get(A,1,5)^2            + get(A,1,6)^2            , tol)
      fun.gama13 = oval(   get(A,2,5)^2            + get(A,2,6)^2            , tol)

      fun.alfa23 = oval( -(get(A,3,5) * get(A,4,5) + get(A,3,6) * get(A,4,6)), tol)
      fun.beta23 = oval(   get(A,3,5)^2            + get(A,3,6)^2            , tol)
      fun.gama23 = oval(   get(A,4,5)^2            + get(A,4,6)^2            , tol)

      fun.alfa31 = oval( -(get(A,5,1) * get(A,6,1) + get(A,5,2) * get(A,6,2)), tol)
      fun.beta31 = oval(   get(A,5,1)^2            + get(A,5,2)^2            , tol)
      fun.gama31 = oval(   get(A,6,1)^2            + get(A,6,2)^2            , tol)

      fun.alfa32 = oval( -(get(A,5,3) * get(A,6,3) + get(A,5,4) * get(A,6,4)), tol)
      fun.beta32 = oval(   get(A,5,3)^2            + get(A,5,4)^2            , tol)
      fun.gama32 = oval(   get(A,6,3)^2            + get(A,6,4)^2            , tol)
    end
  else
    fun.alfa33, fun.beta33, fun.gama33 = 0, 0, 0
  end

  -- dispersion (5D)

  if rk6 then
    -- TODO: true 6D using Chao's method
    fun.disp1, fun.disp2 = oval( get(A,1,6), tol), oval( get(A,2,6), tol)
    fun.disp3, fun.disp4 = oval( get(A,3,6), tol), oval( get(A,4,6), tol)
  else
    fun.disp1, fun.disp2 = 0, 0
    fun.disp3, fun.disp4 = 0, 0
  end

  -- phase advance

  fun.mu1 =         oval( atan2(get(A,1,2), get(A,1,1)) / twopi, tol)
  fun.mu2 =         oval( atan2(get(A,3,4), get(A,3,3)) / twopi, tol)
  fun.mu3 = rk6 and oval( atan2(get(A,5,6), get(A,5,5)) / twopi, tol) or 0

  if fun.mu1 < 0 then fun.mu1 = 1+fun.mu1 end
  if fun.mu2 < 0 then fun.mu2 = 1+fun.mu2 end
  if fun.mu3 < 0 then fun.mu3 =  -fun.mu3 end

  return fun
end

-- beta block -----------------------------------------------------------------o

local S6 = matrix(6):symp() -- [6x6] symplectic matrix S

function gphys.betablk (optfun)
  local fun = optfun
  assert(is_optfun(fun), "invalid argument #1 (optfun expected)")

  local A11 = sqrt(fun.beta11)
  local A12 = 0
  local A21 = -fun.alfa11 / A11
  local A22 = sqrt(fun.gama11 - A21^2)
  local A16 = fun.disp1 or 0
  local A26 = fun.disp2 or 0

  local A33 = sqrt(fun.beta22)
  local A34 = 0
  local A43 = -fun.alfa22 / A33
  local A44 = sqrt(fun.gama22 - A43^2)
  local A36 = fun.disp3 or 0
  local A46 = fun.disp4 or 0

  local A55, A56, A65, A66 = 0, 0, 0, 0

  if fun.rank >= 6 then
    A55 = sqrt(fun.beta33)
    A56 = 0
    A65 = -fun.alfa33 / A55
    A66 = sqrt(fun.gama33 - A65^2)
  end

  -- TODO: coupling terms

  local A = matrix(6):fill {
      A11, A12,   0,   0,   0, A16,
      A21, A22,   0,   0,   0, A26,
        0,   0, A33, A34,   0, A36,
        0,   0, A43, A44,   0, A46,
        0,   0,   0,   0, A55, A56,
        0,   0,   0,   0, A65, A66,
    }

  local R = A*S6*A:bar()
  if fun.rank < 6 then
    R:set(5,5,1) ; R:set(6,6,1)
  end

  return R, A
end

-- env ------------------------------------------------------------------------o

gphys.is_optfun  = is_optfun
gphys.is_betablk = is_optfun

MAD.typeid.is_optfun  = is_optfun
MAD.typeid.is_betablk = is_optfun

gphys = wrestrict(setmetatable(gphys, {__tostring := "MAD.gphys"}))

-- end ------------------------------------------------------------------------o
return { gphys = gphys }
