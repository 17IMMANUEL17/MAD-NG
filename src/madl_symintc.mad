--[=[
 o-----------------------------------------------------------------------------o
 |
 | Symplectic integrators SABAC
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Extend the symint module with Laskar integrators.

 o-----------------------------------------------------------------------------o
]=]

local M = {}

local max         in math
local is_number   in MAD.typeid

-- helper ---------------------------------------------------------------------o

local get_slc = MAD.symint.get_slicing

-- Laskar integrators ---------------------------------------------------------o

-- [Laskar01] table 1 p.48 (col.1, drift) and (col.2, kick)
--            table 2 p.56 (col.1, corrector)

local sabac2_d  = { 0.211324865405187117745425609749021272,
                    0.577350269189625764509148780501957456, }
local sabac2_k  = { 1/2,                                    }
local sabac2_c  = { 0.011164549684630112769689735770588651, }

local sabac3_d  = { 0.112701665379258311482073460021760039,
                    0.387298334620741688517926539978239961, }
local sabac3_k  = { 5/18, 4/9,                              }
local sabac3_c  = { 0.005634593363122809402267823769797539, }

local sabac4_d  = { 0.069431844202973712388026755553595248,
                    0.260577634004598155210640364894782409,
                    0.339981043584856264802665759103244687, }
local sabac4_k  = { 0.173927422568726928686531974610999704,
                    0.326072577431273071313468025389000296, }
local sabac4_c  = { 0.003396775048208601331532157783492144, }

local sabac5_d  = { 0.046910077030668003601186560850303517,
                    0.183855267916490450880656228799592080,
                    0.269234655052841545518157210350104403, }
local sabac5_k  = { 0.118463442528094543757132020359958681,
                    0.239314335249683234020645757417819097,
                    0.284444444444444444444444444444444444, }
local sabac5_c  = { 0.002270543121419264819434955050039130, }

local sabac6_d  = { 0.033765242898423986093849222753002695,
                    0.135630063868443757075450979737044631,
                    0.211295100191533802515448936669596706,
                    0.238619186083196908630501721680711935, }
local sabac6_k  = { 0.085662246189585172520148071086366447,
                    0.180380786524069303784916756918858056,
                    0.233956967286345523694935171994775497, }
local sabac6_c  = { 0.001624459841624282521452258512463608, }

local sabac7_d  = { 0.025446043828620737736905157976074369,
                    0.103788363371682042331162455383531428,
                    0.167843017110998636478629180601913472,
                    0.202922575688698583453303206038480732, }
local sabac7_k  = { 0.064742483084434846635305716339541009,
                    0.139852695744638333950733885711889791,
                    0.190915025252559472475184887744487567,
                    0.208979591836734693877551020408163265, }
local sabac7_c  = { 0.001219643912760418472579211822331645, }

local sabac8_d  = { 0.019855071751231884158219565715263505,
                    0.081811689541954746046003466046821277,
                    0.135567033748648876886907443643292044,
                    0.171048883710339590439131453414531184,
                    0.183434642495649804939476142360183981, }
local sabac8_k  = { 0.050614268145188129576265677154981095,
                    0.111190517226687235272177997213120442,
                    0.156853322938943643668981100993300657,
                    0.181341891689180991482575224638597810, }
local sabac8_c  = { 0.000949308177745602234792177503535054, }

local sabac9_d  = { 0.015919880246186955082211898548163565,
                    0.066064566090495147768073207416968997,
                    0.111329837313022698495363874364130346,
                    0.144559004648390734135082012349068788,
                    0.162126711701904464519269007321668304, }
local sabac9_k  = { 0.040637194180787205985946079055261825,
                    0.090324080347428702029236015621456405,
                    0.130305348201467731159371434709316425,
                    0.156173538520001420034315203292221833,
                    0.165119677500629881582262534643487025, }
local sabac9_c  = { 0.000759846022860436646358196674176815, }

local sabac10_d = { 0.013046735741414139961017993957773973,
                    0.054421580914093604672933661830479502,
                    0.092826899194980052248884661654309736,
                    0.123007087084888607717530710974544707,
                    0.142260527573807989957219971018032089,
                    0.148874338981631210884826001129719985, }
local sabac10_k = { 0.033335672154344068796784404946665896,
                    0.074725674575290296572888169828848666,
                    0.109543181257991021997767467114081596,
                    0.134633359654998177545613460784734677,
                    0.147762112357376435086946497325669165, }
local sabac10_c = { 0.000621934331486166426497049845358646, }

-- [Laskar01]
function M.sabac2 (elm, mflw, lw, thick, kick, corr) -- 4th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(2 kicks + 3 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac2_c[1])
    thick(elm, mflw, lwi * sabac2_d[1])
     kick(elm, mflw, lwi * sabac2_k[1])
    thick(elm, mflw, lwi * sabac2_d[2]) -- middle
     kick(elm, mflw, lwi * sabac2_k[1])
    thick(elm, mflw, lwi * sabac2_d[1])
     corr(elm, mflw, lwi , sabac2_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Laskar01]
function M.sabac3 (elm, mflw, lw, thick, kick, corr) -- 5th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(3 kicks + 4 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac3_c[1])
    thick(elm, mflw, lwi * sabac3_d[1])
     kick(elm, mflw, lwi * sabac3_k[1])
    thick(elm, mflw, lwi * sabac3_d[2])
     kick(elm, mflw, lwi * sabac3_k[2]) -- middle
    thick(elm, mflw, lwi * sabac3_d[2])
     kick(elm, mflw, lwi * sabac3_k[1])
    thick(elm, mflw, lwi * sabac3_d[1])
     corr(elm, mflw, lwi , sabac3_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Laskar01]
function M.sabac4 (elm, mflw, lw, thick, kick, corr) -- 6th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(4 kicks + 5 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac4_c[1])
    thick(elm, mflw, lwi * sabac4_d[1])
     kick(elm, mflw, lwi * sabac4_k[1])
    thick(elm, mflw, lwi * sabac4_d[2])
     kick(elm, mflw, lwi * sabac4_k[2])
    thick(elm, mflw, lwi * sabac4_d[3]) -- middle
     kick(elm, mflw, lwi * sabac4_k[2])
    thick(elm, mflw, lwi * sabac4_d[2])
     kick(elm, mflw, lwi * sabac4_k[1])
    thick(elm, mflw, lwi * sabac4_d[1])
     corr(elm, mflw, lwi , sabac4_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Laskar01]
function M.sabac5 (elm, mflw, lw, thick, kick, corr) -- 7th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(5 kicks + 6 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac5_c[1])
    thick(elm, mflw, lwi * sabac5_d[1])
     kick(elm, mflw, lwi * sabac5_k[1])
    thick(elm, mflw, lwi * sabac5_d[2])
     kick(elm, mflw, lwi * sabac5_k[2])
    thick(elm, mflw, lwi * sabac5_d[3])
     kick(elm, mflw, lwi * sabac5_k[3]) -- middle
    thick(elm, mflw, lwi * sabac5_d[3])
     kick(elm, mflw, lwi * sabac5_k[2])
    thick(elm, mflw, lwi * sabac5_d[2])
     kick(elm, mflw, lwi * sabac5_k[1])
    thick(elm, mflw, lwi * sabac5_d[1])
     corr(elm, mflw, lwi , sabac5_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Laskar01]
function M.sabac6 (elm, mflw, lw, thick, kick, corr) -- 8th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(6 kicks + 7 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac6_c[1])
    thick(elm, mflw, lwi * sabac6_d[1])
     kick(elm, mflw, lwi * sabac6_k[1])
    thick(elm, mflw, lwi * sabac6_d[2])
     kick(elm, mflw, lwi * sabac6_k[2])
    thick(elm, mflw, lwi * sabac6_d[3])
     kick(elm, mflw, lwi * sabac6_k[3])
    thick(elm, mflw, lwi * sabac6_d[4]) -- middle
     kick(elm, mflw, lwi * sabac6_k[3])
    thick(elm, mflw, lwi * sabac6_d[3])
     kick(elm, mflw, lwi * sabac6_k[2])
    thick(elm, mflw, lwi * sabac6_d[2])
     kick(elm, mflw, lwi * sabac6_k[1])
    thick(elm, mflw, lwi * sabac6_d[1])
     corr(elm, mflw, lwi , sabac6_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Laskar01]
function M.sabac7 (elm, mflw, lw, thick, kick, corr) -- 9th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(7 kicks + 8 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac7_c[1])
    thick(elm, mflw, lwi * sabac7_d[1])
     kick(elm, mflw, lwi * sabac7_k[1])
    thick(elm, mflw, lwi * sabac7_d[2])
     kick(elm, mflw, lwi * sabac7_k[2])
    thick(elm, mflw, lwi * sabac7_d[3])
     kick(elm, mflw, lwi * sabac7_k[3])
    thick(elm, mflw, lwi * sabac7_d[4])
     kick(elm, mflw, lwi * sabac7_k[4]) -- middle
    thick(elm, mflw, lwi * sabac7_d[4])
     kick(elm, mflw, lwi * sabac7_k[3])
    thick(elm, mflw, lwi * sabac7_d[3])
     kick(elm, mflw, lwi * sabac7_k[2])
    thick(elm, mflw, lwi * sabac7_d[2])
     kick(elm, mflw, lwi * sabac7_k[1])
    thick(elm, mflw, lwi * sabac7_d[1])
     corr(elm, mflw, lwi , sabac7_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Laskar01]
function M.sabac8 (elm, mflw, lw, thick, kick, corr) -- 10th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(8 kicks + 9 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac8_c[1])
    thick(elm, mflw, lwi * sabac8_d[1])
     kick(elm, mflw, lwi * sabac8_k[1])
    thick(elm, mflw, lwi * sabac8_d[2])
     kick(elm, mflw, lwi * sabac8_k[2])
    thick(elm, mflw, lwi * sabac8_d[3])
     kick(elm, mflw, lwi * sabac8_k[3])
    thick(elm, mflw, lwi * sabac8_d[4])
     kick(elm, mflw, lwi * sabac8_k[4])
    thick(elm, mflw, lwi * sabac8_d[5]) -- middle
     kick(elm, mflw, lwi * sabac8_k[4])
    thick(elm, mflw, lwi * sabac8_d[4])
     kick(elm, mflw, lwi * sabac8_k[3])
    thick(elm, mflw, lwi * sabac8_d[3])
     kick(elm, mflw, lwi * sabac8_k[2])
    thick(elm, mflw, lwi * sabac8_d[2])
     kick(elm, mflw, lwi * sabac8_k[1])
    thick(elm, mflw, lwi * sabac8_d[1])
     corr(elm, mflw, lwi , sabac8_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Laskar01]
function M.sabac9 (elm, mflw, lw, thick, kick, corr) -- 11th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(9 kicks + 10 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac9_c[1])
    thick(elm, mflw, lwi * sabac9_d[1])
     kick(elm, mflw, lwi * sabac9_k[1])
    thick(elm, mflw, lwi * sabac9_d[2])
     kick(elm, mflw, lwi * sabac9_k[2])
    thick(elm, mflw, lwi * sabac9_d[3])
     kick(elm, mflw, lwi * sabac9_k[3])
    thick(elm, mflw, lwi * sabac9_d[4])
     kick(elm, mflw, lwi * sabac9_k[4])
    thick(elm, mflw, lwi * sabac9_d[5])
     kick(elm, mflw, lwi * sabac9_k[5]) -- middle
    thick(elm, mflw, lwi * sabac9_d[5])
     kick(elm, mflw, lwi * sabac9_k[4])
    thick(elm, mflw, lwi * sabac9_d[4])
     kick(elm, mflw, lwi * sabac9_k[3])
    thick(elm, mflw, lwi * sabac9_d[3])
     kick(elm, mflw, lwi * sabac9_k[2])
    thick(elm, mflw, lwi * sabac9_d[2])
     kick(elm, mflw, lwi * sabac9_k[1])
    thick(elm, mflw, lwi * sabac9_d[1])
     corr(elm, mflw, lwi , sabac9_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- [Laskar01]
function M.sabac10 (elm, mflw, lw, thick, kick, corr) -- 12th order
  local nsl, lwn, slc, sln, dir = get_slc(elm, mflw, lw)
  local fsl = mflw.atslice

  -- nsl*(10 kicks + 11 thicks + 2 corrs)
      fsl(elm, mflw, 0, 0)
  for i=1,nsl do
    local lwi = lwn or lw*slc[sln+i*dir]
     corr(elm, mflw, lwi , sabac10_c[1])
    thick(elm, mflw, lwi * sabac10_d[1])
     kick(elm, mflw, lwi * sabac10_k[1])
    thick(elm, mflw, lwi * sabac10_d[2])
     kick(elm, mflw, lwi * sabac10_k[2])
    thick(elm, mflw, lwi * sabac10_d[3])
     kick(elm, mflw, lwi * sabac10_k[3])
    thick(elm, mflw, lwi * sabac10_d[4])
     kick(elm, mflw, lwi * sabac10_k[4])
    thick(elm, mflw, lwi * sabac10_d[5])
     kick(elm, mflw, lwi * sabac10_k[5])
    thick(elm, mflw, lwi * sabac10_d[6]) -- middle
     kick(elm, mflw, lwi * sabac10_k[5])
    thick(elm, mflw, lwi * sabac10_d[5])
     kick(elm, mflw, lwi * sabac10_k[4])
    thick(elm, mflw, lwi * sabac10_d[4])
     kick(elm, mflw, lwi * sabac10_k[3])
    thick(elm, mflw, lwi * sabac10_d[3])
     kick(elm, mflw, lwi * sabac10_k[2])
    thick(elm, mflw, lwi * sabac10_d[2])
     kick(elm, mflw, lwi * sabac10_k[1])
    thick(elm, mflw, lwi * sabac10_d[1])
     corr(elm, mflw, lwi , sabac10_c[1])
      fsl(elm, mflw, lwi , i)
  end
end

-- end ------------------------------------------------------------------------o
return { symintc = M }
