local dat = require 'madl_plotdat2'
local is_nil, is_number, is_table, is_mtable, is_string,
  is_sequence                                                 in MAD.typeid
local Command, fun, vector                                    in MAD
local strinterp, fileexists                                   in MAD.utility
local sign, tan                                               in MAD.gmath

-- Utility --------------------------------------------------------------------o

local ffi = require("ffi")

ffi.cdef[[
void Sleep(int ms);
int poll(struct pollfd *fds, unsigned long nfds, int timeout);
]]

local sleep
if ffi.os == "Windows" then sleep = \s -> ffi.C.Sleep(s)
else                        sleep = \s -> ffi.C.poll(nil, 0, s)
end

local function lock_file (fname, time, timeout)
  local waited = 0
  local lock   = fname .. ".lock"
  while fileexists(lock) do
    sleep(time)
    waited = waited + time
    if waited > timeout then
      os.remove(lock)
      error("lock file \"" .. lock .. "\" prevent us from proceeding")
    end
  end
  io.open(lock, "w"):close()
end

local unlock_file = \fname -> os.remove(fname .. ".lock")

MAD.utility.sleep       = sleep
MAD.utility.lock_file   = lock_file
MAD.utility.unlock_file = unlock_file

local function px2per (param, px, py)
  local x = is_nil(px) and 0 or px/param.wsizex
  local y = is_nil(py) and 0 or py/param.wsizey
  if is_nil(px) and is_nil(py) then return
  elseif is_nil(px)            then return y
  elseif is_nil(py)            then return x
  else                              return x, y
  end
end

-- global default -------------------------------------------------------------o

local _dflt = {
  color     = 'red',
  style     = 'linespoints',
  dashtype  = 'solid',
  linewidth = 1,
  pointsize = 1,
  pointtype = 1,
  filename  = "plot.pdf",
  scrdump   = "plot.gp",
  originx     = 0,
  originy     = 0,
}

-- used to position the layout (e.g. top, bottom, etc...)
local layout_pos = {
  top    = { origin = 0.9, psizey = 0.85 },
  middle = { origin = 0.5,               },
  bottom = { origin = 0.1, psizey = 0.85 },
}

-- GC -------------------------------------------------------------------------o

local gcf = {}

local plotgc = ffi.gc(ffi.new("int*"), \ =>
    for i=1,#gcf do
      os.remove(gcf[i])
    end
  end
)

local function gc_file(fname, lock)
  table.insert(gcf, fname)
  if lock then table.insert(gcf, fname .. ".lock") end
  return fname
end

-- gplot ----------------------------------------------------------------------o

local _gpd, _tmpf = {}, {}

local function gp_create (gplot, id)
  local gnuplot = assert(io.popen('gnuplot', 'w'))
  gplot[_gpd ][id] = gnuplot
  gplot[_tmpf][id] = gc_file(os.tmpname(), true)
  return gnuplot
end

local function gp_isBusy (gplot, id)
  return fileexists(gplot[_tmpf][id] .. ".lock")
end

local function gp_get (gplot, id, curr)
  local dat = gplot[_gpd]
  if is_nil( dat[id] )             then gp_create( gplot, id ) end
  if id ~= '__cur_id' and not curr then dat.__cur_id = id      end
  return dat[id]
end

local function gp_getlock (gplot, id)
  local gnuplot = gp_get(gplot, id, true)
  local file    = gplot[_tmpf][id]
  return gnuplot, file
end

local function gp_call (gplot, id, ...)
  local gnuplot
  if is_number(id) then
    gnuplot = gp_get(gplot, id)
    gnuplot:write(...)
  else
    gnuplot = gp_get(gplot, gplot.__cur_id)
    gnuplot:write(id, ...)
  end
  gnuplot:flush()
end

local gplot = {
  is_busy = gp_isBusy,
  [{}]    = plotgc,
  [_tmpf] = { },
  [_gpd]  = { __cur_id = 1 },
}

setmetatable(gplot, {
  __index = gp_get,
  __call  = gp_call,
})

-- initialization -------------------------------------------------------------o

local init_cmd = [[
#== initialization =============================================================
if (!(exist("MAD_MIN") && exist("MAD_MAX"))) {
  MAD_MIN = $oshft;
  MAD_MAX = -1;
}
MAD_RESET_OBJECT = "unset for [i=MAD_MIN:MAD_MAX] object i"
if (!(exist("MAD_OLD_TERM") && exist("MAD_NEW_TERM"))) {
  MAD_OLD_TERM = "";
  MAD_NEW_TERM = "";
}
MAD_SET_TERM = "if (!(MAD_OLD_TERM eq MAD_NEW_TERM)) { \
  @MAD_NEW_TERM; \
  MAD_OLD_TERM = MAD_NEW_TERM; \
}"
#===============================================================================

]]

-- open files and gnuplot and set terminal when necessary
local function setup_cmd (self)
  local output, scrdump in self
  local gp, streamf = gp_getlock(gplot,self.sid)
  local file, fname

  if scrdump then
    fname = is_string(scrdump) and scrdump or _dflt.scrdump
    gc_file(fname .. ".lock")
  else
    fname = streamf
  end
  lock_file(streamf, 100, 4000)
  file = io.open(fname, "w")

  file:write(init_cmd % self)

  if is_number(output) then
    file:write("MAD_NEW_TERM = \"set term $term $output size $wsizex,$wsizey \z
      enhanced font '$font,$fontsize'\"\n" % self)
  elseif output then
    local filename = is_string(output) and output or _dflt.filename
    file:write("MAD_NEW_TERM = \"set term pdfcairo; set out '"
      .. filename .. "'\"\n")
  end

  file:write("@MAD_SET_TERM\n")

  return gp, file, streamf, fname
end

local function gnuplot_rm(gp, fname)
  if jit.os == "Windows" then gp:write("system 'del "  ..fname.." >nul 2>&1'\n")
  else                        gp:write("system '\\rm -f "..fname.."'\n")
  end
end

local function teardown_cmd (self, gp, file, streamf, fname)
  file:close()
  gp:write("load('" .. fname .. "')\n")
  if not self.scrdump then gnuplot_rm(gp, streamf) end
  gnuplot_rm(gp, streamf .. ".lock")
  gp:flush()
end

-- layout ---------------------------------------------------------------------o

-- flag for multi_layout
local flg = MAD.element.flags.sel_angle

local xadjust = \xs,l,x -> xs*l + x
local yadjust = \size   -> \ys,y -> size*ys + y

-- return the shape of an element in x and y
local function eShap (elem, dir)
  local shape = dat[elem.kind]
  local el, dash, sh = shape.ellipse, shape.dashtype, shape.shape

  sh = sh and elem.l == 0 and elem.kind ~= "marker" and dat.default.shape or sh
  -- if only a circle
  if not is_table(sh) then return el, dash end

  local ysym, yscl, func = shape.ysym, (shape.yscl or 1), nil
  local yshft = shape.yshft and sign(elem[shape.yshft]) or 0
  if is_number(ysym) then -- for symmetric shapes
    func = {
      \y -> ((   y + yshft)*yscl),
      \y -> ((-1*y + yshft)*yscl),
    }
  else
    local fv = sign(elem[ysym] or 1)
    ysym = (ysym == "angle") and fv*dir or fv
    func = {\y -> ((ysym*y + yshft)*yscl) }
  end
  return el, dash, sh.x, sh.y, func
end

-- stream polygon data
local function layout_poly (param, len, xorig, yorig, x_sh, y_sh, dash, func)
  local fpwrite, xadjust, yadjust in param
  for i=1,#func do
    for j=1,#x_sh do
      local xj, yj = x_sh[j], y_sh[j]
      local dashtype = dash and "dashtype '" .. dash .. "'" or ""
      fpwrite("set object %d polygon front fc rgb 'white' fs solid 1.0 \z
        border rgb 'black' %s \\\n", param.oid, dashtype)
      local cmd = "from"

      for k=1,#xj do
        local xk, yk = xj[k], func[i](yj[k])
        xk, yk = xadjust(xk, len, xorig), yadjust(yk, yorig)
        local next = (k == #xj) and "" or "\\"
        fpwrite("  %s %f, screen %f %s\n", cmd, xk, yk, next)
        cmd = "to"
      end
      param.oid = param.oid + 1
    end
  end
  fpwrite("\n")
end

-- stream ellipse data
local function layout_ellipse (param, len, el, xorig, yorig, dash)
  local fpwrite, xadjust, yadjust in param
  local cx, cy = xadjust(0, len, xorig), yadjust(0, yorig)
  local sx, sy = xadjust(1, len, 0    ), yadjust(el, 0)
  local dashtype = dash or ""
  fpwrite("set object %d ellipse at %f, screen %f \\\n\z
    size %f, screen %f front fc rgb 'white' fs solid 1.0 border rgb 'black' %s \n",
    param.oid, cx, cy, sx, sy, dashtype)
  param.oid = param.oid + 1
end

-- stream beam line data
local function layout_bline (param, bline)
  local fpwrite in param
  local prevX, prevY = bline.x[1], bline.y[1]
  for i=2,#bline.y do
    local xi, yi = bline.x[i], bline.y[i]
    fpwrite("set object %d polygon behind noclip dashtype solid \\\n\z
      from first %f, screen %f to first %f, screen %f to first %f, screen %f\n",
      param.oid, prevX, prevY, xi, yi, prevX, prevY)
    param.oid = param.oid + 1
    prevX, prevY = xi, yi
  end
end

local function layout_process(param, seq, mode)
  local range, yseq in param
  local seqsize = range[2] - range[1] + 1
  local shift   = range[1] - 1
  local xs, ys  = vector(seqsize), vector(seqsize)
  local bline   = { x={ seq:spos(range[1]) }, y={ yseq } }
  local deltaY  = 0

  if mode == "multi" then
    local prevS, angle, j, dir, s, elem = 0, 0, 1, seq.direction
    for i=range[1],range[2] do
      s, elem, len = seq:spos(i), seq[i], seq[i].l
      deltaY       = deltaY - tan(dir*angle)*(s-prevS)
      xs[j], ys[j] = s + len/2, deltaY + yseq
      prevS        = s
      if elem:is_selected(flg) then
        angle = angle + elem.angle
        table.insert(bline.x, s)
        table.insert(bline.y, yseq + deltaY)
      end
      j = j+1
    end
  else
    xs:fill \_,i =>
      local j= shift + i
      local x = seq:spos(j) + seq[j].l/2
      return x
    end
    ys:fill(yseq)
  end
  table.insert(bline.x, seq:spos(range[2]))
  table.insert(bline.y, yseq + deltaY)
  return xs, ys, bline
end

-- main layout function
local function layout (param, seq, mode)
  local fpwrite, range, seqminlen, seqkind, elemsize in param
  local dir     = seq.direction
  local ysize   = px2per(param, nil, elemsize)
  param.xadjust = xadjust
  param.yadjust = yadjust(ysize)

  local xsorig, ysorig, bline = layout_process(param, seq, mode)
  for i=range[1],range[2] do
    local elem = seq[i]
    local s, len, kind = seq:spos(i), elem.l, elem.kind
    local xorig, yorig = xsorig[i], ysorig[i]

    if len >= seqminlen and (not seqkind or seqkind[kind]) then
      local sh_l   = len / 2
      local el, dash, x_sh, y_sh, func  = eShap(elem, dir)

      if not is_nil(el) and len ~= 0 then
        layout_ellipse(param, len, el, xorig, yorig, dash)
      end

      if not is_nil(x_sh) then
        layout_poly(param, sh_l, xorig, yorig, x_sh, y_sh, dash, func)
      end
    end
  end
  layout_bline(param, bline)
end

local function set_seqrange (param, seq, range)
  local r1, r2 = range and seq:range_of(range) or 1,#seq
  param.srange = { seq:spos(r1), seq:spos(r2) }
  param.range  = {          r1 ,          r2  }
end

-- preparation for single-layout
local function single_layout (param)
  local sequence, fpwrite, range in param
  set_seqrange(param, sequence, range)
  layout(param, sequence)
  fpwrite("MAD_MAX = %f\n", param.oid)
end

-- preparation for multi-layout
local function multi_layout (param)
  local sequence, fpwrite, range in param
  local seq1, seq2     = sequence[1], sequence[2]
  local range1 = is_table(range) and range[1] or false
  local range2 = is_table(range) and range[2] or false
  set_seqrange(param, seq1, range1)
  layout(param, seq1, "multi")
  set_seqrange(param, seq2, range2)
  layout(param, seq2, "multi")
  fpwrite("MAD_MAX = %f\n", param.oid)
end

-- plot -----------------------------------------------------------------------o

-- get vector from label
local function getv (data, tbl, label)
  if label then
    return data and data[label] or tbl[label],"tbl"  or error("invalid label")
  end
end

-- parse input axis and apply func to each label
local function parse_axis (param, func)
  local _axis = {'x1y1', 'x1y2', 'x2y1', 'x2y2'}
  for _,axis_name in ipairs(_axis) do
    local axis = param[axis_name]
    if is_string(axis) then                  -- e.g. x1y1 = 'y1'
      func(param, nil, axis, axis_name)
    elseif is_table(axis) and axis[1] then   -- e.g. x1y1 = {'y1', 'y2'}
      for i,y in ipairs(axis) do
        func(param, nil, y, axis_name)
      end
    elseif is_table(axis) then
      for x,y in pairs(axis) do
        if is_string(y) then                 -- e.g. x1y1 = { x1 = 'y1' }
          func(param, x, y, axis_name)
        elseif is_table(y) then              -- e.g. x1y1 = { x1 = {'y1', 'y2'}}
          for _,yi in pairs(y) do
            func(param, x, yi, axis_name)
          end
        end
      end
    end
  end
end

-- stream one plot data (used in parse_axis)
local function plot_data (param, xlbl, ylbl)
  local pwrite, tablerange, data, table in param
  local x      = getv(data, table, xlbl)
  local y,tbl  = getv(data, table, ylbl)
  local min    = tbl and tablerange and tablerange[1] or 1
  local max    = tbl and tablerange and tablerange[2] or #y
  for i=min,max do
    local x = x and x[i] or i -- use index if x is nil
    pwrite(x, " ", y[i], "\n")
  end
  pwrite("e\n")
end

-- parse dashtypes and add '' if it is a pattern : e.g.: ".-- "
local function parse_dash (dashtypes, y)
  local dash = is_table(dashtypes) and
    (dashtypes[y] or _dflt.dashtype) or dashtypes
  if string.match(dash, "[.%-_ ]+") then return "'" .. dash .. "'" end
  return dash
end

-- stream the gnuplot 'plot' command (used in parse_axis)
local function plot_cmd (param, _, y, axis)
  local pwrite, colors, styles, dashtypes, pointsizes,
    pointtypes, linewidths, legendnames in param
  local values = {
    color     = is_table(colors) and (colors[y] or _dflt.color) or colors,
    style     = is_table(styles) and (styles[y] or _dflt.style) or styles,
    dashtype  = parse_dash(dashtypes, y),
    pointsize = is_table(pointsizes)  and (pointsizes[y] or _dflt.pointsize) or pointsizes,
    pointtype = is_table(pointtypes)  and (pointtypes[y] or _dflt.pointtype) or pointtypes,
    linewidth = is_table(linewidths)  and (linewidths[y] or _dflt.linewidth) or linewidths,
    title     = is_table(legendnames) and legendnames[y] or y,
    axis      = axis,
  }
  local cmd = "$cmd using 1:2 with $style "
  if string.match(values.style, "lines") then
    cmd = cmd .. "dashtype $dashtype linewidth $linewidth "
  end
  if string.match(values.style, "points") then
    cmd = cmd .. "pointsize $pointsize pointtype $pointtype "
  end
  cmd = cmd .. "linecolor '$color' title '$title' axes $axis,\\\n"
  cmd = strinterp(cmd, values, false) % param
  param.cmd = "     '' "               -- only the first command need "plot '-'"
  pwrite(cmd)
end

-- set the range command for all axis
local function set_ranges (param)
  local fpwrite in param
  local names = {'xrange', 'x2range', 'yrange', 'y2range'}
  for _,rname in ipairs(names) do
    local range = param[rname]
    if range then fpwrite("set %s [%f:%f]\n", rname, range[1], range[2]) end
  end
end

-- set label command for each axis
local function set_label (param)
  local fpwrite in param
  local names = {'xlabel', 'x2label', 'ylabel', 'y2label'}
  for _,lname in ipairs(names) do
    local label = param[lname]
    if label then fpwrite("set %s '%s'\n", lname, label) end
  end
end

-- set tics for each used axis
local function set_tics (param)
  local cmd = ""
  if param.x1y1 or param.x1y2 then cmd = cmd .. "set xtics nomirror \n"  end
  if param.x2y1 or param.x2y2 then cmd = cmd .. "set x2tics nomirror \n" end
  if param.x1y1 or param.x2y1 then cmd = cmd .. "set ytics nomirror \n"  end
  if param.x1y2 or param.x2y2 then cmd = cmd .. "set y2tics nomirror \n" end
  param.pwrite(cmd)
end

-- set remaining parameters (miscellaneous)
local function set_misc (param)
  local psizex, psizey, originx, originy, wsizex, wsizey,
    grid, border, title, legendpos, plotter               in param
  local wrt = \s,... => plotter:write(string.format(s,...) % param) end
  if grid      then wrt("set %s\n", grid)          end
  if border    then wrt("set border %s\n", border) end
  if title     then
    local font = param.titlefont or ""
    local size = param.titlesize or ""
    wrt("set title '%s' font '%s,%s'\n", title, font, size)
  end
  if legendpos     then
    local font = param.legendfont or ""
    local size = param.legendsize or ""
    local cmd = "set key %s font '%s,%s'\n"
    wrt(cmd, legendpos, font, size)
  end
  if psizey or psizex  then
    psizex, psizey = psizex or wsizex, psizey or wsizey
    wrt("set size %f, %f\n", px2per(param, psizex, psizey))
  end
  if originy or originx then
    originx, originy = originx or 0, originy or 0
    wrt("set origin %f, %f\n", px2per(param, originx, originy))
  end
end

-- main plot function
local function plot (param)
  set_ranges(param)
  set_label(param)
  set_tics(param)
  set_misc(param)
  param.cmd = "plot '-'" -- first plot command initialization
  parse_axis(param, plot_cmd)
  param.pwrite("\n")
  parse_axis(param, plot_data)
end

-- command --------------------------------------------------------------------o

-- create a graph with both the layout and the plot part
local function composed_plot (param)
  local fpwrite, xrange, seqpos, sequence, elemsize,
    wsizex, wsizey, psizex, psizey, originx, originy in param

  -- set layout position
  if is_string(seqpos) then
    param.yseq    = layout_pos[seqpos].origin
    param.psizex  = psizex or wsizex
    local dflt_py = layout_pos[seqpos].psizey
    param.psizey  = psizey or dflt_py and dflt_py * wsizey or wsizey
    param.originx = originx or _dflt.originx
    param.originy = originy or seqpos=="bottom" and 4*elemsize or _dflt.originy
  else
    param.yseq = px2per(param, nil, seqpos)
  end

  if is_sequence(sequence) then single_layout(param)
  else                           multi_layout(param)
  end

  local srange in param
  if not xrange then fpwrite("set xrange [%s:%s]\n", srange[1], srange[2]) end
  plot(param)
end

local function init_param(self, file)
  local param = {
    version = tostring(MAD.env.version),
    name    = self.name or is_table(self.table) and self.table.title or "",
    date    = self.date or is_table(self.table) and self.table.date  or "",
    time    = self.time or is_table(self.table) and self.table.time  or "",
    plotter = file,
    oid     = self.oshft,
    fpwrite = \... -> file:write(string.format(...)),
    pwrite  = \... -> file:write(...)
  }
  if self.seqkind then -- build dictionary
    param.seqkind = {}
    fun.foreach(\e => param.seqkind[e] = true end, self.seqkind)
  end

  setmetatable(param, {__index=self})
  return param
end

local function exec (self)
  local gp, file, streamf, fname = setup_cmd(self)

  if self.sequence ~= "keep" then
    file:write("@MAD_RESET_OBJECT\n")
  elseif self.range then
    print("MAD Plot Warning : sequence=\"keep\" and range is \z
      provided - range is ignored")
  end

  if self.prolog then file:write(self.prolog) end
  local param = init_param(self, file)

  if is_mtable(self.table) or is_table(self.data) then
    if self.sequence == "keep" then
      plot(param)
    elseif self.sequence then
      composed_plot(param)
    else
      plot(param)
    end
  end

  if self.epilog then file:write(self.epilog) end
  teardown_cmd(self, gp, file, streamf, fname)
  return self
end

local plot = Command 'plot' {

  -- stream id
  sid         = 1,

  -- user command
  prolog      = false,   -- string
  epilog      = false,   -- string

  -- windows setup
  term        = 'wxt',
  wsizex      = 800,
  wsizey      = 500,

  -- output
  output      = 1,       -- ("filename"|true) -> pdf | number -> wid
  scrdump     = false,   -- ("filename"|true)

  -- table or data input
  data        = false,   -- { x=tbl.x, y=vec } (precedence over table)
  table       = false,
  tablerange  = false,   -- { min, max }

  -- sequence input
  sequence    = false,
  range       = false,   -- {'E.DS.L5.B1','S.DS.R5.B1'} or {1,10} (spos)
  -- seqdist     = false,   -- x>=0
  seqpos      = "top",   -- top|bottom|middle|0<x (pixel)
  seqminlen   = 0,
  seqkind     = false,   -- { quadrupole = true, sbend = true }
  elemsize    = 25,        -- size of element in pixel

  -- axis selection (and names)
  x1y1        = false,   -- e.g. x1y1 = { x1 = {'y1', 'y2'}, x2 = {'y3', 'y4'}}
  x1y2        = false,   -- e.g. x1y1 = { x1 = {'y1', 'y2'}}
  x2y1        = false,   -- e.g. x1y1 = { x1 = 'y1'}
  x2y2        = false,   -- e.g. x1y1 = {'y1', 'y2'}
                         -- e.g. x1y1 = 'y1'
  -- axis labels
  xlabel      = false,   -- strings
  x2label     = false,
  ylabel      = false,
  y2label     = false,

  -- axis ranges
  xrange      = false,   -- { min, max }
  x2range     = false,
  yrange      = false,
  y2range     = false,

  -- plot style
  originx     = false,
  originy     = false,
  psizex      = false,
  psizey      = false,
  styles      = 'lines', -- { y = 'lines' }
  colors      = 'red',   -- { y = 'green' }
  dashtypes   = 'solid', -- { y = '..-- ' }
  linewidths  = 1,       -- { y = 2.3     }
  pointtypes  = 1,       -- { y = 2       }
  pointsizes  = 1,       -- { y = 2.3     }

  -- decoration
  font        = "Times New Roman",
  fontsize    = 14,
  title       = "$name MAD $version, $date, $time",
  titlefont   = false,
  titlesize   = false,
  legendnames = false,   -- { y = 'distance' }
  legendfont  = false,
  legendsize  = false,
  legendpos   = "left top",
  grid        = 'grid',
  border      = 15,

  -- object shift
  oshft       = 1000000,

  -- build the command (do not execute)
  exec        = exec,
} :set_readonly()

-- end ------------------------------------------------------------------------o

return {
  nplot2 = plot,
  ngplot2 = gplot
}