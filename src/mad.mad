--[=[
 o----------------------------------------------------------------------------o
 |
 | MAD environement (sandbox)
 |
 | Methodical Accelerator Design - Copyright CERN 2015
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o----------------------------------------------------------------------------o

  Purpose:
  - Load in order all the modules of the MAD application and flatten them in
    the mad module for one-level access with local 'in' table syntax.

 o----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help ----------------------------------------------------------------------o

M.__help.self = [[
NAME
  mad -- Methodical Accelerator Design package

SYNOPSIS
  local mad = require 'mad'

DESCRIPTION
  The module mad provides all the modules and services required to run MAD.

RETURN VALUES
  The table containing flatten modules.

SEE ALSO
  None
]]

-- implementation ------------------------------------------------------------o

local function load_modules (modules)
  for i=1,#modules do
    local modname = modules[i]
    assert(M[modname] == nil, "overriding definition: "..modname)

    local modref = require ("madl_"..modname);
    assert(modref ~= nil, "module not found: "..modname)
--    assert(type(modref.__help) == 'table', "module without help: "..modname)

    M[modname] = modref

    if type(modref) == 'table' then
      for k,v in pairs(modref) do
        assert(M[k] == nil, "overriding definition: "..modname.."."..k)
        M[k] = v
      end
    end
  end
end

-- modules list to load, order matters
load_modules {
--  'helper',
--  'beam',
--  'element',
--  'sequence',
}

-- end -----------------------------------------------------------------------o

return M
