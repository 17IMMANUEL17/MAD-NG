--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provides full set of functions and operations on ranges and logranges.

 o-----------------------------------------------------------------------------o
]=]

local M, Mlog = { __help = {} }, { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  range

SYNOPSIS
  local r1 = range(start [,stop [,step]])
  local r2 = start..stop[..step]
  print(r1.start, r1.stop, r1.step)

DESCRIPTION
  Ranges are defined by their start, stop (included) and step fields. Zero step
  or steps with opposite sign to stop-start lead to an empty range. Ranges can
  be used as stateless iterators in for loops (i.e. ipairs), and provide better
  numerical stability for 'true' floating point numbers.
    Some methods like get, index (i.e. []) and iterator (i.e. ipairs) return nil
  outside the boundaries, and some others like value don't check for boundaries.
  The range module implements the functions:
    range (constructor), get, value, size, index, first, last, minmax, bounds,
    ovelap, equal, tostring, totable, tovector, scale, translate, revert.

RETURN VALUE
  The constructor of ranges

ERROR

EXAMPLES

SEE ALSO
  None.
]=]
Mlog.__help.self = M.__help.self

-- locals ---------------------------------------------------------------------o

local new, cdef, istype, typeof, metatype in require 'ffi'
local is_number                           in require 'madl_utils'
local abs, ceil, floor, log, max          in math

cdef [[
  typedef struct logxrange { const double start, stop, step; } logxrange;
]]

-- constructors ---------------------------------------------------------------o

local range    = typeof 'xrange'
local logrange = typeof 'logxrange'

-- implementation -------------------------------------------------------------o

local function is_range (a)
  return istype('xrange', a)
end

local function is_logrange (a)
  return istype('logxrange', a)
end

local function is_empty(start, stop, step)
  return not (step >= 0 and start <= stop or
              step <  0 and start >  stop or false)
end

local function is_emptylog(start, stop, step)
  step = abs(step)
  return not (step >= 1 and (start >= 0 and start <= stop  or
                             start <  0 and start >  stop) or
              step <  1 and (start >= 0 and start >= stop  or
                             start <  0 and start <  stop) or false)
end

local function bounds(start, stop, step)
  if step >= 0 and start <= stop then
    return start, stop
  elseif step < 0 and start > stop then
    return stop, start
  end
end

local function boundslog(start, stop, step)
  step = abs(step)
  if (step >= 1 and start >= 0 and start <= stop) or
     (step <  1 and start <= 0 and start <= stop) then
    return start, stop
  elseif (step >= 1 and start <= 0 and start >= stop) or
         (step <  1 and start >= 0 and start >= stop) then
    return stop, start
  end
end

local function size (start, stop, step)
  if step > 1 then
    return max(0, floor( (stop-start+1)/step +0.5) )
  elseif step < -1 then
    return max(0, floor( (stop-start-1)/step +0.5) )
  elseif step ~= 0 then
    return max(0, floor( (stop-start  )/step +1.5) )
  else
    return 0
  end
end

local function sizelog (start, stop, step)
  return size(log(abs(start)), log(abs(stop)), log(abs(step)))
end

local function nstep (start, stop, n)
  if is_range(start) then
    start, stop, n = start.start, start.stop, stop -- shift args
  end
  return n >= 1 and (stop-start)/abs(ceil(n)-1) or 0
end

local function nsteplog (start, stop, n)
  if is_range(start) or is_logrange(start) then
    start, stop, n = start.start, start.stop, stop -- shift args
  end
  return n >= 1 and (stop/start)^(1/abs(ceil(n)-1)) or 1
end

local function value (r, x)
  return r.start + r.step*x -- N points => step = (stop-start)/(N-1)
end

local function valuelog (r, x)
  return r.start * r.step^x -- N points => step = (stop/start)^(1/(N-1))
end

local function iterincr (r, i)
  local v = value(r, i)
  if v <= r.stop then return i+1, v end
end

local function iterincrlog (r, i)
  local v = valuelog(r, i)
  if v <= r.stop then return i+1, v end
end

local function iterdecr (r, i)
  local v = value(r, i)
  if v >= r.stop then return i+1, v end
end

local function iterdecrlog (r, i)
  local v = valuelog(r, i)
  if v >= r.stop then return i+1, v end
end

local function get (r, x)
  local v = value(r, x)
  if x >= 0 and ((r.step > 0 and v <= r.stop)  or
                 (r.step < 0 and v >= r.stop)) then
    return v
  end
end

local function getlog (r, x)
  local v = valuelog(r, x)
  local s = abs(r.step)
  if x >= 0 and
    ((s > 1 and r.start > 0 or s < 1 and r.start < 0) and v <= r.stop) or
    ((s > 1 and r.start < 0 or s < 1 and r.start > 0) and v >= r.stop)
  then return v
  end
end

local function canonize(start, stop, step)
  if not is_empty(start, stop, step) then
    return start, stop, step
  end
  return start, stop, 0
end

-- alternate constructors with #steps specified

local function nrange (start, stop, n)
  assert(is_number(start) and is_number(stop) and is_number(n),
         "invalid argument #1, #2 or #3 (number expected")
  return range(start, stop, nstep(start, stop, n))
end

local function nlogrange (start, stop, n)
  assert(is_number(start) and is_number(stop) and is_number(n),
         "invalid argument #1, #2 or #3 (number expected")
  return logrange(start, stop, nsteplog(start, stop, n))
end

-- iterators

local function irange (start, stop, step)
  return ipairs(range(start, stop, step))
end

local function ilogrange (start, stop, step)
  return ipairs(logrange(start, stop, step))
end

-- members

function M.__new (ct, start, stop, step)
  assert(is_number(start), "invalid argument #1 (expect number)")
  if stop == nil then stop = start end   -- default
  if step == nil then step = 1 end       -- default
  return new(ct, start, stop, step)
end

function Mlog.__new (ct, start, stop, step)
  assert(is_number(start), "invalid argument #1 (expect number)")
  if stop == nil then stop = start end   -- default
  if step == nil then step = 2 end       -- default
  return new(ct, start, stop, step)
end

function M.log (a)
  return logrange(a.start, a.stop, a.step)
end

function M.__index (r, a)
  if is_number(a) then return get(r, a-1) else return M[a] end
end

function Mlog.__index (r, a)
  if is_number(a) then return getlog(r, a-1) else return Mlog[a] end
end

function M.__ipairs (r)
  if r.step > 0 then
    return iterincr, r, 0
  elseif r.step < 0 then
    return iterdecr, r, 0
  end
end

function Mlog.__ipairs (r)
  local s = abs(r.step)
  if s > 1 and r.start > 0 or s < 1 and r.start < 0 then
    return iterincrlog, r, 0
  elseif s > 1 and r.start < 0 or s < 1 and r.start > 0 then
    return iterdecrlog, r, 0
  end
end

function M.__eq (r1, r2)
  return is_range(r1) and is_range(r2) and
         r1.start == r2.start and r1.step == r2.step and r1.stop == r2.stop
end

function Mlog.__eq (r1, r2)
  return is_logrange(r1) and is_logrange(r2) and
         r1.start == r2.start and r1.step == r2.step and r1.stop == r2.stop
end

function M.range (r)
  return r.start, r.stop, r.step
end

function Mlog.range (r)
  return r.start, r.stop, r.step
end

function M.size (r)
  return size(r:range())
end

function Mlog.size (r)
  return sizelog(r:range())
end

M.get      = get
M.value    = value
M.nstep    = nstep
M.is_empty = is_empty
M.__len    = M.size

Mlog.get      = getlog
Mlog.value    = valuelog
Mlog.nstep    = nsteplog
Mlog.is_empty = is_emptylog
Mlog.__len    = Mlog.size

function M.reverse (r)
  return range(r.stop, r.start, -r.step)
end

function Mlog.reverse (r, a)
  return logrange(r.stop, r.start, 1/r.step)
end

function M.bounds (r)
  if r.step > 0 then
    return r.start, r.stop
  elseif r.step < 0 then
    return r.stop, r.start
  end
end

function Mlog.bounds (r)
  if r.step > 1 then
    return r.start, r.stop
  elseif r.step < 1 then
    return r.stop, r.start
  end
end

--[=[

function M.overlap (r, s)
  if r:size() == 0 or s:size() == 0 then
    return false
  end

  local rl, rh = r:bounds()
  local sl, sh = s:bounds()
  return not (rl < sl and rh < sl or rl > sh)
end

-- convertion

local function convert (r, ctor)
  local size = r:size()
  local t = ctor(size,0)
  for i=1,size do
    t[i] = r.start+(i-1)*r.step
  end
  return t
end

function M.totable (r)
  return convert(r, tnew)
end

function M.tostring (r)
  if r.step == 1 then
    return string.format("%g:%g", r.start, r.stop)
  else
    return string.format("%g:%g:%g", r.start, r.stop, r.step)
  end
end

--function M.tovector (r)
--  return convert(r, vector)
--end
]=]

metatype('xrange'   , M   )
metatype('logxrange', Mlog)

-------------------------------------------------------------------------------o
return {
  range       = range,
  logrange    = logrange,
  nrange      = nrange,      -- constructor with N steps
  nlogrange   = nlogrange,   -- constructor with N steps
  irange      = irange,      -- iterator
  ilogrange   = ilogrange,   -- iterator
  is_range    = is_range,
  is_logrange = is_logrange,

  __help      = M.__help,
}
