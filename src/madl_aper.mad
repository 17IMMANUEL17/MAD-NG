--[=[
 o-----------------------------------------------------------------------------o
 |
 | Aperture module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a catalog of aperture models used to check particle positions
    during tracking (i.e. track). maps have the following calling convention:
      apermap(elm, map, len_weight)
  - Provide an aperture margin estimate n1 (TODO)

 o-----------------------------------------------------------------------------o
]=]

local M = {}

-- locals ---------------------------------------------------------------------o

local abs, min, max, sin, cos in math

local _C, vector           in MAD
local is_damap, is_vector  in MAD.typeid
local errorf               in MAD.utility
local minang               in MAD.constant
local is_implicit          in MAD.element.drift

local getmetatable =
      getmetatable

-- aperture models ------------------------------------------------------------o

local apmodel

apmodel = {
  square     = \x,y,ap -> x >= ap[1] or y >= ap[1],
  rectangle  = \x,y,ap -> x >= ap[1] or y >= ap[2],

  circle     = \x,y,ap -> x^2 + y^2 >= ap[1]^2,
  ellipse    = \x,y,ap -> ((x/ap[1])^2 + (y/ap[2])^2 >= 1),

  rectcircle = \x,y,ap -> x >= ap[1] or y >= ap[2] or x^2 + y^2 >= ap[3]^2,
  rectellipse= \x,y,ap -> x >= ap[1] or y >= ap[2] or (x/ap[3])^2 + (y/ap[4])^2 >= 1,

  racetrack  = \x,y,ap -> x >= ap[1] or y >= ap[2] or
                         (x >= ap[1]-ap[3] and y >= ap[2]-ap[4] and
                          ((x-(ap[1]-ap[3]))/ap[3])^2 +
                          ((y-(ap[2]-ap[4]))/ap[4])^2 >= 1),

  octagon    = \x,y,ap -> x >= ap[1] or y >= ap[2] or
                          y >= (x-(ap[1]-ap[3]))*ap[4]/ap[3] + ap[2],

  polygon    = \x,y,ap,vx,vy -> ap.bbox and apmodel[ap.bbox.kind](x,y,ap.bbox) or
                                _C.mad_pol_inside(x,y, vx.data, vy.data, #vx),
}

-- aperture check -------------------------------------------------------------o

local function lostpar (i, mflw, _, islc)
  local npar, clw, spos, ds, turn in mflw
  local lw = islc<0 and -1-islc or clw
  local m = mflw[i]

  -- information saved in lost particle/damap
  m.spos, m.turn, m.status = spos+ds*lw, turn, "lost"
  -- take care of mflw wrappers (e.g. __edat and __sdat in track)
  m = getmetatable(mflw).__index
  -- swap with last tracked particle/damap
  m[i], m[m.npar], m.npar = m[m.npar], m[i], m.npar-1
end

local function checkaper (chkap)
  local is_poly = chkap == apmodel.polygon

  return function (elm, mflw, lw, islc)
    local ap = elm.aperture
    local tdir in mflw
    local offset in ap

    local ang, ca, sa = ((ap.tilt or 0) - elm.tilt)*tdir

    if abs(ang) < minang then
      ca, sa = 1, 0
    else
      ca, sa = cos(ang), sin(ang)
    end

    local dx, dy = 0, 0
    if offset then
      dx, dy = offset[1]*tdir, offset[2]*tdir
    end

    local vx, vy
    if is_poly then -- convert polygon to vectors if not vectors
      if not is_vector(ap.vx) then vx = vector(ap.vx) end
      if not is_vector(ap.vy) then vy = vector(ap.vy) end
      assert(#vx == #vy, "incompatible x vs y polygon size")
    end

    local i = 1
    while i <= mflw.npar do
      local x, y in mflw[i]

      if is_damap(mflw[i]) then
        x, y = x:get0(), y:get0()
      end

      -- move to aperture frame
      local nx = abs(ca*x + sa*y - dx)
      local ny = abs(ca*y - sa*x - dy)

      if chkap(nx,ny,ap, vx,vy) then
        lostpar(i, mflw, lw, islc)
      else
        i = i + 1
      end
    end
    return true
  end
end

local apcheck = setmetatable({
  square      = checkaper(apmodel.square     ),
  rectangle   = checkaper(apmodel.rectangle  ),
  circle      = checkaper(apmodel.circle     ),
  ellipse     = checkaper(apmodel.ellipse    ),
  rectcircle  = checkaper(apmodel.rectcircle ),
  rectellipse = checkaper(apmodel.rectellipse),
  racetrack   = checkaper(apmodel.racetrack  ),
  octagon     = checkaper(apmodel.octagon    ),
  polygon     = checkaper(apmodel.polygon    ),
}, { __index  = \_,k -> errorf("unknown kind of aperture '%s'", tostring(k))
})

for k,v in pairs(apcheck) do M[k] = v end

function M.apercheck (elm, mflw, lw, islc)
  return apcheck[elm.aperture.kind](elm, mflw, lw, islc)
end

function M.apersave (mflw)
  error("NYI")
  -- TODO: record lost particles in a mtable
  return mtbl
end

-- end ------------------------------------------------------------------------o
return { aperture = M }
