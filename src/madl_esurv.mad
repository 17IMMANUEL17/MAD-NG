--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey element methods (loaded by survey)
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

--[=[
Notes about directions and quantities:
  element direction   edir: affects curvatures (edir = seq.dir).
  track direction (s) sdir: affects lengths    (sdir = cmd.dir).
  time direction  (t) tdir: affects angles     (tdir = edir x sdir).
  beam direction      bdir: affects strengths  (bdir = edir x sdir x chg).
]=]

-- locals ---------------------------------------------------------------------o

local element                in MAD
local fnil, functor, bind3rd in MAD.gfunc
local errorf                 in MAD.utility
local minlen, minang         in MAD.constant
local is_implicit            in element.drift

local abs                    in math

-- integrator schemes ---------------------------------------------------------o

local thinonly, thickonly, driftonly                             in MAD.symint

-- geometric maps -------------------------------------------------------------o

local strex_thick, curex_thick, curex_thin                       in MAD.geomap

local xrotation, yrotation, srotation, translate,
      changeref, changedir, changenrj, misalign                  in MAD.geomap

-- element tracking -----------------------------------------------------------o

local function trackone (elm, m, track, thick, thin)
  local sdir, atentry, atexit in m

  atentry(elm, m,  sdir, -1)
  track  (elm, m,    1 , thick, thin)
  atexit (elm, m, -sdir, -2)
end

local function trackelm (elm, m, track, thick, thin)
  local sdir, atentry, atexit in m
  local tlt = elm.tilt*m.tdir
  local mis = m.misalign and misalign or fnil
  local rot = abs(tlt) >= minang and srotation or fnil
  m.tlt = tlt

  atentry(elm, m,  sdir, -1)
  mis    (elm, m,  sdir)
  rot    (tlt, m,  sdir)
  track  (elm, m,    1 , thick, thin)
  rot    (tlt, m, -sdir)
  mis    (elm, m, -sdir)
  atexit (elm, m, -sdir, -2)
end

local function tracksub (elm, m, track, thick, thin)
  local sdir, atentry, atexit, __sdat in m
  local tlt = elm.tilt*m.tdir
  local mis = m.misalign and misalign or fnil
  local rot = abs(tlt) >= minang and srotation or fnil
  m.tlt = tlt

  atentry(elm, m, sdir, -1)
  mis    (elm, m, sdir)
  rot    (tlt, m, sdir)

  if sdir > 0 then
    local at, lw = 0
    for i=1,#elm do
      at, lw = elm[i].at, elm[i].at - at
      if abs(lw) >= minlen then -- body step
        track(elm, m, lw, thick, thin)
      end
      __sdat.clw = at
      elm[i]:track(__sdat)
    end
    lw = 1 - at
    if abs(lw) >= minlen then  -- last body step
      track(elm, m, lw, thick, thin)
    end

  else -- backtrack
    local at, lw = 1
    for i=#elm,1,-1 do
      at, lw = elm[i].at, at - elm[i].at
      if abs(lw) >= minlen then -- body step
        track(elm, m, lw, thick, thin)
      end
      __sdat.clw = at
      elm[i]:track(__sdat)
    end
    lw = at
    if abs(lw) >= minlen then -- first body step
      track(elm, m, lw, thick, thin)
    end
  end

  rot   (tlt, m, -sdir)
  mis   (elm, m, -sdir)
  atexit(elm, m, -sdir, -2)
end

-- kinds ----------------------------------------------------------------------o

local function track_marker (elm, m)
  m.el, m.ang = 0, 0
  trackone(elm, m, thinonly, nil, fnil)
end

local function track_drift (elm, m)
  local ds in m
  m.el, m.ang = ds, 0

  if is_implicit(elm) then
    local inter = m.implicit and thickonly or driftonly
    trackone(elm, m, inter, strex_thick, nil)
  else
    local track = #elm == 0 and trackelm or tracksub
    local inter = abs(ds) >= minlen and thickonly or driftonly
    track(elm, m, inter, strex_thick, nil)
  end
end

local function track_thin (elm, m)
  local angle in elm
  m.el, m.ang = 0, angle*m.tdir

  local kick = abs(angle) >= minang and curex_thin or fnil
  trackelm(elm, m, thinonly, nil, kick)
end

local function track_thick (elm, m)
  local ds in m
  local angle in elm
  local no_ang = abs(angle) < minang
  m.el, m.ang = ds, angle*m.tdir

  local inter, track, thick
  if abs(ds) >= minlen then -- trick: driftonly+thick <=> thinonly+thin
    inter, thick = thickonly, no_ang and strex_thick or curex_thick
  else
    inter, thick = driftonly, no_ang and fnil        or curex_thin
  end

  local track = #elm == 0 and trackelm or tracksub
  track(elm, m, inter, thick, nil)
end

-- load maps into elements ----------------------------------------------------o

local invalid = \e ->
  errorf("invalid survey element %s of kind %s with length %s",
         e.name, e.kind, e.l)

local E = element

-- warning: class protection set by alt. 'nolookup' object model can be BYPASSED
--          because classes are modified before any use of 'survey' attribute
--          by any children at the time of loading the module...

-- kind maps

E. thin_element:setvar({ survey = functor( track_thin   ) }, 'init')
E.drift_element:setvar({ survey = functor( track_drift  ) }, 'init')
E.thick_element:setvar({ survey = functor( track_thick  ) }, 'init')
E.specl_element:setvar({ survey = functor( track_marker ) }, 'init')
E.patch_element:setvar({ survey = functor( invalid      ) }, 'init') -- avoid missing definition
E.extra_element:setvar({ survey = functor( invalid      ) }, 'init') -- forbidden in track

-- patches

E.xrotation:setvar({ survey = bind3rd( trackone, xrotation ) }, 'init')
E.yrotation:setvar({ survey = bind3rd( trackone, yrotation ) }, 'init')
E.srotation:setvar({ survey = bind3rd( trackone, srotation ) }, 'init')
E.translate:setvar({ survey = bind3rd( trackone, translate ) }, 'init')
E.changeref:setvar({ survey = bind3rd( trackone, changeref ) }, 'init')
E.changedir:setvar({ survey = bind3rd( trackone, changedir ) }, 'init')
E.changenrj:setvar({ survey = bind3rd( trackone, changenrj ) }, 'init')

-- end ------------------------------------------------------------------------o
