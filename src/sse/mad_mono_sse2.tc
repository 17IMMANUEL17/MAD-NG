#ifndef MAD_MONO_SSE2_TC
#define MAD_MONO_SSE2_TC

/*
 o-----------------------------------------------------------------------------o
 |
 | SSE2 optimization for monimials
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
 */

#include "mad_sse.h"

int
mad_mono_eq (ssz_t n, const ord_t a[n], const ord_t b[n])
{
  assert(a && b);
  int nn=MAD_SSE2_CRND(n), nm=MAD_SSE2_CMOD(n);
  __m128i ra, rb, rr;

  for (int i=0; i < nn; i+=MAD_SSE2_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_cmpeq_epi8(ra,rb);
    if (~_mm_movemask_epi8(rr)) return 0;
  }

  if (nm) {
    __m128i rm;
    rm = _mm_load_si128((__m128i*)mad_sse2_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[nn]));
    rb = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&b[nn]));
    rr = _mm_cmpeq_epi8(ra,rb);
    if (~_mm_movemask_epi8(rr)) return 0;
  }

  return 1;
}

int
mad_mono_lt (ssz_t n, const ord_t a[n], const ord_t b[n])
{
  assert(a && b);
  int nn=MAD_SSE2_CRND(n), nm=MAD_SSE2_CMOD(n);
  __m128i ra, rb, re, rr;

  for (int i=0; i < nn; i+=MAD_SSE2_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    re = _mm_cmpeq_epi8(ra,rb);
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr) | _mm_movemask_epi8(re)) return 0;
  }

  if (nm) {
    __m128i rm;
    rm = _mm_load_si128((__m128i*)mad_sse2_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[nn]));
    rb = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&b[nn]));
    re = _mm_cmpeq_epi8(ra,rb);
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr) | _mm_movemask_epi8(re)) return 0;
  }

  return 1;
}

int
mad_mono_le (ssz_t n, const ord_t a[n], const ord_t b[n])
{
  assert(a && b);
  int nn=MAD_SSE2_CRND(n), nm=MAD_SSE2_CMOD(n);
  __m128i ra, rb, rr;

  for (int i=0; i < nn; i+=MAD_SSE2_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr)) return 0;
  }

  if (nm) {
    __m128i rm;
    rm = _mm_load_si128((__m128i*)mad_sse2_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[nn]));
    rb = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&b[nn]));
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr)) return 0;
  }

  return 1;
}

int
mad_mono_rcmp (ssz_t n, const ord_t a[n], const ord_t b[n])
{
  assert(a && b);
  int nn=MAD_SSE2_CRND(n), nm=MAD_SSE2_CMOD(n);
  __m128i ra, rb, rm, rr;

  if (nm) {
    rm = _mm_load_si128((__m128i*)mad_sse2_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[nn]));
    rb = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&b[nn]));
    rr = _mm_cmpeq_epi8(ra,rb);
    if (~_mm_movemask_epi8(rr))
      for (int i=nm-1; i >= 0; i--)
        if (!((ord_t*)&rr)[i]) return ((ord_t*)&ra)[i] - ((ord_t*)&rb)[i];
  }

  for (int i=nn-MAD_SSE2_CSIZ; i >= 0; i-=MAD_SSE2_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_cmpeq_epi8(ra,rb);
    if (~_mm_movemask_epi8(rr))
      for (int i=MAD_SSE2_CSIZ-2; i >= 0; i-=2) {
        if (!((ord_t*)&rr)[i+1]) return ((ord_t*)&ra)[i+1] - ((ord_t*)&rb)[i+1];
        if (!((ord_t*)&rr)[i+0]) return ((ord_t*)&ra)[i+0] - ((ord_t*)&rb)[i+0];
      }
  }

  return 0;
}

// SSE2 does not support _mm_min_epi8 and _mm_max_epi8...

ord_t
mad_mono_max (ssz_t n, const ord_t a[n])
{
  assert(a);
  ord_t mo = 0;
  for (idx_t i=0; i < n; ++i)
    if (a[i] > mo) mo = a[i];
  return mo;
}

ord_t
mad_mono_min (ssz_t n, const ord_t a[n])
{
  assert(a);
  ord_t mo = -1;
  for (idx_t i=0; i < n; ++i)
    if (a[i] < mo) mo = a[i];
  return mo;
}

// --- end --------------------------------------------------------------------o

#endif // MAD_MONO_SSE2_TC

