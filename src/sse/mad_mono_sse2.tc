#ifndef MAD_MONO_SSE2_TC
#define MAD_MONO_SSE2_TC

/*
 o----------------------------------------------------------------------------o
 |
 | SSE2 optimization for monimials
 |
 | Methodical Accelerator Design - Copyright CERN 2015
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o----------------------------------------------------------------------------o
 */

#include "mad_sse.h"

int
mad_mono_eq (int n, const ord_t a[n], const ord_t b[n])
{
  assert(a && b);
  int i=0, nn=MAD_SSE2_CRND(n), nm=MAD_SSE2_CMOD(n);
  __m128i ra, rb, rr, rm;

  for (; i < nn; i+=MAD_SSE_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_cmpeq_epi8(ra,rb);
    if (~_mm_movemask_epi8(rr)) return 0;
  }

  if (nm) {
    rm = _mm_load_si128((__m128i*)mad_sse_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[i]));
    rb = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&b[i]));
    rr = _mm_cmpeq_epi8(ra,rb);
    if (~_mm_movemask_epi8(rr)) return 0;
  }

  return 1;
}

int
mad_mono_lt (int n, const ord_t a[n], const ord_t b[n])
{
  assert(a && b);
  int i=0, nn=MAD_SSE2_CRND(n), nm=MAD_SSE2_CMOD(n);
  __m128i ra, rb, rr, re, rm;

  for (; i < nn; i+=MAD_SSE_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    re = _mm_cmpeq_epi8(ra,rb);
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr) | _mm_movemask_epi8(re)) return 0;
  }

  if (nm) {
    rm = _mm_load_si128((__m128i*)mad_sse_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[i]));
    rb = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&b[i]));
    re = _mm_cmpeq_epi8(ra,rb);
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr) | _mm_movemask_epi8(re)) return 0;
  }

  return 1;
}

int
mad_mono_le (int n, const ord_t a[n], const ord_t b[n])
{
  assert(a && b);
  int i=0, nn=MAD_SSE2_CRND(n), nm=MAD_SSE2_CMOD(n);
  __m128i ra, rb, rr, rm;

  for (; i < nn; i+=MAD_SSE_CSIZ) {
    ra = _mm_loadu_si128((__m128i*)&a[i]);
    rb = _mm_loadu_si128((__m128i*)&b[i]);
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr)) return 0;
  }

  if (nm) {
    rm = _mm_load_si128((__m128i*)mad_sse_msk2[nm]);
    ra = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&a[i]));
    rb = _mm_and_si128(rm,_mm_loadu_si128((__m128i*)&b[i]));
    rr = _mm_cmpgt_epi8(ra,rb);
    if (_mm_movemask_epi8(rr)) return 0;
  }

  return 1;
}

// ---------------------------------------------------------------------------o

#endif // MAD_MONO_SSE2_TC

