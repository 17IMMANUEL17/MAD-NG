--[=[
 o-----------------------------------------------------------------------------o
 |
 | Orbit Correction module
 |
 | Methodical Accelerator Design - Copyright (c) 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - TODO

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

-- to check!
local warn, option, vector, matrix, command, track               in MAD
local bind1st                                                    in MAD.gfunc
local has_dpt, vname, msort                                      in MAD.gphys
local rep, tblcat, tblorder, errorf, assertf, printf             in MAD.utility
local eps                                                        in MAD.constant
local is_number, is_positive, is_boolean, is_true, is_iterable,
      is_mappable                                                in MAD.typeid

local abs, min, max in math

local assert, error, getmetatable, setmetatable, table =
      assert, error, getmetatable, setmetatable, table

-- MAD-X EALIGN slots in p_node->p_al_err->a
-- {"dx","dy","ds","dphi","dtheta","dpsi","mrex","mrey","mredx","mredy","arex","arey","mscalx","mscaly"}
--   0    1    2    3      4        5      6      7      8       9       10     11     12       13

-- correct command ------------------------------------------------------------o

local target0 = { b1={x=rep(0), y=rep(0)}, b2={x=rep(0), y=rep(0)} }

local function exec (self)
  local model, orbit, target in self

  if is_rawtable(model) then
    model = { b1=model }
  end

  orbit  = orbit  or model   -- reuse model orbit if not provided
  target = target or target0 -- use target zero orbit if not provided

  assert(is_mtable(model.b1) and model.b1.type == 'twiss',
                              "invalid model mtable (twiss mtable expected)")
  assert(is_mtable(orbit.b1), "invalid orbit mtable (mtable expected)")

  for idx,row in model:iter(range) do
  end


  -- for each planes:
  --   collect monitors and correctors on one or two tables
  --   build response matrix for ring or line for one or two tables
  --   solve the least squared minimum.
  --   reassign the strength to the kickers in the sequences (if provided)
  -- return the table of strengths and readings for planes
end

local correct = command 'correct' {
  model=nil,         -- mtable(s) with twiss functions (required)         (corr)
  orbit=nil,         -- mtable(s) with measured orbit(s), or use model    (corr)
  target=nil,        -- mtable(s) with target orbit(s), or zero orbit     (corr)
  range=nil,         -- mtable(s) range(s) to rectrict mtable(s)          (corr)
  sequence=nil,      -- sequence(s) used to update kickers                (corr)

  kind='ring',       -- 'line' or 'ring'                                  (corr)
  plane='xy',        -- 'x', 'y' or 'xy'                                  (corr)
  method='micado',   -- 'LSQ', 'SVD' or 'MICADO'                          (corr)
  tol=1e-5,          -- rms tolerance on the orbit                        (corr)

  cond=nil,          -- nil, 'svdcnd' or 'pcacnd'                         (corr)
  ncorr=0,           -- number of correctors to consider by MICADO, 0=all (corr)
  scut=0,            -- value to theshold singular values in precond      (corr)
  stol=0,            -- value to theshold correctors in svdcnd            (corr)
  cadd=0,            -- 0=set/1=add correction strength to sequ. kickers  (corr)
  monon=1,           -- fraction (0<?<=1) of randomly available monitors  (corr)
  monseed=nil,       -- random seed for monon selection                   (corr)
  monerror=0,        -- 1: use mrex and mrey alignment errors of monitors (corr)
                     -- 2: add msex and msey scaling errors of monitors   (corr)

  exec=exec,         -- command to execute upon children creation

  __attr = {
    'model', 'orbit', 'target', 'range', 'sequence',
    'kind', 'plane', 'method', 'tol', 'units',
    'cond', 'ncorr', 'scut', 'stol', 'cadd', 'monon', 'monseed', 'monerror', }
} :set_readonly()    -- reference correct command is readonly

-- end ------------------------------------------------------------------------o
return { correct = correct }
