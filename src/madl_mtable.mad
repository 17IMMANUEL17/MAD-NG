--[=[
 o-----------------------------------------------------------------------------o
 |
 | Table module
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide MAD table objects (TFS tables)
  - Many features have similar implementation to sequences

 o-----------------------------------------------------------------------------o
]=]

-- help -----------------------------------------------------------------------o

local __help = {}
__help.mtable = [=[
NAME
  mtable -- TFS table

SYNOPSIS
  my_tab = mtable 'mytab' { column_name_list... }

DESCRIPTION
  The module table creates TFS tables used by MAD. The columns and the rows can
  be accessed (in this order) by name or by index (rows only). If a name of the
  column name list is itself enclosed into a list (i.e. bracketed), then the
  name of the rows (i.e. strings) can be used to have direct access to the rows.
  Adding news rows or columns let the table grows automatically.

RETURN VALUE
  The TFS table.

ERRORS
  TODO

EXAMPLES
  local mtable in MAD
  tbl = mtable 'survey' { {'name'}, 'x', 'y', 'z', 'phi', 'theta', 'rho' }
  tbl:add_row { 'dft', 0.1, 0.2, 0.5, 0, 0, 0 }
  tbl:add_row { name='mq', x=0.2, y=0.4, z=1 }
  tbl = tbl + { name='mq', x=0.2, y=0.4, z=2 }
  print(tbl.x[2])     -- x of 'mq[1]' using col-then-row access
  print(tbl.mq[1].x)  -- x of 'mq[1]' using row-then-col access
  print(tbl.dft.x)    -- x of 'dft'   using row-then-col access
  tbl:write()         -- equivalent to tab:write "survey.tfs"

SEE ALSO
  sequence, element, beam
]=]

-- locals ---------------------------------------------------------------------o

local Object, vector, env                                        in MAD
local strtrim, strsplit, strbracket, fprintf                     in MAD.utility
local sub                                                        in MAD.operator
local is_nil, is_number, is_positive, is_string, is_table,
      is_function, is_file, is_matrix                            in MAD.typeid
local is_iterable, is_callable                                   in MAD.concept

local min, max, ceil in math
local table_new, table_clear, table_insert, table_remove =
      table.new, table.clear, table.insert, table.remove

-- root object ----------------------------------------------------------------o

-- hidden keys: internal variables, row dictionnary, columns list, list length.
local _var, _row, _col, _len = {}, {}, {}, {}

local origin = string.format("MAD %s %s %s", env.version, env.os, env.arch)

local mtable = Object '' {
  type='', title='', origin=origin, kind='mtable',
}

-- backup original methods and metamethods
local mtable_mt = getmetatable(mtable)
local var_raw, var_val = mtable.var_raw, mtable.var_val
local get_var, set_var = mtable_mt.__index, mtable_mt.__newindex

local function is_mtable(a)
  return is_table(a) and not is_nil(rawget(a,_var))
end

-- rows dictionnary helpers ---------------------------------------------------o

local function build_dict (tbl)
  local var, row = tbl[_var], tbl[_row]
  table_clear(row)                    -- clear content
  row[_col] = tbl[_col][var.refcol]   -- restore direct link to refcol
  for idx,key in ipairs(row[_col]) do
    local val = row[key]
    if is_nil(val) then               -- none -> key, index
      row[key] = idx
    elseif is_number(val) then        -- one  -> create list
      row[key] = {val, idx}
    else                              -- many -> append
      table_insert(val, idx)
    end
  end
  var.invalid = nil                   -- dict is valid
end

local function clr_dict (tbl)
  -- invalid is non-nil if dict exists, i.e. if reference column exists
  tbl[_var].invalid = tbl[_var].refcol
end

local function get_dict (tbl)
  if tbl[_var].invalid then -- non-nil only if dict exists and is invalid
    build_dict(tbl)
  end
  return tbl[_row] -- always exists but may be empty
end

-- memory bookkeeping helpers -------------------------------------------------o

-- allocated more memory for vectors.
local function expand (tbl, idx)
  local var, col = tbl[_var], tbl[_col]
  local len = ceil(max(idx, var.reserve, var.maxrow*1.5))
  local vec, j = var.colvec, 0
  for i=1,var.lastcol do
    if is_matrix(col[i]) then
      col[i], j = vector(len):copy(col[i]), j+1
      vec[j] = col[i]
    end
  end
  var.maxrow = len
  assert(j == #vec, "unexpected corrupted list of vectors")
end

-- ensure that vectors are long enough.
local function resize (tbl, idx)
  local var = tbl[_var]
  local vec = var.colvec
  if idx > var.maxrow then expand(tbl, idx) end
  for i=1,vec[_len] do
    vec[i]:_reshape(idx)
  end
end

-- convert columns with numbers into vectors plus some bookkeeping.
local function specialize (tbl)
  local var, row, col = tbl[_var], tbl[_row], tbl[_col]

  assert(is_nil(row[_col]) or is_table(row[_col]) and is_string(row[_col][1]),
         "invalid reference column (column of strings expected)")

  local len = max(var.reserve, var.maxrow)
  local j, vec, refidx , refcol = 0, {}, 0, row[_col]

  -- specialized column of numbers to vectors, preallocate tables.
  for i=1,var.lastcol do
    local v = col[i][1]
    if is_number(v) then -- column of numbers
      col[i], j = vector(len):seti(1, v), j+1
      vec[j] = col[i]
    else                 -- table of whatever
      if col[i] == refcol then refidx = i end -- reference column
      col[i] = table.new(len,0)
      col[i][1] = v
    end
  end

  -- row selection
  var.rowsel = table_new(len,0)
  var.rowsel[1] = true

  -- row dictionnary
  if refidx > 0 then
    tbl[_row] = table_new(0,len)
    tbl[_row][_col] = col[refidx]
  end

  -- length and direct access to vectors for resize
  if j > 0 then
    vec[_len]  = j
    var.colvec = vec
    var.maxrow = len
  else
    var.maxrow = 2^31
  end
end

-- helper for mangled names and elements indexes (same as sequence) -----------o

-- get index from signed index (direct)
local function index_of_idx (tbl, idx, ext_)
  assert(is_number(idx), "invalid argument #2 (index expected)")
  ext_ = ext_ or 0
  local n = #tbl
  if idx < 0 then idx = n+idx+1 end -- reflect
  if idx < 1 or idx > n+ext_ then return nil end
  return idx
end

-- get index from name [with count] (direct)
local function index_of_cnam (tbl, nam, cnt_)
  local ri = get_dict(tbl)[nam]
  if is_table(ri) then
    cnt_ = cnt_ or 1
    assert(is_number(cnt_), "invalid argument #3 (count expected)")
    if cnt_ < 0 then cnt_ = #ri+cnt_+1 end -- reflect
    return ri[cnt_]
  end
  return ri
end

-- get index from name [with relative count] (linear)
local function index_of_rnam (tbl, nam, cnt_, idx_)
  cnt_ = cnt_ or 1
  assert(is_number(cnt_), "invalid argument #3 (count expected)")
  local ri = get_dict(tbl)[nam]
  if is_nil(ri) then return nil end
  idx_ = index_of_idx(tbl, idx_ or 1)
  if is_nil(idx_) then return nil end
  if is_number(ri) then
    return (cnt_ ==  1 and ri >= idx_ and ri) or
           (cnt_ == -1 and ri <= idx_ and ri) or nil
  end
  if cnt_ > 0 then
    for i,ii in ipairs(ri) do
      if ii >= idx_ then return ri[i+cnt_-1] end
    end
  elseif cnt_ < 0 then
    for i,ii in ipairs(ri) do
      if ii >  idx_ then return ri[i+cnt_  ] end
    end
  end
  return nil
end

-- get index from [mangled] name (direct or linear)
local function index_of_mnam (tbl, nam, idx_)
  assert(is_string(nam), "invalid argument #2 (string expected)")
  local nam, cnt, _, bra = strbracket(nam)
  cnt = tonumber(cnt) or cnt
  if is_nil(idx_) or bra ~= 2 then
    return index_of_cnam(tbl, nam, cnt      ), bra
  else
    return index_of_rnam(tbl, nam, cnt, idx_), bra
  end
end

local function index_of_nam (tbl, nam, idx_)
  return (index_of_mnam(tbl, nam, idx_))
end

-- get [mangled] name from index (linear)
local function name_of_idx (tbl, idx)
  idx = index_of_idx(tbl, idx)
  if is_nil(idx) then return nil end
  local row = get_dict(tbl)
  local nam = row[_col][idx]
  local ri = row[nam]
  if is_number(ri) then
    assert(ri == idx, "unexpected corrupted dictionnary")
    return nam
  end
  for i,ii in ipairs(ri) do
    if ii == idx then
      return string.format("%s[%d]", nam, i)
    end
  end
  error("unexpected corrupted dictionnary")
end

-- rows manipulation ----------------------------------------------------------o

local function swp_row (tbl, idx1, idx2)
  local var, col = tbl[_var], tbl[_col]
  for i=1,var.lastcol do
    col[i][idx1], col[i][idx2] = col[i][idx2], col[i][idx1]
  end
  -- swap selection
  var.rowsel[idx1], var.rowsel[idx2] = var.rowsel[idx2], var.rowsel[idx1]
end

local function cpy_row (tbl, idx, val)
  local var, col = tbl[_var], tbl[_col]
  local len = min(#val, var.lastcol)
  if len > 0 then                                    -- index-value copy
    for i=1,len do
      col[i][idx] = val[i]
    end
  else                                               -- key-value copy
    for k,v in pairs(val) do
      local i = col[k]
      assert(i, "invalid argument #3 (invalid column name)")
      col[i][idx], len = v, len+1
    end
  end
  var.rowsel[idx] = true                             -- select row
  return len
end

local function sht_row (tbl, idx, dir)
  local var, col = tbl[_var], tbl[_col]
  if dir > 0 then
    for i=1,var.lastcol do
      if is_table(col[i]) then
        table_insert(col[i], idx, 0)
      else
        col[i]:shiftv(idx, 1)
      end
    end
    table_insert(var.rowsel, idx, true)              -- select row
  elseif dir < 0 then
    for i=1,var.lastcol do
      if is_table(col[i]) then
        table_remove(col[i], idx)
      else
        col[i]:shiftv(idx, -1)
      end
    end
    table_remove(var.rowsel, idx)
  end
end

-- proxy metamethods ----------------------------------------------------------o

--[=[
  Notes about mtable col proxy data structure:
]=]

local err = \  -> error("forbidden access to column", 2)

local function col_iter (s, i)
  i = i+1
  if i <= s[_var].lastrow then return i, s[_col](i) end
end

local col_gen_mt = {
  __index    = \s,k -> s[_col](k),
  __len      = \s   -> s[_var].lastrow,
  __ipairs   = \s   -> (col_iter, s, 0),
  __tostring = \s   -> string.format("<mtable column> %p", s),
  __newindex = err, __pairs = err,
}

--[=[
  Notes about mtable row proxy data structure:
  - Proxies are tables that store a mtable row_index or row_index_list.
    + provides pairs and ipairs row iterators and row length.
    + the mtable and the hidden keys are captured in the proxy metatable.

  - Hidden pxy[_row]:
    + row_index or row_index_list.
    + for row_index_list, the proxy expects a count to convert the list into a
      row_index and update pxy[_row] before use.
]=]

local function get_row_mt(tbl)
  local var_, col_ = tbl[_var], tbl[_col]

  local function idxiter (row, i)
    i = i+1
    if i <= var_.maxcol then return i, col_[i][row[_row]] end
  end

  local function keyiter (row, key)
    local i = row[_col]+1
    if i <= var_.maxcol then
      rawset(row, _col, i)
      return var_.colnam[i], col_[i][row[_row]]
    end
  end

  return {
    __len = function(row)
      local idx = row[_row]
      assert(is_number(idx), "invalid argument #2 (row count expected)")
      return idx >= 1 and idx <= var_.lastrow and var_.maxcol or 0
    end,

    __index = function(row, col)
      local idx = row[_row]
      if is_number(idx) then                               -- row index
        if is_string(col) then col = col_[col] end         -- col key to index
        return col_[col] and col_[col][idx]
      end
      assert(is_number(col), "invalid argument #2 (row count expected)")
      idx = idx[col]
      row[_row] = idx
      return idx and row
    end,

    __newindex = function(row, col, val) -- TODO!
      local idx = row[_row]
      if is_number(idx) then                               -- row index
        if is_string(col) then col = col_[col] end         -- col key to index
        if col then
          col_[col][idx] = val                             -- col key to index
          return
        end
      elseif is_table(idx) then                            -- row list
        assert(is_number(col), "invalid argument #2 (row count expected)")
        set_row(tbl, idx[col], val)                       -- row count to index
      end
      error "invalid argument #2 (row count or column key expected)"
    end,

    __ipairs = function (row)
      local idx = row[_row]
      assert(is_number(idx)                  , "invalid argument #1 (missing row count)")
      if idx < 0 then idx = var_.lastrow+idx end
      assert(idx >= 1 and idx <= var_.lastrow, "invalid argument #2 (row index out of bounds)")
      rawset(row, _row, idx)
      return idxiter, row, 0
    end,

    __pairs = function (row)
      local idx = row[_row]
      assert(is_number(idx)                  , "invalid argument #1 (missing row count)")
      if idx < 0 then idx = var_.lastrow+idx end
      assert(idx >= 1 and idx <= var_.lastrow, "invalid argument #2 (row index out of bounds)")
      rawset(row, _row, idx)
      rawset(row, _col, 0)
      return keyiter, row, nil
    end,

    __tostring = \s -> string.format("<mtable row> %p", s),
  }
end

-- mtable metamethods ---------------------------------------------------------o

-- iterator over rows
local function rowiter (row, i)
  i = i+1
  if i <= row[_var].lastrow then
    rawset(row, _row, i)
    return i, row
  end
end

local function ipairs_mm (tbl)
  local row = setmetatable({[_row]=0, [_var]=tbl[_var]}, tbl[_var].row_mt)
  return rowiter, row, 0
end

-- number of rows
local function len_mm (tbl)
  return tbl[_var].lastrow
end

-- read access precedence: row index, variable key, column key, row key.
local function index_mm (tbl, key)
  if is_number(key) then                                    -- row index
    -- row index
    local idx = index_of_idx(tbl, key)
    if idx then
      return setmetatable({[_row]=idx}, tbl[_var].row_mt)   -- row proxy
    end
    return nil
  end
  -- variable
  local var = var_raw(tbl, key)
  if var then
    return var_val(tbl, key, var)
  end
  -- column key
  local idx = tbl[_col][key]
  if idx then                                             -- column key
    return tbl[_col][idx]                                 -- full column
  end
  -- row key
  local idx = index_of_nam(tbl, key)                      -- row key
  if idx then
    return setmetatable({[_row]=idx}, tbl[_var].row_mt)   -- row proxy
  end
  return nil
end

-- write access precedence: rows index, rows keys, (new) variables
local function newindex_mm (tbl, key, val)
  if is_number(key) then                                  -- row index
    -- rows index
    set_row(tbl, key, val)
    return
  end
  -- variable
  local var = var_raw(tbl, key)
  if var then
    set_var(tbl, key, val)                                -- update variable
    return
  end
  -- columns keys
  local idx = tbl[_col][key]
  if idx then                                             -- column key
    error("invalid column write access")
  end
  -- rows keys
  local idx = index_of_nam(tbl, key)                      -- row key
  if idx then
    set_row(tbl, idx, val)
    return
  end
  -- new variables
  set_var(tbl, key, val)                                  -- set variable
end

--[=[
  Notes about mtable data structure:
  - Mtables are Objects
    + list of column names before init, list part is cleared by init (empty).
    + dict of user variables (as any object)
      mtable provides name, type, title, origin, date and time by inheritance.

  - Hidden tbl[_var]:
    + lastrow, lastcol: last valid row/column.
    + maxrow>=lastrow: vectors capacity (see resize and expand).
    + maxcol>=lastcol: extra column 'generators' added by user (e.g. callables).
    + invalid: non-nil if dictionnary exists and is invalid.
    + reserve: floor for first vector allocation.
    + refcol: index of the reference column used for rows dictionnary.
    + colvec: list of column vectors (if any) for direct access in resize.
    + hdrsel: list of ordered variable names for I/O (i.e. header keys).
    + colsel: list of ordered column names for I/O.
    + rowsel: list of selected rows for I/O (true means selected).
    + row_mt: metatable for row proxies, captures mtable and hidden keys.

  - Hidden tbl[_col]:
    + list of the columns _data_ ordered like in colsel.
    + dict of the columns key-col_index.
    + after the first row is stored, colunms are specialized by element types
      numbers are stored in vectors, others in lists.
    + supported column formats are (numerics are formated by MAD.option.format):
      - string:  %s (quoted, internally %q)
      - number:  %f (e.g. 1.0, 1, -1) (+MAD-X %le)
      - logical: %l (true, false).

  - Hidden tbl[_row]:
    + dict of key-row_index or key-row_index_list (i.e. repeated key).
    + direct access to reference column (if any) through tbl[_row][_col],
      equivalent to tbl[_col][tbl[_var].refcol]
]=]

-- mtable initialization
local function mtable_init (tbl)
  local n = mtable.raw_len(tbl) -- number of columns
  local row, col, var = {}, table_new(n,n), {
    lastrow=0, lastcol=0, maxrow=0, maxcol=0, reserve=8,
--  invalid=nil, refcol=nil, colvec=nil, rowsel=nil, row_mt=nil,
    hdrsel = { 'name', 'type', 'title', 'origin', 'date', 'time' },
    rowsel = {}, colsel = table_new(n,0),
  }

  -- top level variables to avoid lookup recursion
  rawset(tbl, _var, var)
  rawset(tbl, _row, row)
  rawset(tbl, _col, col)

  -- protect against inheritance
  assert(tbl.parent == mtable or tbl == mtable,
         "invalid mtable instance (inheritance not allowed)")

  for i,v in mtable_mt.__ipairs(tbl) do
    if is_table(v) then var.refcol, v = i, v[1] end  -- this column is the dict
    assert(is_string(v), "invalid column name (string expected)")
    col[i], col[v], var.colsel[i] = {}, i, v         -- data, key2idx, idx2key
  end
  tbl:clear_array()
  var.lastcol, var.maxcol = n, n                     -- current #col
  var.row_mt = get_row_mt(tbl)                       -- row proxy metatable

  -- other keys are inherited from table
  tbl:set_variables { date = os.date'%d/%m/%y', time = os.date'%H:%M:%S' }
  return tbl
end

-- methods (readonly) ---------------------------------------------------------o

local function name_of (tbl, a)
  assert(is_mtable(tbl), "invalid argument #1 (mtable expected)")
  if is_number(a) then return name_of_idx(tbl, a) end
  error("invalid argument #2 (number expected)")
end

local function index_of (tbl, a, ref_)
  assert(is_mtable(tbl), "invalid argument #1 (mtable expected)")
      if is_number(a) then return index_of_idx(tbl, a)
  elseif is_string(a) then return index_of_nam(tbl, a, ref_)
  end
  error("invalid argument #2 (number or string expected)")
end

local function range_of (tbl, rng, ref_) -- exposed
  assert(is_mtable(tbl), "invalid argument #1 (mtable expected)")
  local start, stop
  if is_number(rng) then
    start = index_of_idx(tbl, rng)
    return start, start
  elseif is_string(rng) then
    local s1, i2 = strsplit(rng, "/" )
    local s2 = i2 > 0 and strtrim(rng, i2+1) or nil
    start, stop = tonumber(s1) or s1, tonumber(s2) or s2
  elseif is_table(rng) then
    start, stop = rng[1], rng[2]
  elseif is_range(rng) then
    start, stop = rng:bounds()
  else error "invalid argument #2 (index, string, range or table expected)"
  end
  start = index_of(tbl, start, ref_)
  stop  = stop and index_of(tbl, stop, ref_ or start) or start
  return start, stop
end

local function length_of (tbl, rng_) -- exposed
  assert(is_mtable(tbl), "invalid argument #1 (mtable expected)")
  local siz = rng_ and 1-sub(range_of(tbl, rng_)) or 0
  return siz + #tbl * (siz <= 0 and 1 or 0)
end

-- methods (R/W, update dict) -------------------------------------------------o

local function reserve (tbl, nrow)
  assert(is_mtable(tbl)   , "invalid argument #1 (mtable expected)")
  assert(is_positive(nrow), "invalid argument #2 (number expects)")
  tbl[_var].reserve = ceil(min(nrow, 1e5))
  return tbl
end

local function get_col (tbl, idx)
  assert(is_mtable(tbl), "invalid argument #1 (mtable expected)")
  local col = tbl[_col]
  if is_string(idx) then idx = col[idx] end
  assert(is_number(idx), "invalid argument #2 (valid column index expected)")
  if idx < 0 then idx = #col+idx+1 end
  return col[idx]
end

local function add_col (tbl, nam, val)
  assert(is_mtable(tbl), "invalid argument #1 (mtable expected)")
  assert(is_string(nam), "invalid argument #2 (string expected)")
  local var, col, idx = tbl[_var], tbl[_col]
  assert(is_nil(col[nam]), "invalid argument #2 (column name already in use)")

  if is_callable(val) then     -- generator
    val = setmetatable({ [_var]=var, [_col]=val }, col_gen_mt)
    idx = var.maxcol+1         -- append
  elseif is_iterable(val) then -- table or vector
    assert(#val >= var.lastrow, "invalid argument #2 (longer iterable expected)")
    if is_number(val[1]) then  -- add a vector
      local len
      if var.colvec then
        len = var.maxrow
      else                     -- first vector in the table
        len = max(var.reserve, var.lastrow)
        var.maxrow, var.colvec = len, {}
      end
      val = vector(len):fill(val)
      table_insert(var.colvec, val)
    end
    idx = var.lastcol+1        -- insert
    var.lastcol = idx
    for k,v in pairs(col) do   -- shift index of generator key-index by one
      if is_string(k) and v >= idx then
        col[k] = v+1
      end
    end
  end

  col[nam] = idx
  table_insert(col, idx, val)
  var.maxcol = var.maxcol+1
end

local function get_row (tbl, idx, ref_)
  idx = index_of(tbl, idx, ref_)
  assert(is_number(idx), "invalid argument #2 (valid row index expected)")
  return setmetatable({[_row]=idx}, tbl[_var].row_mt)
end

local function set_row (tbl, key, val)
  local idx = index_of(tbl, key)
  assert(is_number(idx)  , "invalid argument #2 (valid row index expected)")
  assert(is_iterable(val), "invalid argument #3 (iterable expected)")
  cpy_row(tbl, idx, val)
  clr_dict(tbl)
  return tbl
end

local function add_row (tbl, val)
  assert(is_mtable(tbl)  , "invalid argument #1 (mtable expected)")
  assert(is_iterable(val), "invalid argument #2 (iterable expected)")
  local var = tbl[_var]
  local rsz = var.lastrow+1
  if var.colvec then resize(tbl, rsz) end
  local len = cpy_row(tbl, rsz, val)
  if len ~= var.lastcol then
    error(string.format(
      "invalid argument #2 (missing %d columns in row add)", var.lastcol-len))
  end
  if rsz == 1 then specialize(tbl) end
  var.lastrow = rsz
  clr_dict(tbl)
  return tbl
end

local function insert_row (tbl, idx, val)
  idx = index_of(tbl, idx, 1)
  assert(is_number(idx)  , "invalid argument #2 (valid row index expected)")
  assert(is_iterable(val), "invalid argument #3 (iterable expected)")
  local var = tbl[_var]
  local rsz = var.lastrow+1
  if idx == rsz then return add_row(tbl, val) end
  if var.colvec then resize(tbl, rsz) end
  sht_row(tbl, idx, 1) -- shift row from idx by one row down
  local len = cpy_row(tbl, idx, val)
  if len ~= var.lastcol then
    error(string.format(
      "invalid argument #3 (missing %d columns in row insert)", var.lastcol-len))
  end
  var.lastrow = rsz
  clr_dict(tbl)
  return tbl
end

local function remove_row (tbl, idx)
  idx = index_of(tbl, idx)
  assert(is_number(idx), "invalid argument #2 (valid row index expected)")
  local var = tbl[_var]
  local rsz = var.lastrow-1
  if rsz == 0 then
    for i=1,var.lastcol do tbl[_col][i] = {} end
    var.colvec = nil
  else
    sht_row(tbl, idx, -1) -- shift row from idx by one row up
    if var.colvec then resize(tbl, rsz) end
  end
  var.lastrow = rsz
  clr_dict(tbl)
  return tbl
end

local function swap_rows (tbl, key1, key2)
  local idx1, idx2 = index_of(tbl, key1), index_of(tbl, key2)
  assert(is_number(idx1), "invalid argument #2 (valid row index expected)")
  assert(is_number(idx2), "invalid argument #3 (valid row index expected)")
  swp_row(tbl, idx1, idx2)
  clr_dict(tbl)
  return tbl
end

-- I/O methods ----------------------------------------------------------------o

local function write(tbl, filnam_, colnam_, hdrnam_)
  if is_table(filnam_) and is_nil(hdrnam_) then
    filnam_, colnam_, hdrnam_ = nil, filnam_, colnam_
  end
  local var, col = tbl[_var], tbl[_col]
  local hname = hdrnam_ or var.hdrsel
  local cname = colnam_ or var.colsel
  local cols = table_new(#cname, 0)

  -- check and collect columns
  for i=1,#cname do
    assert(col[cname[i]], "invalid column name")
    cols[i] = col[col[cname[i]]]
  end

  -- open file
  local file
  if is_file(filnam_) then
    file = filnam_
    assert(io.type(file) == 'file', "invalid argument #2 (open file expected)")
  else
    local fname = filnam_ or tbl:get_var'name' or 'tmptable'
    assert(is_string(fname), "invalid argument #2 (string expected)")
    if string.sub(fname,-4) ~= '.tfs' then fname = fname .. '.tfs' end
    local handle, err = io.open(fname, 'w')
    file = handle
    if not handle then
      error("unable to open file '" .. fname .. "' for writing: " .. err)
    end
  end

  -- dump header
  for i=1,#hname do
    local k, v = hname[i], tbl:get_var(hname[i])
    if is_string(v) then
      fprintf(file, '@ %-18s %%%02ds %q\n', k, #v, v)
    elseif is_number(v) then
      fprintf(file, '@ %-18s %%le %s\n', k, tostring(v))
    else
      fprintf(file, '@ %-18s %%? %s\n', k, tostring(v))
    end
  end

  -- dump col names
  file:write('*')
  for i=1,#cols do
    fprintf(file, ' %-17s ', cname[i])
  end
  file:write('\n')

  -- dump col types
  file:write('$')
  for i=1,#cols do
    local v = cols[i][1]
    local fmt = is_string (v) and '%s'
             or is_number (v) and '%le' or '%?'
    fprintf(file, ' %-17s ', fmt)
  end
  file:write('\n')

  -- dump rows
  for j=1,var.lastrow do
    file:write(' ')
    for i=1,#cols do
      local v = cols[i][j]
      if is_string(v)
      then fprintf(file, '%-18s ', '"'..v..'"')
      else fprintf(file, '%-18s ', tostring(v))
      end
    end
    file:write('\n')
  end

  -- close file
  file:close()
  return tbl
end

-- env ------------------------------------------------------------------------o

MAD.typeid.is_mtable = is_mtable

-- members --------------------------------------------------------------------o

mtable_init(mtable): set_functions {
  -- memory management
  reserve         = reserve,

  -- row indexing (see sequence)
  name_of         = name_of,
  index_of        = index_of,
  range_of        = range_of,
  length_of       = length_of,

  -- variables access (for disambiguation)
  get_var         = get_var,
  set_var         = set_var,

  -- columns manipulation (cannot be reordered because of raw copy)
  get_col         = get_col,  -- for disambiguation
-- set_col        = set_col,  -- overcomplicated due to specialization?
  add_col         = add_col,  -- accept callable (i.e. generator)

  -- rows manipulation
  get_row         = get_row,  -- for disambiguation and ref_ argument
  set_row         = set_row,
  add_row         = add_row,
  insert_row      = insert_row,
  remove_row      = remove_row,
  swap_rows       = swap_rows, -- required because get_row returns a proxy...

  -- read/write
  read           := error("NYI", 2), -- TODO (using lpeg?)
  write           = write,

} : set_metamethods ({
  __add           = add_row,
  __len           = len_mm,
  __index         = index_mm,
  __newindex      = newindex_mm,
  __ipairs        = ipairs_mm,

  __init          = mtable_init,

}, true): set_readonly()

-- end ------------------------------------------------------------------------o
return {
  mtable = mtable,
  __help = __help,
}


--[[ 'High level table access is very slow!
code A:
t0=os.clock()
do
  local a, t = 0, MAD.mtable 'mytable' { {'name'}, 'x', 'y', 'z' }
  t=t+{'A', 1.1,1.2,1.3}+{'B', 2.1,2.2,2.3}+{'A', 3.1,3.2,3.3}
  for i=1,1e7 do a=a+t.B.x end
  print('a=',a)
end
print('time=',os.clock()-t0)
time= 1.14

code B:
t0=os.clock()
do
  local a, t = 0, MAD.mtable 'mytable' { {'name'}, 'x', 'y', 'z' }
  t=t+{'A', 1.1,1.2,1.3}+{'B', 2.1,2.2,2.3}+{'A', 3.1,3.2,3.3}
  for i=1,1e7 do a=a+t.x[2] end
  print('a=',a)
end
print('time=',os.clock()-t0)
time= 1.14

Output code A:
building dict:  1
a=  21000000.000896
time= 1.14
changing t.B.x by t[2].x
time= 1.14
changing t.B.x by t.x[2]
time= 0.012
]]
