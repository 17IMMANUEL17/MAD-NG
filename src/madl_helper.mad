--[=[
 o-----------------------------------------------------------------------------o
 |
 | Help module
 |
 | Methodical Accelerator Design - Copyright CERN 2015
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide a service to find and return autonatically the string attached to
    module.__help[.func].

 o-----------------------------------------------------------------------------o
]=]

local M = { __help = {} }

-- help -----------------------------------------------------------------------o

M.__help.self = [=[
NAME
  helper -- display modules and functions help on the console

SYNOPSIS
  help = mad.help
  help 'module'
  help 'module.function'

DESCRIPTION
  The 'help' module displays the help of MAD modules and functions on the
  terminal.

RETURN VALUES
  True if the help was found, false otherwise.

SEE ALSO
  None
]=]

-- metamethods ----------------------------------------------------------------o

local MT = {}; setmetatable(M, MT)

function MT:__call(a)
  if type(a) == "table" then
    local mod = a
    local mod_name = module.get_module_name(mod)
    if mod_name and mod.__help.self then
      io.write(mod.__help.self)
      return true
    end

  elseif type(a) == "function" then
    local fun = a
    local fun_name, mod = module.get_function_name(fun)
    if fun_name and mod.__help[fun_name] then
      io.write(mod.__help[fun_name])
      return true
    end

  else
    io.write("No help found for ", a)
    return false
  end
end

local function help (name)
  local dot = string.find(name, '.', 1, true)
  local mod = dot and string.sub(name, 1, dot-1) or name
  local fun = dot and string.sub(name, dot+1) or 'self'
  local ref = package.loaded[mod] or package.loaded['madl_'..mod] or
              package.loaded['mad'][mod] -- or?
  local str
  if ref and ref.__help then
    str = ref.__help[fun]
  end
  io.write(str)
end

_G.help = help

-- end ------------------------------------------------------------------------o

return help
