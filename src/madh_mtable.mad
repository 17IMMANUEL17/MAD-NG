--[=[
 o-----------------------------------------------------------------------------o
 |
 | Table module (help)
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

local __help = {}

-- help -----------------------------------------------------------------------o

__help.mtable = [=[
NAME
  mtable -- TFS table

SYNOPSIS
  my_tab = mtable 'mytab' { column_name_list... }

DESCRIPTION
  The module table creates TFS tables used by MAD. The columns and the rows can
  be accessed (in this order) by name or by index (rows only). If a name of the
  column name list is itself enclosed into a list (i.e. bracketed), then the
  name of the rows (i.e. strings) can be used to have direct access to the rows.
  Adding news rows or columns let the table grows automatically.

RETURN VALUE
  The TFS table.

ERRORS
  TODO

EXAMPLES
  local mtable in MAD
  tbl = mtable 'survey' { {'name'}, 'x', 'y', 'z', 'phi', 'theta', 'rho' }
  tbl:add_row { 'dft', 0.1, 0.2, 0.5, 0, 0, 0 }
  tbl:add_row { name='mq', x=0.2, y=0.4, z=1 }
  tbl = tbl + { name='mq', x=0.2, y=0.4, z=2 }
  print(tbl.x[2])     -- x of 'mq[1]' using col-then-row access
  print(tbl.mq[1].x)  -- x of 'mq[1]' using row-then-col access
  print(tbl.dft.x)    -- x of 'dft'   using row-then-col access
  tbl:write()         -- equivalent to tab:write "survey.tfs"

SEE ALSO
  sequence, element, beam
]=]

--[=[
programming model:
tbl:foreach {
  action=function,
  range=range,
  selected=t/f/nil, pattern=string, kind=string, select=predicate -- AND'ed selections
  default=nil/'none'
}
tbl:foreach(action, range, select, not)
tbl:select/deselect(range, select, not)
tbl:filter(range, select, default)
without any selection criterium:
  not ~= true and default ~= 'none' -> select all
  not == true or  default == 'none' -> select nothing
]=]

-- end ------------------------------------------------------------------------o
return __help
