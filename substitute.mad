
------------------------------------------
-- Generic utility functions
------------------------------------------

-- Expand a template pattern
local function substitute(template, context)
  return ({template:gsub("$([_%a][_%w]*)", \x -> tostring(context[x]))})[1]
end

local function run(command, input)
  -- TODO: redirect output
  local f = assert(io.popen(command, "w"))
  f:write(input)
  f:close()
end

local function read_file(name)
   local f = assert(io.open(name, "rb"))
   local contents = assert(f:read("*a"))
   f:close()
   return contents
end

------------------------------------------
-- Config
------------------------------------------

local function run_all_with_settings(engines, context)
  for name, data in pairs(engines) do
    run(data.command, substitute(data.template, context))
  end
end

local function run_all(engines, context)
  -- benchmark with varying initial conditions independently
  for _, col in ipairs({'x', 'px', 'y', 'py', 't', 'pt'}) do
    run_all_with_settings(engines, context {
        output = base_settings.prefix .. col,
        [col]  = 'linrange',
    })
  end
end


local DEFAULTS = MAD.Object {
    -- sequence
    seq_name  = "seq",
    el_name   = "el",
    seq_args  = [[refer=entry, l=1]],
    beam_args = [[particle="proton", energy=2]],
    -- range:
    start     = 0,
    stop      = 0.5,
    count     = 20,
    -- particle:
    x = 0, px = 0,
    y = 0, py = 0,
    t = 0, pt = 0,
}

local function main()

  local engines = {
    madx = {
      command = 'madx',
      template = read_file('madx_track.madx'),
    },
    ptc = {
      command = 'madx',
      template = read_file('ptc_track.madx'),
    },
    mad = {
      command = 'mad',
      template = read_file('mad_track.mad'),
    },
  }

  local context = DEFAULTS {
    el_type   = "quadrupole",
    el_args   = [[k1=0.1, l=1, at=0]],
    -- output:
    prefix    = 'quadrupole/',
  }

  run_all(engines, context)
end

main()
