
------------------------------------------
-- Generic utility functions
------------------------------------------

-- Expand a template pattern
local function substitute(template, context)
  return ({template:gsub("${([_%a][_%w]*)}",
           -- recursive substitutions:
           \x -> substitute(tostring(context[x]), context))})[1]
end

local function read_file(name)
  local f = assert(io.open(name, "rb"))
  local contents = assert(f:read("*a"))
  f:close()
  return contents
end

local function save_file(name, contents)
  local f = assert(io.open(name, "wb"))
  assert(f:write(contents))
  f:close()
end

------------------------------------------
-- Config
------------------------------------------

local function substitute_all(templates, context)
  for name, template in pairs(templates) do
    save_file(context.output .. '.' .. name,
              substitute(template, context))
  end
end


local DEFAULTS = MAD.Object {
    -- sequence
    seq_name  = "seq",
    el_name   = "el",
    seq_args  = [[refer=entry, l=1]],
    beam_args = [[particle="proton", energy=2]],
    -- loop:
    varname   = "loop_value",
    varfunc   = "linrange",
    start     = 0,
    stop      = 0.5,
    count     = 20,
    -- particle:
    x = 0, px = 0,
    y = 0, py = 0,
    t = 0, pt = 0,
}

local function main()

  local templates = {
    madx = read_file('madx_track.madx'),
    ptc = read_file('ptc_track.madx'),
    mad = read_file('mad_track.mad'),
  }

  local context = DEFAULTS {
    el_type = "quadrupole",
    el_args = [[k1=0.1, l=1, at=0]],
    -- output:
    prefix = 'quadrupole/',
  }

  -- benchmark with varying initial conditions independently
  for _, col in ipairs({'x', 'px', 'y', 'py', 't', 'pt'}) do
    substitute_all(templates, context {
        output = context.prefix .. col,
        [col]  = '${varname}',
    })
  end
end

main()
