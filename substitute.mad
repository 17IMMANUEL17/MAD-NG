#! /usr/bin/env mad

------------------------------------------
-- Generic utility functions
------------------------------------------

-- Expand a template pattern
local function substitute(template, context)
  return ({template:gsub("${([_%a][_%w]*)}",
           -- recursive substitutions:
           \x -> substitute(tostring(context[x]), context))})[1]
end

local function read_file(name)
  local f = assert(io.open(name, "rb"))
  local contents = assert(f:read("*a"))
  f:close()
  return contents
end

local function save_file(name, contents)
  local f = assert(io.open(name, "wb"))
  assert(f:write(contents))
  f:close()
end

local function run(command, stdin, stdout)
  -- TODO: use pcall
  if stdin then command = command .. " <" .. stdin end
  if stdout then command = command .. " >" .. stdout end
  os.execute(command)
end

------------------------------------------
-- Config
------------------------------------------

local function substitute_all(context, templates)
  local results = {}
  -- benchmark with varying initial conditions independently
  for _, study in ipairs(context.studies:get_varkey()) do
    local overrides = context.studies[study]
    if overrides then
      local context = context {
        prefix  = context.prefix .. study,
        [study] = "${varname}", -- usually study is the varied attribute name
        study   = study,
      } (overrides)
      for engine, template in pairs(templates) do
        local context = context { engine=engine }
        local input = substitute(template, context)
        local madfile = substitute(context.madfile, context)
        save_file(madfile, input)
        table.insert(results, {context, engine, madfile})
      end
    end
  end
  return results
end


-- GLOBAL:
DEFAULTS = MAD.Object {
    -- sequence
    seq_name  = "seq",
    el_name   = "el",
    seq_args  = [[refer=entry, l=${seq_len}]],
    beam_args = [[particle="proton", energy=${energy}]],
    -- loop:
    varname   = "loop_value",
    varfunc   = "linrange",
    start     = 0,
    stop      = 0.5,
    count     = 20,
    -- particle:
    x = 0, px = 0,
    y = 0, py = 0,
    t = 0, pt = 0,
    energy = 2,
    seq_len = 1,
    studies = MAD.Object {
      x = {}, px = {},
      y = {}, py = {},
      t = {}, pt = {},
      energy = {
        varfunc = "logrange",
        start   = 2,
        stop    = 2000,
      },
    },
    -- output:
    madfile = "${prefix}.${engine}",
    tfsfile = "${prefix}.${engine}.tfs",
    logfile = "${prefix}.${engine}.log",
}

local function run_madx(madfile, logfile)
  run("madx", madfile, logfile)
end

local function run_mad(madfile, logfile)
  run("mad " .. madfile, nil, logfile)
end

local function main(args)

  -- handle command line
  local opts = {}
  for _, v in ipairs(args) do
    local key, val = v:match('%-%-([^=]*)=(.*)')
    if key then
      opts[key] = val
    elseif v:match('^%-%-no%-') then
      opts[v:sub(6)] = false
    elseif v:match('^%-%-') then
      opts[v:sub(3)] = true
    else
      table.insert(opts, v)
    end
  end

  local templates = {
    madx = read_file('madx_track.madx'),
    ptc = read_file('ptc_track.madx'),
    mad = read_file('mad_track.mad'),
  }

  local runners = {
    madx = run_madx,
    ptc = run_madx,
    mad = run_mad,
  }

  -- first write+exec mad files
  for _, filename in ipairs(opts) do
    local context = dofile(filename)
    local studies = substitute_all(context, templates)

    if opts['run'] then
      for _, study in ipairs(studies) do
        local context, engine, madfile = unpack(study)
        local logfile = substitute(context.logfile, context)
        runners[engine](madfile, logfile)
      end
    end
  end
end

main(arg)
