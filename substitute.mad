#! /usr/bin/env mad

------------------------------------------
-- Generic utility functions
------------------------------------------

-- Expand a template pattern
local function substitute(template, context)
  return (template:gsub("${([_%a][_%w]*)}", \x -> tostring(context[x])))
end

local function read_file(name)
  local f = assert(io.open(name, "rb"))
  local contents = assert(f:read("*a"))
  f:close()
  return contents
end

local function save_file(name, contents)
  local f = assert(io.open(name, "wb"))
  assert(f:write(contents))
  f:close()
end

local function run(command, stdin, stdout)
  -- TODO: use pcall
  if stdin then command = command .. " <" .. stdin end
  if stdout then command = command .. " >" .. stdout end
  os.execute(command)
end

local function titlecase(name)
  return name:gsub("%s*(%w)(%w*)%s*", function(first, rest)
    return string.upper(first) .. rest
  end)
end

function table.clone(orig)
  local clone = {}
  for k, v in pairs(orig) do clone[k] = v end
  return clone
end

local function next_all(s, var)
  local k
  s.var, k = s.f(s.s, s.var)
  return k, s.t[k]
end

local function pairs_all(t, p)
  if t.get_varkey then
    local f, s, var = ipairs(t:get_varkey(p))
    return next_all, {t=t, f=f, s=s, var=var}, nil
  else
    return pairs(t)
  end
end

------------------------------------------
-- Config
------------------------------------------

-- GLOBAL
pi = MAD.gmath.pi
L  = \str -> read_file('templates/'..str)   -- load a file
T  = \str -> (\ctx -> substitute(str, ctx)) -- specify a template by string
LT = \str -> T(L(str))                      -- specify a template by filename
R  = \str -> require('configs.'..str)
_G.save_file = save_file
_G.run = run


local function wrap_context(obj)
  return obj {
    varname = \s -> (s.engine == 'mad' and
                      obj.varname:gsub('->', '.') or
                      obj.varname)
  }
end

-- TODO: create test matrix in memory
-- TODO: compare by columns using assertAllAlmostEquals
local function load_test(template, ctx)
  local input = substitute(template, {
    madx_file = ctx.runs.madx.tfsfile,
    mad_file = ctx.runs.mad.tfsfile,
    ptc_file = ctx.runs.ptc.tfsfile,
    suite = ctx.study,
    ptc_margin = 1e-14,
    madx_margin = 1e-13,
    varname = ctx.varname,
  })
  assert(load(input, suite))()
end


local function create_plots(ctx)
  local plot, vector in MAD
  local loadtxt = require('loadtxt')

  local files = {
    madx = ctx.runs.madx.tfsfile,
    mad  = ctx.runs.mad.tfsfile,
    ptc  = ctx.runs.ptc.tfsfile,
  }

  local data = {
    mad  = loadtxt(io.lines(files.mad)),
    ptc  = loadtxt(io.lines(files.ptc)),
    madx = loadtxt(io.lines(files.madx)),
  }

  for _, var in ipairs({"x", "px", "y", "py", "t", "pt"}) do
    local data = {
      x    = vector(data.mad[ctx.varname]),
      mad  = vector(data.mad[var]),
      ptc  = vector(data.ptc[var]),
      madx = vector(data.madx[var]),
    }
    -- absolute values
    plot {
      filename = ctx.prefix .. "_" .. var .. "_abs.eps",
      data  = data,
      HAXIS = 'x',
      VAXIS = {'mad', 'ptc', 'madx'},
      xlabel = "initial " .. ctx.study,
      ylabel = "final " .. var,
    }
    -- differences
    plot {
      filename = ctx.prefix .. "_" .. var .. "_diff.eps",
      data  = {
        x = data.x,
        ["mad-ptc"] = data.mad - data.ptc,
        ["mad-madx"] = data.mad - data.madx,
      },
      HAXIS = 'x',
      VAXIS = {'mad-ptc'},
      VAXIS2 = {'mad-madx'},
      xlabel = "initial " .. ctx.study,
      ylabel = "final " .. var,
    }
  end
end


local function main(args)

  -- handle command line
  local opts = {}
  for _, v in ipairs(args) do
    local key, val = v:match('%-%-([^=]*)=(.*)')
    if key then
      opts[key] = val
    elseif v:match('^%-%-no%-') then
      opts[v:sub(6)] = false
    elseif v:match('^%-%-') then
      opts[v:sub(3)] = true
    else
      table.insert(opts, v)
    end
  end

  local test_template = read_file('templates/test_basic_track.mad')

  local runners = {
    madx = run_madx,
    ptc = run_madx,
    mad = run_mad,
  }

  if #(opts) ~= 1 then
    print("Usage: " .. args[0] .. " CONFIG [--run] [--plot] [--test]")
    os.exit(1)
  end

  -- first write+exec mad files
  local filename = opts[1]
  local context = dofile(filename)
  local studies = {}

  -- derive a context for every study
  for study, overrides in pairs_all(context.studies) do
    if overrides then
      table.insert(studies, context {
        prefix  = context.prefix .. study,
        [study] = T"${varname}", -- usually study is the varied attribute name
        study   = study,
      } (overrides))
    end
  end

  -- substitute a template for each engine
  for _, study in ipairs(studies) do
    study.runs = {}
    for engine, overrides in pairs_all(study.engines) do
      local context = wrap_context( study { engine=engine } (table.clone(overrides)) )
      context:_generate()
      study.runs[engine] = context
    end
  end

  -- run test for each engine
  if opts['run'] then
    for _, study in ipairs(studies) do
      for engine, context in pairs(study.runs) do
        context:_run()
      end
    end
  end

  if opts['plot'] then
    for _, study in ipairs(studies) do
      create_plots(study)
    end
  end

  -- run tests last
  if opts['test'] then
    for _, study in ipairs(studies) do
      load_test(test_template, study)
    end
    -- control the display of custom objects during tests
    MAD:export('tostring', true)
    os.exit( MAD.utest.LuaUnit.run('-v') )
  end
end

if arg[0]:gsub('.*[/\\]', '') == 'substitute.mad' then
  main(arg)
end
