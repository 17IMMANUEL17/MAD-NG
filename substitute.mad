
------------------------------------------
-- Generic utility functions
------------------------------------------

-- Expand a template pattern
local function substitute(template, context)
  return ({template:gsub("${([_%a][_%w]*)}",
           -- recursive substitutions:
           \x -> substitute(tostring(context[x]), context))})[1]
end

local function read_file(name)
  local f = assert(io.open(name, "rb"))
  local contents = assert(f:read("*a"))
  f:close()
  return contents
end

local function save_file(name, contents)
  local f = assert(io.open(name, "wb"))
  assert(f:write(contents))
  f:close()
end

local function merge(base, tab)
  -- TODO: better solution using metatables
  local result = {}
  for k, v in pairs(base) do result[k] = v end
  for k, v in pairs(tab) do result[k] = v end
  return result
end

------------------------------------------
-- Config
------------------------------------------

local function substitute_all(templates, context)
  for name, template in pairs(templates) do
    save_file(context.output .. '.' .. name,
              substitute(template, context))
  end
end


local DEFAULTS = MAD.Object {
    -- sequence
    seq_name  = "seq",
    el_name   = "el",
    seq_args  = [[refer=entry, l=${seq_len}]],
    beam_args = [[particle="proton", energy=${energy}]],
    -- loop:
    varname   = "loop_value",
    varfunc   = "linrange",
    start     = 0,
    stop      = 0.5,
    count     = 20,
    -- particle:
    x = 0, px = 0,
    y = 0, py = 0,
    t = 0, pt = 0,
    energy = 2,
    seq_len = 1,
    studies = {
      x = {}, px = {},
      y = {}, py = {},
      t = {}, pt = {},
      energy = {
        varfunc = "logrange",
        start   = 2,
        stop    = 2000,
      },
    },
}

local function main(args)

  local opts = {}
  for _, v in ipairs(args) do
    if v:match('^--') then
      opts[v:sub(3)] = true
    else
      table.insert(opts, v)
    end
  end

  local templates = {
    madx = read_file('madx_track.madx'),
    ptc = read_file('ptc_track.madx'),
    mad = read_file('mad_track.mad'),
  }

  local context = DEFAULTS {
    el_type = "quadrupole",
    el_args = [[k1:=${k1}, l=1, at=0]],
    k1      = 0.1,
    -- output:
    prefix = 'quadrupole/',
    studies = merge(DEFAULTS.studies, {
      k1 = {stop=0.01, x=0.01, y=0.01},
    }),
  }

  -- benchmark with varying initial conditions independently
  for name, data in pairs(context.studies) do
    if data then
      substitute_all(templates, (context{
        output  = context.prefix .. name,
        [name]  = "${varname}"
      })(data))
    end
  end
end

main(arg)
