#! /usr/bin/env mad

------------------------------------------
-- Generic utility functions
------------------------------------------

-- Expand a template pattern
local function substitute(template, context)
  return ({template:gsub("${([_%a][_%w]*)}",
           -- recursive substitutions:
           \x -> substitute(tostring(context[x]), context))})[1]
end

local function read_file(name)
  local f = assert(io.open(name, "rb"))
  local contents = assert(f:read("*a"))
  f:close()
  return contents
end

local function save_file(name, contents)
  local f = assert(io.open(name, "wb"))
  assert(f:write(contents))
  f:close()
end

local function run(command, stdin, stdout)
  -- TODO: use pcall
  if stdin then command = command .. " <" .. stdin end
  if stdout then command = command .. " >" .. stdout end
  os.execute(command)
end

local function titlecase(name)
  return name:gsub("%s*(%w)(%w*)%s*", function(first, rest)
    return string.upper(first) .. rest
  end)
end

------------------------------------------
-- Config
------------------------------------------

-- GLOBAL:
DEFAULTS = MAD.Object {
    -- sequence
    madx_sequence  = [[
${seq_name}: sequence, refer=entry, l=${seq_len};
    ${el_name}: ${el_type}, ${el_args};
endsequence;
    ]],
    ptc_sequence = "${madx_sequence}",
    mad_sequence = [[
local sequence = MAD.sequence "${seq_name}" {
  refer="entry", l=${seq_len},
  MAD.element.${el_type} "${el_name}" { ${el_args} },
}
    ]],
    seq_name  = "seq",
    el_name   = "el",
    beam_args = [[particle="proton", energy=${energy}]],
    observe   = "${el_name}",
    seq_len   = 1,
    -- loop:
    varname   = "loop_value",
    varfunc   = "linrange",
    start     = 0,
    stop      = 0.5,
    count     = 20,
    -- particle:
    x = 0, px = 0,
    y = 0, py = 0,
    t = 0, pt = 0,
    energy = 450,
    -- control
    studies = MAD.Object {
      x = {}, px = {},
      y = {}, py = {},
      t = {}, pt = {},
    },
    -- output:
    madfile = "${prefix}.${engine}",
    tfsfile = "${prefix}.${engine}.tfs",
    logfile = "${prefix}.${engine}.log",
}

local function wrap_context(obj)
  return obj {
    varname = \s -> (s.engine == 'mad' and
                      obj.varname:gsub('->', '.') or
                      obj.varname)
  }
end

local function run_madx(madfile, logfile)
  run("madx", madfile, logfile)
end

local function run_mad(madfile, logfile)
  run("mad " .. madfile, nil, logfile)
end

-- TODO: create test matrix in memory
-- TODO: compare by columns using assertAllAlmostEquals
local function load_test(template, ctx)
  local input = substitute(template, {
    madx_file = substitute(ctx.runs.madx.tfsfile, ctx.runs.madx),
    mad_file = substitute(ctx.runs.mad.tfsfile, ctx.runs.mad),
    ptc_file = substitute(ctx.runs.ptc.tfsfile, ctx.runs.ptc),
    suite = ctx.study,
    margin = 1e-14,
    varname = ctx.varname,
  })
  assert(load(input, suite))()
end


local function create_plots(ctx)
  local plot, vector in MAD
  local loadtxt = require('loadtxt')

  local files = {
    madx = substitute(ctx.runs.madx.tfsfile, ctx.runs.madx),
    mad  = substitute(ctx.runs.mad.tfsfile,  ctx.runs.mad),
    ptc  = substitute(ctx.runs.ptc.tfsfile,  ctx.runs.ptc),
  }

  local data = {
    mad  = loadtxt(io.lines(files.mad)),
    ptc  = loadtxt(io.lines(files.ptc)),
    madx = loadtxt(io.lines(files.madx)),
  }

  for _, var in ipairs({"x", "px", "y", "py", "t", "pt"}) do
    local data = {
      x    = vector(data.mad[ctx.varname]),
      mad  = vector(data.mad[var]),
      ptc  = vector(data.ptc[var]),
      madx = vector(data.madx[var]),
    }
    -- absolute values
    plot {
      filename = ctx.prefix .. "_" .. var .. "_abs.eps",
      data  = data,
      HAXIS = 'x',
      VAXIS = {'mad', 'ptc', 'madx'},
      xlabel = "initial " .. ctx.study,
      ylabel = "final " .. var,
    }
    -- differences
    plot {
      filename = ctx.prefix .. "_" .. var .. "_diff.eps",
      data  = {
        x = data.x,
        ["mad-ptc"] = data.mad - data.ptc,
        ["mad-madx"] = data.mad - data.madx,
      },
      HAXIS = 'x',
      VAXIS = {'mad-ptc'},
      VAXIS2 = {'mad-madx'},
      xlabel = "initial " .. ctx.study,
      ylabel = "final " .. var,
    }
  end
end


local function main(args)

  -- handle command line
  local opts = {}
  for _, v in ipairs(args) do
    local key, val = v:match('%-%-([^=]*)=(.*)')
    if key then
      opts[key] = val
    elseif v:match('^%-%-no%-') then
      opts[v:sub(6)] = false
    elseif v:match('^%-%-') then
      opts[v:sub(3)] = true
    else
      table.insert(opts, v)
    end
  end

  local test_template = read_file('templates/test_basic_track.mad')

  local templates = {
    madx = read_file('templates/basic_track.madx'),
    ptc = read_file('templates/basic_track.ptc'),
    mad = read_file('templates/basic_track.mad'),
  }

  local runners = {
    madx = run_madx,
    ptc = run_madx,
    mad = run_mad,
  }

  local all_tests = {}

  -- first write+exec mad files
  for _, filename in ipairs(opts) do
    local context = dofile(filename)
    local studies = {}

    -- derive a context for every study
    for _, study in ipairs(context.studies:get_varkey()) do
      local overrides = context.studies[study]
      if overrides then
        table.insert(studies, context {
          prefix  = context.prefix .. study,
          [study] = "${varname}", -- usually study is the varied attribute name
          study   = study,
        } (overrides))
      end
    end

    -- substitute a template for each engine
    for _, study in ipairs(studies) do
      study.runs = {}
      for engine, template in pairs(templates) do
        local context = wrap_context( study { engine=engine } )
        local input = substitute(template, context)
        context.madfile = substitute(context.madfile, context)
        save_file(context.madfile, input)
        study.runs[engine] = context
      end
    end

    -- run test for each engine
    if opts['run'] then
      for _, study in ipairs(studies) do
        for engine, context in pairs(study.runs) do
          local logfile = substitute(context.logfile, context)
          runners[engine](context.madfile, logfile)
        end
      end
    end

    if opts['plot'] then
      for _, study in ipairs(studies) do
        create_plots(study)
      end
    end

    if opts['test'] then
      table.insert(all_tests, studies)
    end
  end

  -- run tests separately
  for _, studies in ipairs(all_tests) do
    for _, study in ipairs(studies) do
      load_test(test_template, study)
    end
  end
  if opts['test'] then
    -- control the display of custom objects during tests
    MAD:export('tostring', true)
    os.exit( MAD.utest.LuaUnit.run('-v') )
  end
end

if arg[0]:gsub('.*[/\\]', '') == 'substitute.mad' then
  main(arg)
end
