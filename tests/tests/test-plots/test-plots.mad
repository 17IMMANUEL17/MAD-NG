local object in MAD
local run_test in require("plotting")

local ref_cfg = object "ref" {
  -- What tests to run
  ng_vs_ptc = true, -- Check that ng and ptc give the same results
  ng_vs_ng  = true, -- Change edir, sdir and chg to check ng against itself
  ng_vs_cpp = true, -- Check that ng and ng-c++ give the same results
  ng_conv   = true, -- Check that ng converges
  
  -- What to save
  sv_plt = true, -- Default: true
  sv_trk = false, -- Default: false
  sv_srv = false, -- Default: false

  dodbg  = false, -- Default: false (Only used for ng_vs_ptc tests)
  -- list of variables in the tests
  tol        = 100,    -- Convergence tolerance
  max_nslice = 1000,

  -- list of reversable values for ng_vs_ng tests
  edir   = 1,        -- 1/-1 (element direction)
  sdir   = 1,        -- 1/-1 (tracking direction)
  chg    = 1,        -- 1/-1 (charge)
  tdir   = \s-> s.edir * s.sdir,          -- tracking time direction
  bdir   = \s-> s.edir * s.sdir * s.chg,  -- tracking beam direction

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  snm    = -1,
  seql   =  2,

  X0     = {x =-0.25, px = 0.15, y=0, py=0, t=0, pt=0},
}

local function testQUAD (x_coord, y_coord)
  local cfg = ref_cfg "quad" {
    elm =  [[
elm:  QUADRUPOLE, at=0.75, l=1.5, k1=   ${bdir}*0.5, fringe=0;
elm2: QUADRUPOLE, at=2.75, l=1.5, k1=-1*${bdir}*0.5, fringe=0;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,
    method = 8,

    plot_info = {
      title       = "Two Quads",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "quad-plot",
    }
  }
  run_test(cfg)
end

local function testSBEND (x_coord, y_coord)
  local cfg = ref_cfg "sbend" {
    elm =  [[
elm:  SBEND, at=0.75, l=1.5, angle=   ${tdir}*pi/100, k0=   ${bdir}*pi/100/1.5, kill_ent_fringe=true, kill_exi_fringe=true;
elm2: SBEND, at=2.75, l=1.5, angle=-1*${tdir}*pi/100, k0=-1*${bdir}*pi/100/1.5, kill_ent_fringe=true, kill_exi_fringe=true;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 25,

    plot_info = {
      title       = "Two SBENDs",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "sbend-plot",
      y2range     = {-1e-13, 1e-13},
    }
  }
  run_test(cfg)
end

local function testSEXT (x_coord, y_coord)
  local cfg = ref_cfg "sext" {
    elm =  [[
elm:  SEXTUPOLE, at=0.75, l=1.5, k2=   ${bdir}*0.5, fringe=0;
elm2: SEXTUPOLE, at=2.75, l=1.5, k2=-1*${bdir}*0.5, fringe=0;
    ]],

    seql = 3.5,
    
    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Sexts",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "sext-plot",
      y2range     = {-2e-15, 2e-15},
    }
  }
  run_test(cfg)
end

local function testRBEND(x_coord, y_coord)
  local cfg = ref_cfg "rbend" {
    elm =  [[
elm:  RBEND, at=0.75, l=1.5, angle=   ${tdir}*pi/100, k0=   ${bdir}*pi/100/1.5, kill_ent_fringe=true, kill_exi_fringe=true, truerbend=true, ptcrbend=true, k2 = ${bdir}*0.2;
elm2: RBEND, at=2.75, l=1.5, angle=-1*${tdir}*pi/100, k0=-1*${bdir}*pi/100/1.5, kill_ent_fringe=true, kill_exi_fringe=true, truerbend=true, ptcrbend=true, k2 = -1*${bdir}*0.2;
    ]],

    seql = 3.5,
    
    tol = 1e4,
    energy = 1,
    nslice = 25,

    plot_info = {
      title       = "Two RBENDs",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "rbend-plot",
      y2range     = {-6e-13, 6e-13},
    }
  }
  run_test(cfg)
end

local function testSOLENOID(x_coord, y_coord)
  local cfg = ref_cfg "solenoid" {
    elm =  [[
elm:  SOLENOID, at=0.75, l=1.5, ks=   ${bdir}*0.5, fringe=0;
elm2: SOLENOID, at=2.75, l=1.5, ks=-1*${bdir}*0.5, fringe=0;
    ]],

    seql = 3.5,
    ng_conv = false, -- solenoids only have thick models 

    tol = 1e2,
    energy = 1,
    nslice = 50,

    plot_info = {
      title       = "Two Solenoids",
      x_coord     = x_coord,
      y_coord     = y_coord,
      filename    = "solenoid-plot",
      y2range     = {-5e-15, 5e-15},
    }
  }
  run_test(cfg)
end

testQUAD("s", "x")
testQUAD("Z", "X")

testSBEND("s", "x")
testSBEND("Z", "X")

testSEXT("s", "x")
testSEXT("Z", "X")

testRBEND("s", "x")
testRBEND("Z", "X")

testSOLENOID("s", "x")
testSOLENOID("Z", "X")
