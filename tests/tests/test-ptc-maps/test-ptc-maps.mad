-- ../mad test_elements.mad
-- assume ../madx64 to be present...

local object                                                    in MAD
local tblcat                                                    in MAD.utility
local run_test in require("trackvsptc")

-- The setup for the tests ----------------------------------------------------o

local ref_cfg = object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = true, -- Default: false
  doprnt = true, -- Default: false
  dodbg  = true, -- Default: false
  doplot = false,-- Default: false
  
  -- list of variables in the tests
  alist = {"model", "energy", "method", "nslice", "x0i"}, --attributes list
  tol = 1000,

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  snm    = -1,

  x0i    = 1..4,       -- 0, 4D, 5D, 6D (see get_mad_str)
}

-------------------------------------------------------------------------------o

-- The actual test functions --------------------------------------------------o
local function testDRIFT()
  local cfg = ref_cfg "drift" { 
    elm = "DRIFT, at=${at}, l=${l}",
    
    tol = 100,
    
    energy = {1},
    model  = {1, 2},
    method = {2, 6},
    nslice = {1, 3},

    l     = {0.1, 0.5, 1.5, 2},
    at    = \s->{s.cur_cfg.l/2},
    -- tilt  = 0..4, ! Illegal keyword in MAD-X
    alist = tblcat(ref_cfg.alist, {"l", "at"}),
  }
  run_test(cfg)
end

local function testMULTs() -- Test multipole (1 min)
  local cfg = ref_cfg "mults" {
    elm =  [[
      SOLENOID, at=0.75, lrad=1.5, 
      knl=${knl}, ksl=${ksl}, ksi=${ksi}
    ]],
    
    tol = 100,
    
    energy = {1},
    model  = {1}, -- Use TKT as faster
    method = {2, 6},
    nslice = {1, 2},

    knl = {
      {0   , 0  , 0, 0 }, 
      -- {0.05, 0  , 0, 0 }, ! Not possible in PTC
      -- {0   , 0.5, 0, 0 }, 
      -- {0   , 0  , 5, 0 }, 
      -- {0   , 0  , 0, 50},
      {0   , 0.5, 5, 50},
    },
    ksi   = {-0.2, 0, 0.25},
    ksl   = \s-> s.knl,
    alist = tblcat(ref_cfg.alist, {"knl", "ksl", "ksi"}),
  }
  run_test(cfg)
end

local function testSEXT()
  local cfg = ref_cfg "sext" {
    elm = "SEXTUPOLE, at=0.75, l=1.5, k2=${k2}, k2s=${k2s}",

    tol = 50,

    model  = 1..2,
    method = 2..6..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    k2     = -0.2..0.2..0.2,
    k2s    = \s-> s.k2,
    alist = tblcat(ref_cfg.alist, {"k2", "k2s",}),
  }
  run_test(cfg)
end

local function testSEXTfr()
  local cfg = ref_cfg "sextfr" {
    elm = [[
      SEXTUPOLE, at=0.75, l=1.5,
      k2=${k2}, k2s=${k2s}, tilt=${tilt}*pi/12, fringe=${fringe}
    ]],

    tol = 50,

    model  = {2},
    method = {2},    
    nslice = {1},
    energy = {1}, 

    tilt   = {0, 1, 3, 6},
    fringe = 0..3..3,
    k2     = {0, 0.2},
    k2s    = \s-> s.k2,
    alist = tblcat(ref_cfg.alist, {"k2", "k2s","tilt", "fringe"}),
  }
  run_test(cfg)
end

local function testDECA()
  local cfg = ref_cfg "deca" {
    elm = [[
      multipole, at=0.75,
      knl={0,0,0,0,${k4}*1.5}, ksl={0,0,0,0,${k4s}*1.5}
    ]],

    tol = 50,

    model  = 1..2,
    method = 2..6..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}
    
    k4     = {-32, 0, 51},
    k4s    = \s-> s.k4,
    order  = 5,

    alist = tblcat(ref_cfg.alist, {"k4", "k4s"}),
  }
  run_test(cfg)
end

local function testDECAfr()
  local cfg = ref_cfg "decafr" {
    elm = [[
      multipole, at=0.75,
      knl={0,0,0,0,${k4}*1.5}, ksl={0,0,0,0,${k4s}*1.5}, 
      tilt=${tilt}*pi/20, fringe=${fringe}
    ]],

    tol = 100,

    model  = {1},
    method = {2},    
    nslice = {1},
    energy = {1}, 
    
    tilt   = {0, 1, 2, 5, 10},
    fringe = 0  ..3 ..3,
    k4     = {0, 50},
    k4s    = \s-> s.k4,
    order  = 5,

    alist = tblcat(ref_cfg.alist, {"tilt", "fringe", "k4", "k4s"}),
  }
  run_test(cfg)
end

local function testDODECA()
  local cfg = ref_cfg "dodeca" {
    elm = [[
      multipole, at=0.75, 
      knl={0,0,0,0,0,${k5}*1.5}, ksl={0,0,0,0,${k5s}*1.5}
    ]],

    tol = 1000,

    model  = 1..2,
    method = 2..6..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    k5     = {-254, 0, 303},
    k5s    = \s-> s.k5,
    order = 6,
    alist = tblcat(ref_cfg.alist, {"k5", "k5s"}),
  }
  run_test(cfg)
end

local function testDODECAfr()
  local cfg = ref_cfg "dodecafr" {
    elm = [[
      multipole, at=0.75, 
      knl={0,0,0,0,0,${k5}*1.5}, ksl={0,0,0,0,${k5s}*1.5}, 
      tilt=${tilt}*pi/20, fringe=${fringe}
    ]],

    tol = 1200,

    model  = {1},
    method = {2},    
    nslice = {1},
    energy = {1},

    alist = tblcat(ref_cfg.alist, {"tilt", "fringe", "k5", "k5s"}),
    tilt   = 0  ..12..3,
    fringe = 0  ..3 ..3,
    k5     = {-254, 0, 303},
    k5s    = \s-> s.k5,
    order = 6,
  }
  run_test(cfg)
end

--[=[ 
local function testCAV()
  local cfg = ref_cfg "cavity" {
    elm =  [[
      RFCAVITY, at=0.75, l=1.5, 
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, 
      no_cavity_totalpath=${no_totalpath};
    ]],

    alist = tblcat(
      ref_cfg.alist, 
      {"no_totalpath", "volt", "lag", "freq", "harmon"}
    ),
    no_totalpath = {true, false},
    volt      = -8 ..8  ..8   ,
    lag       =  0 ..0.9..0.45,
    freq      =  0 ..150 ..75,
    icase     =  6,
  }
  cfg = cfg {harmon := {cfg.cur_cfg.freq == 0 and 2 or 0},}
  run_test(cfg)
end

local function testCCAV()
  local cfg = ref_cfg "cavity" {
    elm =  [[
      CRABCAVITY, at=0.75, l=1.5,
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}
    ]],

    alist = tblcat(ref_cfg.alist, {"volt", "lag", "freq", "harmon"}),
    -- no_totalpath = {true, false}, !Illegal in MAD-X
    volt      = -8 ..8  ..8   ,
    lag       =  0 ..0.9..0.45,
    freq      =  0 ..150 ..75,
    icase     =  6,
  }
  cfg = cfg {harmon := {cfg.cur_cfg.freq == 0 and 2 or 0},}
  run_test(cfg)
end

-- Needs to be updated to use ksi and zero length solenoids
-- Only TKT while MAD-NG does not support 0 length solenoids 
local function testSOL()
  local cfg = ref_cfg "solenoid" {
    elm =  "SOLENOID, at=0.75, l=${l}, ks=${ks}, fringe=${fringe};",

    alist = tblcat(ref_cfg.alist, {"l", "ks", "fringe"}),
    l        = {1.5},
    ks       = -0.6..0.6..0.3,
    fringe   = 0..1,
    model    = {2},
  }
  run_test(cfg)
end

local function testELSEP()
  local cfg = ref_cfg "elseparator" {
    elm =  [[
      ELSEPARATOR, at=0.75, l=1.5, 
      ex=${ex}, ey=${ey}, ex_l=${ex_l}, ey_l=${ey_l}, tilt=${tilt};
    ]],
    alist = tblcat(ref_cfg.alist, {"ex", "ey", "ex_l", "ey_l", "tilt"}),
    ex       = -4..4..4,
    ey       = -4..4..4,
    ex_l     = {0}, !-6..6..6, ! Broken as the madx is ex_l and the madng is exl
    ey_l     = {0}, !-6..6..6, ! Broken as the madx is ex_l and the madng is exl
    tilt     = {0}, !1..4, ! MAD-X does not tell PTC about tilt
  }
  run_test(cfg)
end

local function testKICK()
  local cfg = ref_cfg "kicker" {
    elm =  [[
      KICKER, at=0.75, l=1.5, 
      hkick=${hkick}, vkick=${vkick}, tilt=${tilt}*pi/16;
    ]],

    alist = tblcat(ref_cfg.alist, {"hkick", "vkick", "tilt"}), 
    hkick    = -2e-3..2e-3..2e-3,
    vkick    = -2e-3..2e-3..2e-3,
    tilt     = 1..4,
  }
  run_test(cfg)
end

local function testRFMULT()
  local cfg = ref_cfg "rfmultipole" {
    elm =  [[
      RFMULTIPOLE, at=0.75, lrad=1.5, 
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq},
      pnl={${k0}, ${k1}, ${k2}, ${k3}}, psl={${k0s}, ${k1s}, ${k2s}, ${k3s}};
      ]],

      alist = tblcat(
      ref_cfg.alist, 
      {"volt", "lag", "freq", "harmon", --"totalpath",
       "k0", "k1", "k2", "k3", "k0s", "k1s", "k2s", "k3s"}
    ),
    -- totalpath = {false, true}, !illegal in MAD-X
    volt      = -8 ..8  ..8   ,
    lag       =  0 ..0.9..0.45,
    freq      =  0 ..150 ..75,
    k0        = -0.2..0.2..0.2,
    k1        = -0.2..0.2..0.2,
    k2        = -0.2..0.2..0.2,
    k3        = -0.2..0.2..0.2,
    k0s       = -0.2..0.2..0.2,
    k1s       = -0.2..0.2..0.2,
    k2s       = -0.2..0.2..0.2,
    k3s       = -0.2..0.2..0.2,
    icase     = 6,
  }
  cfg = cfg {harmon := {cfg.cur_cfg.freq == 0 and 2 or 0},}
  run_test(cfg)
end ]=]
-------------------------------------------------------------------------------o

-- Running the tests-----------------------------------------------------------o
!testDRIFT()
-- testRBEND()

-- Sextupoles
!testSEXT()
!testSEXTfr()
-- Should we add SEXTm?

-- Octupoles
!testOCT()
!testOCTfr()
-- Should we add OCTm?

-- > 10 poles (Only actually tests the multipole)
!testDECA ()
!testDECAfr()
!testDODECA () 
!testDODECAfr() 

-- testKICK()
-- testELSEP()
!testMULT()
!testMULTs()
-- testSOL()
-- testCAV()
-- testRFMULT()
-- testCCAV() !Fails as MAD-X defines a k0 for the crab cavity based on volt

require "test-sbend-maps"
require "test-mult-maps"
