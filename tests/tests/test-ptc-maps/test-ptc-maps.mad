-- ../mad test_elements.mad
-- assume ../madx64 to be present...

local object                                                    in MAD
local tblcat                                                    in MAD.utility
local run_test in require("trackvsptc")

-- The setup for the tests ----------------------------------------------------o

local ref_cfg = object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = true, -- Default: false
  doprnt = true, -- Default: false
  dodbg  = false, -- Default: false
  doplot = false,-- Default: false
  
  -- list of variables in the tests
  alist = {"model", "energy", "method", "nslice", "x0i"}, --attributes list
  tol = 1000,

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  snm    = -1,

  x0i    = 1..4,       -- 0, 4D, 5D, 6D (see get_mad_str)
}

-------------------------------------------------------------------------------o

-- The actual test functions --------------------------------------------------o
local function testDRIFT()
  local cfg = ref_cfg "drift" { 
    elm = "DRIFT, at=${at}, l=${l}",
    
    tol = 100,
    
    energy = {1},
    model  = {1, 2},
    method = {2, 6},
    nslice = {1, 3},

    l     = {0.1, 0.5, 1.5, 2},
    at    = \s->{s.cur_cfg.l/2},
    -- tilt  = 0..4, ! Illegal keyword in MAD-X
    alist = tblcat(ref_cfg.alist, {"l", "at"}),
  }
  run_test(cfg)
end

--[=[ 
-- Needs to be updated to use ksi and zero length solenoids
-- Only TKT while MAD-NG does not support 0 length solenoids 
local function testSOL()
  local cfg = ref_cfg "solenoid" {
    elm =  "SOLENOID, at=0.75, l=${l}, ks=${ks}, fringe=${fringe};",

    alist = tblcat(ref_cfg.alist, {"l", "ks", "fringe"}),
    l        = {1.5},
    ks       = -0.6..0.6..0.3,
    fringe   = 0..1,
    model    = {2},
  }
  run_test(cfg)
end

local function testELSEP()
  local cfg = ref_cfg "elseparator" {
    elm =  [[
      ELSEPARATOR, at=0.75, l=1.5, 
      ex=${ex}, ey=${ey}, ex_l=${ex_l}, ey_l=${ey_l}, tilt=${tilt};
    ]],
    alist = tblcat(ref_cfg.alist, {"ex", "ey", "ex_l", "ey_l", "tilt"}),
    ex       = -4..4..4,
    ey       = -4..4..4,
    ex_l     = {0}, !-6..6..6, ! Broken as the madx is ex_l and the madng is exl
    ey_l     = {0}, !-6..6..6, ! Broken as the madx is ex_l and the madng is exl
    tilt     = {0}, !1..4, ! MAD-X does not tell PTC about tilt
  }
  run_test(cfg)
end

local function testKICK()
  local cfg = ref_cfg "kicker" {
    elm =  [[
      KICKER, at=0.75, l=1.5, 
      hkick=${hkick}, vkick=${vkick}, tilt=${tilt}*pi/16;
    ]],

    alist = tblcat(ref_cfg.alist, {"hkick", "vkick", "tilt"}), 
    hkick    = -2e-3..2e-3..2e-3,
    vkick    = -2e-3..2e-3..2e-3,
    tilt     = 1..4,
  }
  run_test(cfg)
end

]=]
-------------------------------------------------------------------------------o

-- Running the tests-----------------------------------------------------------o
!testDRIFT()

-- testKICK()
-- testELSEP()
!testMULT()
!testMULTs()
-- testSOL()
-- testCAV()
-- testRFMULT()
-- testCCAV() !Fails as MAD-X defines a k0 for the crab cavity based on volt

require "test-sbend-maps"
require "test-rbend-maps"
require "test-quad-maps"
require "test-sextupole-maps"
require "test-octupole-maps"
require "test-mult-maps"
