local object                                                    in MAD
local tblcat                                                    in MAD.utility
local run_test in require("run_tests")

-- The setup for the tests -----------------------------------------------------o

local ref_cfg = object "ref" {
  -- list of variables in the tests
  __attr = {"model", "energy", "method", "nslice", "x0i"},
  cfg  = {cfgid=0},
  
  -- How to run the tests
  doprnt = true,
  dorun  = true,
  dosave = true,
  dodbg  = true,

  -- list of values that are used in elmseq.seq but are not variables
  order  = 2,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6

  -- list of values for each variables
  model  = 2..2,
  method = 2..2..2,    -- 2..6..2
  nslice = 1..3..1,
  energy = {1, 6500},  -- {1, 450, 6500}
  x0i    = 1..4..4,       -- 0, 4D, 5D, 6D (see get_mad_str)
}
--------------------------------------------------------------------------------o

-- The actual test functions ---------------------------------------------------o
local function testQUAD(tol_)
    local elm_str = " QUADRUPOLE, at=0.75, l=1.5, k1=${k1}, k1s=${k1s}, tilt=${tilt}*pi/8, fringe=${fringe}"
    local elm_cfg = ref_cfg "quadrupole" {
        __attr = tblcat(ref_cfg.__attr, {"tilt", "fringe", "k1", "k1s"}),
        tilt   = 0  ..4,
        fringe = 0  ..3 ..3,
        k1     = -0.2..0.2..0.2,
        k1s    = -0.2..0.2..0.2,
    }
    run_test(elm_str, elm_cfg, tol_) 
end

local function testSEXT(tol_)
    local elm_str = " SEXTUPOLE, at=0.75, l=1.5, k2=${k2}, k2s=${k2s}, tilt=${tilt}*pi/12, fringe=${fringe}"
    local elm_cfg = ref_cfg "sextupole" {
        __attr = tblcat(ref_cfg.__attr, {"tilt", "fringe", "k2", "k2s",}),
        tilt   = 0..6,
        fringe = 0..3..3,
        k2     = -0.2..0.2..0.2,
        k2s    = -0.2..0.2..0.2,
    }
    run_test(elm_str, elm_cfg, tol_) 
end

local function testOCT(tol_)
    local elm_str = " OCTUPOLE, at=0.75, l=1.5, k3=${k3}, k3s=${k3s}, tilt=${tilt}*pi/16, fringe=${fringe}"
    local elm_cfg = ref_cfg "octupole" {
        __attr = tblcat(ref_cfg.__attr, {"tilt", "fringe", "k3", "k3s"}),
        tilt   = 0  ..8..2,
        fringe = 0  ..3 ..3,
        k3     = -0.2..0.2..0.2,
        k3s    = -0.2..0.2..0.2,
    }
    run_test(elm_str, elm_cfg, tol_) 
end


local function testDECA(tol_)
    local elm_str = "multipole, at=0.75, knl={0,0,0,0,${k4}*1.5}, ksl={0,0,0,0,${k4s}*1.5}, tilt=${tilt}*pi/20, fringe=${fringe}"
    local elm_cfg = ref_cfg "decapole" {
        __attr = tblcat(ref_cfg.__attr, {"tilt", "fringe", "k4", "k4s"}),
        tilt   = 0  ..10..5,
        fringe = 0  ..3 ..3,
        k4     = -0.2..0.2..0.2,
        k4s    = -0.2..0.2..0.2,
        order  = 5,
    }
    run_test(elm_str, elm_cfg, tol_) 
end

local function testDODECA(tol_)
    local elm_str = "multipole, at=0.75, knl={0,0,0,0,0,${k5}*1.5}, ksl={0,0,0,0,${k5s}*1.5}, tilt=${tilt}*pi/20, fringe=${fringe}"
    local elm_cfg = ref_cfg "dodecapole" {
        __attr = tblcat(ref_cfg.__attr, {"tilt", "fringe", "k5", "k5s"}),
        tilt   = 0  ..12..3,
        fringe = 0  ..3 ..3,
        k5     = -0.2..0.2..0.2,
        k5s    = -0.2..0.2..0.2,
        order = 6,
    }
    run_test(elm_str, elm_cfg, tol_) 
end

local function testDRIFT(tol_)
    local elm_str = " DRIFT, at=0.75, l=1.5"
    local elm_cfg = ref_cfg "drift" { }
    run_test(elm_str, elm_cfg, tol_) 
end

local function testCAV(tol_)
    local elm_str =  "RFCAVITY, at=0.75, l=1.5, volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, no_cavity_totalpath=${no_totalpath};"
    local elm_cfg = ref_cfg "cavity" {
        __attr =  tblcat(ref_cfg.__attr, {"no_totalpath", "volt", "lag", "freq", "harmon"}),
        no_totalpath = {true, false},
        volt      = -8 ..8  ..8   ,
        lag       =  0 ..0.9..0.45,
        freq      =  0 ..150 ..75,
        icase     =  6,
    }
    elm_cfg = elm_cfg {harmon := {elm_cfg.cfg.freq == 0 and 2 or 0},}
    run_test(elm_str, elm_cfg, tol_)
end

local function testCCAV(tol_)
    local elm_str =  "CRABCAVITY, at=0.75, l=1.5, volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq};"
    local elm_cfg = ref_cfg "cavity" {
        __attr = tblcat(ref_cfg.__attr, {"volt", "lag", "freq", "harmon"}),
        -- no_totalpath = {true, false}, !Illegal in MAD-X
        volt      = -8 ..8  ..8   ,
        lag       =  0 ..0.9..0.45,
        freq      =  0 ..150 ..75,
        icase     =  6,
    }
    elm_cfg = elm_cfg {harmon := {elm_cfg.cfg.freq == 0 and 2 or 0},}
    run_test(elm_str, elm_cfg, tol_)
end

local function testMULT(tol_)
    local elm_str =  "MULTIPOLE, at=0.75, lrad=1.5, knl={${k0}, ${k1}, ${k2}, ${k3}}, ksl={${k0s}, ${k1s}, ${k2s}, ${k3s}};"
    local elm_cfg = ref_cfg "multipole" {
        __attr = tblcat(ref_cfg.__attr, {"k0", "k1", "k2", "k3", "k0s", "k1s", "k2s", "k3s"}),
        k0        = -0.2..0.2..0.2,
        k1        = -0.2..0.2..0.2,
        k2        = -0.2..0.2..0.2,
        k3        = -0.2..0.2..0.2,
        k0s       = -0.2..0.2..0.2,
        k1s       = -0.2..0.2..0.2,
        k2s       = -0.2..0.2..0.2,
        k3s       = -0.2..0.2..0.2,
    }
    run_test(elm_str, elm_cfg, tol_)
end

local function testSBEND(tol_)
    local elm_str =  "SBEND, at=0.75, l=1.5, angle=${k0}*2*pi/1e2, kill_ent_fringe=${no_fringe}, kill_exi_fringe=${no_fringe};"
    local elm_cfg = ref_cfg "sbend" {
        __attr = tblcat(ref_cfg.__attr, {"k0", "no_fringe"}), 
        k0        = -0.5..0.5..0.2,
        no_fringe = {true, false},
    }
    run_test(elm_str, elm_cfg, tol_)
end

local function testRBEND(tol_)
    local elm_str =  "RBEND, at=0.75, l=1.5, angle=${k0}*2*pi/1e2, kill_ent_fringe=${no_fringe}, kill_exi_fringe=${no_fringe}, ptcrbend=true, truerbend=true;"
    local elm_cfg = ref_cfg "rbend"{
        __attr = tblcat(ref_cfg.__attr, {"k0", "no_fringe"}),
        k0        = -0.5..0.5..0.2,
        no_fringe = {--[[ true, ]] false}, ! Impossible to turn off fringe in MAD-X
    }
    run_test(elm_str, elm_cfg, tol_)
end

local function testSOL(tol_) ! Only TKT while MAD-NG does not support 0 length solenoids 
    local elm_str =  "SOLENOID, at=0.75, l=${l}, ks=${ks}, fringe=${fringe};"
    local elm_cfg = ref_cfg "solenoid" {
        __attr = tblcat(ref_cfg.__attr, {"l", "ks", --[[ "ksi", ]] "fringe"}),
        l        = {1.5},
        ks       = -0.6..0.6..0.3,
        -- ksi      = {\cfg-> ((cfg.model==1) and (cfg.method < 4) and (cfg.nslice == 1) and cfg.ks*1.5 or 0)}, 
        fringe   = 0..1,
        model    = {2},
    }
    run_test(elm_str, elm_cfg, tol_)
end

local function testELSEP(tol_)
    local elm_str =  "ELSEPARATOR, at=0.75, l=1.5, ex=${ex}, ey=${ey}, ex_l=${ex_l}, ey_l=${ey_l}, tilt=${tilt};" 
    local elm_cfg = ref_cfg "elseparator" {
        __attr = tblcat(ref_cfg.__attr, {"ex", "ey", "ex_l", "ey_l", "tilt"}),
        ex       = -4..4..4,
        ey       = -4..4..4,
        ex_l     = {0}, !-6..6..6,   ! Broken as the madx is ex_l and the madng is exl
        ey_l     = {0}, !-6..6..6,   ! Broken as the madx is ex_l and the madng is exl
        tilt     = {0}, !1..4, ! MAD-X does not tell PTC about tilt
    }
    run_test(elm_str, elm_cfg, tol_)
end

local function testKICK(tol_)
    local elm_str =  "KICKER, at=0.75, l=1.5, hkick=${hkick}, vkick=${vkick}, tilt=${tilt}*pi/16;"
    local elm_cfg = ref_cfg "kicker" {
        __attr = tblcat(ref_cfg.__attr, {"hkick", "vkick", "tilt"}), 
        hkick    = -2e-3..2e-3..2e-3,
        vkick    = -2e-3..2e-3..2e-3,
        tilt     = 1..4,
    }
    run_test(elm_str, elm_cfg, tol_)
end

local function testRFMULT(tol_)
    local elm_str =  [[
        RFMULTIPOLE, at=0.75, lrad=1.5, volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq},
        pnl={${k0}, ${k1}, ${k2}, ${k3}}, psl={${k0s}, ${k1s}, ${k2s}, ${k3s}};
        ]]
    local elm_cfg = ref_cfg "rfmultipole" {
        __attr = tblcat(ref_cfg.__attr, {"volt", "lag", "freq", "harmon", "k0", "k1", "k2", "k3", "k0s", "k1s", "k2s", "k3s"}),
        -- totalpath = {false, true}, !illegal in MAD-X
        volt      = -8 ..8  ..8   ,
        lag       =  0 ..0.9..0.45,
        freq      =  0 ..150 ..75,
        k0        = -0.2..0.2..0.2,
        k1        = -0.2..0.2..0.2,
        k2        = -0.2..0.2..0.2,
        k3        = -0.2..0.2..0.2,
        k0s       = -0.2..0.2..0.2,
        k1s       = -0.2..0.2..0.2,
        k2s       = -0.2..0.2..0.2,
        k3s       = -0.2..0.2..0.2,
        icase     = 6,
    }
    elm_cfg = elm_cfg {harmon := {elm_cfg.cfg.freq == 0 and 2 or 0},}
    run_test(elm_str, elm_cfg, tol_)
end
-------------------------------------------------------------------------------o

-- Running the tests------------------------------------------------------------o
-- testDRIFT(20)
-- testSBEND(1e6)
-- testRBEND(1e6)
testQUAD(1000)
-- testQUAD("quadrupole_max_err")! For testing with a file for the tolerance
-- testSEXT(100)
-- testOCT(100)
-- testDECA (100) -- Only actually tests the multipole
-- testDODECA (100) -- Only actually tests the multipole
-- testKICK(1e3)
-- testELSEP(1e3)
-- testMULT(100)
-- testSOL(1e3)
-- testCAV(1000)
-- testRFMULT(10)
-- testCCAV(1000) !Fails as MAD-X defines a k0 for the crab cavity based on volt
-- read_mtbl(quadrupole, 10, 2) -- For reading the results


--[[
    LIST OF ISSUES:
    
    MAD-NG:
        - MAD-NG does not support 0 length solenoids

    MAD-X:
        - MAD-X does not communicate tilt in ELSEPARATOR to PTC
        - MAD-X does not allow to turn off fringe in RBEND
        - MAD-X defines a k0 for the crab cavity based on volt
        - MAD-X does not support totalpath in RFMULTIPOLE
        - MAD-X does not support totalpath in CRABCAVITY
    
    Other:
        - MAD-NG does not support the same syntax for the rf cavity as MAD-X for totalpath
        - MAD-NG does not support the same syntax for the elseparator as MAD-X for exl and eyl
]]