-- ../mad test_elements.mad
-- assume ../madx64 to be present...

local object                                                    in MAD
local tblcat                                                    in MAD.utility
local run_test in require("trackvsptc")

-- The setup for the tests ----------------------------------------------------o

local ref_cfg = object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = true, -- Default: false
  doprnt = true, -- Default: false
  dodbg  = true, -- Default: false
  
  -- list of variables in the tests
  alist = {"model", "energy", "method", "nslice", "x0i"}, --attributes list
  cur_cfg = {cfgid=0},                                   -- current config
  tol = 1000,

  -- list of values that are used to run test but are not changed throughout
  order  = 2,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6


  -- list of values for each variables
  model  = 2..2,
  method = 2..2..2,    -- 2..6..2
  nslice = 1..3..1,
  energy = {1, 6500},  -- {1, 450, 6500}
  x0i    = 1..4..4,       -- 0, 4D, 5D, 6D (see get_mad_str)
}
-------------------------------------------------------------------------------o

-- The actual test functions --------------------------------------------------o
local function testQUAD()
  local cfg = ref_cfg "quadrupole" {
    elm = [[
      QUADRUPOLE, at=0.75, l=1.5, 
      k1=${k1}, k1s=${k1s}, tilt=${tilt}*pi/8, fringe=${fringe}
    ]],

    alist = tblcat(ref_cfg.alist, {"tilt", "fringe", "k1", "k1s"}),
    tilt   = 0  ..4,
    fringe = 0  ..3 ..3,
    k1     = -0.2..0.2..0.2,
    k1s    = -0.2..0.2..0.2,
  }
  run_test(cfg)
end

local function testSEXT()
  local cfg = ref_cfg "sextupole" {
    elm = [[
      SEXTUPOLE, at=0.75, l=1.5,
      k2=${k2}, k2s=${k2s}, tilt=${tilt}*pi/12, fringe=${fringe}
    ]],

    alist = tblcat(ref_cfg.alist, {"tilt", "fringe", "k2", "k2s",}),
    tilt   = 0..6,
    fringe = 0..3..3,
    k2     = -0.2..0.2..0.2,
    k2s    = -0.2..0.2..0.2,
  }
  run_test(cfg)
end

local function testOCT()
  local cfg = ref_cfg "octupole" {
    elm = [[
      OCTUPOLE, at=0.75, l=1.5, 
      k3=${k3}, k3s=${k3s}, tilt=${tilt}*pi/16, fringe=${fringe}
    ]],

    alist = tblcat(ref_cfg.alist, {"tilt", "fringe", "k3", "k3s"}),
    tilt   = 0  ..8..2,
    fringe = 0  ..3 ..3,
    k3     = -0.2..0.2..0.2,
    k3s    = -0.2..0.2..0.2,
  }
  run_test(cfg)
end


local function testDECA()
  local cfg = ref_cfg "decapole" {
    elm = [[
      multipole, at=0.75,
      knl={0,0,0,0,${k4}*1.5}, ksl={0,0,0,0,${k4s}*1.5}, 
      tilt=${tilt}*pi/20, fringe=${fringe}
    ]],
    
    alist = tblcat(ref_cfg.alist, {"tilt", "fringe", "k4", "k4s"}),
    tilt   = 0  ..10..5,
    fringe = 0  ..3 ..3,
    k4     = -0.2..0.2..0.2,
    k4s    = -0.2..0.2..0.2,
    order  = 5,
  }
  run_test(cfg)
end

local function testDODECA()
  local cfg = ref_cfg "dodecapole" {
    elm = [[
      multipole, at=0.75, 
      knl={0,0,0,0,0,${k5}*1.5}, ksl={0,0,0,0,${k5s}*1.5}, 
      tilt=${tilt}*pi/20, fringe=${fringe}
    ]],

    alist = tblcat(ref_cfg.alist, {"tilt", "fringe", "k5", "k5s"}),
    tilt   = 0  ..12..3,
    fringe = 0  ..3 ..3,
    k5     = -0.2..0.2..0.2,
    k5s    = -0.2..0.2..0.2,
    order = 6,
  }
  run_test(cfg)
end

local function testDRIFT()
  local cfg = ref_cfg "drift" { 
    elm = "DRIFT, at=0.75, l=1.5",
    tol = 100,
  }
  run_test(cfg)
end

local function testCAV()
  local cfg = ref_cfg "cavity" {
    elm =  [[
      RFCAVITY, at=0.75, l=1.5, 
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}, 
      no_cavity_totalpath=${no_totalpath};
    ]],

    alist = tblcat(
      ref_cfg.alist, 
      {"no_totalpath", "volt", "lag", "freq", "harmon"}
    ),
    no_totalpath = {true, false},
    volt      = -8 ..8  ..8   ,
    lag       =  0 ..0.9..0.45,
    freq      =  0 ..150 ..75,
    icase     =  6,
  }
  cfg = cfg {harmon := {cfg.cfg.freq == 0 and 2 or 0},}
  run_test(cfg)
end

local function testCCAV()
  local cfg = ref_cfg "cavity" {
    elm =  [[
      CRABCAVITY, at=0.75, l=1.5,
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq}
    ]],

    alist = tblcat(ref_cfg.alist, {"volt", "lag", "freq", "harmon"}),
    -- no_totalpath = {true, false}, !Illegal in MAD-X
    volt      = -8 ..8  ..8   ,
    lag       =  0 ..0.9..0.45,
    freq      =  0 ..150 ..75,
    icase     =  6,
  }
  cfg = cfg {harmon := {cfg.cfg.freq == 0 and 2 or 0},}
  run_test(cfg)
end

local function testMULT()
  local cfg = ref_cfg "multipole" {
    elm =  [[
      MULTIPOLE, at=0.75, lrad=1.5, 
      knl={${k0}, ${k1}, ${k2}, ${k3}}, ksl={${k0s}, ${k1s}, ${k2s}, ${k3s}}
    ]],
    
    alist = tblcat(
      ref_cfg.alist, 
      {"k0", "k1", "k2", "k3", "k0s", "k1s", "k2s", "k3s"}
    ),
    k0        = -0.2..0.2..0.2,
    k1        = -0.2..0.2..0.2,
    k2        = -0.2..0.2..0.2,
    k3        = -0.2..0.2..0.2,
    k0s       = -0.2..0.2..0.2,
    k1s       = -0.2..0.2..0.2,
    k2s       = -0.2..0.2..0.2,
    k3s       = -0.2..0.2..0.2,
  }
  run_test(cfg)
end

local function testSBEND()
  local cfg = ref_cfg "sbend" {
    elm =  [[
      SBEND, at=0.75, l=1.5, angle=${k0}*2*pi/1e2, 
      kill_ent_fringe=${no_fringe}, kill_exi_fringe=${no_fringe};
    ]],
    tol = 1e7,
    
    alist = tblcat(ref_cfg.alist, {"k0", "no_fringe"}), 
    k0        = -0.5..0.5..0.2,
    no_fringe = {true, false},
  }
  run_test(cfg)
end

local function testRBEND()
  local cfg = ref_cfg "rbend"{
    elm =  [[
      RBEND, at=0.75, l=1.5, angle=${k0}*2*pi/1e2,
      kill_ent_fringe=${no_fringe}, kill_exi_fringe=${no_fringe},
      ptcrbend=true, truerbend=true;
    ]],
    tol = 3e6,

    alist = tblcat(ref_cfg.alist, {"k0", "no_fringe"}),
    k0        = -0.5..0.5..0.2,
    no_fringe = {--[[ true, ]] false}, ! Impossible to turn off fringe in MAD-X
  }
  run_test(cfg)
end

-- Needs to be updated to use ksi and zero length solenoids
-- Only TKT while MAD-NG does not support 0 length solenoids 
local function testSOL()
  local cfg = ref_cfg "solenoid" {
    elm =  "SOLENOID, at=0.75, l=${l}, ks=${ks}, fringe=${fringe};",

    alist = tblcat(ref_cfg.alist, {"l", "ks", "fringe"}),
    l        = {1.5},
    ks       = -0.6..0.6..0.3,
    fringe   = 0..1,
    model    = {2},
  }
  run_test(cfg)
end

local function testELSEP()
  local cfg = ref_cfg "elseparator" {
    elm =  [[
      ELSEPARATOR, at=0.75, l=1.5, 
      ex=${ex}, ey=${ey}, ex_l=${ex_l}, ey_l=${ey_l}, tilt=${tilt};
    ]],
    alist = tblcat(ref_cfg.alist, {"ex", "ey", "ex_l", "ey_l", "tilt"}),
    ex       = -4..4..4,
    ey       = -4..4..4,
    ex_l     = {0}, !-6..6..6, ! Broken as the madx is ex_l and the madng is exl
    ey_l     = {0}, !-6..6..6, ! Broken as the madx is ex_l and the madng is exl
    tilt     = {0}, !1..4, ! MAD-X does not tell PTC about tilt
  }
  run_test(cfg)
end

local function testKICK()
  local cfg = ref_cfg "kicker" {
    elm =  [[
      KICKER, at=0.75, l=1.5, 
      hkick=${hkick}, vkick=${vkick}, tilt=${tilt}*pi/16;
    ]],

    alist = tblcat(ref_cfg.alist, {"hkick", "vkick", "tilt"}), 
    hkick    = -2e-3..2e-3..2e-3,
    vkick    = -2e-3..2e-3..2e-3,
    tilt     = 1..4,
  }
  run_test(cfg)
end

local function testRFMULT()
  local cfg = ref_cfg "rfmultipole" {
    elm =  [[
      RFMULTIPOLE, at=0.75, lrad=1.5, 
      volt=${volt}, lag=${lag}, harmon=${harmon}, freq=${freq},
      pnl={${k0}, ${k1}, ${k2}, ${k3}}, psl={${k0s}, ${k1s}, ${k2s}, ${k3s}};
      ]],

      alist = tblcat(
      ref_cfg.alist, 
      {"volt", "lag", "freq", "harmon", --"totalpath",
       "k0", "k1", "k2", "k3", "k0s", "k1s", "k2s", "k3s"}
    ),
    -- totalpath = {false, true}, !illegal in MAD-X
    volt      = -8 ..8  ..8   ,
    lag       =  0 ..0.9..0.45,
    freq      =  0 ..150 ..75,
    k0        = -0.2..0.2..0.2,
    k1        = -0.2..0.2..0.2,
    k2        = -0.2..0.2..0.2,
    k3        = -0.2..0.2..0.2,
    k0s       = -0.2..0.2..0.2,
    k1s       = -0.2..0.2..0.2,
    k2s       = -0.2..0.2..0.2,
    k3s       = -0.2..0.2..0.2,
    icase     = 6,
  }
  cfg = cfg {harmon := {cfg.cfg.freq == 0 and 2 or 0},}
  run_test(cfg)
end
-------------------------------------------------------------------------------o

-- Running the tests-----------------------------------------------------------o
-- testDRIFT()
testSBEND()
-- testRBEND()
-- testQUAD()
-- testSEXT()
-- testOCT()
-- testDECA () -- Only actually tests the multipole
-- testDODECA () -- Only actually tests the multipole
-- testKICK()
-- testELSEP()
-- testMULT()
-- testSOL()
-- testCAV()
-- testRFMULT()
-- testCCAV() !Fails as MAD-X defines a k0 for the crab cavity based on volt
-- read_mtbl(quadrupole, 10, 2) -- For reading the results


--[[
  LIST OF ISSUES:
  
  MAD-NG:
    - MAD-NG does not support 0 length solenoids

  MAD-X:
    - MAD-X does not communicate tilt in ELSEPARATOR to PTC
    - MAD-X does not allow to turn off fringe in RBEND
    - MAD-X defines a k0 for the crab cavity based on volt
    - MAD-X does not support totalpath in RFMULTIPOLE
    - MAD-X does not support totalpath in CRABCAVITY
  
  Other:
    - MAD-NG does not support the same syntax for the rf cavity as MAD-X for totalpath
    - MAD-NG does not support the same syntax for the elseparator as MAD-X for exl and eyl
]]