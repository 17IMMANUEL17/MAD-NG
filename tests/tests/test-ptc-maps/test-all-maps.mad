--[=[
 o-----------------------------------------------------------------------------o
 |
 | MAD vs PTC test suites
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: J. Gray, joshua.mark.gray at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide test suites for MAD vs PTC

  Usage:
    path-to-mad/mad test-all-maps.mad
    Assume path-to-mad/madx to be present
    Default path-to-mad is ..

 o-----------------------------------------------------------------------------o
]=]

-- modules --------------------------------------------------------------------o

-- list of test suites (see src/madl_main.mad)
local modules = {
  "sbend", "rbend", "quad", "sext", "octu", "solen",
  "mult", "elec", "patch", "misc", "misalign",
}

-- allow global access
MAD.strict(false)

ref_cfg = MAD.object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = false, -- Default: false
  doprnt = 0    , -- Default: 0
  dodbg  = false, -- Default: false
  doplot = false, -- Default: false

  gen_utest = false, -- Default: false

  -- list of variables in the tests
  alist = {"model", "energy", "method", "nslice", "x0i"}, --attributes list
  tol = 10,

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  snm    = -1,
  seql   =  2,
  cmap   = true,

  x0i    = 1..5,       -- 0, 4D, 5D, 5D strong, 6D (see get_mad_str)
}

-- load test suites
for _,v in ipairs(modules) do
  modules[v] = require("test-" .. v .. "-maps")
end

-- control display of custom objects during tests
MAD:export('tostring', true)

-- check for unexpected global access
MAD.strict()

local parse_cmd_args, run_tests in require("testvsptc")
if parse_cmd_args() then return run_tests() end

ref_cfg.do_utest  = true -- Unitttest defaults
ref_cfg.doplot    = true -- Unitttest defaults

-- run test suites
local status = MAD.utest.LuaUnit.run()

-- collect tests
local testname = MAD.utest.LuaUnit.collectTests()

-- build dict
MAD.utility.setkeys(testname)
testname["ref_cfg"] = true   -- Not an unexpected global

-- check for unexpected globals
MAD.checkglobal(testname)

-- exit status, run finalizer
os.exit( status, true )
