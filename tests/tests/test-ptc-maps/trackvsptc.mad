-- locals ---------------------------------------------------------------------o
local mtable, object, damap, tostring                            in MAD
local openfile, fileexists, tblcat, strinter                     in MAD.utility
local is_table, is_iterable, is_number                           in MAD.typeid
local assertTrue                                                 in MAD.utest
local max                                                        in math         

package.path = package.path .. ";../tools/?.mad"
local get_diff, store_results, gen_cfg, in_dir, out_dir, save_res, chk_tol,
      get_prev_res, prnt_results, add_trk_gen_cols, run_madx, get_cfgs_to_run,
      show_res, ptc_strs, create_madx_seq, get_last_ptc_map      in require "track-tool"

local plt_dir, plot_trk_res, do_norun                            in require "plot-tool"
local args_to_cfg                                                in require "test-tool"

local create_dif = require "madl_dbgmap".cmpmdump
local dum = damap() -- get a dummy damap object for reading

local coord_str, seq_ctx, madx_script in ptc_strs

local utest_dir  = \s -> 'utests/' ..(s or '')
os.execute("mkdir -p "..utest_dir()) -- Create utest dir if it doesn't exist

local ref_file = openfile(in_dir("ref.madx"), "r")
local madx_ref = ref_file:read("*a")
ref_file:close()
local ref_file = openfile(in_dir("ref.mad"), "r")
local mad_ref, mad_file = ref_file:read("*a")
ref_file:close()
-------------------------------------------------------------------------------o

local stop_and_restart = \cfg => cfg.stop, cfg.restart = true, true end

local function chk_cfgfile (file_cfg, cur_cfg)
  for k, v in pairs(file_cfg) do
    if is_iterable(v) then chk_cfgfile(v, cur_cfg[k])
    elseif v ~= cur_cfg[k] then
      if not (is_number(v) and math.abs(v - cur_cfg[k]) < eps) then
        return false 
      end
    end
  end
  return true
end
-- Run track and PTC from cur_cfg and create results --------------------------o
local function do_trck(cfg)
  -- Create element sequence w/ current cfg context and run MAD-NG track
  create_madx_seq(cfg)
  MADX.elm = nil -- Remove element so that next test can be run with new values
  local _, mflw = mad_file()
  local cur_cfg in cfg -- Get current cfg (cleaner)

  -- Grab PTC last map from out file and get diff with mflw[1]
  local ptc_res
  if cfg.do_utest and not cfg.gen_utest then          -- How to make this check faster?
    repeat
      local line = cfg.utest_reffile:read("*l")         -- Read reference cfg from file
      if not line then return stop_and_restart(cfg) end -- Stop if file is corrupted

      local tbl = load("return "..line)                -- Load the table
      if not tbl then return stop_and_restart(cfg) end -- Stop if file is corrupted
      
      tbl = tbl()                                      -- Convert from function table
      if tbl.cfgid == cur_cfg.cfgid and not chk_cfgfile(tbl, cur_cfg) then -- When cfgid is the same, check that the cfg is the same
        return stop_and_restart(cfg) 
      end
      ptc_res = dum:read(cfg.utest_reffile)
    until tbl.cfgid == cur_cfg.cfgid
  else
    -- Run MAD-X-PTC
    run_madx(cfg.name)
    ptc_res = get_last_ptc_map(out_dir(cfg.name .. "_p.txt")):fromptc()
  end
  if cfg.gen_utest then 
    cfg.utest_reffile:write(MAD.tostring(cur_cfg), "\n")
    ptc_res:write(cfg.utest_reffile, tostring(cur_cfg.cfgid))
  end
  return get_diff(mflw[1], ptc_res, cfg.order)
end

local function run_cfg (cfg, results)
  -- Run track for a single configuration
  if not cfg.chk_cfg then -- If cfg is not in the list of cfgs to run, increment cfgid and return
    cfg.cur_cfg.cfgid = cfg.cur_cfg.cfgid + 1
    return 
  end 
  
  local res, res_da = do_trck(cfg)
  if not res then return end -- Stop if reference file is corrupted (res = nil)

  store_results(cfg, res, results)
  prnt_results(cfg, res)
  if cfg.dodbg then 
    if not chk_tol(res, cfg.tol, cfg.order) then
      if not cfg.do_utest then
        io.write("Max dif greater than tolerance, stopping...\n")
      end
      -- Run mad in debug mode and set the program to stop
      create_madx_seq(cfg {debug = 6})
      openfile(in_dir(cfg.name.."_ref.mad"), "w"):write(mad_ref%cfg):close()
      
      run_madx(cfg.name)  -- Not really required other than if cfg.do_utest
      assert(os.execute(
        '../mad '.. in_dir(cfg.name.."_ref.mad") 
        ..' >' .. out_dir(cfg.name .. "_n.txt")
      ))
      if not cfg.cmap then create_dif({nam=out_dir(cfg.name)}) end
      cfg.stop = true
    end
  end
  if cfg.do_utest then
    assertTrue(chk_tol(res, cfg.tol, cfg.order), tostring(res))
  end
end

local test_cfg_attrs = { -- Attributes reserved for the test suite
  "chk_cfg", "utest_reffile", "seq_file", "stop", "restart"
}

local function chk_cfg_attrs (cfg)
  for _, attr in ipairs(test_cfg_attrs) do
    assert(not cfg[attr], "Attribute '"..attr.."' is reserved for the test suite")
  end
end

-- Run test -------------------------------------------------------------------o
local function run_test(cfg)    
  args_to_cfg(cfg) -- Convert user terminal arguments to cfg
  chk_cfg_attrs(cfg) -- Check that cfg does not contain reserved attributes

  -- If the user does not want to run the test, 
  -- just show results from previous run
  cfg.chk_cfg = get_cfgs_to_run(cfg.cid)
  if not cfg.dorun then return do_norun (cfg) end

  if cfg.gen_utest then
    cfg.utest_reffile = openfile(utest_dir(cfg.name..".ref"), "w")
  elseif cfg.do_utest then
    cfg.utest_reffile = openfile(utest_dir(cfg.name..".ref"), "r")
    if not cfg.utest_reffile then
      cfg.gen_utest = true
      cfg.utest_reffile = openfile(utest_dir(cfg.name..".ref"), "w")
      MAD.warn("No reference file found, generating new one")
    end
  end

  cfg.ptcmodel = true -- Force PTC model to be used (comparing to PTC)

  -- Generate the reference file
  cfg.seq_file = in_dir(cfg.name.."_seq.seq")
  openfile(in_dir(cfg.name .. "_ref.madx"), "w"):write(madx_ref % cfg):close()

  -- Load the MAD reference file
  mad_file = assert(loadstring(mad_ref % cfg))

  -- Create new table for cur_cfg for each cfg set
  cfg.cur_cfg = {cfgid = 0, test_type="lua"}
  
  -- Create the mtable to store the results
  local results = mtable(cfg.name){
    "__cfg", "__res", 
    max_order = cfg.order, 
    run_tol   = cfg.tol,
    novector  = true, 
  }
  
  io.write("Running ", cfg.name, " (tol = ", tostring(cfg.tol), ")\n")
  if cfg.doprnt > 1 then 
    io.write("cfgid\t")
    for i = 0, cfg.order do io.write("order ", i, "\t") end
    io.write("\n")
  end

  -- Fill the mtable with the cfg and results
  cfg.stop = false ; cfg.restart = false
  gen_cfg(cfg, 1, \-> run_cfg(cfg, results))

  -- Restart the test if problem is found reading the PTC reference file
  if cfg.restart and cfg.stop then 
    MAD.warn("Reference file corrupted or config changed, generating new one")
    cfg.gen_utest = true -- Set to generate new reference file
    for _, attr in ipairs(test_cfg_attrs) do cfg[attr] = nil end -- Reset cfg
    return run_test(cfg)
  end
  
  -- Add the generator columns to the results table
  add_trk_gen_cols(results, cfg)
  
  -- Save the results
  if cfg.dosave then save_res(cfg, results) end

  -- Print the results
  if cfg.doprnt > 0 then show_res(results, results, cfg.alist, cfg.tol) end 

  -- Plot the results
  if cfg.doplot then  plot_trk_res(results, cfg, plt_dir) end

  -- Close the utest file
  if cfg.gen_utest or cfg.do_utest then cfg.utest_reffile:close() end

  -- Cleanup excess files if the program is not stopped mid-test
  if not cfg.stop then  
    os.remove(in_dir( cfg.name .. "_ref.madx"))
    os.remove(in_dir( cfg.name .. "_seq.seq" ))
    os.remove(out_dir(cfg.name .. "_p.txt"   ))
    os.remove("internal_mag_pot.txt")
    os.remove("fort.18")
  end
end

return { run_test = run_test }