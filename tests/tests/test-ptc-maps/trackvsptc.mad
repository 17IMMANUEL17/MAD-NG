-- locals ---------------------------------------------------------------------o
local mtable, object                                      in MAD
local openfile, fileexists, tblcat, strinter                     in MAD.utility
local max                                                        in math         
local is_table                                                   in MAD.typeid

package.path = package.path .. ";../tools/?.mad"
local get_diff, save_results, gen_cfg, in_dir, out_dir, plt_dir,
      plot_trk_res, get_prev_res, prnt_results, add_trk_gen_cols,
      show_res, X0s, ptc_strs, create_madx_seq, get_last_ptc_map in require "track-tool"

local create_dif = require "madl_dbgmap".cmpmdump

local coord_str, test_ctx, madx_script in ptc_strs

local ref_file = openfile(in_dir("ref.madx"), "r")
local madx_ref = ref_file:read("*a")
ref_file:close()
local ref_file = openfile(in_dir("ref.mad"), "r")
local mad_ref, mad_file = ref_file:read("*a")
ref_file:close()
-------------------------------------------------------------------------------o

-- Run track and PTC from cur_cfg and create results --------------------------o
local function do_trck(cfg)
   -- Create results table
  local res = {}
  
  -- Create element sequence w/ current cfg context
  create_madx_seq(cfg)

  -- Run MAD-X-PTC
  assert(os.execute(
    '../madx64 '.. in_dir(cfg.name .. "_ref.madx") 
    ..' >' .. out_dir(cfg.name .. "_p.txt")
  ))
  MADX.elm = nil -- Remove element so that next test can be run with new values

  -- Run MAD-NG track
  local _, mflw = mad_file()

  -- Grab PTC last map from out file and get diff with mflw[1]
  local ptc_res = get_last_ptc_map(out_dir(cfg.name .. "_p.txt")):fromptc()
  return get_diff(mflw[1], ptc_res, cfg.order)
end

local function run_cfg (cfg, results)
  -- Run track for a single configuration
  local res = do_trck(cfg)

  save_results(cfg, res, results)
  prnt_results(cfg, res)
  if not cfg.dodbg then return end-- If debug mode is on, stop when max dif is greater than tol
  for i = 1, cfg.order+1 do
    local tol = is_table(cfg.tol) and cfg.tol[i] or cfg.tol
    if res["order"..i-1.."_eps"] > tol then
      io.write("Max dif greater than tolerance, stopping...\n")
      -- Run mad in debug mode and set the program to stop
      create_madx_seq(cfg {debug = 6})
      openfile(in_dir(cfg.name.."_ref.mad"), "w"):write(mad_ref%cfg):close()
      os.execute(
        '../mad '.. in_dir(cfg.name.."_ref.mad") 
        ..' >' .. out_dir(cfg.name .. "_n.txt")
      )
      create_dif({nam=out_dir(cfg.name)})
      cfg.stop = true
      return
    end
  end
end

-- Run test -------------------------------------------------------------------o
local function run_test(cfg)    
  -- If the user does not want to run the test, 
  -- just show results from previous run
  if not cfg.dorun then 
    local cfg_tbl, res_tbl = get_prev_res(cfg.name, out_dir)
    res_tbl.max_order = cfg.order
    if cfg.doprnt then show_res(res_tbl, cfg_tbl, cfg_tbl:colnames(), cfg.tol) end
    if cfg.doplot then plot_trk_res(res_tbl, cfg, plt_dir, cfg_tbl) end
    return 
  end

  -- Generate the reference file
  cfg.seq_file = in_dir(cfg.name.."_seq.seq")
  openfile(in_dir(cfg.name .. "_ref.madx"), "w"):write(madx_ref % cfg):close()

  -- Load the MAD reference file
  mad_file = loadstring(mad_ref % cfg)

  -- Create new table for cur_cfg for each cfg set
  cfg.cur_cfg = {cfgid = 0}
  
  -- Create the mtable to store the results
  local results = mtable(cfg.name){
    "__cfg", "__res", 
    max_order = cfg.order, 
    run_tol   = cfg.tol,
  }
  
  if cfg.doprnt then 
    io.write("Running ", cfg.name, " (tol = ", MAD.tostring(cfg.tol), ")\n", "cfgid\t")
    for i = 0, cfg.order do io.write("order ", i, "\t") end
    io.write("\n")
  end

  -- Fill the mtable with the cfg and results
  gen_cfg(cfg, 1, \-> run_cfg(cfg, results))
  
  -- Add the generator columns to the results table
  add_trk_gen_cols(results, cfg)
  
  -- Decide whether to save the results
  local dosave = cfg.dosave or not (
           fileexists(out_dir(results.name.."_cfg.tfs")) and 
           fileexists(out_dir(results.name.."_res.tfs"))
        )
  
  -- Save the results (if required)
  if dosave then 
    local hdr_lst = {"name", "date", "time", "origin", "max_order", "run_tol"}
    results:write(
      out_dir(results.name.."_cfg.tfs"), 
      tblcat({"cfgid"}, cfg.alist), 
      hdr_lst
    )
    results:write(
      out_dir(results.name.."_res.tfs"), 
      tblcat({"cfgid"}, results.res_cols), 
      hdr_lst
    ) 
  end

  -- Print the results
  if cfg.doprnt then 
    show_res(results, results, cfg.alist, cfg.tol)
  end 

  -- Plot the results
  if cfg.doplot then 
    plot_trk_res(results, cfg, plt_dir)
  end

  -- Cleanup excess files if the program is not stopped mid-test
  if not cfg.stop then  
    os.remove(in_dir( cfg.name .. "_ref.madx"))
    os.remove(out_dir(cfg.name .. "_p.txt"   ))
    os.remove(in_dir( cfg.name .. "_seq.seq" ))
    os.remove("internal_mag_pot.txt")
    os.remove("fort.18")
  end
end
-------------------------------------------------------------------------------o
return { run_test = run_test }