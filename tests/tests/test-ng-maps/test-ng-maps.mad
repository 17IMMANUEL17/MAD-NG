-- ../mad test-ng-maps.mad
-- assume ../madx64 to be present...

local object                                                    in MAD
local tblcat                                                    in MAD.utility
local run_test in require("trackvsng")

-- The setup for the tests ----------------------------------------------------o

local ref_cfg = object "ref" {
  -- How to run the tests
  dorun  = true, -- Default: true 
  dosave = true, -- Default: false
  doprnt = true, -- Default: false
  dodbg  = true, -- Default: false
  
  -- list of variables in the tests
  alist = {"model", "energy", "method", "nslice", "x0i"}, --attributes list
  tol = 1000,

  -- list of values that are used to run test but are not changed throughout
  order  = 4,        -- 2/4
  icase  = 56,       -- 56/6
  debug  = 0,        -- 0/6
  dir    = 1,

  x0i    = 1..4,       -- 0, 4D, 5D, 6D (see get_mad_str)
}

local ref_equiv = object "equiv" { -- list of equivalent variables
  dir        = {"dir", dir = {1, -1}, f = \damap -> damap, n = 2},
  
  alist = { "dir"},
}


-- The actual test functions --------------------------------------------------o
local function testQUAD() -- Test the body (~2 min)
  local cfg = ref_cfg "quad" {
    elm = "quadrupole 'quad' {at=0.75, l=1.5, k1=${dir}*${k1}, k1s=${dir}*${k1s},tilt=${tilt}}",
    model  = 1..2,
    method = 2..6..2,    
    nslice = 1..3,
    energy = {1, 6500},  -- {1, 450, 6500}

    tol = 50,

    k1     = {-0.15, 0, 0.2},
    k1s    = {-0.15, 0, 0.2},
    tilt   = 0,
    str    = 1,
    alist = tblcat(ref_cfg.alist, {"k1", "k1s"}),
  }
  local equiv = ref_equiv "quad" {
    rotate = object { -- Requires deffered expression
      "tilt", "k1", "k1s",
      tilt = {0, "math.pi/4", "-math.pi/4"}, 
      k1  := {cfg.cur_cfg.k1 , -cfg.cur_cfg.k1s,  cfg.cur_cfg.k1s}, 
      k1s := {cfg.cur_cfg.k1s,  cfg.cur_cfg.k1 , -cfg.cur_cfg.k1 },
      
      f := \damap->damap,
      n = 3,
    },

    alist = tblcat(ref_equiv.alist, {"rotate"}),
  }
  run_test(cfg, equiv)
end

testQUAD()