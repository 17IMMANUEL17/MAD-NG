local lu = require 'luaunit'
local G  = require 'madl_gmath'
local eps, huge, I, inf, Inf, nan, NaN, pi, Pi, tiny, twopi in G

local m  = require 'math'
--local C  = require 'complex'

local isEqu    = lu.assertEquals
local isTrue   = lu.assertTrue
local isFalse  = lu.assertFalse
local isEquEps = lu.assertAlmostEquals
local isStr    = lu.assertIsString
local isTable  = lu.assertIsTable
local isNil    = lu.assertIsNil
local isErrMsgEq = lu.assertErrorMsgEquals

local  randomseed, random, ldexp, frexpabs,
abs, acos, asin, atan, ceil, cos, cosh, deg, exp, floor,
log, log10, modf, rad, sin, sinh, sqrt, tan, tanh,
asinh, acosh, atanh, erf, gamma, lgamma,
angle, fmod, pow, atan2, max, min,
ident, sign, step, sinc, trunc, round,
unm, add, sub, mul, div, mod,
eq, ne, lt, le, gt, ge,
carg, real, imag, conj, norm, proj, rect, polar in G

TestGmath = {}

--function TestGmath:setUp()    end
--function TestGmath:tearDown() end

-- as - is
--[[
function TestGmath:testRandomseed()end
function TestGmath:testRandom() end
function TestGmath:testLdexp() end
function TestGmath:testFrexp() end ]]

--unary
function TestGmath:testAbs()
  isEqu( abs(2)     , 2    )
  isEqu( abs(-2)    , 2    )
  isEqu( abs(1.2)   , 1.2  )
  isEqu( abs(-2.22) , 2.22 )
  isEqu( abs(2^60)  , 2^60 )
  isEqu( abs(-2^60) , 2^60 )
  isEqu( abs(0)     , 0    )
end

function TestGmath:testAcos()
  isEqu( acos(-1), pi     )
  isEqu( acos(0) , 1/2*pi )
  isEqu( acos(1) , 0      )
end

function TestGmath:testAsin()
  isEqu( asin(-1),-1/2*pi  )
  isEqu( asin(0) , 0       )
  isEqu( asin(1) , 1/2*pi  )
end

function TestGmath:testAtan()
  isEqu( atan(0)   , 0       )
  isEqu( atan(inf) , 1/2*pi  )
  isEqu( atan(-inf),-1/2*pi  )
end

function TestGmath:testCos()
  isEqu   ( cos(0)     , 1  )
  isEqu   ( cos(pi)    ,-1  )
  isEqu   ( cos(twopi) , 1  )
  isEquEps( cos(pi/3)  , 1/2, eps )
  isEquEps( cos(pi/2)  , 0  , eps )
  isEquEps( cos(3/2*pi), 0  , eps )
end

--function TestGmath:testCeil() end

function TestGmath:testCosh()
  isEqu( cosh(0), 1 )
end

--function TestGmath:testDeg() end

function TestGmath:testExp()
  isEqu( exp(0), 1 )
  isEqu( exp(-inf), 0 )
  isEqu( exp(inf), inf )
end

function TestGmath:testFloor()
  isEqu( floor(0)     , 0   )
  isEqu( floor(0.9)   , 0   )
  isEqu( floor(1.2)   , 1   )
  isEqu( floor(-1.2)  ,-2   )
  isEqu( floor(100.21), 100 )
  isEqu( floor(1.702245778598661e-1)  , 0 )
  isEqu( floor(-6.268945294667374e-11),-1 )
end

function TestGmath:testLog()
  isEqu( log(0),-inf )
  isEqu( log(1), 0   )
end

function TestGmath:testLog10()
  isEqu( log10(0)    ,-inf )
  isEqu( log10(1)    , 0   )
  isEqu( log10(10)   , 1   )
  isEqu( log10(10^29), 29  )
end

--function TestGmath:testModf() end
--function TestGmath:testRad() end

function TestGmath:testSin()
  isEqu   ( sin(0)     , 0  )
  isEqu   ( sin(pi/2)  , 1  )
  isEqu   ( sin(3/2*pi),-1  )
  isEquEps( sin(twopi) , 0  , eps )
  isEquEps( sin(pi)    , 0  , eps )
  isEquEps( sin(pi/6)  , 1/2, eps )
  isEquEps( sin(7/6*pi),-1/2, eps )
end

function TestGmath:testSinh()
  isEqu( sinh(0), 0 )
end

function TestGmath:testSqrt()
  isEqu( sqrt(0)   , 0  )
  isEqu( sqrt(16)  , 4  )
  isEqu( sqrt(9)   , 3  )
  isEqu( sqrt(1024), 32 )
  --isEqu( sqrt(-1)  , nan )
  --isEqu( sqrt(-199), nan )
end

function TestGmath:testTan()
  isEqu   ( tan(0)     , 0  )
  isEquEps( tan(pi/4)  , 1  , eps )
  isEquEps( tan(3/4*pi),-1  , eps )
  isEquEps( tan(twopi) , 0  , eps )
  isEquEps( tan(pi)    , 0  , eps )
end

function TestGmath:testTanh()
  isEqu( tanh(0), 0  )
end

function TestGmath:testAsinh()
  isEqu( asinh(0), 0 )
end

function TestGmath:testAcosh()
  --isEqu( acosh(0), nan )
end

function TestGmath:testAtanh()
  isEqu( atanh(0), 0 )
end

--[[function TestGmath:testErf() end
function TestGmath:testGamma() end
function TestGmath:testLgamma() end

-- binary
function TestGmath:testAngle() end
function TestGmath:testFmod() end
function TestGmath:testPow() end

-- variadic
function TestGmath:testMax() end
function TestGmath:testMin() end ]]

-- extra
function TestGmath:testIdent()
  isEquEps( ident(2.22)  ,  2.22, eps)
  isEquEps( ident(-3.22) , -3.22, eps)
  isEqu   ( ident(2)  ,  2 )
  isEqu   ( ident(-1) , -1 )
  isEqu   ( ident(0)  ,  0 )
end

function TestGmath:testSign()
  isEqu( sign(2)   ,  1 )
  isEqu( sign(7.2) ,  1 )
  isEqu( sign(-2)  , -1 )
  isEqu( sign(-4.1), -1 )
  isEqu( sign(0)   ,  1 )
end

function TestGmath:testStep()
  isEqu( step(2)   ,  1 )
  isEqu( step(7.2) ,  1 )
  isEqu( step(0)   ,  1 )
  isEqu( step(-2)  ,  0 )
  isEqu( step(-4.1),  0 )
end

function TestGmath:testSinc()
  local dat =
  {
  { 1e-11,  1.000000000000000e0    },
  { 1e-9 ,  1.000000000000000e0    },
  { 1e-7 ,  9.999999999999983e-1   },
  { 1e-5 ,  9.999999999833333e-1   },
  { 1e-3 ,  9.9999983333334167e-1  },
  { 1e-1 ,  9.9833416646828152e-1  },
  { 1e1  , -5.4402111088936981e-2  },
  { 1e3  ,  8.2687954053200256e-4  },
  { 1e5  ,  3.5748797972016509e-7  },
  { 1e7  ,  4.2054779319078249e-8  },
  { 1e9  ,  5.4584344944869956e-10 },
  { 1e11 ,  9.2869366049659195e-12 },
  { 1e13 , -2.8888529481752512e-14 },
  }

  for i=1,#dat do
    local inp = sinc(dat[i][1])
    local ref = dat[i][2]

    isEquEps( inp, ref, eps )
  end
  for i=1,#dat do
    local inp = -sinc(dat[i][1])
    local ref = -dat[i][2]

    isEquEps( inp, ref, eps )
  end
end

function TestGmath:testTrunc()
  isEqu( trunc(1.2) ,  1 )
  isEqu( trunc(7.9) ,  7 )
  isEqu( trunc(-1.2), -1 )
  isEqu( trunc(-2.8), -2 )
  isEqu( trunc(0)   ,  0 )
end

function TestGmath:testRound()
  isEqu( round(1.2) ,  1 )
  isEqu( round(7.9) ,  8 )
  isEqu( round(-1.2), -1 )
  isEqu( round(-2.8), -3 )
  isEqu( round(0)   ,  0 )
end

-- operators
function TestGmath:testUnm()
  isEquEps( unm(2.22)  , -2.22, eps)
  isEquEps( unm(-3.22) ,  3.22, eps)
  isEqu   ( unm(2)  , -2 )
  isEqu   ( unm(-1) ,  1 )
  isEqu   ( unm(0)  ,  0 )
end

function TestGmath:testAdd()
  isEquEps(10.2 +  10.1  , 20.3, eps)
  isEquEps(-1.2 + (-7.5) , -8.7, eps)
  isEqu   ( 1 +  2  ,  3 )
  isEqu   ( 1 +(-2) , -1 )
  isEqu   (-1 +  0  , -1 )
  isEqu   ( add( 1,  2 ),  3 )
  isEqu   ( add( 1,(-2)), -1 )
  isEqu   ( add(-1,  0 ), -1 )
end

function TestGmath:testSub()
  isEquEps(10.2 - 10.1  , 0.1, eps)
  isEquEps(-1.2 -(-7.5) , 6.3, eps)
  isEqu   ( 1 -  0  ,  1 )
  isEqu   ( 1 -(-2) ,  3 )
  isEqu   (-1 -  2  , -3 )
  isEqu   ( sub( 1,  0 ),  1 )
  isEqu   ( sub( 1,(-2)),  3 )
  isEqu   ( sub(-1,  2 ), -3 )

end

function TestGmath:testMul()
  isEquEps(10.2 * 10.1,  103.02, eps)
  isEquEps(-1.2 * 7.4 , -8.88  , eps)
  isEqu   ( 2 *(-3) , -6 )
  isEqu   (-1 *  0  ,  0 )
  isEqu   ( 1 *  2  ,  2 )
  isEqu   ( mul( 2,(-3)), -6 )
  isEqu   ( mul(-1,  0 ),  0 )
  isEqu   ( mul( 1,  2 ),  2 )
end

function TestGmath:testDiv()
  isEquEps(20.2 / 10.1,  2                , eps)
  isEquEps( 7.4 /-1.2 , -6.166666666666666, eps)
  isEqu   ( 4 /  2  ,  2   )
  isEqu   ( 9 /(-3) , -3   )
  isEqu   (-1 /  2  , -0.5 )
  isEqu   ( div( 4,  2  ),  2   )
  isEqu   ( div( 9,(-3) ), -3   )
  isEqu   ( div(-1,  2  ), -0.5 )
end

function TestGmath:testMod()
  isEquEps(20.2 % 10.1,  0, eps)
  isEquEps( 7.4 %-1.2 , -1, eps)
  isEqu   ( 4 %  2  ,  0   )
  isEqu   ( 4 %  3  ,  1   )
  isEqu   ( 9 %(-3) ,  0   )
  isEqu   ( 9 %(-2) , -1   )
  isEqu   (-1 %  2  ,  1   )
  isEqu   ( mod( 4 ,  3 ) ,  1   )
  isEqu   ( mod( 9 ,(-3)) ,  0   )
  isEqu   ( mod( 9 ,(-2)) , -1   )
  isEqu   ( mod(-1 ,  2 ) ,  1   )

end

--logical
function TestGmath:testEq()
  isTrue ( eq( 2.2,  2.2) )
  isTrue ( eq(-10 , -10 ) )
  isFalse( eq( 2  ,  3  ) )
  isFalse( eq(-3  , -2.2) )
  isFalse( eq( 2  , -2  ) )
end

function TestGmath:testNe()
  isTrue ( ne( 2.1,  2  ) )
  isTrue ( ne(-2.2,  4.3) )
  isTrue ( ne(-1  , -7  ) )
  isFalse( ne( 2  ,  2  ) )
  isFalse( ne(-7.2, -7.2) )
end

function TestGmath:testLt()
  isTrue ( lt( 2 ,  3.2 ) )
  isTrue ( lt(-4 ,  7   ) )
  isTrue ( lt(-17, -2   ) )
  isFalse( lt( 12,  10.1) )
  isFalse( lt(-20, -30  ) )
end

function TestGmath:testLe()
  isTrue ( le( 2  ,  2   ) )
  isTrue ( le( 1.2,  2   ) )
  isTrue ( le(-2  ,  12  ) )
  isTrue ( le(-6  , -6   ) )
  isTrue ( le(-6.7, -6   ) )
  isFalse( le( 12 ,  2   ) )
  isFalse( le(-12 , -13.1) )
end

function TestGmath:testGt()
  isTrue ( gt( 21.1,  12 ) )
  isTrue ( gt(-2   , -22 ) )
  isFalse( gt( 2   ,  12 ) )
  isFalse( gt(-2   ,  1.1) )
  isFalse( gt(-12  , -1  ) )
end

function TestGmath:testGe()
  isTrue ( ge( 12 ,  12 ) )
  isTrue ( ge( 12 ,  2.1) )
  isTrue ( ge(-12 , -22 ) )
  isFalse( ge( 4.1,  8.2) )
  isFalse( ge(-2  ,  5  ) )
  isFalse( ge(-6  , -1  ) )
end

-- complex
--[[function TestGmath:testCarg() end
function TestGmath:testReal() end
function TestGmath:testImag() end
function TestGmath:testConj() end
function TestGmath:testNorm() end
function TestGmath:testProj() end
function TestGmath:testRect() end
function TestGmath:testPolar() end]]
