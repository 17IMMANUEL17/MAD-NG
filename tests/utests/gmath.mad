--[=[
 o-----------------------------------------------------------------------------o
 |
 | Gmath regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: A.Z. Teska, aleksandra.teska at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the gmath module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertFalse, assertTrue, assertEquals, assertAlmostEquals
      in require 'luaunit'
local dat = require 'gmath_dat'

local
  abs, acos, asin, atan, ceil, cos, cosh, deg, exp, floor, log,
  log10, max, min, modf, rad, sin, sinh, sqrt, tan, tanh,  --(generic functions)
  atan2, fmod, frexp, ldexp, random, randomseed,       --(non-generic functions)
  acosh, angle, asinh, atanh, erf, frac, gamma, lgamma,
  round, sign, sinc, step, trunc,                    --(extra generic functions)
  unm, add, sub, mul, div, mod, pow,
  eq, ne, lt, le, gt, ge,                             --(operators as functions)
  carg, real, imag, conj, norm, rect, polar,       --(generic complex functions)
  eps, huge, tiny, I, inf, Inf, nan, NaN, pi, Pi,                  --(constants)
  option                                                               --(setup)
  in MAD

-- regression test suite ------------------------------------------------------o

TestGmath = {}

local values = {
  int  = {0, 1, 1e9, 2^31, 2^32, 2^52},
  dec  = {0, 2^-52, 2^-32, 2^-31, 1e-9, 1, 1e9, 2^31, 2^32, 2^52},
  num  = {0, tiny, 2^-64, 2^-63, 2^-53, 2^-52, 2^-32, 2^-31, 1e-9,
          0.1, 1-eps, 1, 1+eps, 1.1,
          1e9, 2^31, 2^32, 2^52, 2^53, 2^63, 2^64, huge, inf},
  rad  = {0, eps, pi/180, pi/90, pi/36, pi/18, pi/12, pi/6,
          pi/4-eps, pi/4, pi/4+eps, pi/3, pi/2-eps, pi/2, pi/2+eps,
          pi-pi/3, pi-pi/4, pi-pi/6, pi-pi/12, pi-eps, pi},
  deg  = {0, eps, 1, 2, 5, 10, 15, 30,
          45-eps, 45, 45+eps, 60, 90-eps, 90, 90+eps,
          120, 135, 150, 165, 180-eps, 180},
  rad2 = {0, eps, pi/180, pi/90, pi/36, pi/18, pi/12, pi/6,
          pi/4-eps, pi/4, pi/4+eps, pi/3, pi/2-eps, pi/2},
  deg2 = {0, eps, 1, 2, 5, 10, 15, 30, 45-eps, 45, 45+eps, 60, 90-eps, 90},
}

--
-- Trigonometric mnemonics
--
-- 45   : square 1-1  , diag.  √2  , hypot 1 -> sides √2/2
-- 30-60: equil. 1-1-1, height √3/2, hypot 1 -> sides 1/2 and √3/2
--
-- deg      0      30     45     60     90
-- rad      0     pi/6   pi/4   pi/3   pi/2
-- sin     √0/2   √1/2   √2/2   √3/2   √4/2
-- cos     √4/2   √3/2   √2/2   √1/2   √0/2   sin(pi/2 - angle)
-- tan     0/√3   1/√3    1     √3/1   √3/0   sin/cos
--

-- keep the order of the import above

-- generic functions

function TestGmath:testAbs()
  for _,v in ipairs(values.num) do
    assertEquals(  abs( v),  v )
    assertEquals(  abs(-v),  v )
    assertEquals( -abs(-v), -v )
  end
  assertEquals( -abs(-0), 0 )
end

function TestGmath:testAcos()
  for _,v in ipairs(values.rad) do
    assertAlmostEquals( acos(cos( v)) - v                , 0, 8*eps ) -- pi/180
    assertAlmostEquals( acos(cos(-v)) - v                , 0, 8*eps ) -- pi/180
    assertAlmostEquals( acos(v/pi)    - (pi-acos(-v/pi)) , 0,   eps )
    assertAlmostEquals( acos(v/pi)    - (pi/2-asin(v/pi)), 0,   eps )
  end
  local r4, r6, r12 = sqrt(2)/2, sqrt(3)/2, sqrt(2)*(sqrt(3)+1)/4
  assertEquals      ( acos(-1  ) -    pi   , 0        )
  assertAlmostEquals( acos(-r12) - 11*pi/12, 0, 2*eps )
  assertAlmostEquals( acos(-r6 ) -  5*pi/6 , 0,   eps )
  assertAlmostEquals( acos(-r4 ) -  3*pi/4 , 0,   eps )
  assertAlmostEquals( acos(-0.5) -  2*pi/3 , 0, 2*eps )
  assertAlmostEquals( acos( 0  ) -    pi/2 , 0,   eps )
  assertAlmostEquals( acos( 0.5) -    pi/3 , 0,   eps )
  assertAlmostEquals( acos( r4 ) -    pi/4 , 0,   eps )
  assertAlmostEquals( acos( r6 ) -    pi/6 , 0,   eps )
  assertAlmostEquals( acos( r12) -    pi/12, 0,   eps )
  assertEquals      ( acos( 1  ) -    0    , 0        )
  assertAlmostEquals( acos( r12) -    pi/12, 0,   eps )
  assertAlmostEquals( acos( r6 ) -    pi/6 , 0,   eps )
  assertAlmostEquals( acos( r4 ) -    pi/4 , 0,   eps )
  assertAlmostEquals( acos( 0.5) -    pi/3 , 0,   eps )
  assertAlmostEquals( acos( 0  ) -    pi/2 , 0,   eps )
  assertAlmostEquals( acos(-0.5) -  2*pi/3 , 0, 2*eps )
  assertAlmostEquals( acos(-r4 ) -  3*pi/4 , 0,   eps )
  assertAlmostEquals( acos(-r6 ) -  5*pi/6 , 0,   eps )
  assertAlmostEquals( acos(-r12) - 11*pi/12, 0, 2*eps )
  assertEquals      ( acos(-1  ) -    pi   , 0        )
end

function TestGmath:testAsin()
  for _,v in ipairs(values.rad2) do
    assertAlmostEquals( asin(sin( v)) -  v               , 0, eps )
    assertAlmostEquals( asin(sin(-v)) - -v               , 0, eps )
    assertAlmostEquals( asin(v/pi)    - -asin(-v/pi)     , 0, eps )
    assertAlmostEquals( asin(v/pi)    - (pi/2-acos(v/pi)), 0, eps )
  end
  local r3, r4, r12 = sqrt(3)/2, sqrt(2)/2, sqrt(2)*(sqrt(3)-1)/4
  assertEquals      ( asin( 0  ) -  0    , 0      )
  assertEquals      ( asin( r12) -  pi/12, 0      )
  assertEquals      ( asin( 0.5) -  pi/6 , 0      )
  assertAlmostEquals( asin( r4 ) -  pi/4 , 0, eps )
  assertEquals      ( asin( r3 ) -  pi/3 , 0      )
  assertEquals      ( asin( 1  ) -  pi/2 , 0      )
  assertEquals      ( asin( r3 ) -  pi/3 , 0      )
  assertAlmostEquals( asin( r4 ) -  pi/4 , 0, eps )
  assertEquals      ( asin( 0.5) -  pi/6 , 0      )
  assertEquals      ( asin( r12) -  pi/12, 0      )
  assertEquals      ( asin( 0  ) -  0    , 0      )
  assertEquals      ( asin(-r12) - -pi/12, 0      )
  assertEquals      ( asin(-0.5) - -pi/6 , 0      )
  assertAlmostEquals( asin(-r4 ) - -pi/4 , 0, eps )
  assertEquals      ( asin(-r3 ) - -pi/3 , 0      )
  assertEquals      ( asin(-1  ) - -pi/2 , 0      )
  assertEquals      ( asin(-r3 ) - -pi/3 , 0      )
  assertAlmostEquals( asin(-r4 ) - -pi/4 , 0, eps )
  assertEquals      ( asin(-0.5) - -pi/6 , 0      )
  assertEquals      ( asin(-r12) - -pi/12, 0      )
  assertEquals      ( asin(-0  ) - -0    , 0      )
end

function TestGmath:testAtan()
  for _,v in ipairs(values.rad2) do
    assertAlmostEquals( atan(tan( v))-  v, 0, eps )
    assertAlmostEquals( atan(tan(-v))- -v, 0, eps )
  end
  for _,v in ipairs(values.num) do
    assertEquals( atan(v) - -atan(-v), 0 )
  end
  local r3, r6, r12 = sqrt(3), 1/sqrt(3), 2-sqrt(3)
  assertEquals      ( atan(-inf) - -pi/2 , 0      )
  assertAlmostEquals( atan(-r3 ) - -pi/3 , 0, eps )
  assertEquals      ( atan(-1  ) - -pi/4 , 0      )
  assertAlmostEquals( atan(-r6 ) - -pi/6 , 0, eps )
  assertAlmostEquals( atan(-r12) - -pi/12, 0, eps )
  assertEquals      ( atan( 0  ) -  0    , 0      )
  assertAlmostEquals( atan( r12) -  pi/12, 0, eps )
  assertAlmostEquals( atan( r6 ) -  pi/6 , 0, eps )
  assertEquals      ( atan( 1  ) -  pi/4 , 0      )
  assertAlmostEquals( atan( r3 ) -  pi/3 , 0, eps )
  assertEquals      ( atan( inf) -  pi/2 , 0      )
end

function TestGmath:testCeil() -- TODO
  for _,v in ipairs(values.rad2) do
    assertAlmostEquals( atan(tan( v)),  v, eps )
    assertAlmostEquals( atan(tan(-v)), -v, eps )
  end
  assertEquals( ceil(0)     , 0    )
  assertEquals( ceil(-0)    , 0    )
  assertEquals( ceil(0.9)   , 1    )
  assertEquals( ceil(1.1)   , 2    )
  assertEquals( ceil(-0.9)  , 0    )
  assertEquals( ceil(-1.1)  ,-1    )
  assertEquals( ceil(100.21), 101  )
  assertEquals( ceil(2^52)  , 2^52 )
  assertEquals( ceil( 2^32*0.1),  429496730)
  assertEquals( ceil(-2^32*0.1), -429496729)
  assertEquals( ceil(-inf),-inf )
  assertEquals( ceil( inf), inf )
end

function TestGmath:testCos()
  for _,v in ipairs(values.rad) do
    assertAlmostEquals( cos(acos( v/pi)) - v/pi       , 0, eps )
    assertAlmostEquals( cos(v)           - cos(-v)    , 0, eps )
    assertAlmostEquals( cos(v)           - sin(pi/2-v), 0, eps )
  end
  local r4, r6, r12 = sqrt(2)/2, sqrt(3)/2, sqrt(2)*(sqrt(3)+1)/4
  assertEquals      ( cos(    pi   ) - -1  , 0      )
  assertAlmostEquals( cos( 11*pi/12) - -r12, 0, eps )
  assertAlmostEquals( cos(  5*pi/6 ) - -r6 , 0, eps )
  assertAlmostEquals( cos(  3*pi/4 ) - -r4 , 0, eps )
  assertAlmostEquals( cos(  2*pi/3 ) - -0.5, 0, eps )
  assertAlmostEquals( cos(    pi/2 ) -  0  , 0, eps )
  assertAlmostEquals( cos(    pi/3 ) -  0.5, 0, eps )
  assertAlmostEquals( cos(    pi/4 ) -  r4 , 0, eps )
  assertAlmostEquals( cos(    pi/6 ) -  r6 , 0, eps )
  assertAlmostEquals( cos(    pi/12) -  r12, 0, eps )
  assertEquals      ( cos(    0    ) -  1  , 0      )
  assertAlmostEquals( cos(-   pi/12) -  r12, 0, eps )
  assertAlmostEquals( cos(-   pi/6 ) -  r6 , 0, eps )
  assertAlmostEquals( cos(-   pi/4 ) -  r4 , 0, eps )
  assertAlmostEquals( cos(-   pi/3 ) -  0.5, 0, eps )
  assertAlmostEquals( cos(-   pi/2 ) -  0  , 0, eps )
  assertAlmostEquals( cos(- 2*pi/3 ) - -0.5, 0, eps )
  assertAlmostEquals( cos(- 3*pi/4 ) - -r4 , 0, eps )
  assertAlmostEquals( cos(- 5*pi/6 ) - -r6 , 0, eps )
  assertAlmostEquals( cos(-11*pi/12) - -r12, 0, eps )
  assertEquals      ( cos(-   pi   ) - -1  , 0      )
end

function TestGmath:testCosh() -- TODO
  for i=1,#dat.inp3 do
    local ref = dat.cosh[i]
    local res = dat.inp3[i]
    assertAlmostEquals( cosh(res) , ref, eps )
    assertAlmostEquals( cosh(-res), ref, eps )
  end

  assertEquals( cosh(inf) , inf )
  assertEquals( cosh(-inf), inf )
  assertEquals( cosh(0)   , 1   )
end

function TestGmath:testDeg() -- TODO
  assertEquals( deg(0)    , 0   )
  assertEquals( deg(2*pi), 360 )
  assertEquals( deg(pi)   , 180 )
  assertEquals( deg(pi/2) , 90  )
  assertAlmostEquals( deg(pi/3), 60, eps )
  assertAlmostEquals( deg(pi/4), 45, eps )
  assertAlmostEquals( deg(pi/6), 30, eps )
  assertAlmostEquals( deg(1.0471975511966), 60, eps )
end

function TestGmath:testExp() -- TODO
  for i=1,#dat.inp3 do
    local ref = dat.exp[i]
    local res = dat.inp3[i]
    assertAlmostEquals( exp(res), ref, eps )
  end

  assertEquals( exp(0)   , 1   )
  assertEquals( exp(-inf), 0   )
  assertEquals( exp(inf) , inf )
end

function TestGmath:testFloor() -- TODO
  assertEquals( floor(0)     , 0    )
  assertEquals( floor(-0)    , 0    )
  assertEquals( floor(0.9)   , 0    )
  assertEquals( floor(1.1)   , 1    )
  assertEquals( floor(-0.9)  ,-1    )
  assertEquals( floor(-1.1)  ,-2    )
  assertEquals( floor(100.21), 100  )
  assertEquals( floor(2^52)  , 2^52 )
  assertEquals( floor( 2^32*0.1),  429496729)
  assertEquals( floor(-2^32*0.1), -429496730)
  assertEquals( floor(-inf),-inf )
  assertEquals( floor( inf), inf )
end

function TestGmath:testLog() -- TODO
  for i=1,#dat.inp3 do
    local ref = dat.log[i]
    local res = dat.inp3[i]
    assertAlmostEquals( log(res), ref, eps )
  end

  assertEquals( log(0)  ,-inf )
  assertEquals( log(1)  , 0   )
  assertEquals( log(inf), inf )
end

function TestGmath:testLog10() -- TODO
  for i=1,#dat.inpLog10 do
    local ref = dat.log10[i]
    local res = dat.inpLog10[i]
    assertAlmostEquals( log10(res), ref, eps )
  end

  assertEquals( log10(inf)  , inf )
  assertEquals( log10(0)    ,-inf )
  assertEquals( log10(1)    , 0   )
  assertEquals( log10(10)   , 1   )
  assertEquals( log10(10^29), 29  )
end

function TestGmath:testMax() -- TODO
  assertEquals( max(2,4,5,6)   , 6    )
  assertEquals( max(-2.2,-7.1) ,-2.2  )
  assertEquals( max(2,eps)     , 2    )
  assertEquals( max(2^52, 2^53), 2^53 )
end

function TestGmath:testMin() -- TODO
  assertEquals( min(2,4,5,6)    , 2    )
  assertEquals( min(-2.2,-7.1)  ,-7.1  )
  assertEquals( min(2,eps)      , eps  )
  assertEquals( min(-2^52,-2^53),-2^53 )
end

function TestGmath:testModf() -- TODO
  local i,f = modf(0)
  assertEquals( i, 0 )
  assertEquals( f, 0 )
  local i,f = modf(-20.2)
  assertEquals( i, -20 )
  assertAlmostEquals( f, -0.2, eps )
end

function TestGmath:testRad() -- TODO
  assertEquals( rad(360), 2*pi )
  assertEquals( rad(0)  , 0     )
  assertEquals( rad(180), pi    )
  assertEquals( rad(90) , pi/2  )
  assertAlmostEquals( rad(60), pi/3, eps )
  assertAlmostEquals( rad(45), pi/4, eps )
  assertAlmostEquals( rad(30), pi/6, eps )
end

function TestGmath:testSin()
  for _,v in ipairs(values.rad) do
    assertAlmostEquals( sin(asin( v/pi)) - v/pi       , 0, eps )
    assertAlmostEquals( sin(v)           - -sin(-v)   , 0, eps )
    assertAlmostEquals( sin(v)           - cos(pi/2-v), 0, eps )
  end
  local r3, r4, r12 = sqrt(3)/2, sqrt(2)/2, sqrt(2)*(sqrt(3)-1)/4
  assertAlmostEquals( sin(    pi   ) -  0  , 0,   eps )
  assertAlmostEquals( sin( 11*pi/12) -  r12, 0, 2*eps )
  assertAlmostEquals( sin(  5*pi/6 ) -  0.5, 0,   eps )
  assertAlmostEquals( sin(  3*pi/4 ) -  r4 , 0,   eps )
  assertAlmostEquals( sin(  2*pi/3 ) -  r3 , 0,   eps )
  assertAlmostEquals( sin(    pi/2 ) -  1  , 0,   eps )
  assertAlmostEquals( sin(    pi/3 ) -  r3 , 0,   eps )
  assertAlmostEquals( sin(    pi/4 ) -  r4 , 0,   eps )
  assertAlmostEquals( sin(    pi/6 ) -  0.5, 0,   eps )
  assertAlmostEquals( sin(    pi/12) -  r12, 0,   eps )
  assertEquals      ( sin(    0    ) -  0  , 0        )
  assertAlmostEquals( sin(-   pi/12) - -r12, 0,   eps )
  assertAlmostEquals( sin(-   pi/6 ) - -0.5, 0,   eps )
  assertAlmostEquals( sin(-   pi/4 ) - -r4 , 0,   eps )
  assertAlmostEquals( sin(-   pi/3 ) - -r3 , 0,   eps )
  assertAlmostEquals( sin(-   pi/2 ) - -1  , 0,   eps )
  assertAlmostEquals( sin(- 2*pi/3 ) - -r3 , 0,   eps )
  assertAlmostEquals( sin(- 3*pi/4 ) - -r4 , 0,   eps )
  assertAlmostEquals( sin(- 5*pi/6 ) - -0.5, 0,   eps )
  assertAlmostEquals( sin(-11*pi/12) - -r12, 0, 2*eps )
  assertAlmostEquals( sin(-   pi   ) - -0  , 0,   eps )
end

function TestGmath:testSinh() -- TODO
  for i=1,#dat.inp1 do
    local ref = dat.sinh[i]
    local res = dat.inp1[i]
    assertAlmostEquals( sinh(res)  , ref, eps )
    assertAlmostEquals( -sinh(-res), ref, eps )
  end

  assertEquals( sinh(0)   , 0   )
  assertEquals( sinh(inf) , inf )
  assertEquals( sinh(-inf),-inf )
end

function TestGmath:testSqrt() -- TODO
  assertEquals( sqrt(0)   , 0   )
  assertEquals( sqrt(9)   , 3   )
  assertEquals( sqrt(16)  , 4   )
  assertEquals( sqrt(1024), 32  )
  assertEquals( tostring(sqrt(-1))   , tostring(nan) )
  assertEquals( tostring(sqrt(-2^22)), tostring(nan) )
end

function TestGmath:testTan()
  for _,v in ipairs(values.num) do
!    assertAlmostEquals( tan(atan( v))- -v, 0, 2 )
!    assertAlmostEquals( tan(atan(-v))-  v, 0, 2 )
  end
  for _,v in ipairs(values.rad2) do
    assertEquals( tan(v) - -tan(-v), 0 )
    assertAlmostEquals( tan(v) - sin(2*v)*(cos(2*v)+1), 0, 4*eps )
  end
  local r3, r6, r12 = sqrt(3), 1/sqrt(3), 2-sqrt(3)
  assertAlmostEquals( 1/tan(-pi/2 )       , 0,   eps )
  assertAlmostEquals(   tan(-pi/3 ) - -r3 , 0, 2*eps )
  assertAlmostEquals(   tan(-pi/4 ) - -1  , 0,   eps )
  assertAlmostEquals(   tan(-pi/6 ) - -r6 , 0,   eps )
  assertAlmostEquals(   tan(-pi/12) - -r12, 0,   eps )
  assertEquals      (   tan( 0    ) -  0  , 0        )
  assertAlmostEquals(   tan( pi/12) -  r12, 0,   eps )
  assertAlmostEquals(   tan( pi/6 ) -  r6 , 0,   eps )
  assertAlmostEquals(   tan( pi/4 ) -  1  , 0,   eps )
  assertAlmostEquals(   tan( pi/3 ) -  r3 , 0, 2*eps )
  assertAlmostEquals( 1/tan( pi/2 )       , 0,   eps )
end

function TestGmath:testTanh() -- TODO
  for i=1,#dat.inp1 do
    local ref = dat.tanh[i]
    local res = dat.inp1[i]
    assertAlmostEquals( tanh(res)  , ref, eps )
    assertAlmostEquals( -tanh(-res), ref, eps )
  end

  assertEquals( tanh(0)   , 0 )
  assertEquals( tanh(inf) , 1 )
  assertEquals( tanh(-inf),-1 )
end

-- functions wo generic

function TestGmath:testAtan2() -- TODO
  assertEquals( atan2(0,0)      , 0      )
  assertEquals( atan2(0,2)      , 0      )
  assertEquals( atan2(0,2^52)   , 0      )
  assertEquals( atan2(0,inf)    , 0      )
  assertEquals( atan2(0,-1)     , pi     )
  assertEquals( atan2(0,-2^52)  , pi     )
  assertEquals( atan2(0,-inf)   , pi     )
  assertEquals( atan2(2,0)      , pi/2   )
  assertEquals( atan2(inf,0)    , pi/2   )
  assertEquals( atan2(-2,0)     ,-pi/2   )
  assertEquals( atan2(-inf,0)   ,-pi/2   )
  assertEquals( atan2(inf,inf)  , pi/4   )
  assertEquals( atan2(-inf,-inf),-pi*3/4 )
end

function TestGmath:testFmod() -- TODO
  assertAlmostEquals( fmod(20.2, 10.1), 0  , eps )
  assertAlmostEquals( fmod(9.2, 2)    , 1.2, eps )
  assertAlmostEquals( fmod(7.4,-1.2)  , 0.2, eps )
  assertEquals( fmod( 4, 3), 1 )
  assertEquals( fmod( 9,-3), 0 )
  assertEquals( fmod( 9,-2), 1 )
  assertEquals( fmod(-1, 2),-1 )
end

function TestGmath:testLdexp()
  assertEquals( ldexp(0,0)   , 0   )
  assertEquals( ldexp(0,-3)  , 0   )
  assertEquals( ldexp(-3,0)  ,-3   )
  assertEquals( ldexp(3,0)   , 3   )
  assertEquals( ldexp(3,1)   , 6   )
  assertEquals( ldexp(3,2)   , 12  )
  assertEquals( ldexp(20,-0) , 20  )
  assertEquals( ldexp(20,-1) , 10  )
  assertEquals( ldexp(20,-2) , 5   )
  assertEquals( ldexp(3,2.1) , 12  )
  assertEquals( ldexp(3,1.9) , 6   )
  assertEquals( ldexp(3,-inf), 0   )
  assertEquals( ldexp(3,inf) , inf )
  assertEquals( ldexp(inf,2) , inf )
  assertEquals( ldexp(-inf,2),-inf )
  assertEquals( ldexp(2.1,10), 2150.4 )
  assertEquals( ldexp(2.1,32), 9019431321.6 )
  assertAlmostEquals( ldexp(2.1,50), 2.36438980436951e15, 0.5 )
end

function TestGmath:testFrexp() -- TODO
  assertEquals( {frexp(0)}, {0,0} )
  assertEquals( {frexp(1)}, {0.5,1} )

  for i=-100,100 do
    assertEquals( ldexp(frexp(2^i)), 2^i )
  end
  for x=-100,100,0.1 do
    assertEquals( ldexp(frexp(x)), x )
  end

  assertEquals( {frexp(-0.2)},{-0.8,-2} )
  assertEquals( {frexp(-inf)}, {-inf,0} )
  assertEquals( {frexp( inf)}, { inf,0} )
end

function TestGmath:testRandom() -- TODO
  for i=1,1000 do
    assertTrue( random()    >= 0   )
    assertTrue( random()    <  1   )
    assertTrue( random(100) >= 1   )
    assertTrue( random(100) <= 100 )
    assertTrue( random(-1,1) >= -1 )
    assertTrue( random(-1,1) <=  1 )
    assertTrue( random(-1,2^52) >= -1    )
    assertTrue( random(-1,2^52) <=  2^52 )
  end
end

function TestGmath:testRandomseed() -- TODO
  local val  = {}
  local oldVal = {}
  for j=1,10 do
    randomseed( j )
    for i=1,500 do
      val[i] = random(0,2^52)
      assertTrue ( val[i] >= 0    )
      assertTrue ( val[i] <= 2^52 )
      assertFalse( val[i] == oldVal[i] )
      oldVal[i] = val[i]
    end
  end
end

-- extra generic functions

function TestGmath:testAcosh() -- TODO
  for i=1,#dat.inp3 do
    local ref = dat.acosh[i]
    local res = dat.inp3[i]
    assertAlmostEquals( acosh(res), ref, eps )
  end

  assertEquals( acosh(1)  , 0   )
  assertEquals( acosh(inf), inf )
  assertEquals( tostring(acosh(0)), tostring(nan) )
end

function TestGmath:testAngle() -- TODO
  assertEquals( angle(0,0)      , 0      )
  assertEquals( angle(0,2)      , 0      )
  assertEquals( angle(0,2^52)   , 0      )
  assertEquals( angle(0,inf)    , 0      )
  assertEquals( angle(0,-1)     , pi     )
  assertEquals( angle(0,-2^52)  , pi     )
  assertEquals( angle(0,-inf)   , pi     )
  assertEquals( angle(2,0)      , pi/2   )
  assertEquals( angle(inf,0)    , pi/2   )
  assertEquals( angle(-2,0)     ,-pi/2   )
  assertEquals( angle(-inf,0)   ,-pi/2   )
  assertEquals( angle(inf,inf)  , pi/4   )
  assertEquals( angle(-inf,-inf),-pi*3/4 )
end

function TestGmath:testAsinh() -- TODO
  for i=1,#dat.inp1 do
    local ref = dat.asinh[i]
    local res = dat.inp1[i]
    assertAlmostEquals( asinh(res)  , ref, eps )
    assertAlmostEquals( -asinh(-res), ref, eps )
  end

  assertEquals( asinh(0)   , 0   )
  assertEquals( asinh(inf) , inf )
  assertEquals( asinh(-inf),-inf )
end

function TestGmath:testAtanh() -- TODO
  for i=1,#dat.inp2 do
    local ref = dat.atanh[i]
    local res = dat.inp2[i]
    assertAlmostEquals( atanh(res)  , ref, eps )
    assertAlmostEquals( -atanh(-res), ref, eps )
  end

  assertEquals( atanh(1) , inf )
  assertEquals( atanh(-1),-inf )
  assertEquals( atanh(0) , 0   )
end

function TestGmath:testErf() -- TODO
  for i=1,#dat.inp1 do
    local ref = dat.erf[i]
    local res = dat.inp1[i]
    assertAlmostEquals( erf(res)  , ref, eps )
    assertAlmostEquals( -erf(-res), ref, eps )
  end

  assertEquals( erf(inf) , 1 )
  assertEquals( erf(-inf),-1 )
  assertEquals( erf(0)   , 0 )
end

function TestGmath:testFrac() -- TODO
  local i,f = modf(0)
  assertEquals( i, 0 )
  assertEquals( f, 0 )
  local i,f = modf(-20.2)
  assertEquals( i, -20 )
  assertAlmostEquals( f, -0.2, eps )
end

function TestGmath:testGamma() -- TODO
  for i=1,#dat.inpGamma do
    local ref = dat.gamma[i]
    local res = dat.inpGamma[i]
    assertAlmostEquals( gamma(res), ref, eps )
  end

  for i=-1,-5,-1 do
    assertEquals( tostring(gamma(i)) , tostring(nan) )
  end

  assertEquals( gamma(0)  , inf )
  assertEquals( gamma(inf), inf )
  assertEquals( gamma(1)  , 1   )
  assertEquals( gamma(4)  , 6   )
  assertEquals( tostring(gamma(-inf)), tostring(nan) )
end

function TestGmath:testLgamma() -- TODO -- output diffrent then expected results
  for i=1,#dat.inp2 do
    local ref = dat.lgamma[i]
    local res = dat.inp2[i]
    --print(lgamma(res), ref)
    --assertAlmostEquals( lgamma(res), ref, eps )
  end
  --print(lgamma(10^2))
  --print(lgamma(0))
  --print(lgamma(-1))
  --print(lgamma(-200))
  --print(lgamma(0.1))

  --assertEquals( lgamma(inf) , inf )
!  assertEquals( lgamma(inf) , 0 )

  assertEquals( lgamma(1)   , 0 )
  assertEquals( lgamma(2)   , 0 )
!  assertEquals( lgamma(-inf), 0 )
end

function TestGmath:testRound() -- TODO
  assertEquals( round(1.2) , 1 )
  assertEquals( round(7.9) , 8 )
  assertEquals( round(-1.2),-1 )
  assertEquals( round(-2.8),-3 )
  assertEquals( round(0)   , 0 )
end

function TestGmath:testSign() -- TODO
  assertEquals( sign(2)   , 1 )
  assertEquals( sign(7.2) , 1 )
  assertEquals( sign(-2)  ,-1 )
  assertEquals( sign(-4.1),-1 )
  assertEquals( sign(0)   , 1 )
end

function TestGmath:testSinc() -- TODO
  for i=1,#dat.inpSinc do
    local ref = dat.sinc[i]
    local res = dat.inpSinc[i]
    assertAlmostEquals( sinc(res) , ref , eps )
    assertAlmostEquals( -sinc(res), -ref, eps )
  end
end

function TestGmath:testStep() -- TODO
  assertEquals( step(2)   , 1 )
  assertEquals( step(7.2) , 1 )
  assertEquals( step(0)   , 1 )
  assertEquals( step(-2)  , 0 )
  assertEquals( step(-4.1), 0 )
end

function TestGmath:testTrunc() -- TODO
  assertEquals( trunc(1.2) , 1 )
  assertEquals( trunc(7.9) , 7 )
  assertEquals( trunc(-1.2),-1 )
  assertEquals( trunc(-2.8),-2 )
  assertEquals( trunc(0)   , 0 )
end

-- operators as functions

function TestGmath:testUnm() -- TODO
  assertEquals( unm(2) ,-2 )
  assertEquals( unm(-1), 1 )
  assertEquals( unm(0) , 0 )
  assertAlmostEquals( unm(2.22) ,-2.22, eps)
  assertAlmostEquals( unm(-3.22), 3.22, eps)
end

function TestGmath:testAdd() -- TODO
  assertAlmostEquals(10.2 +  10.1 , 20.3, eps)
  assertAlmostEquals(-1.2 + (-7.5),-8.7 , eps)
  assertEquals( 1 +  2      , 3 )
  assertEquals( 1 +(-2)     ,-1 )
  assertEquals(-1 +  0      ,-1 )
  assertEquals( add( 1,  2 ), 3 )
  assertEquals( add( 1,(-2)),-1 )
  assertEquals( add(-1,  0 ),-1 )
end

function TestGmath:testSub() -- TODO
  assertAlmostEquals(10.2 - 10.1 , 0.1, eps)
  assertAlmostEquals(-1.2 -(-7.5), 6.3, eps)
  assertEquals( 1 -  0    , 1 )
  assertEquals( 1 -(-2)   , 3 )
  assertEquals(-1 -  2    ,-3 )
  assertEquals( sub( 1, 0), 1 )
  assertEquals( sub( 1,-2), 3 )
  assertEquals( sub(-1, 2),-3 )
end

function TestGmath:testMul() -- TODO
  assertAlmostEquals(10.2 * 10.1, 103.02, eps)
  assertAlmostEquals(-1.2 * 7.4 ,-8.88  , eps)
  assertEquals( 2 *(-3)   ,-6 )
  assertEquals(-1 *  0    , 0 )
  assertEquals( 1 *  2    , 2 )
  assertEquals( mul( 2,-3),-6 )
  assertEquals( mul(-1, 0), 0 )
  assertEquals( mul( 1, 2), 2 )
end

function TestGmath:testDiv() -- TODO
  assertAlmostEquals(20.2 / 10.1, 2                , eps)
  assertAlmostEquals( 7.4 /-1.2 ,-6.166666666666666, eps)
  assertEquals( 4 /  2    , 2   )
  assertEquals( 9 /(-3)   ,-3   )
  assertEquals(-1 /  2    ,-0.5 )
  assertEquals( div( 4, 2), 2   )
  assertEquals( div( 9,-3),-3   )
  assertEquals( div(-1, 2),-0.5 )
end

function TestGmath:testMod() -- TODO
  assertAlmostEquals(20.2 % 10.1, 0, eps)
  assertAlmostEquals( 7.4 %-1.2 ,-1, eps)
  assertEquals( 4 %  2     , 0 )
  assertEquals( 4 %  3     , 1 )
  assertEquals( 9 %(-3)    , 0 )
  assertEquals( 9 %(-2)    ,-1 )
  assertEquals(-1 %  2     , 1 )
  assertEquals( mod( 4 , 3), 1 )
  assertEquals( mod( 9 ,-3), 0 )
  assertEquals( mod( 9 ,-2),-1 )
  assertEquals( mod(-1 , 2), 1 )
end

function TestGmath:testPow() -- TODO
  assertEquals( pow(2,8)  , 256  )
  assertEquals( pow(2,0)  , 1    )
  assertEquals( pow(0,2)  , 0    )
  assertEquals( pow(2,-2) , 0.25 )
  assertEquals( pow(-2,3) ,-8    )
  assertEquals( pow(inf,8), inf  )
  assertEquals( pow(8,inf), inf  )
end

function TestGmath:testEq() -- TODO
  assertTrue ( eq( 2.2, 2.2 ) )
  assertTrue ( eq(-10 ,-10  ) )
  assertFalse( eq( 2  , 3   ) )
  assertFalse( eq(-3  ,-2.2 ) )
  assertFalse( eq( 2  ,-2   ) )
end

function TestGmath:testNe() -- TODO
  assertTrue ( ne( 2.1, 2   ) )
  assertTrue ( ne(-2.2, 4.3 ) )
  assertTrue ( ne(-1  ,-7   ) )
  assertFalse( ne( 2  , 2   ) )
  assertFalse( ne(-7.2,-7.2 ) )
end

function TestGmath:testLt() -- TODO
  assertTrue ( lt( 2 , 3.2  ) )
  assertTrue ( lt(-4 , 7    ) )
  assertTrue ( lt(-17,-2    ) )
  assertFalse( lt( 12, 10.1 ) )
  assertFalse( lt(-20,-30   ) )
end

function TestGmath:testLe() -- TODO
  assertTrue ( le( 2  , 2    ) )
  assertTrue ( le( 1.2, 2    ) )
  assertTrue ( le(-2  , 12   ) )
  assertTrue ( le(-6  ,-6    ) )
  assertTrue ( le(-6.7,-6    ) )
  assertFalse( le( 12 , 2    ) )
  assertFalse( le(-12 ,-13.1 ) )
end

function TestGmath:testGt() -- TODO
  assertTrue ( gt( 21.1, 12  ) )
  assertTrue ( gt(-2   ,-22  ) )
  assertFalse( gt( 2   , 12  ) )
  assertFalse( gt(-2   , 1.1 ) )
  assertFalse( gt(-12  ,-1   ) )
end

function TestGmath:testGe() -- TODO
  assertTrue ( ge( 12 , 12  ) )
  assertTrue ( ge( 12 , 2.1 ) )
  assertTrue ( ge(-12 ,-22  ) )
  assertFalse( ge( 4.1, 8.2 ) )
  assertFalse( ge(-2  , 5   ) )
  assertFalse( ge(-6  ,-1   ) )
end

-- generic complex functions

function TestGmath:testCarg() -- TODO
  assertEquals( carg(0)    , 0  )
  assertEquals( carg(100.1), 0  )
  assertEquals( carg(-10)  , pi )
  assertEquals( carg(-1.1) , pi )
end

function TestGmath:testReal() -- TODO
  assertEquals( real(0)   , 0   )
  assertEquals( real(1.1) , 1.1 )
  assertEquals( real(-2.1),-2.1 )
end

function TestGmath:testImag() -- TODO
  assertEquals( imag(0)   , 0 )
  assertEquals( imag(1.1) , 0 )
  assertEquals( imag(-2.1), 0 )
end

function TestGmath:testConj() -- TODO
  assertEquals( conj(0)   , 0   )
  assertEquals( conj(1.1) , 1.1 )
  assertEquals( conj(-2.1),-2.1 )
end

function TestGmath:testNorm() -- TODO
  assertEquals( norm(0)    , 0    )
  assertEquals( norm(2)    , 2    )
  assertEquals( norm(-2)   , 2    )
  assertEquals( norm(1.2)  , 1.2  )
  assertEquals( norm(-2.22), 2.22 )
  assertEquals( norm(2^60) , 2^60 )
  assertEquals( norm(-2^60), 2^60 )
end

function TestGmath:testRect() -- TODO
  assertEquals( rect(0)   , 0   )
  assertEquals( rect(1.1) , 1.1 )
  assertEquals( rect(-2.1),-2.1 )
end

function TestGmath:testPolar() -- TODO
  assertEquals( polar(0)   , 0   )
  assertEquals( polar(1.1) , 1.1 )
  assertEquals( polar(-2.1),-2.1 )
end

-- delegation --

function TestGmath:testDelegation() -- TODO
  local mock = {}

  mock.abs    = \ 'mock.abs   '  assertEquals(abs   (mock), 'mock.abs   ')
  mock.acos   = \ 'mock.acos  '  assertEquals(acos  (mock), 'mock.acos  ')
  mock.asin   = \ 'mock.asin  '  assertEquals(asin  (mock), 'mock.asin  ')
  mock.atan   = \ 'mock.atan  '  assertEquals(atan  (mock), 'mock.atan  ')
  mock.ceil   = \ 'mock.ceil  '  assertEquals(ceil  (mock), 'mock.ceil  ')
  mock.cos    = \ 'mock.cos   '  assertEquals(cos   (mock), 'mock.cos   ')
  mock.cosh   = \ 'mock.cosh  '  assertEquals(cosh  (mock), 'mock.cosh  ')
  mock.deg    = \ 'mock.deg   '  assertEquals(deg   (mock), 'mock.deg   ')
  mock.exp    = \ 'mock.exp   '  assertEquals(exp   (mock), 'mock.exp   ')
  mock.floor  = \ 'mock.floor '  assertEquals(floor (mock), 'mock.floor ')
  mock.log    = \ 'mock.log   '  assertEquals(log   (mock), 'mock.log   ')
  mock.log10  = \ 'mock.log10 '  assertEquals(log10 (mock), 'mock.log10 ')
  mock.modf   = \ 'mock.modf  '  assertEquals(modf  (mock), 'mock.modf  ')
  mock.rad    = \ 'mock.rad   '  assertEquals(rad   (mock), 'mock.rad   ')
  mock.sin    = \ 'mock.sin   '  assertEquals(sin   (mock), 'mock.sin   ')
  mock.sinh   = \ 'mock.sinh  '  assertEquals(sinh  (mock), 'mock.sinh  ')
  mock.sqrt   = \ 'mock.sqrt  '  assertEquals(sqrt  (mock), 'mock.sqrt  ')
  mock.tan    = \ 'mock.tan   '  assertEquals(tan   (mock), 'mock.tan   ')
  mock.tanh   = \ 'mock.tanh  '  assertEquals(tanh  (mock), 'mock.tanh  ')

  mock.asinh  = \ 'mock.asinh '  assertEquals(asinh (mock), 'mock.asinh ')
  mock.acosh  = \ 'mock.acosh '  assertEquals(acosh (mock), 'mock.acosh ')
  mock.atanh  = \ 'mock.atanh '  assertEquals(atanh (mock), 'mock.atanh ')

  mock.erf    = \ 'mock.erf   '  assertEquals(erf   (mock), 'mock.erf   ')
  mock.gamma  = \ 'mock.gamma '  assertEquals(gamma (mock), 'mock.gamma ')
  mock.lgamma = \ 'mock.lgamma'  assertEquals(lgamma(mock), 'mock.lgamma')

  mock.angle  = \ 'mock.angle '  assertEquals(angle (mock), 'mock.angle ')

  mock.max    = \ 'mock.max   '  assertEquals(max   (mock), 'mock.max   ')
  mock.min    = \ 'mock.min   '  assertEquals(min   (mock), 'mock.min   ')

  mock.sign   = \ 'mock.sign  '  assertEquals(sign  (mock), 'mock.sign  ')
  mock.step   = \ 'mock.step  '  assertEquals(step  (mock), 'mock.step  ')
  mock.sinc   = \ 'mock.sinc  '  assertEquals(sinc  (mock), 'mock.sinc  ')
  mock.trunc  = \ 'mock.trunc '  assertEquals(trunc (mock), 'mock.trunc ')
  mock.round  = \ 'mock.round '  assertEquals(round (mock), 'mock.round ')

  mock.carg   = \ 'mock.carg  '  assertEquals(carg  (mock), 'mock.carg  ')
  mock.real   = \ 'mock.real  '  assertEquals(real  (mock), 'mock.real  ')
  mock.imag   = \ 'mock.imag  '  assertEquals(imag  (mock), 'mock.imag  ')
  mock.conj   = \ 'mock.conj  '  assertEquals(conj  (mock), 'mock.conj  ')
  mock.norm   = \ 'mock.norm  '  assertEquals(norm  (mock), 'mock.norm  ')
  mock.rect   = \ 'mock.rect  '  assertEquals(rect  (mock), 'mock.rect  ')
  mock.polar  = \ 'mock.polar '  assertEquals(polar (mock), 'mock.polar ')
end

-- end ------------------------------------------------------------------------o
