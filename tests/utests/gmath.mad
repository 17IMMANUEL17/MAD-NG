--[=[
 o-----------------------------------------------------------------------------o
 |
 | Gmath regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: A.Z. Teska, aleksandra.teska at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the gmath module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertFalse, assertTrue, assertEquals, assertNotEquals, assertAlmostEquals
      in require 'luaunit'
local dat = require 'gmath_dat'

local
  abs, acos, asin, atan, ceil, cos, cosh, deg, exp, floor, log,
  log10, max, min, modf, rad, sin, sinh, sqrt, tan, tanh,  --(generic functions)
  atan2, fmod, frexp, ldexp, random, randomseed,       --(non-generic functions)
  acosh, angle, asinh, atanh, erf, frac, tgamma, lgamma,
  round, sign, sinc, step, trunc,                    --(extra generic functions)
  unm, add, sub, mul, div, mod, pow,
  eq, ne, lt, le, gt, ge,                             --(operators as functions)
  carg, real, imag, conj, norm, rect, polar,       --(generic complex functions)
  eps, huge, tiny, I, inf, Inf, nan, NaN, pi, Pi,                  --(constants)
  option,                                                              --(setup)
  first, second in MAD

-- regression test suite ------------------------------------------------------o

TestGmath = {}

local values = {
  num  = {0, tiny, 2^-64, 2^-63, 2^-53, eps, 2^-52, 2*eps, 2^-32, 2^-31, 1e-9,
          0.1-eps, 0.1, 0.1+eps, 0.5, 0.7-eps, 0.7, 0.7+eps, 1-eps, 1, 1+eps,
          1.1, 1.7, 2, 10, 1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53,
          2^63, 2^64, huge, inf},
  rad  = {0, eps, 2*eps, pi/180, pi/90, pi/36, pi/18, pi/12, pi/6, pi/4, pi/3, pi/2,
          pi-pi/3, pi-pi/4, pi-pi/6, pi-pi/12, pi},
  rad2 = {0, eps, 2*eps, pi/180, pi/90, pi/36, pi/18, pi/12, pi/6, pi/4, pi/3, pi/2},

  deg  = {0, eps, 2*eps, 1, 2, 5, 10, 15, 30, 45, 60, 90,
          120, 135, 150, 165, 180},
  deg2 = {0, eps, 2*eps, 1, 2, 5, 10, 15, 30, 45, 60, 90},
}

--
-- Trigonometric mnemonics
--
-- 45   : square 1-1  , diag.  √2  , hypot 1 -> sides √2/2
-- 30-60: equil. 1-1-1, height √3/2, hypot 1 -> sides 1/2 and √3/2
--
-- deg      0      30     45     60     90
-- rad      0     pi/6   pi/4   pi/3   pi/2
-- sin     √0/2   √1/2   √2/2   √3/2   √4/2
-- cos     √4/2   √3/2   √2/2   √1/2   √0/2   sin(pi/2 - angle)
-- tan     0/√3   1/√3    1     √3/1   √3/0   sin/cos
--

-- keep the order of the import above

-- constant

function TestGmath:testConstant()
  assertEquals(  pi , 3.1415926535897932385 )
  assertEquals(  pi , atan(1)*4 )

  assertEquals(  pi ,  Pi )
  assertEquals( -pi , -Pi )

  assertEquals(  eps ,  2.2204460492503131e-16  )
  assertEquals(  huge,  1.7976931348623158e+308 )
  assertEquals(  tiny,  2.2250738585072012e-308 )

  assertEquals( -eps , -2.2204460492503131e-16  )
  assertEquals( -huge, -1.7976931348623158e+308 )
  assertEquals( -tiny, -2.2250738585072012e-308 )

  assertEquals(  inf,  Inf )
  assertEquals( -inf, -Inf )

  assertNotEquals(  nan,  nan )
  assertNotEquals( -nan,  nan )
  assertNotEquals(  nan, -nan )
  assertNotEquals( -nan, -nan )

  assertNotEquals(  nan,  NaN )
  assertNotEquals( -nan,  NaN )
  assertNotEquals(  nan, -NaN )
  assertNotEquals( -nan, -NaN )

  assertEquals( tostring( nan), 'nan' )
  assertEquals( tostring(-nan), 'nan' )
  assertEquals( tostring( NaN), 'nan' )
  assertEquals( tostring(-NaN), 'nan' )
end

-- generic functions

function TestGmath:testAbs()
  for _,v in ipairs(values.num) do
    assertEquals(  abs( v),  v )
    assertEquals(  abs(-v),  v )
    assertEquals( -abs(-v), -v )
  end
  assertEquals( -abs(-0), 0 )
end

function TestGmath:testAcos()
  for _,v in ipairs(values.rad) do
    assertAlmostEquals( acos(v/pi)    - (pi-acos(-v/pi)) , 0,  2*eps )
    assertAlmostEquals( acos(v/pi)    - (pi/2-asin(v/pi)), 0,  2*eps )
    assertAlmostEquals( acos(cos( v)) - v                , 0, 10*eps ) -- 8@1deg
    assertAlmostEquals( acos(cos(-v)) - v                , 0, 10*eps ) -- 8@1deg
  end
  local r4, r6, r12 = sqrt(2)/2, sqrt(3)/2, sqrt(2)*(sqrt(3)+1)/4
  assertEquals      ( acos(-1  ) -    pi   , 0        )
  assertAlmostEquals( acos(-r12) - 11*pi/12, 0, 2*eps )
  assertAlmostEquals( acos(-r6 ) -  5*pi/6 , 0,   eps )
  assertAlmostEquals( acos(-r4 ) -  3*pi/4 , 0,   eps )
  assertAlmostEquals( acos(-0.5) -  2*pi/3 , 0, 2*eps )
  assertAlmostEquals( acos( 0  ) -    pi/2 , 0,   eps )
  assertAlmostEquals( acos( 0.5) -    pi/3 , 0,   eps )
  assertAlmostEquals( acos( r4 ) -    pi/4 , 0,   eps )
  assertAlmostEquals( acos( r6 ) -    pi/6 , 0,   eps )
  assertAlmostEquals( acos( r12) -    pi/12, 0,   eps )
  assertEquals      ( acos( 1  ) -    0    , 0        )
  assertAlmostEquals( acos( r12) -    pi/12, 0,   eps )
  assertAlmostEquals( acos( r6 ) -    pi/6 , 0,   eps )
  assertAlmostEquals( acos( r4 ) -    pi/4 , 0,   eps )
  assertAlmostEquals( acos( 0.5) -    pi/3 , 0,   eps )
  assertAlmostEquals( acos( 0  ) -    pi/2 , 0,   eps )
  assertAlmostEquals( acos(-0.5) -  2*pi/3 , 0, 2*eps )
  assertAlmostEquals( acos(-r4 ) -  3*pi/4 , 0,   eps )
  assertAlmostEquals( acos(-r6 ) -  5*pi/6 , 0,   eps )
  assertAlmostEquals( acos(-r12) - 11*pi/12, 0, 2*eps )
  assertEquals      ( acos(-1  ) -    pi   , 0        )

  assertEquals      ( tostring(acos(-1-eps)), 'nan' )
  assertEquals      ( tostring(acos( 1+eps)), 'nan' )
  assertEquals      ( tostring(acos(nan   )), 'nan' )
end

function TestGmath:testAsin()
  for _,v in ipairs(values.rad2) do
    assertAlmostEquals( asin(v/pi)    - -asin(-v/pi)     , 0, eps )
    assertAlmostEquals( asin(v/pi)    - (pi/2-acos(v/pi)), 0, eps )
    assertAlmostEquals( asin(sin( v)) -  v               , 0, eps )
    assertAlmostEquals( asin(sin(-v)) - -v               , 0, eps )
  end
  local r3, r4, r12 = sqrt(3)/2, sqrt(2)/2, sqrt(2)*(sqrt(3)-1)/4
  assertEquals      ( asin( 0  ) -  0    , 0      )
  assertEquals      ( asin( r12) -  pi/12, 0      )
  assertAlmostEquals( asin( 0.5) -  pi/6 , 0, eps )
  assertAlmostEquals( asin( r4 ) -  pi/4 , 0, eps )
  assertEquals      ( asin( r3 ) -  pi/3 , 0      )
  assertEquals      ( asin( 1  ) -  pi/2 , 0      )
  assertEquals      ( asin( r3 ) -  pi/3 , 0      )
  assertAlmostEquals( asin( r4 ) -  pi/4 , 0, eps )
  assertAlmostEquals( asin( 0.5) -  pi/6 , 0, eps )
  assertEquals      ( asin( r12) -  pi/12, 0      )
  assertEquals      ( asin( 0  ) -  0    , 0      )
  assertEquals      ( asin(-r12) - -pi/12, 0      )
  assertAlmostEquals( asin(-0.5) - -pi/6 , 0, eps )
  assertAlmostEquals( asin(-r4 ) - -pi/4 , 0, eps )
  assertEquals      ( asin(-r3 ) - -pi/3 , 0      )
  assertEquals      ( asin(-1  ) - -pi/2 , 0      )
  assertEquals      ( asin(-r3 ) - -pi/3 , 0      )
  assertAlmostEquals( asin(-r4 ) - -pi/4 , 0, eps )
  assertAlmostEquals( asin(-0.5) - -pi/6 , 0, eps )
  assertEquals      ( asin(-r12) - -pi/12, 0      )
  assertEquals      ( asin(-0  ) - -0    , 0      )

  assertEquals      ( tostring(asin(-1-eps)), 'nan' )
  assertEquals      ( tostring(asin( 1+eps)), 'nan' )
  assertEquals      ( tostring(asin(nan   )), 'nan' )
end

function TestGmath:testAtan()
  for _,v in ipairs(values.num) do
    assertAlmostEquals( atan(v) - -atan(-v), 0, eps) -- not equal (random)
  end
  for _,v in ipairs(values.rad2) do
    assertAlmostEquals( atan(tan( v)) -  v, 0, eps )
    assertAlmostEquals( atan(tan(-v)) - -v, 0, eps )
  end
  local r3, r6, r12 = sqrt(3), 1/sqrt(3), 2-sqrt(3)
  assertEquals      ( atan(-inf) - -pi/2 , 0      )
  assertAlmostEquals( atan(-r3 ) - -pi/3 , 0, eps )
  assertEquals      ( atan(-1  ) - -pi/4 , 0      )
  assertAlmostEquals( atan(-r6 ) - -pi/6 , 0, eps )
  assertAlmostEquals( atan(-r12) - -pi/12, 0, eps )
  assertEquals      ( atan( 0  ) -  0    , 0      )
  assertAlmostEquals( atan( r12) -  pi/12, 0, eps )
  assertAlmostEquals( atan( r6 ) -  pi/6 , 0, eps )
  assertEquals      ( atan( 1  ) -  pi/4 , 0      )
  assertAlmostEquals( atan( r3 ) -  pi/3 , 0, eps )
  assertEquals      ( atan( inf) -  pi/2 , 0      )

  assertEquals      ( tostring(atan(nan)), 'nan' )
end

function TestGmath:testCeil()
  assertEquals( ceil(    0) ,     0 )
  assertEquals( ceil( tiny) ,     1 )
  assertEquals( ceil(  0.1) ,     1 )
  assertEquals( ceil(  0.5) ,     1 )
  assertEquals( ceil(  0.7) ,     1 )
  assertEquals( ceil(    1) ,     1 )
  assertEquals( ceil(  1.1) ,     2 )
  assertEquals( ceil(  1.5) ,     2 )
  assertEquals( ceil(  1.7) ,     2 )
  assertEquals( ceil( huge) ,  huge )
  assertEquals( ceil(  inf) ,   inf )
  assertEquals( ceil(-   0) , -   0 )
  assertEquals( ceil(-tiny) , -   0 )
  assertEquals( ceil(- 0.1) , -   0 )
  assertEquals( ceil(- 0.5) , -   0 )
  assertEquals( ceil(- 0.7) , -   0 )
  assertEquals( ceil(-   1) , -   1 )
  assertEquals( ceil(- 1.1) , -   1 )
  assertEquals( ceil(- 1.5) , -   1 )
  assertEquals( ceil(- 1.7) , -   1 )
  assertEquals( ceil(-huge) , -huge )
  assertEquals( ceil(- inf) , - inf )

  assertEquals( tostring(ceil(nan)), 'nan' )
end

function TestGmath:testCos()
  for _,v in ipairs(values.rad) do
    assertAlmostEquals( cos(v)           - cos(-v)         , 0, eps )
    assertAlmostEquals( cos(v)           - sin(pi/2-v)     , 0, eps )
    assertAlmostEquals( cos(v)           - (1-2*sin(v/2)^2), 0, eps )
    assertAlmostEquals( cos(acos( v/pi)) -  v/pi           , 0, eps )
    assertAlmostEquals( cos(acos(-v/pi)) - -v/pi           , 0, eps )
  end
  local r4, r6, r12 = sqrt(2)/2, sqrt(3)/2, sqrt(2)*(sqrt(3)+1)/4
  assertEquals      ( cos(    pi   ) - -1  , 0      )
  assertAlmostEquals( cos( 11*pi/12) - -r12, 0, eps )
  assertAlmostEquals( cos(  5*pi/6 ) - -r6 , 0, eps )
  assertAlmostEquals( cos(  3*pi/4 ) - -r4 , 0, eps )
  assertAlmostEquals( cos(  2*pi/3 ) - -0.5, 0, eps )
  assertAlmostEquals( cos(    pi/2 ) -  0  , 0, eps )
  assertAlmostEquals( cos(    pi/3 ) -  0.5, 0, eps )
  assertAlmostEquals( cos(    pi/4 ) -  r4 , 0, eps )
  assertAlmostEquals( cos(    pi/6 ) -  r6 , 0, eps )
  assertAlmostEquals( cos(    pi/12) -  r12, 0, eps )
  assertEquals      ( cos(    0    ) -  1  , 0      )
  assertAlmostEquals( cos(-   pi/12) -  r12, 0, eps )
  assertAlmostEquals( cos(-   pi/6 ) -  r6 , 0, eps )
  assertAlmostEquals( cos(-   pi/4 ) -  r4 , 0, eps )
  assertAlmostEquals( cos(-   pi/3 ) -  0.5, 0, eps )
  assertAlmostEquals( cos(-   pi/2 ) -  0  , 0, eps )
  assertAlmostEquals( cos(- 2*pi/3 ) - -0.5, 0, eps )
  assertAlmostEquals( cos(- 3*pi/4 ) - -r4 , 0, eps )
  assertAlmostEquals( cos(- 5*pi/6 ) - -r6 , 0, eps )
  assertAlmostEquals( cos(-11*pi/12) - -r12, 0, eps )
  assertEquals      ( cos(-   pi   ) - -1  , 0      )

  assertEquals      ( tostring(cos(-inf)), 'nan' )
  assertEquals      ( tostring(cos( inf)), 'nan' )
  assertEquals      ( tostring(cos( nan)), 'nan' )
end

function TestGmath:testCosh()
  for _,v in ipairs(values.num) do
    assertEquals( cosh(v), cosh(-v) )
    if cosh(v) <= huge then
      assertAlmostEquals( cosh(v) / ((exp(v)+exp(-v))/2), 1,   eps )
      assertAlmostEquals( cosh(v) / ( 1 + 2*sinh(v/2)^2), 1,   eps )
      assertAlmostEquals( cosh(v) / (-1 + 2*cosh(v/2)^2), 1, 2*eps )
      assertAlmostEquals(  exp(v) / (cosh(v) + sinh(v)) , 1,   eps )
    end
  end
  assertEquals( cosh(-inf), inf )
  assertEquals( cosh(-711), inf )
  assertEquals( cosh( 0  ), 1   )
  assertEquals( cosh( 711), inf )
  assertEquals( cosh( inf), inf )

  assertEquals( tostring(cosh(nan)), 'nan' )
end

function TestGmath:testDeg()
  local r = 57.2957795130823208768 -- 180/pi
  for _,v in ipairs(values.rad) do
    assertEquals( deg( v) ,  v*r )
    assertEquals( deg(-v) , -v*r )
  end
  assertEquals      ( deg(-inf    )       , -inf      )
  assertEquals      ( deg(-2*pi   ) - -360, 0         )
  assertEquals      ( deg(-  pi   ) - -180, 0         )
  assertEquals      ( deg(-  pi/2 ) - - 90, 0         )
  assertAlmostEquals( deg(-  pi/3 ) - - 60, 0, 40*eps ) -- pb w ±
  assertEquals      ( deg(-  pi/4 ) - - 45, 0         )
  assertAlmostEquals( deg(-  pi/6 ) - - 30, 0, 40*eps ) -- pb w ±
  assertEquals      ( deg(-  pi/18) - - 10, 0         )
  assertEquals      ( deg(   0    ) -    0, 0         )
  assertEquals      ( deg(   pi/18) -   10, 0         )
  assertAlmostEquals( deg(   pi/6 ) -   30, 0, 40*eps ) -- pb w ±
  assertEquals      ( deg(   pi/4 ) -   45, 0         )
  assertAlmostEquals( deg(   pi/3 ) -   60, 0, 40*eps ) -- pb w ±
  assertEquals      ( deg(   pi/2 ) -   90, 0         )
  assertEquals      ( deg(   pi   ) -  180, 0         )
  assertEquals      ( deg( 2*pi   ) -  360, 0         )
  assertEquals      ( deg( inf    )       ,  inf      )

  assertAlmostEquals( deg(-  pi/3 ) / - 60, 1, eps )
  assertAlmostEquals( deg(-  pi/6 ) / - 30, 1, eps )
  assertAlmostEquals( deg(   pi/6 ) /   30, 1, eps )
  assertAlmostEquals( deg(   pi/3 ) /   60, 1, eps )

  assertEquals( tostring(deg(nan)), 'nan' )
end

function TestGmath:testExp()
  for i,v in ipairs(values.num) do
    if v > 1/709.78 and v < 709.78 then
      assertAlmostEquals( exp(v+1/v) / (exp(v)*exp(1/v)) - 1, 0, 25*eps )
      assertAlmostEquals( exp(log(v)) / v - 1, 0, 2*eps )
    end
  end
  assertEquals      ( exp(-inf) , 0   )
  assertEquals      ( exp(-  1) , 0.36787944117144232159 )
  assertEquals      ( exp(-0.5) , 0.60653065971263342360 )
  assertAlmostEquals( exp(-0.1) - 0.90483741803595957316, 0, eps )
  assertEquals      ( exp(   0) , 1   )
  assertEquals      ( exp( 0.1) , 1.10517091807564762481 )
  assertEquals      ( exp( 0.5) , 1.64872127070012814684 )
  assertEquals      ( exp(   1) , 2.71828182845904523536 )
  assertEquals      ( exp( inf) , inf )

  assertEquals      ( tostring(exp(nan)), 'nan' )
end

function TestGmath:testFloor()
  assertEquals( floor(    0) ,     0 )
  assertEquals( floor( tiny) ,     0 )
  assertEquals( floor(  0.1) ,     0 )
  assertEquals( floor(  0.5) ,     0 )
  assertEquals( floor(  0.7) ,     0 )
  assertEquals( floor(    1) ,     1 )
  assertEquals( floor(  1.1) ,     1 )
  assertEquals( floor(  1.5) ,     1 )
  assertEquals( floor(  1.7) ,     1 )
  assertEquals( floor( huge) ,  huge )
  assertEquals( floor(  inf) ,   inf )
  assertEquals( floor(-   0) , -   0 )
  assertEquals( floor(-tiny) , -   1 )
  assertEquals( floor(- 0.1) , -   1 )
  assertEquals( floor(- 0.5) , -   1 )
  assertEquals( floor(- 0.7) , -   1 )
  assertEquals( floor(-   1) , -   1 )
  assertEquals( floor(- 1.1) , -   2 )
  assertEquals( floor(- 1.5) , -   2 )
  assertEquals( floor(- 1.7) , -   2 )
  assertEquals( floor(-huge) , -huge )
  assertEquals( floor(- inf) , - inf )

  assertEquals( tostring(floor(nan)), 'nan' )
end

function TestGmath:testLog()
  for _,x in ipairs(values.num) do
  for _,y in ipairs(values.num) do
    if x > eps and y > eps  and x < 1/eps and y < 1/eps then
      assertAlmostEquals(log(x*y) - (log(x)+log(y)), 0, 40*eps)
    end
  end end
  for i=0,200 do
    assertAlmostEquals( log(2^ i) -  i*log(2), 0, 150*eps)
    assertAlmostEquals( log(2^-i) - -i*log(2), 0, 150*eps)
  end

  assertEquals( log(0)  ,-inf )
  assertEquals( log(1)  , 0   )
  assertEquals( log(inf), inf )

  assertEquals( tostring(log(-eps)), 'nan' )
  assertEquals( tostring(log(-inf)), 'nan' )
  assertEquals( tostring(log( nan)), 'nan' )
end

function TestGmath:testLog10()
  for i,v in ipairs(values.num) do
    if v > 0 and v < inf then
      assertAlmostEquals( log10(v) - log(v)/log(10), 0, 300*eps)
    end
  end
  for i=0,200 do
    assertAlmostEquals( log10(10^ i) -  i, 0, 150*eps)
    assertAlmostEquals( log10(10^-i) - -i, 0, 150*eps)
  end

  assertEquals( log10(0)    ,-inf )
  assertEquals( log10(1)    , 0   )
  assertEquals( log10(10)   , 1   )
  assertEquals( log10(inf)  , inf )

  assertEquals( tostring(log10(-eps)), 'nan' )
  assertEquals( tostring(log10(-inf)), 'nan' )
  assertEquals( tostring(log10( nan)), 'nan' )
end

function TestGmath:testMax()
  assertEquals( max(table.unpack(values.num )), inf  )
  assertEquals( max(table.unpack(values.rad )),  pi  )
  assertEquals( max(table.unpack(values.deg )), 180  )
  assertEquals( max(table.unpack(values.rad2)),  pi/2)
  assertEquals( max(table.unpack(values.deg2)),  90  )
  local t1, t2, t3, t4, t5 = {}, {}, {}, {}, {}
  for i,v in ipairs(values.num ) do t1[i] = -v end
  for i,v in ipairs(values.rad ) do t2[i] = -v end
  for i,v in ipairs(values.deg ) do t3[i] = -v end
  for i,v in ipairs(values.rad2) do t4[i] = -v end
  for i,v in ipairs(values.deg2) do t5[i] = -v end
  assertEquals( max(table.unpack(t1)), 0 )
  assertEquals( max(table.unpack(t2)), 0 )
  assertEquals( max(table.unpack(t3)), 0 )
  assertEquals( max(table.unpack(t4)), 0 )
  assertEquals( max(table.unpack(t5)), 0 )

  assertEquals( tostring(max(nan)), 'nan' )
end

function TestGmath:testMin()
  assertEquals( min(table.unpack(values.num )), 0 )
  assertEquals( min(table.unpack(values.rad )), 0 )
  assertEquals( min(table.unpack(values.deg )), 0 )
  assertEquals( min(table.unpack(values.rad2)), 0 )
  assertEquals( min(table.unpack(values.deg2)), 0 )
  local t1, t2, t3, t4, t5 = {}, {}, {}, {}, {}
  for i,v in ipairs(values.num ) do t1[i] = -v end
  for i,v in ipairs(values.rad ) do t2[i] = -v end
  for i,v in ipairs(values.deg ) do t3[i] = -v end
  for i,v in ipairs(values.rad2) do t4[i] = -v end
  for i,v in ipairs(values.deg2) do t5[i] = -v end
  assertEquals( min(table.unpack(t1)), -inf  )
  assertEquals( min(table.unpack(t2)), - pi  )
  assertEquals( min(table.unpack(t3)), -180  )
  assertEquals( min(table.unpack(t4)), - pi/2)
  assertEquals( min(table.unpack(t5)), - 90  )

  assertEquals( tostring(min(nan)), 'nan' )
end

function TestGmath:testModf()
  local s=\n,f n+f

  for _,v in ipairs(values.num) do
    if v == inf then break end
    assertEquals( s(modf( v+eps)),  v+eps )
    assertEquals( s(modf( v-eps)),  v-eps )
    assertEquals( s(modf(-v+eps)), -v+eps )
    assertEquals( s(modf(-v-eps)), -v-eps )
    assertEquals( s(modf( v+0.1)),  v+0.1 )
    assertEquals( s(modf( v-0.1)),  v-0.1 )
    assertEquals( s(modf(-v+0.1)), -v+0.1 )
    assertEquals( s(modf(-v-0.1)), -v-0.1 )
    assertEquals( s(modf( v+0.7)),  v+0.7 )
    assertEquals( s(modf( v-0.7)),  v-0.7 )
    assertEquals( s(modf(-v+0.7)), -v+0.7 )
    assertEquals( s(modf(-v-0.7)), -v-0.7 )
  end
  assertEquals( {modf(    0)} , {    0,     0} )
  assertEquals( {modf( tiny)} , {    0,  tiny} )
  assertEquals( {modf(  0.1)} , {    0,   0.1} )
  assertEquals( {modf(  0.5)} , {    0,   0.5} )
  assertEquals( {modf(  0.7)} , {    0,   0.7} )
  assertEquals( {modf(    1)} , {    1,     0} )
  assertEquals( {modf(  1.5)} , {    1,   0.5} )
  assertEquals( {modf(  1.7)} , {    1,   0.7} )
  assertEquals( {modf( huge)} , { huge,     0} )
  assertEquals( {modf(  inf)} , {  inf,     0} )
  assertEquals( {modf(-   0)} , {    0, -   0} )
  assertEquals( {modf(-tiny)} , {    0, -tiny} )
  assertEquals( {modf(- 0.1)} , {-   0, - 0.1} )
  assertEquals( {modf(- 0.5)} , {-   0, - 0.5} )
  assertEquals( {modf(- 0.7)} , {-   0, - 0.7} )
  assertEquals( {modf(-   1)} , {-   1, -   0} )
  assertEquals( {modf(- 1.5)} , {-   1, - 0.5} )
  assertEquals( {modf(- 1.7)} , {-   1, - 0.7} )
  assertEquals( {modf(-huge)} , {-huge, -   0} )
  assertEquals( {modf(- inf)} , {- inf, -   0} )

  local n,f
  n,f=modf( 1.1) assertEquals(n,  1) assertAlmostEquals( f-0.1, 0, eps/2 )
  n,f=modf(-1.1) assertEquals(n, -1) assertAlmostEquals( f+0.1, 0, eps/2 )
end

function TestGmath:testRad()
  local r = 0.0174532925199432958 -- pi/180
  for _,v in ipairs(values.deg) do
    assertEquals( rad( v) ,  v*r )
    assertEquals( rad(-v) , -v*r )
  end
  assertEquals( rad(-inf), -inf   )
  assertEquals( rad(-360), -2*pi  )
  assertEquals( rad(-180), -pi    )
  assertEquals( rad(- 90), -pi/2  )
  assertEquals( rad(- 60), -pi/3  )
  assertEquals( rad(- 45), -pi/4  )
  assertEquals( rad(- 30), -pi/6  )
  assertEquals( rad(- 10), -pi/18 )
  assertEquals( rad(   0),  0     )
  assertEquals( rad(  10),  pi/18 )
  assertEquals( rad(  30),  pi/6  )
  assertEquals( rad(  45),  pi/4  )
  assertEquals( rad(  60),  pi/3  )
  assertEquals( rad(  90),  pi/2  )
  assertEquals( rad( 180),  pi    )
  assertEquals( rad( 360),  2*pi  )
  assertEquals( rad( inf),  inf   )

  assertEquals( tostring(rad(nan)), 'nan' )
end

function TestGmath:testSin()
  for _,v in ipairs(values.rad) do
    assertAlmostEquals( sin(v)           - -sin(-v)             , 0, eps )
    assertAlmostEquals( sin(v)           -  cos(pi/2-v)         , 0, eps )
    assertAlmostEquals( sin(v)           - (2*sin(v/2)*cos(v/2)), 0, eps )
    assertAlmostEquals( sin(asin( v/pi)) -  v/pi                , 0, eps )
    assertAlmostEquals( sin(asin(-v/pi)) - -v/pi                , 0, eps )
  end
  local r3, r4, r12 = sqrt(3)/2, sqrt(2)/2, sqrt(2)*(sqrt(3)-1)/4
  assertAlmostEquals( sin(    pi   ) -  0  , 0,   eps )
  assertAlmostEquals( sin( 11*pi/12) -  r12, 0, 2*eps )
  assertAlmostEquals( sin(  5*pi/6 ) -  0.5, 0,   eps )
  assertAlmostEquals( sin(  3*pi/4 ) -  r4 , 0,   eps )
  assertAlmostEquals( sin(  2*pi/3 ) -  r3 , 0,   eps )
  assertAlmostEquals( sin(    pi/2 ) -  1  , 0,   eps )
  assertAlmostEquals( sin(    pi/3 ) -  r3 , 0,   eps )
  assertAlmostEquals( sin(    pi/4 ) -  r4 , 0,   eps )
  assertAlmostEquals( sin(    pi/6 ) -  0.5, 0,   eps )
  assertAlmostEquals( sin(    pi/12) -  r12, 0,   eps )
  assertEquals      ( sin(    0    ) -  0  , 0        )
  assertAlmostEquals( sin(-   pi/12) - -r12, 0,   eps )
  assertAlmostEquals( sin(-   pi/6 ) - -0.5, 0,   eps )
  assertAlmostEquals( sin(-   pi/4 ) - -r4 , 0,   eps )
  assertAlmostEquals( sin(-   pi/3 ) - -r3 , 0,   eps )
  assertAlmostEquals( sin(-   pi/2 ) - -1  , 0,   eps )
  assertAlmostEquals( sin(- 2*pi/3 ) - -r3 , 0,   eps )
  assertAlmostEquals( sin(- 3*pi/4 ) - -r4 , 0,   eps )
  assertAlmostEquals( sin(- 5*pi/6 ) - -0.5, 0,   eps )
  assertAlmostEquals( sin(-11*pi/12) - -r12, 0, 2*eps )
  assertAlmostEquals( sin(-   pi   ) - -0  , 0,   eps )

  assertEquals      ( tostring(sin(-inf)), 'nan' )
  assertEquals      ( tostring(sin( inf)), 'nan' )
  assertEquals      ( tostring(sin( nan)), 'nan' )
end

function TestGmath:testSinh()
  for _,v in ipairs(values.num) do
    assertEquals( sinh(v), -sinh(-v) )
    if v < 3e-8 then
      assertEquals( sinh(v), v )
    end
    if v > 19.0006 then
      assertEquals( sinh(v), cosh(v) )
    end
    if v < 1e-5 then
      assertAlmostEquals( sinh(v) - v , 0, eps )
    end
    if v > 1e-5 and v < 19.0006 then
      assertAlmostEquals( sinh(v) / (2*sinh(v/2)*cosh(v/2))  - 1, 0,   eps )
      assertAlmostEquals( sinh(v) / (exp(-v)*(exp(2*v)-1)/2) - 1, 0, 2*eps )
      assertAlmostEquals(  exp(v) / (cosh(v) + sinh(v))      - 1, 0,   eps )
    end
  end
  assertEquals( sinh(-inf), -inf )
  assertEquals( sinh(-711), -inf )
  assertEquals( sinh( 0  ),  0   )
  assertEquals( sinh( 711),  inf )
  assertEquals( sinh( inf),  inf )

  assertEquals( tostring(sinh(nan)), 'nan' )
end

function TestGmath:testSqrt()
  for _,v in ipairs(values.num) do
    if v > 0 and v < inf then
      assertAlmostEquals( sqrt(v)*sqrt(v) / v - 1, 0, eps )
    end
  end
  assertEquals( tostring(sqrt(-inf)), tostring(nan) )
  assertEquals( tostring(sqrt(-1  )), tostring(nan) )
  assertEquals( tostring(sqrt(-0.1)), tostring(nan) )
  assertEquals(          sqrt(-0  ) , -0 )
  assertEquals(          sqrt( 0  ) ,  0 )
  assertEquals(          sqrt( inf) , inf)

  assertEquals( tostring(sqrt(-eps)), 'nan' )
  assertEquals( tostring(sqrt(-inf)), 'nan' )
  assertEquals( tostring(sqrt( nan)), 'nan' )
end

function TestGmath:testTan()
  for _,v in ipairs(values.rad) do
    assertEquals      (tan( v) - -tan(-v)        , 0     )
    assertAlmostEquals(tan( v) -  sin( v)/cos( v), 0, eps)
    assertAlmostEquals(tan(-v) -  sin(-v)/cos(-v), 0, eps)
  end
  local r3, r6, r12 = sqrt(3), 1/sqrt(3), 2-sqrt(3)
  assertAlmostEquals(  tan(-pi )            , 0,   eps )
  assertAlmostEquals(  tan(-pi+pi/12) -  r12, 0,   eps )
  assertAlmostEquals(  tan(-pi+pi/6 ) -  r6 , 0,   eps )
  assertAlmostEquals(  tan(-pi+pi/4 ) -  1  , 0,   eps )
  assertAlmostEquals(  tan(-pi+pi/3 ) -  r3 , 0, 3*eps )
  assertAlmostEquals(1/tan(-pi/2    )       , 0,   eps )
  assertAlmostEquals(  tan(-pi/3    ) - -r3 , 0, 2*eps )
  assertAlmostEquals(  tan(-pi/4    ) - -1  , 0,   eps )
  assertAlmostEquals(  tan(-pi/6    ) - -r6 , 0,   eps )
  assertAlmostEquals(  tan(-pi/12   ) - -r12, 0,   eps )
  assertEquals      (  tan( 0       ) -  0  , 0        )
  assertAlmostEquals(  tan( pi/12   ) -  r12, 0,   eps )
  assertAlmostEquals(  tan( pi/6    ) -  r6 , 0,   eps )
  assertAlmostEquals(  tan( pi/4    ) -  1  , 0,   eps )
  assertAlmostEquals(  tan( pi/3    ) -  r3 , 0, 2*eps )
  assertAlmostEquals(1/tan( pi/2    )       , 0,   eps )
  assertAlmostEquals(  tan( pi-pi/3 ) - -r3 , 0, 3*eps )
  assertAlmostEquals(  tan( pi-pi/4 ) - -1  , 0,   eps )
  assertAlmostEquals(  tan( pi-pi/6 ) - -r6 , 0,   eps )
  assertAlmostEquals(  tan( pi-pi/12) - -r12, 0,   eps )
  assertAlmostEquals(  tan( pi )            , 0,   eps )

  assertEquals      ( tostring(tan(-inf)), 'nan' )
  assertEquals      ( tostring(tan( inf)), 'nan' )
  assertEquals      ( tostring(tan( nan)), 'nan' )
end

function TestGmath:testTanh()
  for _,v in ipairs(values.num) do
    assertEquals( tanh(v), -tanh(-v) )
    if v < 2e-8 then
      assertEquals( tanh(v), v )
    end
    if v > 19.06155 then
      assertEquals( tanh(v), 1 )
    end
    if v < 8.74e-06 then
      assertAlmostEquals( tanh(v) - v , 0, eps )
    end
    if v > 8.74e-06 and v < 19.06155 then
      assertAlmostEquals( tanh( v) -  sinh( v)/cosh( v), 0, eps )
      assertAlmostEquals( tanh(-v) -  sinh(-v)/cosh(-v), 0, eps )
    end
  end
  assertEquals( tanh(-inf     ), -1 )
  assertEquals( tanh(-19.06155), -1 )
  assertEquals( tanh(  0      ),  0 )
  assertEquals( tanh( 19.06155),  1 )
  assertEquals( tanh( inf)     ,  1 )

  assertEquals( tostring(tanh(nan)), 'nan' )
end

-- functions wo generic

function TestGmath:testAtan2()
  for _,v in ipairs(values.rad2) do
    local x, y = cos(v), sin(v)
    assertAlmostEquals( atan2(y,x) - (pi/2-atan2( x,  y)), 0,   eps )
    assertAlmostEquals( atan2(y,x) - (pi  -atan2( y, -x)), 0, 2*eps )
    assertAlmostEquals( atan2(y,x) -      -atan2(-y,  x) , 0,   eps )
    assertAlmostEquals( atan2(y,x) - (pi  +atan2(-y, -x)), 0, 2*eps )
    if v > 0 then
      assertAlmostEquals( atan2(y,x) / atan (y/x), 1, eps )
    end
  end

  for _,x in ipairs(values.num) do
  for _,y in ipairs(values.num) do
    if x > 0 or y > 0 then
    assertAlmostEquals( atan2(y,x) - (pi/2-atan2( x,  y)), 0, 2*eps )
    end
    assertAlmostEquals( atan2(y,x) - (pi  -atan2( y, -x)), 0, 2*eps )
    assertAlmostEquals( atan2(y,x) -      -atan2(-y,  x) , 0,   eps )
    assertAlmostEquals( atan2(y,x) - (pi  +atan2(-y, -x)), 0, 2*eps )
  end end

  assertEquals( atan2(    0,    0) ,  0      )
  assertEquals( atan2(    1,    0) ,  pi/2   )
  assertEquals( atan2( -  1,    0) , -pi/2   )
  assertEquals( atan2(  inf,    0) ,  pi/2   )
  assertEquals( atan2( -inf,    0) , -pi/2   )
  assertEquals( atan2(    0,    1) ,  0      )
  assertEquals( atan2(    1,    1) ,  pi/4   )
  assertEquals( atan2( -  1,    1) , -pi/4   )
  assertEquals( atan2(  inf,    1) ,  pi/2   )
  assertEquals( atan2( -inf,    1) , -pi/2   )
  assertEquals( atan2(    0, -  1) ,  pi     )
  assertEquals( atan2(    1, -  1) ,  pi/4*3 )
  assertEquals( atan2( -  1, -  1) , -pi/4*3 )
  assertEquals( atan2(  inf, -  1) ,  pi/2   )
  assertEquals( atan2( -inf, -  1) , -pi/2   )
  assertEquals( atan2(    0,  inf) ,  0      )
  assertEquals( atan2(    1,  inf) ,  0      )
  assertEquals( atan2( -  1,  inf) ,  0      )
  assertEquals( atan2(  inf,  inf) ,  pi/4   )
  assertEquals( atan2( -inf,  inf) , -pi/4   )
  assertEquals( atan2(    0, -inf) ,  pi     )
  assertEquals( atan2(    1, -inf) ,  pi     )
  assertEquals( atan2( -  1, -inf) , -pi     )
  assertEquals( atan2(  inf, -inf) ,  pi/4*3 )
  assertEquals( atan2( -inf, -inf) , -pi/4*3 )

  assertEquals( tostring(atan2(nan, 0 )), 'nan' )
  assertEquals( tostring(atan2( 0 ,nan)), 'nan' )
  assertEquals( tostring(atan2(nan,nan)), 'nan' )
end

function TestGmath:testFMod()
  local e, n, f, r
  for _,x in ipairs(values.num) do
  for _,y in ipairs(values.num) do
    if x < y then
      assertEquals( fmod( x, y),  x )
      assertEquals( fmod(-x, y), -x )
      assertEquals( fmod( x,-y),  x )
      assertEquals( fmod(-x,-y), -x )
    elseif y/x >= tiny/eps and x < inf and y < inf then
      n = floor(x/y)
      f = fmod(x,y)
      r = x - (n*y + f)
      if r < 0 then r = r+y end
      e = n * eps / 10
      assertTrue( 0 <= f and f < y )
      assertTrue( r < e )
    end
  end end

  assertAlmostEquals( fmod(-5.1, -3  ) - -2.1, 0, 2*eps)
  assertAlmostEquals( fmod(-5.1,  3  ) - -2.1, 0, 2*eps)
  assertAlmostEquals( fmod( 5.1, -3  ) -  2.1, 0, 2*eps)
  assertAlmostEquals( fmod( 5.1,  3  ) -  2.1, 0, 2*eps)

  assertAlmostEquals( fmod(-5.1, -3.1) - -2  , 0, 2*eps)
  assertAlmostEquals( fmod(-5.1,  3.1) - -2  , 0, 2*eps)
  assertAlmostEquals( fmod( 5.1, -3.1) -  2  , 0, 2*eps)
  assertAlmostEquals( fmod( 5.1,  3.1) -  2  , 0, 2*eps)

  assertEquals      ( fmod( 1  ,  inf)       ,  1 )
  assertEquals      ( fmod(-1  ,  inf)       , -1 )
  assertEquals      ( fmod( 1  , -inf)       ,  1 )
  assertEquals      ( fmod(-1  , -inf)       , -1 )

  assertEquals( tostring(fmod( inf,  inf)), 'nan' )
  assertEquals( tostring(fmod(-inf, -inf)), 'nan' )
  assertEquals( tostring(fmod( inf,  nan)), 'nan' )
  assertEquals( tostring(fmod(-inf,  nan)), 'nan' )
  assertEquals( tostring(fmod(   1,    0)), 'nan' )
  assertEquals( tostring(fmod(   1, -  0)), 'nan' )
  assertEquals( tostring(fmod( nan,  nan)), 'nan' )
end

function TestGmath:testLdexp()
  for i,v in ipairs(values.num) do
    assertEquals( ldexp(v,  i), v*2^ i )
    assertEquals( ldexp(v, -i), v*2^-i )
    assertEquals( ldexp(v,  0), v )
    assertEquals( ldexp(0,  i), 0 )
  end
  for i,v in ipairs(values.rad) do
    assertEquals( ldexp(v,  i), v*2^ i )
    assertEquals( ldexp(v, -i), v*2^-i )
    assertEquals( ldexp(v,  0), v )
    assertEquals( ldexp(0,  i), 0 )
  end

  assertEquals( ldexp(-inf,   0), -inf )
  assertEquals( ldexp( 3  , 1.9),    6 )
  assertEquals( ldexp( 3  , 2.1),   12 )
  assertEquals( ldexp( inf,   0),  inf )

  assertEquals( tostring(ldexp(nan,   0)), 'nan' )
  assertEquals( tostring(ldexp(nan,   1)), 'nan' )
  assertEquals( tostring(ldexp(nan, nan)), 'nan' )
end

function TestGmath:testFrexp()
  assertEquals( {frexp(0)}, {0,0} )
  assertEquals( {frexp(1)}, {0.5,1} )

  for i=-100,100 do
    assertEquals( ldexp(frexp(2^i)), 2^i )
  end
  for x=-100,100,0.1 do
    assertEquals( ldexp(frexp(x)), x )
  end

  assertEquals( {frexp(- inf)}, {-inf  ,     0} )
  assertEquals( {frexp(- 0.2)}, {-0.8  , -   2} )
  assertEquals( {frexp( tiny)}, { 0.5  , -1021} )
  assertEquals( {frexp(  eps)}, { 0.5  , -  51} )
  assertEquals( {frexp(  0.1)}, { 0.8  , -   3} )
  assertEquals( {frexp(  0.7)}, { 0.7  ,     0} )
  assertEquals( {frexp(  1  )}, { 0.5  ,     1} )
  assertEquals( {frexp(  1.1)}, { 0.55 ,     1} )
  assertEquals( {frexp(  1.7)}, { 0.85  ,    1} )
  assertEquals( {frexp(  2.1)}, { 0.525,     2} )
  assertEquals( {frexp(  inf)}, { inf  ,     0} )

  local f,e
  f,e = frexp(1-eps)
  assertEquals( 1 , 1 )
  assertEquals( 0 , 0 )
  f,e = frexp(1+eps)
  assertEquals( 1 , 1 )
  assertEquals( 0 , 0 )
  f,e = frexp(huge)
  assertAlmostEquals( f - 1    , 0, eps)
  assertEquals      ( e - 1024 , 0     )

  assertEquals( tostring(frexp(nan,   0)), 'nan' )
  assertEquals( tostring(frexp(nan,   1)), 'nan' )
  assertEquals( tostring(frexp(nan, nan)), 'nan' )
end

function TestGmath:testRandom()
  for i=1,1000 do
    assertTrue( random()    >= 0   )
    assertTrue( random()    <  1   )
    assertTrue( random(100) >= 1   )
    assertTrue( random(100) <= 100 )
    assertTrue( random(-1,1) >= -1 )
    assertTrue( random(-1,1) <=  1 )
    assertTrue( random(-1,2^52) >= -1    )
    assertTrue( random(-1,2^52) <=  2^52 )
  end

  assertEquals( tostring(random(nan,  0 )), 'nan' )
  assertEquals( tostring(random( 0 , nan)), 'nan' )
  assertEquals( tostring(random(nan, nan)), 'nan' )
end

function TestGmath:testRandomseed()
  local val  = {}
  local oldVal = {}
  for j=1,10 do
    randomseed( j )
    for i=1,500 do
      val[i] = random(0,2^52)
      assertTrue ( val[i] >= 0    )
      assertTrue ( val[i] <= 2^52 )
      assertFalse( val[i] == oldVal[i] )
      oldVal[i] = val[i]
    end
  end
end

-- extra generic functions

function TestGmath:testAcosh()
  for _,v in ipairs(values.num) do
    v = v+1
    if v < inf then
      assertAlmostEquals( cosh(acosh(v)) / v, 1, v*eps )
    end
    if v > 1+1e-9 and v < huge then
      assertAlmostEquals( log(v+sqrt(v^2-1)) / acosh(v), 1 , eps )
    end
  end
  assertEquals( acosh(1)  , 0   )
  assertEquals( acosh(inf), inf )

  assertEquals( tostring(acosh(nan)), 'nan' )
end

function TestGmath:testAngle()
  for _,x in ipairs(values.num) do
  for _,y in ipairs(values.num) do
    assertEquals( angle( x,  y), atan2( y,  x) )
    assertEquals( angle( x, -y), atan2(-y,  x) )
    assertEquals( angle(-x,  y), atan2( y, -x) )
    assertEquals( angle(-x, -y), atan2(-y, -x) )
  end end

  for _,x in ipairs(values.rad) do
  for _,y in ipairs(values.rad) do
    x, y = x/pi, y/pi
    assertEquals( angle( x,  y), atan2( y,  x) )
    assertEquals( angle( x, -y), atan2(-y,  x) )
    assertEquals( angle(-x,  y), atan2( y, -x) )
    assertEquals( angle(-x, -y), atan2(-y, -x) )
  end end

  assertEquals( angle(    0,    0) ,  0      )
  assertEquals( angle(    0,    1) ,  pi/2   )
  assertEquals( angle(    0, -  1) , -pi/2   )
  assertEquals( angle(    0,  inf) ,  pi/2   )
  assertEquals( angle(    0, -inf) , -pi/2   )
  assertEquals( angle(    1,    0) ,  0      )
  assertEquals( angle(    1,    1) ,  pi/4   )
  assertEquals( angle(    1, -  1) , -pi/4   )
  assertEquals( angle(    1,  inf) ,  pi/2   )
  assertEquals( angle(    1, -inf) , -pi/2   )
  assertEquals( angle( -  1,    0) ,  pi     )
  assertEquals( angle( -  1,    1) ,  pi/4*3 )
  assertEquals( angle( -  1, -  1) , -pi/4*3 )
  assertEquals( angle( -  1,  inf) ,  pi/2   )
  assertEquals( angle( -  1, -inf) , -pi/2   )
  assertEquals( angle(  inf,    0) ,  0      )
  assertEquals( angle(  inf,    1) ,  0      )
  assertEquals( angle(  inf, -  1) ,  0      )
  assertEquals( angle(  inf,  inf) ,  pi/4   )
  assertEquals( angle(  inf, -inf) , -pi/4   )
  assertEquals( angle( -inf,    0) ,  pi     )
  assertEquals( angle( -inf,    1) ,  pi     )
  assertEquals( angle( -inf, -  1) , -pi     )
  assertEquals( angle( -inf,  inf) ,  pi/4*3 )
  assertEquals( angle( -inf, -inf) , -pi/4*3 )

  assertEquals( tostring(angle(nan, 0 )), 'nan' )
  assertEquals( tostring(angle( 0 ,nan)), 'nan' )
  assertEquals( tostring(angle(nan,nan)), 'nan' )
end

function TestGmath:testAsinh()
  for _,v in ipairs(values.num) do
    if v < inf then
      assertAlmostEquals( asinh(v) - -asinh(-v), 0, eps )
    end
    if v > 0 and asinh(v) < 710 then -- skip huge
      assertAlmostEquals( sinh(asinh(v)) / v - 1       , 0, 15*eps )
      assertAlmostEquals( log(v+sqrt(v^2+1)) - asinh(v), 0, 16*eps )
    end
  end

  assertAlmostEquals( sinh(asinh(huge)) / huge - 1, 0, 400*eps )

  assertEquals( asinh(-inf), -inf )
  assertEquals( asinh(   0),    0 )
  assertEquals( asinh( inf),  inf )

  assertEquals( tostring(asinh(nan)), 'nan' )
end

function TestGmath:testAtanh()
  for _,v in ipairs(values.rad) do
    if v/pi < 1 then -- skip inf
      assertAlmostEquals( atanh(v/pi) - -atanh(-v/pi), 0, eps )
    end
  end
  for _,v in ipairs(values.rad2) do
    assertAlmostEquals( atanh(tanh( v)) -  v, 0, 2*eps )
    assertAlmostEquals( atanh(tanh(-v)) - -v, 0, 2*eps )
  end
  assertEquals( atanh(-1), -inf )
  assertEquals( atanh( 0),    0 )
  assertEquals( atanh( 1),  inf )

  assertEquals( tostring(atanh(-1-eps)), 'nan' )
  assertEquals( tostring(atanh( 1+eps)), 'nan' )
  assertEquals( tostring(atanh(   nan)), 'nan' )
end

function TestGmath:testErf() -- TODO
  for _,v in ipairs(values.num) do
    assertAlmostEquals( erf(v) - -erf(-v), 0, eps )
  end

  -- check against a set of ref values for 0..2..0.1 and 2..1003..7
  -- to be stored there.

  assertEquals( erf( inf),  1 )
  assertEquals( erf(   0),  0 )
  assertEquals( erf(-inf), -1 )

  assertEquals( tostring(erf(nan)), 'nan' )
end

function TestGmath:testFrac()
  for _,v in ipairs(values.num) do
    if v == inf then break end -- pb with luajit?
    assertEquals( frac( v+eps), second(modf( v+eps)) )
    assertEquals( frac( v-eps), second(modf( v-eps)) )
    assertEquals( frac(-v+eps), second(modf(-v+eps)) )
    assertEquals( frac(-v-eps), second(modf(-v-eps)) )
    assertEquals( frac( v+0.1), second(modf( v+0.1)) )
    assertEquals( frac( v-0.1), second(modf( v-0.1)) )
    assertEquals( frac(-v+0.1), second(modf(-v+0.1)) )
    assertEquals( frac(-v-0.1), second(modf(-v-0.1)) )
    assertEquals( frac( v+0.7), second(modf( v+0.7)) )
    assertEquals( frac( v-0.7), second(modf( v-0.7)) )
    assertEquals( frac(-v+0.7), second(modf(-v+0.7)) )
    assertEquals( frac(-v-0.7), second(modf(-v-0.7)) )
  end

  assertEquals( frac(    0) ,     0 )
  assertEquals( frac( tiny) ,  tiny )
  assertEquals( frac(  0.1) ,   0.1 )
  assertEquals( frac(  0.5) ,   0.5 )
  assertEquals( frac(  0.7) ,   0.7 )
  assertEquals( frac(    1) ,     0 )
  assertEquals( frac(  1.5) ,   0.5 )
  assertEquals( frac(  1.7) ,   0.7 )
  assertEquals( frac( huge) ,     0 )
!  assertEquals( frac(  inf) ,     0 ) -- get nan, pb with modf and jitted
  assertEquals( frac(-   0) , -   0 )
  assertEquals( frac(-tiny) , -tiny )
  assertEquals( frac(- 0.1) , - 0.1 )
  assertEquals( frac(- 0.5) , - 0.5 )
  assertEquals( frac(- 0.7) , - 0.7 )
  assertEquals( frac(-   1) , -   0 )
  assertEquals( frac(- 1.5) , - 0.5 )
  assertEquals( frac(- 1.7) , - 0.7 )
  assertEquals( frac(-huge) , -   0 )
!  assertTrue  ( frac(- inf) ,     0 ) -- get nan, pb with modf and jitted

  assertAlmostEquals( frac( 1.1)-0.1, 0, eps/2 )
  assertAlmostEquals( frac(-1.1)+0.1, 0, eps/2 )

  assertEquals( tostring(frac(nan)), 'nan' )
end

function TestGmath:testTGamma()
  local fact
  fact = \n n <= 1 and 1 or n*fact(n-1)

  for n=1,20 do
    assertAlmostEquals( tgamma(n)/fact(n-1)       -1, 0, log(fact(n)) *    eps )
  end
  for v=1,171.6,0.1 do
    assertAlmostEquals( tgamma(v)/(tgamma(1+v)/v) -1, 0, log(fact(v)) * 11*eps )
  end

  assertEquals( tgamma(- 0), -inf )
  assertEquals( tgamma(  0),  inf )
  assertEquals( tgamma(  1),    1 )
  assertEquals( tgamma(  2),    1 )
  assertEquals( tgamma(  3),    2 )
  assertEquals( tgamma(  4),    6 )
  assertEquals( tgamma(inf),  inf )

  assertAlmostEquals( tgamma(0.5), sqrt(pi), eps )

  assertEquals( tostring(tgamma(-   1)), 'nan' )
  assertEquals( tostring(tgamma(-   2)), 'nan' )
  assertEquals( tostring(tgamma(-2^52)), 'nan' )
  assertEquals( tostring(tgamma(- inf)), 'nan' )
  assertEquals( tostring(tgamma(  nan)), 'nan' )
end

function TestGmath:testLGamma()
  local lfact
  lfact = \n -> n <= 1 and 0 or log(n)+lfact(n-1)

  -- Note: This test is failing on Ubuntu 14.04
  -- The C function lgamma is returning incorrect values. This might be a
  -- linking problem between mad (luajit) and libm because printing the value
  -- returned in mad_num.c already shows the problem, while a free standing C
  -- application gives correct values, i.e. lgamma itself works fine.

  for n=3,100 do
    assertAlmostEquals( lgamma(n)/lfact(n-1)           -1, 0, 2*eps )
  end
  for v=3,171,0.1 do
    assertAlmostEquals( lgamma(v)/(lgamma(1+v)-log(v)) -1, 0, 4*eps )
  end

  assertEquals( lgamma(- inf),  inf )
  assertEquals( lgamma(-2^52),  inf )
  assertEquals( lgamma(-   2),  inf )
  assertEquals( lgamma(-   1),  inf )
  assertEquals( lgamma(-   0), -inf )
  assertEquals( lgamma(    0),  inf )
  assertEquals( lgamma(    1),    0 )
  assertEquals( lgamma(    2),    0 )
  assertEquals( lgamma(  inf),  inf )

  assertAlmostEquals( lgamma(-0.5), 1.265512123484645297, 0)
  assertAlmostEquals( lgamma( 0.5), log(sqrt(pi)), 0)
  assertAlmostEquals( lgamma( 3  ), log(2), eps )
  assertAlmostEquals( lgamma( 4  ), log(6), eps )

  assertEquals( tostring(lgamma(nan)), 'nan' )
end

function TestGmath:testRound()
  assertEquals( round(    0) ,     0 )
  assertEquals( round( tiny) ,     0 )
  assertEquals( round(  0.1) ,     0 )
  assertEquals( round(  0.5) ,     1 )
  assertEquals( round(  0.7) ,     1 )
  assertEquals( round(    1) ,     1 )
  assertEquals( round(  1.1) ,     1 )
  assertEquals( round(  1.5) ,     2 )
  assertEquals( round(  1.7) ,     2 )
  assertEquals( round( huge) ,  huge )
  assertEquals( round(  inf) ,   inf )
  assertEquals( round(-   0) , -   0 )
  assertEquals( round(-tiny) , -   0 )
  assertEquals( round(- 0.1) , -   0 )
  assertEquals( round(- 0.5) , -   1 )
  assertEquals( round(- 0.7) , -   1 )
  assertEquals( round(-   1) , -   1 )
  assertEquals( round(- 1.1) , -   1 )
  assertEquals( round(- 1.5) , -   2 )
  assertEquals( round(- 1.7) , -   2 )
  assertEquals( round(-huge) , -huge )
  assertEquals( round(- inf) , - inf )

  assertEquals( tostring(round(nan)), 'nan' )
end

function TestGmath:testSign()
  assertEquals( sign(    0) ,  1 )
  assertEquals( sign( tiny) ,  1 )
  assertEquals( sign(  0.1) ,  1 )
  assertEquals( sign(    1) ,  1 )
  assertEquals( sign( huge) ,  1 )
  assertEquals( sign(  inf) ,  1 )
  assertEquals( sign(-   0) ,  1 )
  assertEquals( sign(-tiny) , -1 )
  assertEquals( sign(- 0.1) , -1 )
  assertEquals( sign(-   1) , -1 )
  assertEquals( sign(-huge) , -1 )
  assertEquals( sign(- inf) , -1 )

  assertEquals( sign(nan), 1 ) -- should be modified? nan -> number is bad...
end

function TestGmath:testSinc()
  for _,v in ipairs(values.num) do
    if v < 1e-7 then
      assertEquals( sinc( v), 1 )
      assertEquals( sinc(-v), 1 )
    elseif v < inf then
      assertEquals( sinc( v), sinc(-v) )
      assertEquals( sinc( v), sin(v) / v )
      assertEquals( sinc(-v), sin(-v)/-v )
    end
  end
  assertEquals( tostring(sinc(-inf)), 'nan' )
  assertEquals( tostring(sinc( inf)), 'nan' )
  assertEquals( tostring(sinc( nan)), 'nan' )
end

function TestGmath:testStep()
  assertEquals( step(    0) , 1 )
  assertEquals( step( tiny) , 1 )
  assertEquals( step(  0.1) , 1 )
  assertEquals( step(    1) , 1 )
  assertEquals( step( huge) , 1 )
  assertEquals( step(  inf) , 1 )
  assertEquals( step(-   0) , 1 )
  assertEquals( step(-tiny) , 0 )
  assertEquals( step(- 0.1) , 0 )
  assertEquals( step(-   1) , 0 )
  assertEquals( step(-huge) , 0 )
  assertEquals( step(- inf) , 0 )

  assertEquals( step(nan), 1 ) -- should be modified? nan -> number is bad...
end

function TestGmath:testTrunc()
  for _,v in ipairs(values.num) do
    assertEquals( trunc( v+eps), first(modf( v+eps)) )
    assertEquals( trunc( v-eps), first(modf( v-eps)) )
    assertEquals( trunc(-v+eps), first(modf(-v+eps)) )
    assertEquals( trunc(-v-eps), first(modf(-v-eps)) )
    assertEquals( trunc( v+0.1), first(modf( v+0.1)) )
    assertEquals( trunc( v-0.1), first(modf( v-0.1)) )
    assertEquals( trunc(-v+0.1), first(modf(-v+0.1)) )
    assertEquals( trunc(-v-0.1), first(modf(-v-0.1)) )
    assertEquals( trunc( v+0.7), first(modf( v+0.7)) )
    assertEquals( trunc( v-0.7), first(modf( v-0.7)) )
    assertEquals( trunc(-v+0.7), first(modf(-v+0.7)) )
    assertEquals( trunc(-v-0.7), first(modf(-v-0.7)) )
  end

  assertEquals( trunc(    0) ,     0 )
  assertEquals( trunc( tiny) ,     0 )
  assertEquals( trunc(  0.1) ,     0 )
  assertEquals( trunc(  0.5) ,     0 )
  assertEquals( trunc(  0.7) ,     0 )
  assertEquals( trunc(    1) ,     1 )
  assertEquals( trunc(  1.1) ,     1 )
  assertEquals( trunc(  1.5) ,     1 )
  assertEquals( trunc(  1.7) ,     1 )
  assertEquals( trunc( huge) ,  huge )
  assertEquals( trunc(  inf) ,   inf )
  assertEquals( trunc(-   0) , -   0 )
  assertEquals( trunc(-tiny) , -   0 )
  assertEquals( trunc(- 0.1) , -   0 )
  assertEquals( trunc(- 0.5) , -   0 )
  assertEquals( trunc(- 0.7) , -   0 )
  assertEquals( trunc(-   1) , -   1 )
  assertEquals( trunc(- 1.1) , -   1 )
  assertEquals( trunc(- 1.5) , -   1 )
  assertEquals( trunc(- 1.7) , -   1 )
  assertEquals( trunc(-huge) , -huge )
  assertEquals( trunc(- inf) , - inf )

  assertEquals( tostring(trunc(nan)), 'nan' )
end

-- operators as functions

function TestGmath:testDiv() -- TODO
  assertAlmostEquals(20.2 / 10.1 - 2                , 0, eps)
  assertAlmostEquals( 7.4 /-1.2 - -6.166666666666667, 0, eps)
  assertEquals( 4 /  2    , 2   )
  assertEquals( 9 /(-3)   ,-3   )
  assertEquals(-1 /  2    ,-0.5 )
  assertEquals( div( 4, 2), 2   )
  assertEquals( div( 9,-3),-3   )
  assertEquals( div(-1, 2),-0.5 )
end

function TestGmath:testMod()
  -- a % b == a - math.floor(a/b)*b (not IEEE:IEC 60559)

  for _,x in ipairs(values.num) do
  for _,y in ipairs(values.num) do
    if y > 0 and y < inf and x < inf then
      assertEquals( x%y , x - floor(x/y)*y )
    end
  end end

  assertAlmostEquals( -5.1 % -3   - -2.1, 0, 2*eps)
  assertAlmostEquals( -5.1 %  3   -  0.9, 0, 2*eps)
  assertAlmostEquals(  5.1 % -3   - -0.9, 0, 2*eps)
  assertAlmostEquals(  5.1 %  3   -  2.1, 0, 2*eps)

  assertAlmostEquals( -5.1 % -3.1 - -2  , 0, 2*eps)
  assertAlmostEquals( -5.1 %  3.1 -  1.1, 0, 2*eps)
  assertAlmostEquals(  5.1 % -3.1 - -1.1, 0, 2*eps)
  assertAlmostEquals(  5.1 %  3.1 -  2  , 0, 2*eps)

  assertEquals( tostring(   1 %  inf), 'nan' )
  assertEquals( tostring(  -1 %  inf), 'nan' )
  assertEquals( tostring(   1 % -inf), 'nan' )
  assertEquals( tostring(  -1 % -inf), 'nan' )

  assertEquals( tostring( inf %  inf), 'nan' )
  assertEquals( tostring(-inf % -inf), 'nan' )
  assertEquals( tostring( inf %  nan), 'nan' )
  assertEquals( tostring(-inf %  nan), 'nan' )
  assertEquals( tostring(   1 %    0), 'nan' )
  assertEquals( tostring(   1 %  - 0), 'nan' )
  assertEquals( tostring( nan %  nan), 'nan' )
end

function TestGmath:testPow() -- TODO
  assertEquals( pow(2,8)  , 256  )
  assertEquals( pow(2,0)  , 1    )
  assertEquals( pow(0,2)  , 0    )
  assertEquals( pow(2,-2) , 0.25 )
  assertEquals( pow(-2,3) ,-8    )
  assertEquals( pow(inf,8), inf  )
  assertEquals( pow(8,inf), inf  )
end

-- generic complex functions

function TestGmath:testCarg()
  assertEquals( carg(    0) ,  0 )
  assertEquals( carg( tiny) ,  0 )
  assertEquals( carg(  0.1) ,  0 )
  assertEquals( carg(    1) ,  0 )
  assertEquals( carg( huge) ,  0 )
  assertEquals( carg(  inf) ,  0 )
  assertEquals( carg(-   0) ,  0 )
  assertEquals( carg(-tiny) , pi )
  assertEquals( carg(- 0.1) , pi )
  assertEquals( carg(-   1) , pi )
  assertEquals( carg(-huge) , pi )
  assertEquals( carg(- inf) , pi )

  assertEquals( carg(nan)   ,  0 ) -- should be modified? nan -> comple is bad...
end

function TestGmath:testReal()
  assertEquals( real(    0) ,     0 )
  assertEquals( real( tiny) ,  tiny )
  assertEquals( real(  0.1) ,   0.1 )
  assertEquals( real(    1) ,     1 )
  assertEquals( real( huge) ,  huge )
  assertEquals( real(  inf) ,   inf )
  assertEquals( real(-   0) , -   0 )
  assertEquals( real(-tiny) , -tiny )
  assertEquals( real(- 0.1) , - 0.1 )
  assertEquals( real(-   1) , -   1 )
  assertEquals( real(-huge) , -huge )
  assertEquals( real(- inf) , - inf )

  assertEquals( tostring(real(nan)), 'nan' )
end

function TestGmath:testImag()
  assertEquals( imag(    0) , 0 )
  assertEquals( imag( tiny) , 0 )
  assertEquals( imag(  0.1) , 0 )
  assertEquals( imag(    1) , 0 )
  assertEquals( imag( huge) , 0 )
  assertEquals( imag(  inf) , 0 )
  assertEquals( imag(-   0) , 0 )
  assertEquals( imag(-tiny) , 0 )
  assertEquals( imag(- 0.1) , 0 )
  assertEquals( imag(-   1) , 0 )
  assertEquals( imag(-huge) , 0 )
  assertEquals( imag(- inf) , 0 )

  assertEquals( imag(  nan) , 0 ) -- should be modified? nan -> comple is bad...
end

function TestGmath:testConj()
  assertEquals( conj(    0) ,     0 )
  assertEquals( conj( tiny) ,  tiny )
  assertEquals( conj(  0.1) ,   0.1 )
  assertEquals( conj(    1) ,     1 )
  assertEquals( conj( huge) ,  huge )
  assertEquals( conj(  inf) ,   inf )
  assertEquals( conj(-   0) , -   0 )
  assertEquals( conj(-tiny) , -tiny )
  assertEquals( conj(- 0.1) , - 0.1 )
  assertEquals( conj(-   1) , -   1 )
  assertEquals( conj(-huge) , -huge )
  assertEquals( conj(- inf) , - inf )

  assertEquals( tostring(conj(nan)), 'nan' )
end

function TestGmath:testNorm()
  assertEquals( norm(    0) ,     0 )
  assertEquals( norm( tiny) ,  tiny )
  assertEquals( norm(  0.1) ,   0.1 )
  assertEquals( norm(    1) ,     1 )
  assertEquals( norm( huge) ,  huge )
  assertEquals( norm(  inf) ,   inf )
  assertEquals( norm(-   0) ,     0 )
  assertEquals( norm(-tiny) ,  tiny )
  assertEquals( norm(- 0.1) ,   0.1 )
  assertEquals( norm(-   1) ,     1 )
  assertEquals( norm(-huge) ,  huge )
  assertEquals( norm(- inf) ,   inf )

  assertEquals( tostring(norm(nan)), 'nan' )
end

function TestGmath:testRect()
  assertEquals( rect(    0) ,     0 )
  assertEquals( rect( tiny) ,  tiny )
  assertEquals( rect(  0.1) ,   0.1 )
  assertEquals( rect(    1) ,     1 )
  assertEquals( rect( huge) ,  huge )
  assertEquals( rect(  inf) ,   inf )
  assertEquals( rect(-   0) , -   0 )
  assertEquals( rect(-tiny) , -tiny )
  assertEquals( rect(- 0.1) , - 0.1 )
  assertEquals( rect(-   1) , -   1 )
  assertEquals( rect(-huge) , -huge )
  assertEquals( rect(- inf) , - inf )

  assertEquals( tostring(rect(nan)), 'nan' )
end

function TestGmath:testPolar()
  assertEquals( polar(    0) ,     0 )
  assertEquals( polar( tiny) ,  tiny )
  assertEquals( polar(  0.1) ,   0.1 )
  assertEquals( polar(    1) ,     1 )
  assertEquals( polar( huge) ,  huge )
  assertEquals( polar(  inf) ,   inf )
  assertEquals( polar(-   0) , -   0 )
  assertEquals( polar(-tiny) , -tiny )
  assertEquals( polar(- 0.1) , - 0.1 )
  assertEquals( polar(-   1) , -   1 )
  assertEquals( polar(-huge) , -huge )
  assertEquals( polar(- inf) , - inf )

  assertEquals( tostring(polar(nan)), 'nan' )
end

-- delegation --

function TestGmath:testDelegation()
  local mock = {}

  mock.abs    = \ 'mock.abs   '       assertEquals(abs   (mock), 'mock.abs   ')
  mock.acos   = \ 'mock.acos  '       assertEquals(acos  (mock), 'mock.acos  ')
  mock.asin   = \ 'mock.asin  '       assertEquals(asin  (mock), 'mock.asin  ')
  mock.atan   = \ 'mock.atan  '       assertEquals(atan  (mock), 'mock.atan  ')
  mock.ceil   = \ 'mock.ceil  '       assertEquals(ceil  (mock), 'mock.ceil  ')
  mock.cos    = \ 'mock.cos   '       assertEquals(cos   (mock), 'mock.cos   ')
  mock.cosh   = \ 'mock.cosh  '       assertEquals(cosh  (mock), 'mock.cosh  ')
  mock.deg    = \ 'mock.deg   '       assertEquals(deg   (mock), 'mock.deg   ')
  mock.exp    = \ 'mock.exp   '       assertEquals(exp   (mock), 'mock.exp   ')
  mock.floor  = \ 'mock.floor '       assertEquals(floor (mock), 'mock.floor ')
  mock.log    = \ 'mock.log   '       assertEquals(log   (mock), 'mock.log   ')
  mock.log10  = \ 'mock.log10 '       assertEquals(log10 (mock), 'mock.log10 ')
  mock.rad    = \ 'mock.rad   '       assertEquals(rad   (mock), 'mock.rad   ')
  mock.sin    = \ 'mock.sin   '       assertEquals(sin   (mock), 'mock.sin   ')
  mock.sinh   = \ 'mock.sinh  '       assertEquals(sinh  (mock), 'mock.sinh  ')
  mock.sqrt   = \ 'mock.sqrt  '       assertEquals(sqrt  (mock), 'mock.sqrt  ')
  mock.tan    = \ 'mock.tan   '       assertEquals(tan   (mock), 'mock.tan   ')
  mock.tanh   = \ 'mock.tanh  '       assertEquals(tanh  (mock), 'mock.tanh  ')

  mock.asinh  = \ 'mock.asinh '       assertEquals(asinh (mock), 'mock.asinh ')
  mock.acosh  = \ 'mock.acosh '       assertEquals(acosh (mock), 'mock.acosh ')
  mock.atanh  = \ 'mock.atanh '       assertEquals(atanh (mock), 'mock.atanh ')

  mock.erf    = \ 'mock.erf   '       assertEquals(erf   (mock), 'mock.erf   ')
  mock.tgamma = \ 'mock.tgamma'       assertEquals(tgamma(mock), 'mock.tgamma')
  mock.lgamma = \ 'mock.lgamma'       assertEquals(lgamma(mock), 'mock.lgamma')

  mock.angle  = \ 'mock.angle '       assertEquals(angle (mock), 'mock.angle ')

  mock.max    = \ 'mock.max   '       assertEquals(max   (mock), 'mock.max   ')
  mock.min    = \ 'mock.min   '       assertEquals(min   (mock), 'mock.min   ')

  mock.frac   = \ 'mock.frac  '       assertEquals(frac  (mock), 'mock.frac  ')
  mock.sign   = \ 'mock.sign  '       assertEquals(sign  (mock), 'mock.sign  ')
  mock.step   = \ 'mock.step  '       assertEquals(step  (mock), 'mock.step  ')
  mock.sinc   = \ 'mock.sinc  '       assertEquals(sinc  (mock), 'mock.sinc  ')
  mock.trunc  = \ 'mock.trunc '       assertEquals(trunc (mock), 'mock.trunc ')
  mock.round  = \ 'mock.round '       assertEquals(round (mock), 'mock.round ')

  mock.carg   = \ 'mock.carg  '       assertEquals(carg  (mock), 'mock.carg  ')
  mock.real   = \ 'mock.real  '       assertEquals(real  (mock), 'mock.real  ')
  mock.imag   = \ 'mock.imag  '       assertEquals(imag  (mock), 'mock.imag  ')
  mock.conj   = \ 'mock.conj  '       assertEquals(conj  (mock), 'mock.conj  ')
  mock.norm   = \ 'mock.norm  '       assertEquals(norm  (mock), 'mock.norm  ')
  mock.rect   = \ 'mock.rect  '       assertEquals(rect  (mock), 'mock.rect  ')
  mock.polar  = \ 'mock.polar '       assertEquals(polar (mock), 'mock.polar ')
end

-- end ------------------------------------------------------------------------o
