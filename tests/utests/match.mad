--[=[
 o-----------------------------------------------------------------------------o
 |
 | Match tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the match module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertTrue, assertStrContains, assertErrorMsgContains      in MAD.utest

local beam, sequence, twiss, match, plot, vector,
      option, filesys, atexit                                    in MAD
local ftrue                                                      in MAD.gfunc
local marker, drift, sbend, quadrupole, multipole                in MAD.element
local eps, inf, pi                                               in MAD.constant
local sqrt                                                       in MAD.gmath
local printf                                                     in MAD.utility

local refdir = \s -> 'match_ref/'..(s or '')
local rundir = \s -> 'match_run/'..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot != true

if doplot then
  local pause, atexit in MAD.utility
  atexit(pause, true)
end

-- Tests ----------------------------------------------------------------------o

TestMatch = {}

function TestMatch:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.numfmt
  self.optdbg = option.debug
  option.numfmt = "%-.10g"
  option.debug = 1
end

function TestMatch:tearDown ()
  option.numfmt = self.optfmt
  option.debug  = self.optdbg
end

-- FODO matching --------------------------------------------------------------o

function TestMatch:testMatchThinFODO ()
  local knobs = { k1qf =  0.2828427125,   --  0.3037241107,
                  k1qd = -0.2828427125, } -- -0.3037241107, }

  local function thinFODO () -- TODO: simplify the fodo
    local seq
    local nsl = 1 -- 10 -- for madx row by row compatibility
    local nth = 10
    local dl  = 1/nth
    local mk1 = marker    'mk1' {}
    local mk2 = marker    'mk2' {}
    local df1 = drift     'df1' { l=4, nslice=nsl }
    local df2 = drift     'df2' { l=4, nslice=nsl }
    local mq1 = multipole 'mq1' { knl := {0, knobs.k1qf/nth} }
    local mq2 = multipole 'mq2' { knl := {0, knobs.k1qd/nth} }

    seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
                  mq1 {at=0+dl/2              },
        (nth/2-1)*mq1 {at=dl    , from='prev' },
                  mk1 {at=0+dl/2, from='prev' },
                  mq1 {at=0+dl/2, from='prev' },
        (nth/2-1)*mq1 {at=dl    , from='prev' },
  --                df1 {at=1}, -- for madx row by row compatibility

                  mq2 {at=5+dl/2              },
        (nth/2-1)*mq2 {at=dl    , from='prev' },
                  mk2 {at=0+dl/2, from='prev' },
                  mq2 {at=0+dl/2, from='prev' },
        (nth/2-1)*mq2 {at=dl    , from='prev' },
  --                df2 {at=6}, -- for madx row by row compatibility
    }
    seq.beam  = beam

    return seq
  end

  local fodo = thinFODO()

  -- match test
  local status, fmin, ncall = match {

    command := twiss { sequence=fodo, observe=1 },

    variables = {
      { var = 'knobs.k1qf', min= 0.2, max= 0.4 },
      { var = 'knobs.k1qd', min=-0.4, max=-0.2 },
    },

    equalities = {
      { kind = 'mu1', expr = \t -> t.mu1[#t]-0.25 },
      { kind = 'mu2', expr = \t -> t.mu2[#t]-0.25 },
    },

    objective = { fmin = 1e-8, maxcall = 50, !summary=true
    },
  }

--  print('status=', status, 'fmin=', fmin, 'ncall=', ncall)
--  print('k1_qf=', knobs.k1qf, 'k1_qd=', knobs.k1qd)

  assertEquals      (status    ,  'FMIN_REACHED'         )
  assertEquals      (ncall     ,  10                     )
  assertAlmostEquals(fmin      ,  5.5376216498e-13, 1e-16)
  assertAlmostEquals(knobs.k1qf,  0.30372411066520, 1e-12)
  assertAlmostEquals(knobs.k1qd, -0.30372411066521, 1e-12)
end

function TestMatch:testMatchFODO ()
  -- classes
  local mb = sbend { l=2, angle=2*pi/50 }
  local mq = quadrupole { l=1 }
  local var = { k1f=0.28, k1d=-0.28 }

  -- sequence
  local seq = sequence 'seq' {
    l=10, refer='entry', beam=beam,
    mq 'mq1' { at=0, k1 := var.k1f },
    mb 'mb1' { at=2, k0 =\s s.angle/s.l },
    mq 'mq2' { at=5, k1 := var.k1d },
    mb 'mb2' { at=7, k0 =\s s.angle/s.l },
  }

  -- twiss
  if doplot then
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end

  -- match phase advance
  local status, fmin, ncall = match {
    command := twiss { sequence=seq, observe=1 },
    variables = {
      { var = 'var.k1f', min= 0.2, max= 0.4 },
      { var = 'var.k1d', min=-0.4, max=-0.2 },
    },
    equalities = {
      { expr = \t -> assert(t).mu1[#t]-0.25 },
      { expr = \t -> assert(t).mu2[#t]-0.25 },
    },
    objective = {
      fmin = 1e-8, maxcall = 100, !summary=2, !debug=2
    },
  }

!  printf("var.k1f = % -.16e\n", var.k1f)
!  printf("var.k1d = % -.16e\n", var.k1d)

  -- check results
  assertEquals      (status ,  'FMIN_REACHED'         )
  assertEquals      (ncall  ,  10                     )
  assertAlmostEquals(fmin   ,  2.3401120849e-13, 1e-16)
  assertAlmostEquals(var.k1f,  0.29599989525034, 1e-12)
  assertAlmostEquals(var.k1d, -0.30241971341642, 1e-12)

  if doplot then
    -- plot betas and phases
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
    plot { table=mtbl, sequence=seq, fontsize=18, !styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end
end

function TestMatch:testMatchFODOLocVar ()
  -- classes
  local mb = sbend { l=2, angle=2*pi/50 }
  local mq = quadrupole { l=1 }
  local k1f= 0.28
  local k1d=-0.28

  -- sequence
  local seq = sequence 'seq' {
    l=10, refer='entry', beam=beam,
    mq 'mq1' { at=0, k1 := k1f },
    mb 'mb1' { at=2, k0 =\s s.angle/s.l },
    mq 'mq2' { at=5, k1 := k1d },
    mb 'mb2' { at=7, k0 =\s s.angle/s.l },
  }

  -- twiss
  if doplot then
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end

  -- match phase advance
  local status, fmin, ncall = match {
    command := twiss { sequence=seq, observe=1 },
    variables = { !nowarn=true,
      { var = 'k1f', min= 0.2, max= 0.4 },
      { var = 'k1d', min=-0.4, max=-0.2 },
      init   = \x => x[1], x[2] = k1f, k1d end, -- explicit init/update avoid
      update = \x => k1f, k1d = x[1], x[2] end, -- to flush the JIT...
    },
    equalities = {
      { expr = \t -> assert(t).mu1[#t]-0.25 },
      { expr = \t -> assert(t).mu2[#t]-0.25 },
    },
    objective = {
      fmin = 1e-8, maxcall = 50, !summary=2,
    },
  }

  -- check results
  assertEquals      (status,  'FMIN_REACHED'         )
  assertEquals      (ncall ,  10                     )
  assertAlmostEquals(fmin  ,  2.3401120849e-13, 1e-16)
  assertAlmostEquals(k1f   ,  0.29599989525034, 1e-12)
  assertAlmostEquals(k1d   , -0.30241971341642, 1e-12)


  if doplot then
    -- plot betas and phases
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
    plot { table=mtbl, sequence=seq, fontsize=18, !styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end
end

function TestMatch:testMatchFODONoVar ()
  -- classes
  local mb = sbend { l=2, angle=2*pi/50 }
  local mq = quadrupole { l=1 }

  -- sequence
  local seq = sequence 'seq' {
    l=10, refer='entry', beam=beam,
    mq 'mq1' { at=0, k1 = 0.28 },
    mb 'mb1' { at=2, k0 =\s s.angle/s.l },
    mq 'mq2' { at=5, k1 = -0.28 },
    mb 'mb2' { at=7, k0 =\s s.angle/s.l },
  }

  -- twiss
  if doplot then
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end

  -- match phase advance
  local status, fmin, ncall = match {
    command := twiss { sequence=seq, observe=1 },
    variables = {
      { var = 'seq.mq1.k1', min= 0.2, max= 0.4 },
      { var = 'seq.mq2.k1', min=-0.4, max=-0.2 },
    },
    equalities = {
      { expr = \t -> t['$end'].mu1-0.25 },
      { expr = \t -> t['$end'].mu2-0.25 },
    },
    objective = {
      fmin = 1e-8, maxcall = 50, !summary=2,
    },
  }

  -- check results
  assertEquals      (status    ,  'FMIN_REACHED'         )
  assertEquals      (ncall     ,  10                     )
  assertAlmostEquals(fmin      ,  2.3401120849e-13, 1e-16)
  assertAlmostEquals(seq.mq1.k1,  0.29599989525034, 1e-12)
  assertAlmostEquals(seq.mq2.k1, -0.30241971341642, 1e-12)

  if doplot then
    -- plot betas and phases
    local mtbl = twiss {sequence=seq, nslice=10, save='atbody'}
    plot { table=mtbl, sequence=seq, fontsize=18, styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
    plot { table=mtbl, sequence=seq, fontsize=18, !styles='lines',
           x1y1 = { s={'beta11','beta22'} },
           x1y2 = { s={'mu1'   ,'mu2'   } } }
  end
end

-- FODO matching --------------------------------------------------------------o

local function testMatchFODO (var, mth)
  -- classes
  local mb = sbend { l=2, angle=2*pi/50 }
  local mq = quadrupole { l=1 }

  -- sequence
  local seq = sequence 'seq' {
    l=10, refer='entry', beam=beam,
    mq 'mq1' { at=0, k1 := var.k1f },
    mb 'mb1' { at=2, k0 =\s s.angle/s.l },
    mq 'mq2' { at=5, k1 := var.k1d },
    mb 'mb2' { at=7, k0 =\s s.angle/s.l },
  }

  -- match phase advance
  return match {
    command := twiss { sequence=seq, observe=1 },
    variables = {
      { var = 'var.k1f', min= 0.2, max= 0.4 },
      { var = 'var.k1d', min=-0.4, max=-0.2 },
    },
    equalities = {
      { expr = \t -> assert(t).mu1[#t]-0.25 },
      { expr = \t -> assert(t).mu2[#t]-0.25 },
    },
    objective = {
      method=mth, fmin = 1e-8, maxcall = 100, !summary=2, !debug=2, bisect=5
    },
  }
end

function TestMatch:testMatchFODOJAC ()
  local var = { k1f=0.28, k1d=-0.28 }
  local status, fmin, ncall = testMatchFODO(var, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin)
  assertEquals      (status ,  'FMIN_REACHED'         )
  assertEquals      (ncall  ,  10                     ) -- 4 iterations
  assertAlmostEquals(fmin   ,  2.3401120849e-13, 1e-16)
  assertAlmostEquals(var.k1f,  0.29599989525067, 1e-12)
  assertAlmostEquals(var.k1d, -0.30241971341675, 1e-12)
end

function TestMatch:testMatchFODOLMD ()
  local var = { k1f=0.28, k1d=-0.28 }
  local status, fmin, ncall = testMatchFODO(var, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin)
  assertEquals      (status ,  'FMIN_REACHED'         )
  assertEquals      (ncall  ,  10                     ) -- 4 iterations
  assertAlmostEquals(fmin   ,  8.3923898442e-11, 1e-16)
  assertAlmostEquals(var.k1f,  0.29599989536853, 1e-12)
  assertAlmostEquals(var.k1d, -0.30241971353069, 1e-12)
end

-- Function matching ----------------------------------------------------------o

-- Example from NLOpt tutorial

local function testFuncFn (x, grd)
  if grd then
    grd[1] = 0.0
    grd[2] = 0.5 / sqrt(x[2])
  end
  return sqrt(x[2])
end

local function testFuncLe (x, r, jac)
  local a, b = 2, 0
  if jac then
    jac[1] = 3*a*(a*x[1]+b)^2
    jac[2] = -1
  end
  r[1] = (a*x[1]+b)^3 - x[2]

  local a, b = -1, 1
  if jac then
    jac[3] = 3*a*(a*x[1]+b)^2
    jac[4] = -1
  end
  r[2] = (a*x[1]+b)^3 - x[2]
end

local function testMatchFunc1 (x, mth)
  return match {
    variables = { rtol = 1e-4,
      { var = 'x[1]', min = -inf },
      { var = 'x[2]', min =  0   },
    },
    inequalities = {
      exec = testFuncLe, nequ = 2, tol = 1e-8
    },
    objective = {
      exec = testFuncFn,
      method=mth, maxcall=100, !summary=2, !debug=2,
    },
  }
end

local function testMatchFunc2 (x, mth)
  return match {
    variables = {
      { var = 'x[1]', min = -inf },
      { var = 'x[2]', min =  0   },
    },
    inequalities = {
      exec = testFuncLe, nequ = 2, tol = 1e-8
    },
    objective = {
      exec = testFuncFn,
      method=mth, maxcall=100, fmin=sqrt(8/27)+1e-3, !summary=2, !debug=2,
    },
  }
end

-- Example from Octave tutorial
-- Note: Octave succeeds to find a solution but reports roundoff error...

local function testMatchFunc3 (x, mth)
  return match {
    variables = {
      { var = 'x[1]' },
      { var = 'x[2]' },
      { var = 'x[3]' },
      { var = 'x[4]' },
      { var = 'x[5]' },
    },
    equalities = {
      { expr := x:sumsqr() - 10         },
      { expr := x[2]*x[3] - 5*x[4]*x[5] },
      { expr := x[1]^3+x[2]^3+1         },
    },
    objective = {
      exec := math.exp(x:prod()) - 0.5*(x[1]^3+x[2]^3+1)^2,
      method=mth, tol=1e-8, maxcall=500, grad=false, !summary=2, !debug=2,
    },
  }
end

-- Example #71 from Hock-Schittkowsky test suite (all aglos fail)

local function testMatchFunc4 (x, mth)
  return match {
    variables = { min=0, max=6,
      { var = 'x[1]' },
      { var = 'x[2]' },
      { var = 'x[3]' },
      { var = 'x[4]' },
    },
    equalities = {
      { expr := x[1]^2+x[2]^2+x[3]^2+x[4]^2 - 40 },
    },
    inequalities = {
      { expr := 25 - x[1]*x[2]*x[3]*x[4] },
    },
    objective = {
      exec := x[1]*x[4] * (x[1]+x[2]+x[3]) + x[3],
      method=mth, ftol=1e-8, maxcall=500, grad=false, !summary=2, !debug=2,
    },
  }
end

 -- same as Func4 but formulated with constraints (i.e. Least-Squares problem)
local function testMatchFunc5 (x, mth)
  local fmin = 17.014016822208
  local fn =\ x[1]*x[4] * (x[1]+x[2]+x[3]) + x[3]

  return match {
    variables = { min=0, max=6,
      { var = 'x[1]' },
      { var = 'x[2]' },
      { var = 'x[3]' },
      { var = 'x[4]' },
    },
    equalities = { tol=5e-7,
      { expr := fn() - fmin },
      { expr := x[1]^2+x[2]^2+x[3]^2+x[4]^2 - 40 },
    },
    inequalities = { tol=5e-7,
      { expr := 25 - x[1]*x[2]*x[3]*x[4] },
      { expr := 1 - x[1] },
!     { expr := 1 - x[2] },  -- useless constraints
!     { expr := 1 - x[3] },  -- useless constraints
!     { expr := 1 - x[4] },  -- useless constraints
!     { expr := x[1] - 2 },  -- useless constraints
!     { expr := x[2] - 5 },  -- useless constraints
!     { expr := x[3] - 5 },  -- useless constraints
!     { expr := x[4] - 2 },  -- useless constraints
    },
    objective = {
      method=mth, ftol=3e-8, maxcall=500, bisec=3, !summary=2, !debug=2, !rcond=1e-8
    },
  }
end

-- Trivial MAD-X example from IPAC 2006 paper

local function testMatchFunc6 (x, mth)
  return match {
    variables = {
      { var = 'x[1]' },
    },
    equalities = {
      { expr := (x[1]-3.5)*(x[1]+2  )*(x[1]-4  ) },
      { expr := (x[1]-3.5)*(x[1]-1.4)*(x[1]+3.5) },
    },
    objective = {
      method=mth, fmin=1e-12, !summary=2, !debug=2,
    },
  }
end

local function testMatchFunc7 (x, mth)
  return match {
    variables = {
      { var = 'x[1]' },
    },
    equalities = {
    -- Some algorithms do not accept more constraints than variables...
      { expr := (x[1]-3.5)*(x[1]+2  )*(x[1]-4  ) },
!     { expr := (x[1]-3.5)*(x[1]-1.4)*(x[1]+3.5) },
    },
    objective = {
      method=mth, fmin=1e-12, !summary=2, debug=2,
    },
  }
end

-- Method of Moving Asymptotes ------------------------------------------------o

function TestMatch:testMatchFuncMMA1 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LD_MMA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'XTOL_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 11              )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-8)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-8)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-8)
end

function TestMatch:testMatchFuncMMA2 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LD_MMA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 10              )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-4)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-4)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-4)
end

function TestMatch:testMatchFuncMMA3 ()
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LD_MMA')
--  print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals(status, 'MAXCALL_REACHED')                             -- FAILURE
end

function TestMatch:testMatchFuncMMA4 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LD_MMA')
--  print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals(status, 'XTOL_REACHED')                                -- FAILURE
end

function TestMatch:testMatchFuncMMA5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LD_MMA')
--  print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'MAXCALL_REACHED')                       -- SUCCESS
  assertEquals      (ncall , 2500          )
  assertAlmostEquals(x[1], 1.00000066, 1e-5) -- 1.0000000 unstable
  assertAlmostEquals(x[2], 4.66671820, 1e-5) -- 4.7429994 unstable
  assertAlmostEquals(x[3], 3.91842928, 1e-5) -- 3.8211503 unstable
  assertAlmostEquals(x[4], 1.36714989, 1e-5) -- 1.3794082 unstable
end

function TestMatch:testMatchFuncMMA6 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc6(x, 'LD_MMA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED')                          -- SUCCESS
  assertEquals      (ncall , 118       )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- Constrained Optimization BY Linear Approximations (Simplex) ----------------o

function TestMatch:testMatchFuncCOB1 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'XTOL_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 31              )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-3)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-3)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-3) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncCOB2 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 25              )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-3)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-3)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-3) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncCOB3 ()
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals(status, 'FTOL_REACHED')                                -- SUCCESS
! assertEquals      (ncall ,  210           )
  assertAlmostEquals(fmin  ,  0.053950, 1e-4) -- values from example
  assertAlmostEquals(x[1]  , -1.71714 , 2e-4)
  assertAlmostEquals(x[2]  ,  1.59571 , 2e-4)
  assertAlmostEquals(x[3]  ,  1.82725 , 3e-4)
  assertAlmostEquals(x[4]  , -0.763643, 4e-4)
  assertAlmostEquals(x[5]  , -0.763643, 4e-4)
end

function TestMatch:testMatchFuncCOB4 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals(status, 'XTOL_REACHED')                                -- FAILURE
  assertTrue  (ncall == 357 or ncall == 339) -- unstable
end

function TestMatch:testMatchFuncCOB5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'XTOL_REACHED' )                         -- SUCCESS
  assertEquals      (ncall , 296            )
  assertAlmostEquals(x[1], 1.0000000, 2e-7) -- 1.0000000
  assertAlmostEquals(x[2], 4.7429997, 1e-7) -- 4.7429994
  assertAlmostEquals(x[3], 3.8211498, 1e-7) -- 3.8211503
  assertAlmostEquals(x[4], 1.3794085, 1e-7) -- 1.3794082
end

function TestMatch:testMatchFuncCOB7 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc7(x, 'LN_COBYLA')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED')                          -- SUCCESS
  assertEquals      (ncall , 20        )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- Sequential Least-Squares Quadratic Programming -----------------------------o

function TestMatch:testMatchFuncSQP1 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'XTOL_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 22              )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-2)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-2)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-2) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncSQP2 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 42              )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-3)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-3)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-3) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncSQP3 ()
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FTOL_REACHED' )                         -- SUCCESS
  assertEquals      (ncall ,  48            ) -- 9 iterations 9x(1+5)
  assertAlmostEquals(fmin  ,  0.053950, 1e-6) -- values from example
  assertAlmostEquals(x[1]  , -1.717143, 1e-6) -- -1.71714
  assertAlmostEquals(x[2]  ,  1.595709, 1e-6) --  1.59571
  assertAlmostEquals(x[3]  ,  1.827247, 1e-6) --  1.82725
  assertAlmostEquals(x[4]  , -0.763643, 1e-6) -- -0.763643
  assertAlmostEquals(x[5]  , -0.763643, 1e-6) -- -0.763643
end

function TestMatch:testMatchFuncSQP4 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals(status, 'ROUNDOFF_LIMITED')                            -- FAILURE
  assertEquals(ncall , 300               ) -- results are completely wrong
end

function TestMatch:testMatchFuncSQP5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'XTOL_REACHED' )                         -- SUCCESS
  assertEquals      (ncall , 265            )
  assertAlmostEquals(x[1], 1.0000000, 1e-6) -- 1.0000000
  assertAlmostEquals(x[2], 4.7429997, 1e-6) -- 4.7429994
  assertAlmostEquals(x[3], 3.8211499, 1e-6) -- 3.8211503
  assertAlmostEquals(x[4], 1.3794083, 1e-6) -- 1.3794082
end

function TestMatch:testMatchFuncSPQ7 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc7(x, 'LD_SLSQP')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED')                          -- SUCCESS
  assertEquals      (ncall , 20        )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- Jacobian -------------------------------------------------------------------o

function TestMatch:testMatchFuncJAC1 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'XTOL_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 8               )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-8)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-8)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-8)
end

function TestMatch:testMatchFuncJAC2 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 8               )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-3)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-3)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-3) -- err=0.00016 > 0.0001
end

function TestMatch:testMatchFuncJAC3 ()
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FTOL_REACHED' )                         -- SUCCESS
  assertEquals      (ncall ,  25            ) -- 5 iterations
  assertAlmostEquals(fmin  ,  0.053996, 1e-5) -- find another minimum (close)...
  assertAlmostEquals(x[1]  , -1.72693 , 1e-5) -- fstp=-5.12167e-11
  assertAlmostEquals(x[2]  ,  1.60702 , 1e-5) -- cval= 4.40930e-14
  assertAlmostEquals(x[3]  ,  1.80897 , 1e-5)
  assertAlmostEquals(x[4]  , -0.762504, 1e-5)
  assertAlmostEquals(x[5]  , -0.762504, 1e-5)
end

function TestMatch:testMatchFuncJAC4 () -- difficult problem... or ill posed?
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals       (status, 'MAXCALL_REACHED')                      -- FAILURE
  assertEquals       (ncall , 502) -- not a Least-Squares problem
end

function TestMatch:testMatchFuncJAC5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'ROUNDOFF_LIMITED') !'FTOL_REACHED')     -- SUCCESS
  assertEquals      (ncall , 142        )
  assertAlmostEquals(x[1], 1.00000, 5e-4) -- 1.0000000
  assertAlmostEquals(x[2], 4.74296, 5e-4) -- 4.7429994
  assertAlmostEquals(x[3], 3.82120, 5e-4) -- 3.8211503
  assertAlmostEquals(x[4], 1.37940, 5e-4) -- 1.3794082
end

function TestMatch:testMatchFuncJAC6 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc6(x, 'LD_JACOBIAN')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED')                          -- SUCCESS
  assertEquals      (ncall , 17        )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- Levengberg-Marquardt -------------------------------------------------------o

function TestMatch:testMatchFuncLMD1 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc1(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'XTOL_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 8               )
  assertAlmostEquals(fmin  , sqrt(8/27), 2e-8)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-8)
  assertAlmostEquals(x[2]  ,      8/27 , 7e-8)
end

function TestMatch:testMatchFuncLMD2 ()
  local x = vector {1.234, 5.678}
  local status, fmin, ncall = testMatchFunc2(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED'  )                        -- SUCCESS
  assertEquals      (ncall , 9               )
  assertAlmostEquals(fmin  , sqrt(8/27), 1e-8)
  assertAlmostEquals(x[1]  ,      1/3  , 1e-8)
  assertAlmostEquals(x[2]  ,      8/27 , 1e-8)
end

function TestMatch:testMatchFuncLMD3 ()
  local x = vector {-1.8, 1.7, 1.9, -0.8, -0.8}
  local status, fmin, ncall = testMatchFunc3(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FTOL_REACHED' )                         -- SUCCESS
  assertEquals      (ncall ,  25            ) -- 5 iterations
  assertAlmostEquals(fmin  ,  0.053996, 5e-6) -- find another minimum (close)...
  assertAlmostEquals(x[1]  , -1.72693 , 5e-6) -- fstp=-5.12167e-11
  assertAlmostEquals(x[2]  ,  1.60702 , 5e-6) -- cval= 4.40930e-14
  assertAlmostEquals(x[3]  ,  1.80897 , 5e-6)
  assertAlmostEquals(x[4]  , -0.762504, 5e-6)
  assertAlmostEquals(x[5]  , -0.762504, 5e-6)
end

function TestMatch:testMatchFuncLMD4 () -- difficult problem... or ill posed?
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc4(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals(status, 'ROUNDOFF_LIMITED')                            -- FAILURE
  assertEquals(ncall , 35) -- not a Least-Squares problem
end

function TestMatch:testMatchFuncLMD5 () -- difficult problem...
  local x = vector {1, 5, 5, 1}
  local status, fmin, ncall = testMatchFunc5(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'ROUNDOFF_LIMITED')                      -- SUCCESS
  assertEquals      (ncall , 146        )
  assertAlmostEquals(x[1], 1.00000, 7e-4) -- 1.0000000
  assertAlmostEquals(x[2], 4.74296, 7e-4) -- 4.7429994
  assertAlmostEquals(x[3], 3.82120, 7e-4) -- 3.8211503
  assertAlmostEquals(x[4], 1.37940, 7e-4) -- 1.3794082
end

function TestMatch:testMatchFuncLMD6 () -- MAD-X example
  local x = vector {0}
  local status, fmin, ncall = testMatchFunc6(x, 'LD_LMDIF')
-- print(status, fmin, ncall, fmin) ; x:print('x')
  assertEquals      (status, 'FMIN_REACHED')                          -- SUCCESS
  assertEquals      (ncall , 17        )
  assertAlmostEquals(fmin  , 0  , 1e-12)
  assertAlmostEquals(x[1]  , 3.5, 1e-12)
end

-- end ------------------------------------------------------------------------o
