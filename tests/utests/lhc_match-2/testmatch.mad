-- time ../mad -jp=vl testmatch.mad

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;
--  PLOT Utility
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;

local doplot = true

--if doplot then MAD.utility.atexit(MAD.utility.pause, true) end

local function plottw (mflw, x1y2_, dir_)
  if not doplot then return end
  local sequ, mtbl in mflw
  local dir = not dir_
  MAD.plot { table=mtbl,
             title=mtbl.title,

             sequence=dir and sequ or nil,
             range   =dir and (sequ.range or {mtbl[1].name,mtbl[-1].name}) or nil,

             x1y1 = { s={'beta11','beta22'} },
             x1y2 = { s= x1y2_ or {'mu1','mu2'} },

             styles = 'lines',
             output = 'plot.pdf',
             prolog = "set multiplot",
           }
end

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;
--  LOAD LHC
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;

local function LHC_load ()
  local is_sequence in MAD.typeid

  if not is_sequence(MADX:var_raw'lhcb1') then -- avoid MAD-X warning
    MADX:load('input/V6.5.uvar.mad') -- must be updated after conversion
    MADX:load('input/V6.5.seq'     , 'input/V6.5.mad'     ) -- convert on need
    MADX:load('input/V6.5.coll.str', 'input/V6.5.coll.mad')

    local lhcb1, lhcb2 in MADX

    -- sanity checks
    assert(#lhcb1 == 6641, "invalid number of elements in LHCB1 (6641 expected)")
    assert(#lhcb2 == 6641, "invalid number of elements in LHCB2 (6641 expected)")

    -- attach beam
    local beam in MAD
    lhcb1.beam = beam { particle='proton', energy=7000 }
    lhcb2.beam = beam { particle='proton', energy=7000 }

    -- set sequence direction
    lhcb2.dir = -1
  end
end

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;
--  select.ir8.b1.madx
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;

local mybeta0 = {}

local function select_ir8_b1 ()
  local lhcb1 in MADX
  local track, twiss, sequence                              in MAD
  local map2bet                                             in MAD.gphys
  local observe                                             in MAD.element.flags

  local obspts = {"S.CELL.78.B1", "E.CELL.81.B1",
                  "S.DS.L8.B1"  , "E.DS.L8.B1"  ,
                  "E.DS.R8.B1"  , "IP8"}
  for _,e in ipairs(obspts) do lhcb1[e]:select(observe) end

  local mytwiss = twiss { sequence=lhcb1,
                          method=4, observe=doplot and 0 or 1, mapsave=true,
                          save=doplot and 'atbody' or nil, implicit=doplot,
                          nslice=doplot and 5 or 1, cofind=true, exec=false}
  --
  print("TWISS1")
  local mt, mf = mytwiss { range = "S.CELL.78.B1/E.CELL.78.B1", title='TWISS1' }
  mt:write("output/twiss1.tfs") ; plottw(mf,{'mu1','mu2'}) ; plottw(mf,{'dx','dpx'})
  mybeta0.bini1ir8 = map2bet(mt["S.CELL.78.B1"].M)
  print('**bini1ir8**') show(mybeta0.bini1ir8)
  mybeta0.bini1ir8.mu1 = 0
  mybeta0.bini1ir8.mu2 = 0
  --
  print("TWISS2")
  local mt, mf = mytwiss { range = "S.CELL.81.B1/E.CELL.81.B1", title='TWISS2' }
  mt:write("output/twiss2.tfs") ; plottw(mf,{'mu1','mu2'}) ; plottw(mf,{'dx','dpx'})
  mybeta0.bini2ir8 = map2bet(mt["E.CELL.81.B1"].M)
  print('**bini2ir8**') show(mybeta0.bini2ir8)
  --
  print("TWISS3")
  print('**bini1ir8**') show(mybeta0.bini1ir8)
  local mt, mf = mytwiss { range = "S.CELL.78.B1/S.DS.L8.B1", X0=mybeta0.bini1ir8, title='TWISS3' }
  mt:write("output/twiss3.tfs") ; plottw(mf,{'mu1','mu2'}) ; plottw(mf,{'dx','dpx'})
  mybeta0.bir8b1 = map2bet(mt["S.DS.L8.B1"].M)
  print('**bir8b1**') show(mybeta0.bir8b1)
  mybeta0.bir8b1.gama11 = nil
  mybeta0.bir8b1.gama22 = nil
  mybeta0.bir8b1.mu1    = 0
  mybeta0.bir8b1.mu2    = 0
  --
! print("TWISS4B") -- try with backtracking
! local mt, mf = mytwiss { range = "E.CELL.81.B1/E.DS.R8.B1", dir=-1, X0=mybeta0.bini2ir8, title='TWISS4B' }
! mt:write("output/twiss4b.tfs") ; plottw(mf,{'mu1','mu2'},-1) ; plottw(mf,{'dx','dpx'},-1)
! mybeta0.eir8b1 = map2bet(mt["E.DS.R8.B1"].M)
! print('**eir8b1**') show(mybeta0.eir8b1)
! mybeta0.eir8b1.mu1 = 0
! mybeta0.eir8b1.mu2 = 0
  --
  print("TWISS4R")
  local lhcb1r = lhcb1:reflect() !:dumpseq()
  lhcb1r.beam = lhcb1.beam

  mybeta0.bini1ir8.beta11 =  mybeta0.bini2ir8.beta11
  mybeta0.bini1ir8.beta22 =  mybeta0.bini2ir8.beta22
  mybeta0.bini1ir8.alfa11 = -mybeta0.bini2ir8.alfa11
  mybeta0.bini1ir8.alfa22 = -mybeta0.bini2ir8.alfa22
  mybeta0.bini1ir8.gama11 =  nil
  mybeta0.bini1ir8.gama22 =  nil
  mybeta0.bini1ir8.dx     =  mybeta0.bini2ir8.dx
  mybeta0.bini1ir8.dpx    = -mybeta0.bini2ir8.dpx
  mybeta0.bini1ir8.mu1    = 0
  mybeta0.bini1ir8.mu2    = 0
  print('**bini1ir8**') show(mybeta0.bini1ir8)

  local mt, mf = mytwiss { sequence=lhcb1r, range = "E.CELL.81.B1/E.DS.R8.B1", X0=mybeta0.bini1ir8, title='TWISS4R' }
  mt:write("output/twiss4r.tfs") ; plottw(mf,{'mu1','mu2'}) ; plottw(mf,{'dx','dpx'})
  mybeta0.eir8b1 = map2bet(mt["E.DS.R8.B1"].M)
  print('**eir8b1**') show(mybeta0.eir8b1)

  mybeta0.eir8b1.alfa11 = -mybeta0.eir8b1.alfa11
  mybeta0.eir8b1.alfa22 = -mybeta0.eir8b1.alfa22
  mybeta0.eir8b1.gama11 =  nil
  mybeta0.eir8b1.gama22 =  nil
  mybeta0.eir8b1.dpx    = -mybeta0.eir8b1.dpx
  mybeta0.eir8b1.dpy    = -mybeta0.eir8b1.dpy
  mybeta0.eir8b1.mu1    = 0
  mybeta0.eir8b1.mu2    = 0
  print('**eir8b1**') show(mybeta0.eir8b1)
  --
  print("TWISS5")
  lhcb1.range = "S.DS.L8.B1/E.DS.R8.B1"
  local mt, mf = mytwiss { X0=mybeta0.bir8b1, title='TWISS5', observe=0 }
  mt:write("output/twiss5.tfs") ; plottw(mf,{'mu1','mu2'}) ; plottw(mf,{'dx','dpx'})
  mybeta0.bip8b1 = map2bet(mt.IP8.M)
  print('**bip8b1**') show(mybeta0.bip8b1)
  -- for MAD-X comparison
  local cols = {'name','s','beta11','beta22','alfa11','alfa22','dx','dpx','x','px','y','py','mu1','mu2'}
  mt:write("output/twiss.ir8.b1.tfs", cols)
end

----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;
--  testmatch.madx
----|----1----|----2----|----3----|----4----|----5----|----6----|----7----|---8;

local function match_ir8_b1 ()
  local twiss, match, mtable in MAD
  local lhcb1, beta_ip8 in MADX
  local bir8b1, eir8b1 in mybeta0

  local muxip8   = 3.204 ! Horizontal phase advance over IR8
  local muyip8   = 2.804 ! Vertical   phase advance over IR8
  local scale    = 23348.89927
  local qtlimit1 = 1.0*220.0/scale
  local qtlimit2 = 1.0*200.0/scale
  local qtlimit3 = 1.0*130.0/scale
  local qtlimit4 = 1.0*160.0/scale

  print('**bir8b1**') show(bir8b1)
  print('**eir8b1**') show(eir8b1)

  local mytwiss = twiss { sequence=lhcb1, method=4, X0=bir8b1,
                          observe=1, save='atbody', mapsave=true, exec=false }

  local mytbl = mtable 'str.ip8.b1' {
    'n','kq4_l8b1','kq5_l8b1','kq6_l8b1','kq7_l8b1','kq8_l8b1','kq9_l8b1',
    'kq10_l8b1','kqtl11_l8b1','kqt12_l8b1','kqt13_l8b1','kq4_r8b1','kq5_r8b1',
    'kq6_r8b1','kq7_r8b1','kq8_r8b1','kq9_r8b1','kq10_r8b1','kqtl11_r8b1',
    'kqt12_r8b1','kqt13_r8b1','beta_ip8','tar'
  }
  local colnam, row = mytbl:colnames(), {}
  MADX.n, MADX.tar = 0, 0
  for i,v in ipairs(colnam) do row[i] = MADX[v] end
  mytbl = mytbl + row

                   -- MADX final(1)  MADX initial   MADNG final(1) (477calls)
  MADX.kq4_l8b1    = -4.28749e-03 ! -4.31524e-03 ! -4.28785e-03
  MADX.kq5_l8b1    =  5.15860e-03 !  5.28621e-03 !  5.15873e-03
  MADX.kq6_l8b1    = -5.01651e-03 ! -5.10286e-03 ! -5.01638e-03
  MADX.kq7_l8b1    =  8.13921e-03 !  8.25168e-03 !  8.13920e-03
  MADX.kq8_l8b1    = -5.66492e-03 ! -5.85528e-03 ! -5.66470e-03
  MADX.kq9_l8b1    =  7.24978e-03 !  7.07113e-03 !  7.24971e-03
  MADX.kq10_l8b1   = -5.57464e-03 ! -6.39311e-03 ! -5.57428e-03
  MADX.kqtl11_l8b1 =  4.41254e-04 !  7.07398e-04 !  4.41173e-04
  MADX.kqt12_l8b1  = -1.51219e-03 ! -3.08650e-03 ! -1.51460e-03
  MADX.kqt13_l8b1  =  5.56712e-03 !  3.78543e-03 !  5.56771e-03
  MADX.kq4_r8b1    =  3.05324e-03 !  4.39728e-03 !  3.05334e-03
  MADX.kq5_r8b1    = -2.72962e-03 ! -4.21383e-03 ! -2.72989e-03
  MADX.kq6_r8b1    =  4.27980e-03 !  4.05914e-03 !  4.27979e-03
  MADX.kq7_r8b1    = -6.27578e-03 ! -6.65981e-03 ! -6.27595e-03
  MADX.kq8_r8b1    =  8.55183e-03 !  6.92571e-03 !  8.55178e-03
  MADX.kq9_r8b1    = -8.11995e-03 ! -7.46154e-03 ! -8.11969e-03
  MADX.kq10_r8b1   =  7.63558e-03 !  7.55573e-03 !  7.63557e-03
  MADX.kqtl11_r8b1 = -5.56732e-03 ! -4.78966e-03 ! -5.56744e-03
  MADX.kqt12_r8b1  = -7.07646e-04 ! -1.74210e-03 ! -7.07606e-04
  MADX.kqt13_r8b1  = -1.92425e-03 ! -3.61438e-03 ! -1.92302e-03

  for n=1,2 do
    print("MATCH", n)
    beta_ip8 = beta_ip8 * 0.6

    local status, fmin, ncall = match {
      command = \e => local t = mytwiss { title='MATCH:'..n }
                      t:write("output/match"..e.ncall)
                      return t.lost == 0 and t or nil
                   end,
      variables = { sign=true,
        { var = 'MADX.kq4_l8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq5_l8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq6_l8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq7_l8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq8_l8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq9_l8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq10_l8b1'  , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kqtl11_l8b1', min=-qtlimit3, max=qtlimit3 },
        { var = 'MADX.kqt12_l8b1' , min=-qtlimit3, max=qtlimit3 },
        { var = 'MADX.kqt13_l8b1' , min=-qtlimit3, max=qtlimit3 },
        { var = 'MADX.kq4_r8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq5_r8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq6_r8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq7_r8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq8_r8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq9_r8b1'   , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kq10_r8b1'  , min=-qtlimit2, max=qtlimit2 },
        { var = 'MADX.kqtl11_r8b1', min=-qtlimit3, max=qtlimit3 },
        { var = 'MADX.kqt12_r8b1' , min=-qtlimit3, max=qtlimit3 },
        { var = 'MADX.kqt13_r8b1' , min=-qtlimit3, max=qtlimit3 },
      },
      equalities = {
        { expr = \t -> t.IP8.beta11 - beta_ip8               , kind='beta11', name='IP8'        },
        { expr = \t -> t.IP8.beta22 - beta_ip8               , kind='beta22', name='IP8'        },
        { expr = \t -> t.IP8.alfa11 - 0                      , kind='alfa11', name='IP8'        },
        { expr = \t -> t.IP8.alfa22 - 0                      , kind='alfa22', name='IP8'        },
        { expr = \t -> t.IP8.dx     - 0                      , kind='dx'    , name='IP8'        },
        { expr = \t -> t.IP8.dpx    - 0                      , kind='dpx'   , name='IP8'        },
        { expr = \t -> t['E.DS.R8.B1'].beta11 - eir8b1.beta11, kind='beta11', name='E.DS.R8.B1' },
        { expr = \t -> t['E.DS.R8.B1'].beta22 - eir8b1.beta22, kind='beta22', name='E.DS.R8.B1' },
        { expr = \t -> t['E.DS.R8.B1'].alfa11 - eir8b1.alfa11, kind='alfa11', name='E.DS.R8.B1' },
        { expr = \t -> t['E.DS.R8.B1'].alfa22 - eir8b1.alfa22, kind='alfa22', name='E.DS.R8.B1' },
        { expr = \t -> t['E.DS.R8.B1'].dx     - eir8b1.dx    , kind='dx'    , name='E.DS.R8.B1' },
        { expr = \t -> t['E.DS.R8.B1'].dpx    - eir8b1.dpx   , kind='dpx'   , name='E.DS.R8.B1' },
        { expr = \t -> t['E.DS.R8.B1'].mu1    - muxip8       , kind='mu1'   , name='E.DS.R8.B1' },
        { expr = \t -> t['E.DS.R8.B1'].mu2    - muyip8       , kind='mu2'   , name='E.DS.R8.B1' },
      },
      objective = {
        fmin=1e-10, maxtime=60, summary=1, debug=1,
        !method='NLOPT_GN_ISRES' !method='NLOPT_LD_SLSQP' !method='NLOPT_LN_BOBYQA'
      },
    }

    MADX.n, MADX.tar = n, fmin
    for i,v in ipairs(colnam) do row[i] = MADX[v] end
    mytbl = mytbl + row
  end

  mytbl:write("output/str.ip8.b1.tfs")
end

LHC_load()
select_ir8_b1()
match_ir8_b1()
