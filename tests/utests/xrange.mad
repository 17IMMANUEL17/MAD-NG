--[=[
 o-----------------------------------------------------------------------------o
 |
 | Xrange module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors:
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the xrange module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertEquals, assertAlmostEquals, assertTrue, assertFalse,
      assertErrorMsgContains   in require 'luaunit'
local eps, inf, nan, pi, twopi in require 'madl_gmath'

local range, logrange, nrange, nlogrange, irange, ilogrange, is_range,
      is_logrange in MAD

local is_empty in range

-- regression test suite ------------------------------------------------------o

TestXrange = {}

function TestXrange:testConstructor()
  local msg = { "invalid argument #1 (expect number)" }
  assertErrorMsgContains( msg[1], range      )
  assertErrorMsgContains( msg[1], range, 'a' )

  local res = 1..5..0.5
  local ref = { 1, 1.5, 2, 2.5, 3, 3.5,  4, 4.5, 5 }
  for j=1, res:size() do assertEquals( res[j], ref[j] ) end

  local a = { 1..20..1, 1..20, range(1,20,1) }
  for i=1, #a do
    local ref = range(1,20)
    local res = a[i]
    for j=1, a[i]:size() do assertEquals( res[j], ref[j] ) end
  end

  local a = { 1..20..0.1    , 5..1..-0.1     , 20..-20..-0.01      }
  local b = {range(1,20,0.1), range(5,1,-0.1), range(20,-20,-0.01) }
  for i=1, #a do
    local res = a[i]
    local ref = b[i]
    for j=1, a[i]:size() do assertEquals( res[j], ref[j] ) end

  assertEquals( range(2)[1]     , 2   )
  assertEquals( range(2,10)[1]  , 2   )
  assertEquals( range(2)[0]     , nil )
  assertEquals( range(2,10)[0]  , nil )
  assertEquals( range(2,10)[10] , nil )
  assertEquals( (2..10..0)[1]   , nil )
  assertEquals( (2..0)[1]       , nil )
  assertEquals( (2..-2)[1]      , nil )
  assertEquals( (20..1)[1]      , nil )
  assertEquals( (20..1)[0]      , nil )
  end
end

function TestXrange:testIs_range()
  assertTrue ( is_range(range(1,20))      )
  assertTrue ( is_range(20..0)            )
  assertTrue ( is_range(20..0..-2)        )
  assertTrue ( is_range(1..20..0)         )
  assertTrue ( is_range(1..20)            )
  assertTrue ( is_range(nrange(1,20,20))  )
  assertTrue ( is_range(nrange(1,20,-20)) )
  assertFalse( is_range(logrange(10,10^4,10))  )
  assertFalse( is_range(nlogrange(10,10^4,10)) )
end

function TestXrange:testRange()
  local start, stop, step = range(1,10,1):range()
  assertEquals( start , 1  )
  assertEquals( stop  , 10 )
  assertEquals( step  , 1  )

  local start, stop, step = range(20.1,1,-0.1):range()
  assertEquals( start , 20.1 )
  assertEquals( stop  , 1    )
  assertEquals( step  ,-0.1  )

  local start, stop, step = (1..2.2..0.1):range()
  assertEquals( start , 1   )
  assertEquals( stop  , 2.2 )
  assertEquals( step  , 0.1 )

  local start, stop, step = range(1,-20,1):range()
  assertEquals( start , 1  )
  assertEquals( stop  ,-20 )
  assertEquals( step  , 1  )

  local start, stop, step = nrange(1,10,10):range()
  assertEquals( start , 1  )
  assertEquals( stop  , 10 )
  assertEquals( step  , 1  )
end

function TestXrange:testGet()
  assertEquals( (1..20..1)   :get(1) , 2   )
  assertEquals( range(2,40,2):get(2) , 6   )
  assertEquals( (1..20..1)   :get(2) , 3   )
  assertEquals( (2..-2..-0.1):get(2) , 1.8 )
  assertEquals( (2..-2..-0.1):get(2) , 1.8 )
  assertEquals( (-2..2..0.1) :get(0) ,-2   )
  assertEquals( (1..20..1)   :get(-4), nil )
  assertEquals( (1..20..1)   :get(22), nil )
  assertEquals( range(2,40,2):get(22), nil )
  assertEquals( range(2,40,2):get(-4), nil )
  assertAlmostEquals( (2..-2..-0.1):get(22), -0.2, eps )
end

function TestXrange:testValue()
  assertEquals( range(10,20,0.1):value(0) ,  10   )
  assertEquals( (1..20..1)      :value(1) ,  2    )
  assertEquals( range(2,20,2)   :value(10),  22   )
  assertEquals( range(2,20,2)   :value(-3), -4    )
  assertEquals( range(2,20,2)   :value(13),  28   )
  assertAlmostEquals( (1..-2..-0.1):value(13), -0.3 , eps )
end

function TestXrange:testSize()
  assertTrue  ( range(1,20,1)     :size() == (2..40..2):size() )
  assertEquals( range(1,1.95,0.1) :size(), 10  )
  assertEquals( range(2,1,-0.1)   :size(), 11  )
  assertEquals( range(-1.1,10,0.1):size(), 112 )
  assertEquals( (1..10..2)        :size(), 5   )
  assertEquals( (10..1..-2)       :size(), 5   )
  assertEquals( (10..-1..-1)      :size(), 12  )
  assertEquals( (2..1..0.1)       :size(), 0   )

  assertEquals( nrange(2,20,10)   :size(), 10 )
  --assertEquals( nrange(1,20,10):size(), 10 )
  --assertEquals( nrange(1,20,9) :size(), 9  )
  --assertEquals( nrange(2,20,9) :size(), 9  )

end

function TestXrange:testIs_empty()
  --assertTrue ( is_empty( nrange(1,10,0):range()  ) )
  --assertTrue ( is_empty( nrange(1,10,-1):range() ) )

  assertTrue ( is_empty( range(1,10,-1) :range() ) )
  assertTrue ( is_empty( range(1,-10,1) :range() ) )
  assertFalse( is_empty( range(1,10,1)  :range() ) )
  assertFalse( is_empty( range(1,-10,-1):range() ) )
  assertFalse( is_empty( nrange(1,10,1) :range() ) )
end

function TestXrange:testReverse()
  assertEquals( (1..10..0.01) :reverse()  , (10..1..-0.01)  )
  assertEquals( range(2,20,-0.1):reverse(), range(20,2,0.1) )
  assertEquals( range(2,20,2) :reverse()  , range(20,2,-2)  )
  assertEquals( nrange(1,2,2) :reverse()  , nrange(2,1,2)   )
end

function TestXrange:testBounds()
  local start, stop = range(2,20,2):bounds()
  assertEquals( start, 2  )
  assertEquals( stop , 20 )

  local start, stop = range(20,-2,-0.2):bounds()
  assertEquals( start,-2  )
  assertEquals( stop , 20 )

  local start, stop = range(20,20,-0.2):bounds()
  assertEquals( start, 20 )
  assertEquals( stop , 20 )

  local start, stop, step = range(20,2,-2):bounds()
  assertEquals( start, 2   )
  assertEquals( stop , 20  )
  assertEquals( step , nil )

  local start, stop = range(1,20,0):bounds()
  assertEquals( start, nil )
  assertEquals( stop , nil )
end

function TestXrange:testEqual()
  assertTrue ( range(1,20)      == 1..20      )
  assertTrue ( range(1,20,0.1)  == 1..20..0.1 )
  assertTrue ( range(-1,-20,-1) ==-1..-20..-1 )
  assertTrue ( nrange(1,20,20)  == 1..20      )
  assertFalse( nrange(1,20,10)  == 1..20      )
end

function TestXrange:testNrangeConstructor()
  local msg = { "invalid argument #1, #2 or #3 (number expected)" }
  assertErrorMsgContains(msg[1], nrange )
  assertErrorMsgContains(msg[1], nrange, 1, 2 )

  local res = nrange(1,5,9)
  local ref = { 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5 }
  for j=1, res:size() do assertEquals( res[j], ref[j] ) end

  local a = nrange(2,10,0)
  local a = nrange(2,10,4)   --works badly for values <= 4
  --for i=1,a:size() do print(a[i]) end

  assertEquals( nrange(20,2,2)[1]    , 20  )
  assertEquals( nrange(-20,20,2)[1]  ,-20  )
  assertEquals( nrange(2,10,4)[4]    , 10  )
  assertEquals( nrange(1,2,0)[1]     , nil )
  assertEquals( nrange(20,2,-2)[1]   , nil )
  assertEquals( nrange(20,2,2)[0]    , nil )
end

function TestXrange:testIrange()
end

-- logrange --

function TestXrange:testLogConstructor()
  local msg = { "invalid argument #1 (expect number)" }
  assertErrorMsgContains( msg[1], logrange      )
  assertErrorMsgContains( msg[1], logrange, 'a' )

  local res = logrange(10, 10^5, 10)
  local ref = { 10, 10^2, 10^3, 10^4, 10^5 }
  for j=1, res:size() do assertEquals( res[j], ref[j] ) end

  assertEquals( logrange(2)[1]     , 2   )
  assertEquals( logrange(2,10)[1]  , 2   )
  assertEquals( logrange(2,10,2)[1], 2   )
  assertEquals( logrange(10,10^8,10)[1], 10   )
  assertEquals( logrange(10,10^8,10)[8], 10^8 )

  assertEquals( logrange(2,9,-1)[1], nil )
  assertEquals( logrange(2,10,0)[1], nil )
  assertEquals( logrange(2,0)[1]   , nil )
  assertEquals( logrange(2,10)[0]  , nil )
  assertEquals( logrange(2,10)[10] , nil )
  assertEquals( logrange(2,10,1)[1], nil )
end

function TestXrange:testIs_logrange()
  assertTrue ( is_logrange(logrange(1,20)    ) )
  assertTrue ( is_logrange(logrange(20,0,-2) ) )
  assertTrue ( is_logrange(logrange(20,0)    ) )
  assertTrue ( is_logrange(logrange(1,20,0)  ) )
  assertTrue ( is_logrange(nlogrange(1,20,10)) )
  assertFalse( is_logrange(range(1,20)       ) )
  assertFalse( is_logrange(nrange(1,20,20)   ) )
end

function TestXrange:testLogIs_empty()
  assertTrue ( is_empty( range(1,10,-1) :range() ) )
  assertTrue ( is_empty( range(1,-10,1) :range() ) )
  assertTrue ( is_empty( range(1,-10,0) :range() ) )
  assertFalse( is_empty( range(1,10,0)  :range() ) ) --should be empty?
  assertFalse( is_empty( range(1,10,1)  :range() ) )
  assertFalse( is_empty( range(1,-10,-1):range() ) )
  assertFalse( is_empty( nrange(1,10,1) :range() ) )

  --print(range(1,10,0)[1])
  --print(range(1,-10,0)[1])
end


function TestXrange:testLogRange()
  local start, stop, step = logrange(10,10^5,10):range()
  assertEquals( start, 10   )
  assertEquals( stop , 10^5 )
  assertEquals( step , 10   )

  local start, stop, step = logrange(10^5,10^-2,10^-1):range()
  assertEquals( start, 10^5  )
  assertEquals( stop , 10^-2 )
  assertEquals( step , 10^-1 )

  local start, stop, step = nlogrange(10,10^5,5):range()
  assertEquals( start, 10   )
  assertEquals( stop , 10^5 )
  assertEquals( step , 10   )
end

function TestXrange:testLogGet()
  assertEquals( logrange(10,10^8,10) :get(2) , 10^3  )
  assertEquals( logrange(10,10^8,10) :get(10), nil   )
  assertEquals( logrange(2^-20,2^6,2):get(0) , 2^-20 )
  assertAlmostEquals( nlogrange(10^5,10,5):get(4), 10, eps )

  assertEquals( logrange(10^5,10,0.1):get(-1), 10^6  ) --should be nil as well
  --assertAlmostEquals( nlogrange(10^5,10,5):get(5), 10, eps )
end

function TestXrange:testLogValue()
  assertEquals( logrange(10,10^8,10) :value(2) , 10^3  )
  assertEquals( logrange(10,10^8,10) :value(10), 10^11 )
  assertEquals( logrange(10^5,10,0.1):value(-1), 10^6  )
  assertEquals( logrange(2^-20,2^6,2):value(0) , 2^-20 )
  assertAlmostEquals( nlogrange(10^5,10,5):value(5), 1, eps )

end

function TestXrange:testLogSize()
  assertEquals( logrange(2^-20,2^6,2)  :size(), 27 )
  assertEquals( nlogrange(10^1,10^6,10):size(), 10 )
  assertEquals( nlogrange(10^7,10^1,10):size(), 10 )

  --assertEquals( logrange(10^5,10,0.1)   :size(), 5  )
  --assertEquals( logrange(10^1,10^6,10)  :size(), 6  )
  --assertEquals( nlogrange(10^7,10^-2,10):size(), 10 )
end

function TestXrange:testLogReverse()
  assertEquals( logrange(10,10^5,10) :reverse(), logrange(10^5,10,1/10)  )
  assertEquals( logrange(2^20,2^-3,2):reverse(), logrange(2^-3,2^20,1/2) )
  assertEquals( nlogrange(10,10^5,10):reverse(), nlogrange(10^5,10,10)   )
end

function TestXrange:testLogBounds()
  local start, stop = logrange(10,10^5,10):bounds()
  assertEquals( start, 10   )
  assertEquals( stop , 10^5 )

  local start, stop = logrange(10^5,10,0.1):bounds()
  assertEquals( start, 10   )
  assertEquals( stop , 10^5 )

  local start, stop, step = logrange(10^5,-10,0.1):bounds()
  assertEquals( start,-10   )
  assertEquals( stop , 10^5 )
  assertEquals( step , nil  )
end

function TestXrange:testLogIrange()  end

function TestXrange:testLogEqual()
  assertTrue( logrange(10,10^5,10):reverse() == logrange(10^5,10,1/10) )
  assertTrue( logrange(10,10^5,10) == nlogrange(10,10^5,5) )
end

function TestXrange:testLogNrangeConstructor()
  local msg = { "invalid argument #1, #2 or #3 (number expected)" }
  assertErrorMsgContains(msg[1], nlogrange )
  assertErrorMsgContains(msg[1], nlogrange, 1, 2 )

  local res = nlogrange( 2, 2^6, 6 )
  local ref = { 2, 2^2, 2^3, 2^4, 2^5, 2^6 }
  for j=1, res:size() do assertEquals( res[j], ref[j] ) end


  --assertEquals( nlogrange(4,2,2)[0]       , 8   )
  --assertEquals( nlogrange(4,2,2)[-1]      , 16  ) --half line

  assertEquals( nlogrange(2,2^6,6)[0]     , nil )
  assertEquals( nlogrange(2,2^6,6)[7]     , nil )
  assertEquals( nlogrange(1,2,-2)[1]      , nil )
  assertEquals( nlogrange(1,2,0)[1]       , nil )
  assertEquals( nlogrange(20,2,-2)[1]     , nil )
  assertEquals( nlogrange(20,2,2)[1]      , 20  )
  assertAlmostEquals( nlogrange(2,10,4)[4], 10, eps )
end

-- end ------------------------------------------------------------------------o
