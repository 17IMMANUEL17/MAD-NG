--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Tecker, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the track module.

 o-----------------------------------------------------------------------------o
]=]

--[[
chg  = particle charge
edir = element direction (e.g. lhcb2, dir=-1)
sdir = tracking s-direction
tdir = tracking time direction (=edir*sdir)
bdir = tracking beam direction (=edir*sdir*chg)

      edir  sdir  chg  |  tdir  bdir
FODO   1     1     1   |   1     1
FODO  -1     1     1   |  -1    -1
ODOF   1    -1     1   |  -1    -1
ODOF  -1    -1     1   |   1     1

DOFO   1     1    -1   |   1    -1
DOFO  -1     1    -1   |  -1     1
OFOD   1    -1    -1   |  -1     1
OFOD  -1    -1    -1   |   1    -1

Usage of directions:
  - lengths        are multiplied by sdir
  - bending angles are multiplied by tdir
  - strengths      are multiplied by bdir
--]]

-- locals ---------------------------------------------------------------------o

local assertTrue, assertEquals, assertAllAlmostEquals           in MAD.utest
local printf, errorf, openfile, collectlocal                    in MAD.utility
local is_number                                                 in MAD.typeid
local eps, pi                                                   in MAD.constant

local track, beam, element, sequence, option, filesys           in MAD
local fnil, ftrue                                               in MAD.gfunc

local marker, drift, kicker, multipole, sbend, rbend,
      quadrupole, sextupole, octupole, decapole, dodecapole,
      solenoid, elseparator, rfcavity                           in element
local observe                                                   in element.flags

local abs, ceil in math

local dat = assert(loadfile('data/track.dat'))()

local refdir = \s -> 'track_ref/'..(s or '')
local rundir = \s -> 'track_run/'..(s or '')

local tenv = setmetatable(collectlocal(),{__index=_G}) -- ; show(tenv)

filesys.mkdir(rundir()) -- create xxx_run

-- helpers --------------------------------------------------------------------o

local doplot = false

if doplot then
  local pause, atexit in MAD.utility
  atexit(pause, true)
end

local function plot (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title,
             x1y1 = { s={'x','px','y','py','t','pt'} } }
end

local function plotxy (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title, x1y1 = { x='x', y='y'} }
end

-- local -------------------------o

local tblcol = {'name','s','x','px','y','py','t','pt'}
local tblhdr = {'title','type','origin','date','time'}

local slc_p1  = {1}
local slc_p2  = {0.5, 0.5}
local slc_p3  = {1/3, 1/3, 1/3}
local slc_p10 = {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1}

-- sequences ---------------------o

local function mkDRIFT (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local seq = sequence 'seq' { l=10, dir=dir,
    drift 'd1' {at=0.75, l=1.5},
    drift 'd2' {at=5.75, l=1.5},
  }
  return seq   -- :dumpseq()
end

local function mkMULT (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local k1f = 0.25*dir*chg
  local k1d = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    multipole 'm1' {at=0, lrad=1.5, knl={k0f*1.5,k1f*1.5}, angle=k0f*chg*1.5},
    multipole 'm2' {at=5, lrad=1.5, knl={k0d*1.5,k1d*1.5}, angle=k0d*chg*1.5},
  }
  return seq   -- :dumpseq()
end

local function mkMULTs (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local k1f = 0.25*dir*chg
  local k1d = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    multipole 'm1' {at=0, lrad=1.5, knl={k0f*1.5,k1f*1.5}, ksl={k0f*1.5,k1f*1.5*0.8}, angle=k0f*chg*1.5},
    multipole 'm2' {at=5, lrad=1.5, knl={k0d*1.5,k1d*1.5}, ksl={k0d*1.5,k1d*1.5*0.8}, angle=k0d*chg*1.5},
  }
  return seq   -- :dumpseq()
end

local function mkQUAD (dir_, chg_, mul, skw)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local tlt = pi/4*dir*skw
  local k1f = 0.25*dir*chg
  local k1d = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    quadrupole 'm1' {at=0.75, l=1.5, k1  =  k1f*(1-skw)*(1-mul),
                                     k1s =  k1f*   skw *(1-mul),
                                     knl={0,k1f*(1-skw)*   mul*1.5},
                                     ksl={0,k1f*   skw *   mul*1.5}, tilt=tlt},
    quadrupole 'm2' {at=5.75, l=1.5, k1  =  k1d*(1-skw)*(1-mul),
                                     k1s =  k1d*   skw *(1-mul),
                                     knl={0,k1d*(1-skw)*   mul*1.5},
                                     ksl={0,k1d*   skw *   mul*1.5}, tilt=tlt},
  }
  return seq   -- :dumpseq()
end

local function mkQUADs (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k1f = 0.25*dir*chg
  local k1d = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    quadrupole 'm1' {at=0.75, l=1.5, k1  =  k1f*(1-mul),
                                     k1s =  k1d*(1-mul),
                                     knl={0,k1f*   mul*1.5},
                                     ksl={0,k1d*   mul*1.5}},
    quadrupole 'm2' {at=5.75, l=1.5, k1  =  k1d*(1-mul),
                                     k1s =  k1f*(1-mul),
                                     knl={0,k1d*   mul*1.5},
                                     ksl={0,k1f*   mul*1.5}},
  }
  return seq   -- :dumpseq()
end

local function mkQUADf (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k1f = 0.25*dir*chg
  local k1d = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    quadrupole 'm1' {at=0.75, l=1.5, k1  =  k1f*(1-mul),
                                     knl={0,k1f*   mul*1.5}, fringe=7},
    quadrupole 'm2' {at=5.75, l=1.5, k1  =  k1d*(1-mul),
                                     knl={0,k1d*   mul*1.5}, fringe=7},
  }
  return seq   -- :dumpseq()
end

local function mkQUADfs (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k1f = 0.25*dir*chg
  local k1d = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    quadrupole 'm1' {at=0.75, l=1.5, k1  =  k1f*(1-mul),
                                     k1s =  k1d*(1-mul),
                                     knl={0,k1f*   mul*1.5},
                                     ksl={0,k1d*   mul*1.5}, fringe=7},
    quadrupole 'm2' {at=5.75, l=1.5, k1  =  k1d*(1-mul),
                                     k1s =  k1f*(1-mul),
                                     knl={0,k1d*   mul*1.5},
                                     ksl={0,k1f*   mul*1.5}, fringe=7},
  }
  return seq   -- :dumpseq()
end

local function mkQUADh (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0  = 5e-4*dir*chg
  local k1f = 0.25*dir*chg
  local k1d = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    quadrupole 'm1' {at=0.75, l=1.5, k1  =           k1f*(1-mul), k0=k0*(1-mul),
                                     knl={k0*mul*1.5,k1f*   mul*1.5}},
    quadrupole 'm2' {at=5.75, l=1.5, k1  =           k1d*(1-mul), k0=k0*(1-mul),
                                     knl={k0*mul*1.5,k1d*   mul*1.5}},
  }
  return seq   -- :dumpseq()
end

local function mkQUADfh (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0  = 5e-4*dir*chg
  local k1f = 0.25*dir*chg
  local k1d = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    quadrupole 'm1' {at=0.75, l=1.5, k1  =           k1f*(1-mul), k0=k0*(1-mul),
                                     knl={k0*mul*1.5,k1f*   mul*1.5}, fringe=7},
    quadrupole 'm2' {at=5.75, l=1.5, k1  =           k1d*(1-mul), k0=k0*(1-mul),
                                     knl={k0*mul*1.5,k1d*   mul*1.5}, fringe=7},
  }
  return seq   -- :dumpseq()
end

local function mkSEXT (dir_, chg_, mul, skw)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local tlt = pi/6*dir*skw
  local k2f = 0.25*dir*chg*1e2
  local k2d = -0.2*dir*chg*1e2
  local seq = sequence 'seq' { l=10, dir=dir,
    sextupole 'm1' {at=0.75, l=1.5, k2 =     k2f*(1-skw)*(1-mul),
                                    k2s=     k2f*   skw *(1-mul),
                                    knl={0,0,k2f*(1-skw)*   mul*1.5},
                                    ksl={0,0,k2f*   skw *   mul*1.5}, tilt=tlt},
    sextupole 'm2' {at=5.75, l=1.5, k2 =     k2d*(1-skw)*(1-mul),
                                    k2s=     k2d*   skw *(1-mul),
                                    knl={0,0,k2d*(1-skw)*   mul*1.5},
                                    ksl={0,0,k2d*   skw *   mul*1.5}, tilt=tlt},
  }
  return seq   -- :dumpseq()
end

local function mkSEXTs (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k2f = 0.25*dir*chg*1e2
  local k2d = -0.2*dir*chg*1e2
  local seq = sequence 'seq' { l=10, dir=dir,
    sextupole 'm1' {at=0.75, l=1.5, k2 =     k2f*(1-mul),
                                    k2s=     k2d*(1-mul),
                                    knl={0,0,k2f*   mul*1.5},
                                    ksl={0,0,k2d*   mul*1.5}},
    sextupole 'm2' {at=5.75, l=1.5, k2 =     k2d*(1-mul),
                                    k2s=     k2f*(1-mul),
                                    knl={0,0,k2d*   mul*1.5},
                                    ksl={0,0,k2f*   mul*1.5}},
  }
  return seq   -- :dumpseq()
end

local function mkOCTU (dir_, chg_, mul, skw)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local tlt =  pi/8*dir*skw
  local k3f = 0.25*dir*chg*1e4
  local k3d = -0.2*dir*chg*1e4
  local seq = sequence 'seq' { l=10, dir=dir,
    octupole 'm1' {at=0.75, l=1.5, k3 =       k3f*(1-skw)*(1-mul),
                                   k3s=       k3f*   skw *(1-mul),
                                   knl={0,0,0,k3f*(1-skw)*   mul*1.5},
                                   ksl={0,0,0,k3f*   skw *   mul*1.5}, tilt=tlt},
    octupole 'm2' {at=5.75, l=1.5, k3 =       k3d*(1-skw)*(1-mul),
                                   k3s=       k3d*   skw *(1-mul),
                                   knl={0,0,0,k3d*(1-skw)*   mul*1.5},
                                   ksl={0,0,0,k3d*   skw *   mul*1.5}, tilt=tlt},
  }
  return seq   -- :dumpseq()
end

local function mkOCTUs (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k3f = 0.25*dir*chg*1e4
  local k3d = -0.2*dir*chg*1e4
  local seq = sequence 'seq' { l=10, dir=dir,
    octupole 'm1' {at=0.75, l=1.5, k3 =       k3f*(1-mul),
                                   k3s=       k3d*(1-mul),
                                   knl={0,0,0,k3f*   mul*1.5},
                                   ksl={0,0,0,k3d*   mul*1.5}},
    octupole 'm2' {at=5.75, l=1.5, k3 =       k3d*(1-mul),
                                   k3s=       k3f*(1-mul),
                                   knl={0,0,0,k3d*   mul*1.5},
                                   ksl={0,0,0,k3f*   mul*1.5}},
  }
  return seq   -- :dumpseq()
end

local function mkDECA (dir_, chg_, mul, skw)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local tlt =  pi/10*dir*skw
  local k4f =  0.25 *dir*chg*1e6
  local k4d = -0.2  *dir*chg*1e6
  local seq = sequence 'seq' { l=10, dir=dir,
    decapole 'm1' {at=0.75, l=1.5, k4  =        k4f*(1-skw)*(1-mul),
                                   k4s =        k4f*   skw *(1-mul),
                                   knl={0,0,0,0,k4f*(1-skw)*   mul*1.5},
                                   ksl={0,0,0,0,k4f*   skw *   mul*1.5}, tilt=tlt},
    decapole 'm2' {at=5.75, l=1.5, k4  =        k4d*(1-skw)*(1-mul),
                                   k4s =        k4d*   skw *(1-mul),
                                   knl={0,0,0,0,k4d*(1-skw)*   mul*1.5},
                                   ksl={0,0,0,0,k4d*   skw *   mul*1.5}, tilt=tlt},
  }
  return seq   -- :dumpseq()
end

local function mkDODECA (dir_, chg_, mul, skw)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local tlt =  pi/12*dir*skw
  local k5f =  0.25 *dir*chg*1e8
  local k5d = -0.2  *dir*chg*1e8
  local seq = sequence 'seq' { l=10, dir=dir,
    dodecapole 'm1' {at=0.75, l=1.5, k5  =          k5f*(1-skw)*(1-mul),
                                     k5s =          k5f*   skw *(1-mul),
                                     knl={0,0,0,0,0,k5f*(1-skw)*   mul*1.5},
                                     ksl={0,0,0,0,0,k5f*   skw *   mul*1.5}, tilt=tlt},
    dodecapole 'm2' {at=5.75, l=1.5, k5  =          k5d*(1-skw)*(1-mul),
                                     k5s =          k5d*   skw *(1-mul),
                                     knl={0,0,0,0,0,k5d*(1-skw)*   mul*1.5},
                                     ksl={0,0,0,0,0,k5d*   skw *   mul*1.5}, tilt=tlt},
  }
  return seq   -- :dumpseq()
end

local function mkKICK (dir_, chg_, mul, skw)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local tlt = pi/2*dir*skw
  local k0f = 0.25*dir*chg*1e-4
  local k0d = -0.2*dir*chg*1e-4
  local seq = sequence 'seq' { l=10, dir=dir,
    kicker 'm1' {at=0.75, l=1.5, hkick=k0f*(1-skw)*(1-mul),
                                 vkick=k0f*   skw *(1-mul),
                                 knl={-k0f*(1-skw)*   mul},
                                 ksl={ k0f*   skw *   mul}, tilt=-tlt},
    kicker 'm2' {at=5.75, l=1.5, hkick=k0d*   skw *(1-mul),
                                 vkick=k0d*(1-skw)*(1-mul),
                                 knl={-k0d*   skw *   mul},
                                 ksl={ k0d*(1-skw)*   mul}, tilt=tlt},
  }
  return seq   -- :dumpseq()
end

local function mkSOL (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local ksf = 0.25*dir*chg
  local ksd = -0.2*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    solenoid 'm1' {at=0.75, l=1.5, ks=ksf*(1-mul), ksi=ksf*mul*1.5},
    solenoid 'm2' {at=5.75, l=1.5, ks=ksd*(1-mul), ksi=ksd*mul*1.5},
  }
  return seq   -- :dumpseq()
end

local function mkSEP (dir_, chg_, mul, skw)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local tlt = pi/2*dir*skw
  local kf  =  5*dir*chg
  local kd  = -4*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    elseparator 'm1' {at=0.75, l=1.5, ex =kf*(1-skw)*(1-mul)   ,
                                      ey =kf*   skw *(1-mul)   ,
                                      exl=kf*(1-skw)*   mul*1.5,
                                      eyl=kf*   skw *   mul*1.5, tilt=tlt},
    elseparator 'm2' {at=5.75, l=1.5, ex =kd*(1-skw)*(1-mul)   ,
                                      ey =kd*   skw *(1-mul)   ,
                                      exl=kd*(1-skw)*   mul*1.5,
                                      eyl=kd*   skw *   mul*1.5, tilt=tlt},
  }
  return seq   -- :dumpseq()
end

local function mkSBEND (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    sbend 'm1' {at=0.75, l=1.5, k0=k0f*(1-mul), knl={k0f*mul*1.5}, angle=k0f*chg*1.5,
                kill_ent_fringe=true, kill_exi_fringe=true},
    sbend 'm2' {at=5.75, l=1.5, k0=k0d*(1-mul), knl={k0d*mul*1.5}, angle=k0d*chg*1.5,
                kill_ent_fringe=true, kill_exi_fringe=true},
  }
  return seq   -- :dumpseq()
end

local function mkSBENDf (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    sbend 'm1' {at=0.75, l=1.5, k0=k0f*(1-mul), knl={k0f*mul*1.5}, angle=k0f*chg*1.5},
    sbend 'm2' {at=5.75, l=1.5, k0=k0d*(1-mul), knl={k0d*mul*1.5}, angle=k0d*chg*1.5},
  }
  return seq   -- :dumpseq()
end

local function mkSBENDf2 (dir_, chg_, mul)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local e1  = \s -> s.angle/2
  local e2  = \s -> s.angle/1.5
  local seq = sequence 'seq' { l=10, dir=dir,
    sbend 'm1' {at=0.75, l=1.5, k0=k0f*(1-mul), knl={k0f*mul*1.5}, angle=k0f*chg*1.5,
                                hgap=0.03, e1=e1, e2=e2, fint=0.8, fringe=7},
    sbend 'm2' {at=5.75, l=1.5, k0=k0d*(1-mul), knl={k0d*mul*1.5}, angle=k0d*chg*1.5,
                                hgap=0.03, e1=e1, e2=e2, fint=0.8, fringe=7},
  }
  return seq   -- :dumpseq()
end

local function mkRBEND (dir_, chg_, mul) -- MAD-X like RBEND
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    rbend 'm1' {at=0.75, l=1.5, k0=k0f*(1-mul), knl={k0f*mul*1.5}, angle=k0f*chg*1.5,
                kill_ent_fringe=true, kill_exi_fringe=true},
    rbend 'm2' {at=5.75, l=1.5, k0=k0d*(1-mul), knl={k0d*mul*1.5}, angle=k0d*chg*1.5,
                kill_ent_fringe=true, kill_exi_fringe=true},
  }
  return seq   -- :dumpseq()
end

local function mkRBENDf (dir_, chg_, mul) -- MAD-X like RBEND
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local seq = sequence 'seq' { l=10, dir=dir,
    rbend 'm1' {at=0.75, l=1.5, k0=k0f*(1-mul), knl={k0f*mul*1.5}, angle=k0f*chg*1.5},
    rbend 'm2' {at=5.75, l=1.5, k0=k0d*(1-mul), knl={k0d*mul*1.5}, angle=k0d*chg*1.5},
  }
  return seq   -- :dumpseq()
end

local function mkCAV0 (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local vlt = 8*dir*chg -- MV
  local seq = sequence 'seq' { l=10, dir=dir,
    rfcavity 'm1' {at=0, l=0, volt=vlt, freq=150, lag=0.6},
    rfcavity 'm2' {at=5, l=0, volt=vlt, freq=150, lag=0.6},
  }
  return seq   -- :dumpseq()
end

local function mkCAVt (dir_, chg_) -- MAD-X like rfcavity
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local vlt = 8*dir*chg -- MV
  local seq = sequence 'seq' { l=10, dir=dir,
    rfcavity 'm1' {at=0.75, l=1.5, volt=vlt, freq=150, lag=0.6, no_cavity_totalpath=true},
    rfcavity 'm2' {at=5.75, l=1.5, volt=vlt, freq=150, lag=0.6, no_cavity_totalpath=true},
  }
  return seq   -- :dumpseq()
end

local function mkCAV (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local vlt = 8*dir*chg -- MV
  local seq = sequence 'seq' { l=10, dir=dir,
    rfcavity 'm1' {at=0.75, l=1.5, volt=vlt, freq=150, lag=0.6},
    rfcavity 'm2' {at=5.75, l=1.5, volt=vlt, freq=150, lag=0.6},
  }
  return seq   -- :dumpseq()
end

local function mkCAVh (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local vlt = 8*dir*chg -- MV
  local seq = sequence 'seq' { l=10, dir=dir,
    rfcavity 'm1' {at=0.75, l=1.5, volt=vlt, harmon=2, lag=0.6},
    rfcavity 'm2' {at=5.75, l=1.5, volt=vlt, harmon=2, lag=0.6},
  }
  return seq   -- :dumpseq()
end

local function mkCAVb (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local vlt = 8*dir*chg -- MV
  local seq = sequence 'seq' { l=10, dir=dir,
    rfcavity 'm1' {at=0.75, l=1.5, volt=vlt, freq=150, lag=0.6, n_bessel=3},
    rfcavity 'm2' {at=5.75, l=1.5, volt=vlt, freq=150, lag=0.6, n_bessel=3},
  }
  return seq   -- :dumpseq()
end

local function mkCAVf (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local vlt = 8*dir*chg -- MV
  local seq = sequence 'seq' { l=10, dir=dir,
    rfcavity 'm1' {at=0.75, l=1.5, volt=vlt, freq=150, lag=0.6, fringe=1},
    rfcavity 'm2' {at=5.75, l=1.5, volt=vlt, freq=150, lag=0.6, fringe=1},
  }
  return seq   -- :dumpseq()
end

-- Generate All Testsuites ----------------------------------------------------o

local dodmp = false  -- false or 2
local dofil = false  -- false
local doprt = false  -- false
local dochk = true   -- true

local useX0 = false -- {0,0,0,0,-4.4061878590184733e-09,-3.1280358790126764e-03}

local t = 'teapot'

collectlocal(1, tenv) -- collect locals

local TODO    = {RBENDptc=true}
local has_MUL = {SBEND=true, SBENDf=true, SBENDf2=true,
                 RBEND=true, RBENDf=true, RBENDptc=true,
                 QUAD=true, QUADs=true, QUADh=true, QUADf=true, QUADfs=true, QUADfh=true,
                 SEXT=true, SEXTs=true, OCTU=true, OCTUs=true, DECA=true, DODECA=true,
                 KICK=true, SEP=true, SOL=true,}
local has_SKW = {QUAD=true, SEXT=true, OCTU=true, DECA=true, DODECA=true,
                 KICK=true, SEP=true,}

for _,e in ipairs{'DRIFT','MULT','MULTs','KICK','SOL','SEP',
                  'CAV0','CAVt','CAV','CAVh','CAVb','CAVf',
                  'QUAD','QUADs','QUADh','QUADf','QUADfs','QUADfh',
                  'SEXT','SEXTs','OCTU','OCTUs','DECA','DODECA',
                  'SBEND','SBENDf','SBENDf2','RBEND','RBENDf'
                } do

if not TODO[e] then -- prevent to run tests not yet finalized

-- generate prelude
local s = [[
_G['TestTrack${e}'] = {}

function TestTrack${e}:setUp ()
  self.optfmt, option.format = option.format, "%-.16e"
end

function TestTrack${e}:tearDown ()
  option.format = self.optfmt
end]]
% { e=e }

-- load prelude within the current context
local f = assert(loadstring(s)) ; setfenv(f, tenv) ; f()

for _,d in ipairs{0, 2} do                   -- mapdef
for _,o in ipairs{2,'t',4,6,8} do            -- orders
for _,m in ipairs{'DKD', 'TKT'} do           -- models

local t = m == 'TKT' and 't' or ''

-- keep only useful combinations of PTC cross checks
if d == 0 and dat[e]['p'..o..t] then

-- generate cross checks
local s = [[
 assert( TestTrack${e}.test${m}${o}vsPTC == nil,
        "TestTrack${e}.test${m}${o}vsPTC already defined" )
function TestTrack${e}:test${m}${o}vsPTC ()
  local m, p, me = dat.${e}.x${o}${t}, dat.${e}.p${o}${t}
  if doprt then
    io.write("eps_p={")
    for i=1,#m do me=0 for j=1,6 do
      local er = ceil(abs(m[i][j]-p[i][j])/eps)
      if er > me then me = er end
      end printf("%d,", me)
    end
    io.write("} -- ${m}${o}\n")
  end
  if dochk then
    local tol = dat.${e}.eps_${c}
    if tol and tol >= 0 then
      for i=1,#m do assertAllAlmostEquals(m[i], p[i], tol*eps) end
    end
  end
end]]
% { e=e, m=m, o=o, t=t, c=({DKD='p', TKT='q'})[m] }

-- load cross checks within the current context
local f = assert(loadstring(s)) ; setfenv(f, tenv) ; f()

end -- cross checks

-- keep only useful combinations of Model/Order cross checks
if dat[e]['x'..o..t] then

for _,z in ipairs{'K', 'M'} do               -- strength/multipoles

-- discard invalid combinations
if z == 'K' or z == 'M' and has_MUL[e] then

for _,w in ipairs{'N', 'S'} do               -- normal/skew

-- discard invalid combinations
if w == 'N' or w == 'S' and has_SKW[e] then

for _,k in ipairs{'',                 -- simple
                  'B', 'R', 'N', 'P', -- backward, reverse, negative, position
                  'BR', 'BN', 'BP', 'RN', 'RP', 'NP',
                  'BRN', 'BRP', 'BNP', 'RNP', 'BRNP'} do

-- discard invalid combinations (e.g. teapot and slices position)
if not (o == 't' and string.find(k,'P',1,true)) then

  -- generate test (adjust DKD2N0K first)
  local s = [[
 assert( TestTrack${e}.test${m}${o}${w}${d}${z}${k} == nil,
        "TestTrack${e}.test${m}${o}${w}${d}${z}${k} already defined" )
function TestTrack${e}:test${m}${o}${w}${d}${z}${k} ()
  local seq  = mk${e}(${r},${s},${y},${j})
  local beam = beam { particle = ${s}>0 and 'positron' or 'electron' }
  for i=1,#dat.X0 do
    if doprt and i == 1 then io.write('\n') end
    local X0   = useX0 or ${b}>0 and dat.X0[i] or dat.${e}.x${o}${t}[i]
    local mtbl, mflw = track {sequence=seq, beam=beam, X0=X0, observe=0, dir=${b},
                        mapdef=${a}, model='${i}', method=${o}, mapdump=dodmp,
                        nslice=${p}${n}, save='atbody', ptcmodel=true}
    if dofil then
      mtbl:write(rundir('${e}_${m}${o}${w}${d}${z}${k}_'..i),tblcol,tblhdr)
    end
    if mflw.npar ~= mflw.tpar then
      for i=mflw.npar+1,mflw.tpar do
        printf("id=%d, status='%s'\n", mflw[i].id, mflw[i].status)
      end
      errorf("%d particle lost during test (unexpected)", mflw.tpar - mflw.npar)
    end
    local row = assert(mtbl[#mtbl], "last row of mtable not found")
    local res = {row.x, row.px, row.y, row.py, row.t, row.pt}
    local ref = ${b}<0 and dat.X0[i] or dat.${e}.x${o}${t}[i]
    if doprt then
      if dochk then
        printf("tol[%d]={",i) -- print eps scales
        for i=1,#res do printf("%d,", ceil(abs(res[i]-ref[i])/eps)) end
        io.write("} -- ${m}${o}${w}${d}${z}${k}\n")
      else
        io.write(string.format(
          "{% .16e,% .16e,% .16e,% .16e,% .16e,% .16e}, -- ${m}${o}${w}${d}${z}${k}\n",
            res[1],res[2],res[3],res[4],res[5],res[6]))
      end
    end
    if dochk then
      local tol = dat.${e}.eps_${c}
      assertAllAlmostEquals(res, ref, tol*eps)
    end
  end
end]]
% { e=e, m=m, o=o, w=w, d=d, z=z, k=k, t=t,
    i=({DKD='DKD', TKT='TKT'})[m],
    n=({DKD=3    , TKT=1    })[m],
    j=({N=0      , S=1      })[w],
    y=({K=0      , M=1      })[z],
    a=({[0]=false, [2]=true})[d],
    b = string.find(k,'B',1,true) and -1 or 1,        -- track dir
    r = string.find(k,'R',1,true) and -1 or 1,        -- sequ  dir
    s = string.find(k,'N',1,true) and -1 or 1,        -- charge sign
    p = string.find(k,'P',1,true) and 'slc_p' or '',  -- position
    c = d >  0   and 't' or           -- eps_{d,t,s,b}
        w == 'S' and 's' or
        string.find(k,'B',1,true) and 'b' or 'd',
  }

-- load test within the current context
local f = assert(loadstring(s)) ; setfenv(f, tenv) ; f()

end -- if  o is 't'
end -- for k
end -- if  w
end -- for w
end -- if  z
end -- for z
end -- if  dat
end -- for m
end -- for o
end -- for d
end -- if  e
end -- for e

-- end ------------------------------------------------------------------------o
