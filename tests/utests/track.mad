--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Tecker, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the track module.

 o-----------------------------------------------------------------------------o
]=]

--[[
chg  = particle charge
dir  = sequence direction (e.g. lhcb2, dir=-1)
sdir = tracking s-direction
tdir = tracking t-direction (=dir*sdir)
bdir = tracking b-direction (=dir*sdir*chg)

      dir   sdir  chg  |  tdir  bdir
FODO   1     1     1   |   1     1
FODO  -1     1     1   |  -1    -1
ODOF   1    -1     1   |  -1    -1
ODOF  -1    -1     1   |   1     1

DOFO   1     1    -1   |   1    -1
DOFO  -1     1    -1   |  -1     1
OFOD   1    -1    -1   |  -1     1
OFOD  -1    -1    -1   |   1    -1

Usage of directions:
  - lengths        are multiplied by sdir
  - bending angles are multiplied by tdir
  - strengths      are multiplied by bdir
--]]

-- locals ---------------------------------------------------------------------o

local assertTrue, assertEquals, assertAllAlmostEquals           in MAD.utest
local printf, openfile, collectlocal                            in MAD.utility
local eps, pi                                                   in MAD.constant

local track, beam, element, sequence, option, filesys           in MAD
local fnone, ftrue                                              in MAD.gfunc

local marker, drift, sbend, rbend, quadrupole, multipole        in element
local observe                                                   in element.flags

local refdir = \s -> 'track_ref/'..(s or '')
local rundir = \s -> 'track_run/'..(s or '')

local tenv = setmetatable(collectlocal(),{__index=_G}) -- ; show(tenv)

filesys.mkdir(rundir()) -- create xxx_run

-- helpers --------------------------------------------------------------------o

local doplot = false

if doplot then
  MAD.atexit(MAD.utility.pause, true)
end

local function plot (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title,
             x1y1 = { s={'x','px','y','py','t','pt'} } }
end

local function plotxy (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title, x1y1 = { x='x', y='y'} }
end

-- local -------------------------o

local tbl_col = {'name','s','x','px','y','py','t','pt'}
local tbl_hdr = {'title','type','origin','date','time'}

local slc_p1  = {1}
local slc_p2  = {0.5, 0.5}
local slc_p10 = {0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1}

-- QUAD Testsuite -------------------------------------------------------------o

local QUAD_x0  = {0, 1e-6, 0, 5e-7, 0, 0}

-- track
local QUAD_mdx = {1.460761371e-05    , 2.360452481e-06    , 1.797764445e-06    , -3.929287342e-07    , -1.454192453e-11    , 0}

-- DKD MAD
local QUAD_xs  = {1.4600656220217e-05, 2.3588119782185e-06, 1.7943847978254e-06, -3.9372067136230e-07, -1.4531875702772e-11, 0} -- simple=yoshida2
local QUAD_xt  = {1.4606200539093e-05, 2.3602690620606e-06, 1.7977500040831e-06, -3.9282268749294e-07, -1.4538426018618e-11, 0} -- teapot
local QUAD_x2  = {1.4600656220217e-05, 2.3588119782185e-06, 1.7943847978254e-06, -3.9372067136230e-07, -1.4531875702772e-11, 0} -- yoshida2
local QUAD_x4  = {1.4607603046229e-05, 2.3604497079904e-06, 1.7977728935816e-06, -3.9292618283356e-07, -1.4541645665389e-11, 0} -- yoshida4
local QUAD_x6  = {1.4607613705636e-05, 2.3604524793349e-06, 1.7977644418495e-06, -3.9292873471424e-07, -1.4541645665389e-11, 0} -- yoshida6
local QUAD_x8  = {1.4607613712814e-05, 2.3604524808132e-06, 1.7977644446180e-06, -3.9292873420957e-07, -1.4541812198843e-11, 0} -- yoshida8

-- DKD PTC
local QUAD_p2  = {1.4607613712814E-05, 2.3604524808134E-06, 1.7977644446181E-06, -3.9292873420967E-07, -1.4269030401692E-11, 0} -- yoshida2
local QUAD_p4  = {1.4607613712814E-05, 2.3604524808134E-06, 1.7977644446181E-06, -3.9292873420967E-07, -1.4269030401692E-11, 0} -- yoshida4
local QUAD_p6  = {1.4607613712814E-05, 2.3604524808134E-06, 1.7977644446181E-06, -3.9292873420967E-07, -1.4269030401692E-11, 0} -- yoshida6

-- TKT MAD
local QUAD_xst = {1.4607613712814e-05, 2.3604524808134e-06, 1.7977644446181e-06, -3.9292873420967e-07, -1.4268142223273e-11, 0} -- simple=yoshida2
local QUAD_xtt = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4544476734102e-11, 0} -- teapot
local QUAD_x2t = {1.4607613712814e-05, 2.3604524808134e-06, 1.7977644446181e-06, -3.9292873420967e-07, -1.4268142223273e-11, 0} -- yoshida2
local QUAD_x4t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420967e-07, -1.4538148462861e-11, 0} -- yoshida4
local QUAD_x6t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4541257087330e-11, 0} -- yoshida6
local QUAD_x8t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4542589354960e-11, 0} -- yoshida8

-- TKT PTC
local QUAD_p2t = {1.4607613712814E-05, 2.3604524808134E-06, 1.7977644446181E-06, -3.9292873420967E-07, -1.4269030401692E-11, 0} -- yoshida2
local QUAD_p4t = {1.4607613712814E-05, 2.3604524808134E-06, 1.7977644446181E-06, -3.9292873420967E-07, -1.4269030401692E-11, 0} -- yoshida4
local QUAD_p6t = {1.4607613712814E-05, 2.3604524808134E-06, 1.7977644446181E-06, -3.9292873420967E-07, -1.4269030401692E-11, 0} -- yoshida6

-- ptc_create_layout, model=2, method=2, nst=2, time=true, exact=true;
-- ptc_track, icase=56, closed_orbit=false, dump, onetable, element_by_element, file="ptctrack_quad_madx.";

local function mkQUAD (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k1f =  0.2110222185*dir*chg
  local k1d = -0.2110222186*dir*chg
  local seq = sequence 'seq' { l=10, refer='entry', dir=dir,
    quadrupole 'm1' {at=0  , l=1.5, k1:=k1f}, -- [1]=multipole{at=0.5}},
    drift      'd1' {at=1.5, l=3.5},
    quadrupole 'm2' {at=5  , l=1.5, k1:=k1d}, -- [1]=multipole{at=0.5}},
    drift      'd2' {at=6.5, l=3.5},
  }
  return seq   -- seq:dumpseq()
end

-- RBEND Testsuite ------------------------------------------------------------o

-- SBEND Testsuite ------------------------------------------------------------o

-- generate all testsuites ----------------------------------------------------o

local doprt = false

collectlocal(1, tenv) -- collect locals

for _,e in ipairs{'QUAD'} do          -- elements TODO: RBEND, SBEND

  -- prelude
  local s = [[
  _G['TestTrack${e}'] = {}

  function TestTrack${e}:setUp ()
    self.optfmt, option.format = option.format, "%-.16e"
  end

  function TestTrack${e}:tearDown ()
    option.format = self.optfmt
  end
  ]] % { e=e }

  local f = assert(loadstring(s)) ; setfenv(f, tenv) ; f()

for _,o in ipairs{2,4,6,8} do         -- orders
for _,m in ipairs{'DKD', 'TKT'} do    -- models
for _,k in ipairs{'',                 -- simple
                  'B', 'R', 'N', 'P', -- backward, reverse, negative, position
                  'BR', 'BN', 'BP', 'RN', 'RP', 'NP',
                  'BRN', 'BRP', 'BNP', 'RNP', 'BRNP'} do
  -- test
  local s = [[
  function TestTrack${e}:test${m}${n}Y${o}${k} ()
    local seq  = mk${e}(${r},${s})
    local beam = beam { particle = ${s}>0 and 'positron' or 'electron' }
    local X0   = ${b}>0 and ${e}_x0 or ${e}_x${o}${t}
    local mtbl, mflw = track {sequence=seq, beam=beam, X0=X0, observe=0, model='${m}', method=${o}, nslice=${p}${n}, dir=${b} }

    mtbl:write(rundir('${e}_${m}${n}Y${o}${k}'), tbl_col, tbl_hdr)

    if ${b} < 0 and ${o} == 1 then return end

    local row = mtbl[#mtbl]
    local res = {row.x, row.px, row.y, row.py, row.t, row.pt}
    local ref = ${b}<0 and ${e}_x0 or ${e}_x${o}${t}

    if doprt then print(res[1],res[2],res[3],res[4],res[5],res[6]) end
    if ${b} < 0 and ${o} == 1 then return end
    assertAllAlmostEquals(res, ref, ${c}*eps)
  end
  ]] % { e=e, o=o, m=m, k=k,
         n=({DKD=10, TKT=1  })[m],
         t=({DKD='', TKT='t'})[m],
         c = string.find(k,'B',1,true) and  2 or 1,        -- eps
         b = string.find(k,'B',1,true) and -1 or 1,        -- track dir
         r = string.find(k,'R',1,true) and -1 or 1,        -- sequ dir
         s = string.find(k,'N',1,true) and -1 or 1,        -- charge sign
         p = string.find(k,'P',1,true) and 'slc_p' or '' } -- position

  local f = assert(loadstring(s)) ; setfenv(f, tenv) ; f()

end end end end

-- RBEND Testsuite ------------------------------------------------------------o

local rbend_x0  = {0, 1e-6, 0, 5e-7, 0, 0}

local rbend_xs  = {1.4600656220217e-05, 2.3588119782185e-06, 1.7943847978254e-06, -3.9372067136230e-07, -1.4531875702772e-11, 0}
local rbend_xt  = {1.4606200539093e-05, 2.3602690620606e-06, 1.7977500040831e-06, -3.9282268749294e-07, -1.4538426018618e-11, 0}
local rbend_x4  = {1.4607603046229e-05, 2.3604497079904e-06, 1.7977728935816e-06, -3.9292618283356e-07, -1.4541645665389e-11, 0}
local rbend_x6  = {1.4607613705636e-05, 2.3604524793349e-06, 1.7977644418495e-06, -3.9292873471424e-07, -1.4541645665389e-11, 0}
local rbend_x8  = {1.4607613712814e-05, 2.3604524808132e-06, 1.7977644446180e-06, -3.9292873420957e-07, -1.4541812198843e-11, 0}

local rbend_xst = {1.4607613712814e-05, 2.3604524808134e-06, 1.7977644446181e-06, -3.9292873420967e-07, -1.4268142223273e-11, 0}
local rbend_xtt = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4544476734102e-11, 0}
local rbend_x4t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420967e-07, -1.4538148462861e-11, 0}
local rbend_x6t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4541257087330e-11, 0}
local rbend_x8t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4542589354960e-11, 0}

local rbend_ptc = {9.9991224821975E-06, 9.9999999996978E-07, 4.9823188081225E-06,  4.9620128226007E-07,  2.0944553602575E-07, 0}
local rbend_mdx = {}
-- ptc_create_layout, model=2, method=2, nst=1, time=true, exact=true;
-- ptc_track, icase=56, closed_orbit=false, dump, onetable, element_by_element, file="ptctrack_rbend_madx.";

local function mkRBEND (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local seq = sequence 'seq' { l=10, refer='entry', dir=dir,
    rbend 'm1' {at=0  , l=1.5, k0:=k0f, angle:=k0f},
    drift 'd1' {at=1.5, l=3.5},
    rbend 'm2' {at=5  , l=1.5, k0:=k0d, angle:=k0d},
    drift 'd2' {at=6.5, l=3.5},
  }
  return seq   -- seq:dumpseq()
end

TestTrackRBEND = {}

function TestTrackRBEND:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.format
  option.format = "%-.16e"
end

function TestTrackRBEND:tearDown ()
  option.format = self.optfmt
end

-- DKD model ---------------o

function TestTrackRBEND:testDKD10S () -- simple
  local seq = mkRBEND()
  local X0 = rbend_x0
  local mtbl, mflw = track {sequence=seq, beam=beam, X0=X0, observe=0, model='DKD', nslice=10 }

  mtbl:write(rundir('rbend_dkd10s'), tbl_col, tbl_hdr)

  local row = mtbl[#mtbl]
  local res = {row.x, row.px, row.y, row.py, row.t, row.pt}
  local ref = rbend_xs
--  assertAllAlmostEquals(res, ref, eps)
end

-- TKT model ---------------o

function TestTrackRBEND:testTKT1S () -- simple
  local seq = mkRBEND()
  local X0 = rbend_x0
  local mtbl, mflw = track {sequence=seq, beam=beam, X0=X0, observe=0 }

  mtbl:write(rundir('rbend_tkt1s'), tbl_col, tbl_hdr)

  local row = mtbl[#mtbl]
  local res = {row.x, row.px, row.y, row.py, row.t, row.pt}
  local ref = rbend_xst
--  assertAllAlmostEquals(res, ref, eps)
end

-- SBEND Testsuite ------------------------------------------------------------o

local sbend_x0  = {0, 1e-6, 0, 5e-7, 0, 0}

local sbend_xs  = {1.4600656220217e-05, 2.3588119782185e-06, 1.7943847978254e-06, -3.9372067136230e-07, -1.4531875702772e-11, 0}
local sbend_xt  = {1.4606200539093e-05, 2.3602690620606e-06, 1.7977500040831e-06, -3.9282268749294e-07, -1.4538426018618e-11, 0}
local sbend_x4  = {1.4607603046229e-05, 2.3604497079904e-06, 1.7977728935816e-06, -3.9292618283356e-07, -1.4541645665389e-11, 0}
local sbend_x6  = {1.4607613705636e-05, 2.3604524793349e-06, 1.7977644418495e-06, -3.9292873471424e-07, -1.4541645665389e-11, 0}
local sbend_x8  = {1.4607613712814e-05, 2.3604524808132e-06, 1.7977644446180e-06, -3.9292873420957e-07, -1.4541812198843e-11, 0}

local sbend_xst = {1.4607613712814e-05, 2.3604524808134e-06, 1.7977644446181e-06, -3.9292873420967e-07, -1.4268142223273e-11, 0}
local sbend_xtt = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4544476734102e-11, 0}
local sbend_x4t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420967e-07, -1.4538148462861e-11, 0}
local sbend_x6t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4541257087330e-11, 0}
local sbend_x8t = {1.4607613712814e-05, 2.3604524808133e-06, 1.7977644446178e-06, -3.9292873420968e-07, -1.4542589354960e-11, 0}

local sbend_ptc = {9.9991224821975E-06, 9.9999999996978E-07, 4.9823188081225E-06,  4.9620128226007E-07,  2.0944553602575E-07, 0}
local sbend_mdx = {}
-- ptc_create_layout, model=2, method=2, nst=1, time=true, exact=true;
-- ptc_track, icase=56, closed_orbit=false, dump, onetable, element_by_element, file="ptctrack_sbend_madx.";

local function mkSBEND (dir_, chg_)
  local dir = dir_ or 1 -- sequence direction
  local chg = chg_ or 1 -- particle charge
  local k0f =  2*pi/1e2/1.5*dir*chg
  local k0d = -2*pi/1e2/1.5*dir*chg
  local seq = sequence 'seq' { l=10, refer='entry', dir=dir,
    sbend 'm1' {at=0  , l=1.5, k0:=k0f, angle:=k0f},
    drift 'd1' {at=1.5, l=3.5},
    sbend 'm2' {at=5  , l=1.5, k0:=k0d, angle:=k0d},
    drift 'd2' {at=6.5, l=3.5},
  }
  return seq   -- seq:dumpseq()
end

TestTrackSBEND = {}

function TestTrackSBEND:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.format
  option.format = "%-.16e"
end

function TestTrackSBEND:tearDown ()
  option.format = self.optfmt
end

-- DKD model ---------------o

function TestTrackSBEND:testDKD10S () -- simple
  local seq = mkSBEND()
  local X0 = sbend_x0
  local mtbl, mflw = track {sequence=seq, beam=beam, X0=X0, observe=0, model='DKD', nslice=10 }

  mtbl:write(rundir('sbend_dkd10s'), tbl_col, tbl_hdr)

  local row = mtbl[#mtbl]
  local res = {row.x, row.px, row.y, row.py, row.t, row.pt}
  local ref = sbend_xs
--  assertAllAlmostEquals(res, ref, eps)
end

-- TKT model ---------------o

function TestTrackSBEND:testTKT1S () -- simple
  local seq = mkSBEND()
  local X0 = sbend_x0
  local mtbl, mflw = track {sequence=seq, beam=beam, X0=X0, observe=0 }

  mtbl:write(rundir('sbend_tkt1s'), tbl_col, tbl_hdr)

  local row = mtbl[#mtbl]
  local res = {row.x, row.px, row.y, row.py, row.t, row.pt}
  local ref = sbend_xst
--  assertAllAlmostEquals(res, ref, eps)
end

-- Drift ----------------------------------------------------------------------o

--[[ TO REVIEW

TestTrackDrift = {}

local function prt_map_info (elm, m, l, i)
  io.write(elm.name, "[", i, "]: ", m.x, ", ", m.y, ", ", m.t, "\n")
end

local function fill_tbl (elm, m, l, i)
  local mtable in m
  -- keep order!
  mtable = mtable + { elm.name..'..'..i, elm.kind,
                      m.s+l*i, l, m.x, m.px, m.y, m.py, m.t, m.pt }
end

local function fill_tbl_1000 (elm, m, l, i)
  local mtable in m
  -- keep order!
  if i % 1000 == 0 then
    mtable = mtable + { elm.name..'..'..i, elm.kind,
                        m.s+l*i, l, m.x, m.px, m.y, m.py, m.t, m.pt }
  end
end

function TestTrackDrift:setUp ()
  self.optfmt = option.format
  option.format = "%-18.11g"
end

function TestTrackDrift:tearDown ()
  option.format = self.optfmt
end

function TestTrackDrift:testSimple()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1 } }
  seq:select(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1} }
  assertEquals(#tbl, 3)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testBacktrack()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1 } }
  seq:select(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1}, dir=-1 }
  assertEquals(#tbl, 3)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testBackAndForth()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1 } }
  seq:select(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl, map = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1} }
  track { dir=-1, mtable=tbl, mflow=map }
  assertEquals(#tbl, 3*2)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testNST()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1, nstep=10 }}
  seq:select(observe)
  seq.df:set_methods { naction=fill_tbl }
  seq.df:deselect(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1} }
  assertEquals(#tbl, 3+seq.df.nstep)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testBacktrackNST()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1, nstep=10 }}
  seq:select(observe)
  seq.df:set_methods { naction=fill_tbl }
  seq.df:deselect(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1}, dir=-1 }
  assertEquals(#tbl, 3+seq.df.nstep)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testBackAndForthNST()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1, nstep=10 }}
  seq:select(observe)
  seq.df:set_methods { naction=fill_tbl }
  seq.df:deselect(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl, map = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1} }
  track { dir=-1, mtable=tbl, mflow=map }
  assertEquals(#tbl, (3+seq.df.nstep)*2)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testManyNST()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1, nstep=1e4 }}
  seq:select(observe)
  seq.df:set_methods { naction=fill_tbl_1000 }
  seq.df:deselect(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1} }
  assertEquals(#tbl, 3+seq.df.nstep/1e3)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testBacktrackManyNST()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1, nstep=1e4 }}
  seq:select(observe)
  seq.df:set_methods { naction=fill_tbl_1000 }
  seq.df:deselect(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1}, dir=-1 }
  assertEquals(#tbl, 3+seq.df.nstep/1e3)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testBackAndForthManyNST()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1, nstep=1e4 }}
  seq:select(observe)
  seq.df:set_methods { naction=fill_tbl_1000 }
  seq.df:deselect(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl, map = track { sequence=seq, beam=beam, X0={1, 0.1, -1, -0.1, 0, 0.1} }
  track { dir=-1, mtable=tbl, mflow=map }
  assertEquals(#tbl, (3+seq.df.nstep/1e3)*2)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testBackAndForthAccuracy()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1, nstep=10 } }
  seq.df:select(observe)

  local beam = beam { particle='proton', energy=100 }
  local tbl, map = track { sequence=seq, beam=beam, X0={1e-3, 1e-8, -1e-3, -1e-8, 0, 1e-8} }
  for i=1,999 do
    track { dir=-map.mdir, mtable=tbl, mflow=map }
  end
  assertEquals(#tbl, 1000)
  print()
  tbl:write(io.stdout)
end

function TestTrackDrift:testManyTurnsBackAndForthAccuracy()
  local seq = sequence 'seq' { refer='entry', drift 'df' { l=1, nstep=10 } }
  seq.df:select(observe)

  local beam = beam { particle='proton', energy=100 }
  local X0 = {1e-3, 1e-9, -1e-3, -1e-9, 0, 1e-6}
  local tbl, map = track { sequence=seq, beam=beam, X0=X0, nturn=999 }
  track { dir=-1, mtable=tbl, mflow=map, nturn=999 }
  assertEquals(#tbl, 2000)
  local res = tbl[-1]
  print()
  for i=1,#res do print('res:',i,res[i]) end

  assertAllAlmostEquals(tbl[-1], X0, 1e-14)
--  print()
--  tbl:write(io.stdout)
end

]]

-- end ------------------------------------------------------------------------o
