--[=[
 o-----------------------------------------------------------------------------o
 |
 | Track tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: I. Tecker, irina.tecker at cern.ch
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the track module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertEquals in require 'luaunit'
local track, option in MAD

-- regression test suite ------------------------------------------------------o

TestTrack = {}

function TestTrack:testTrackLHC()
  require 'lhc_as-built_gen'
  require 'lhc_as-built_set'
  require 'lhc_uvar_gen'
  require 'opt_inj_gen'

  local lhcb1, lhcb2 in MADX
  assertEquals(#lhcb1, 6675)
  assertEquals(#lhcb2, 6674)

  local fmt = option.format
  option.format = "%-18.10g" -- MAD-X default output

  local tbl = track { sequence=lhcb1 }
  assertEquals(#tbl, 13267)
  tbl:write('track', {'name', 's', 'length', 'x', 'px', 'y', 'py', 't', 'pt'})
  tbl:write('track_all')

  option.format = fmt
 end

-- function TestTrack:setUp() end
-- function TestTrack:tearDown() end

function TestTrack:testTrack01()
  require 'first_test'

  local ttt1 in MADX
  print("Here we are, first test of MAD-NG Physics")

  local fmt = option.format
  option.format = "%-18.10g" -- MAD-X default output

  local tbl = track { sequence=ttt1, X0= {1e-4,0 ,1e-4,0,0,1e-6}}
  tbl:write('track', {'name', 's', 'length', 'x', 'px', 'y', 'py', 't', 'pt'})
  tbl:write('track_all')

  option.format = fmt
end


--[[
local function simple_test (l,nst)
  nst = nst or 1
  local l_n, l_p, l_2 = 0, 0, l/2
  local l_nst = nst>0 and l/(2*nst) or 0

  for i=1,nst do
    l_n, l_p = l_nst*(2*i-1), l_n
    print('simple_d', i, l_p, (l_n-l_p), (l_p-l_2)/l)
    print('simple_k', i, l_n, 0        , (l_n-l_2)/l, '*')
  end
  l_n, l_p = l, l_n
  print('simple_d', nst, l_p, (l_n-l_p), (l_p-l_2)/l)
end

local function collim_test (l,nst)
  nst = nst or 2
  local l_n, l_p, l_2 = nst==1 and l/2 or 0, 0, l/2
  local l_nst = nst>2 and l/(nst-1) or l

  for i=2,nst do
    l_n, l_p = l_nst*(i-1), l_n
    print('collim_k', i, l_p, 0        , (l_p-l_2)/l, '*')
    print('collim_d', i, l_p, (l_n-l_p), (l_p-l_2)/l)
  end
  l_n, l_p = l, l_n
  print('collim_k', nst, l_p, 0        , (l_p-l_2)/l, '*')
end

local function teapot_test (l,nst)
  nst = nst or 1
  local l_n, l_p, l_2 = 0, 0, l/2
  local l_nst = nst>1 and l_2*nst/(1-nst^2) or 0

-- 0.5*l + ((1-2*i+n)*n*0.5*l/(1.0-n*n))

  for i=1,nst do
    l_n, l_p = l_2+l_nst*(nst-2*i+1), l_n
    print('teapot_d', i, l_p, (l_n-l_p), (l_p-l_2)/l)
    print('teapot_k', i, l_n, 0        , (l_n-l_2)/l, '*')
  end
  l_n, l_p = l, l_n
  print('teapot_d', nst, l_p, (l_n-l_p), (l_p-l_2)/l)
end

MAD.export('tostring', true)

local fmt = MAD.option.format
MAD.option.format = "%.5g"
print('','','i', 'S', 'L', '%')
for i=1,5 do simple_test(10,i) print() end
for i=1,5 do collim_test(10,i) print() end
for i=1,5 do teapot_test(10,i) print() end
MAD.option.format = fmt
-- ]]

-- end ------------------------------------------------------------------------o
