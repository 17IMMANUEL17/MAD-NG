local lu = require 'luaunit'
local U  = require 'madl_utils'
local G  = require 'madl_gmath'
local eps, huge, I, inf, Inf, nan, NaN, pi, Pi, tiny, twopi in G

local Object in MAD
local range, logrange in MAD
local XR = range
--local C = require 'madl_complex'

local isEqu    = lu.assertEquals
local isTrue   = lu.assertTrue
local isFalse  = lu.assertFalse
local isEquEps = lu.assertAlmostEquals
local isTable  = lu.assertIsTable
local isErrEqu = lu.assertErrorMsgEquals
local isNotEqu = lu.assertNotEquals
local isFun    = lu.assertIsFunction
local isTable  = lu.assertIsTable

local is_nil, is_boolean, is_number, is_string, is_function, is_table,
is_cdata, is_xrange, is_complex, is_integer, is_scalar, is_rawtable,
is_iterable, is_indexable, is_callable, is_comparable, is_ordered in U

--TODO: after integration add: objects, matrices
TestUtils = {}

function TestUtils:testIs_nil()
  local b = nil
  local f=\x x*2
  isTrue ( is_nil(nil)      )
  isTrue ( is_nil(b)        )
  isTrue ( is_nil(a)        )
  isTrue ( is_nil(XR(20,1)[1]))

  isFalse( is_nil(f)              )
  isFalse( is_nil(f)              )
  isFalse( is_nil(true)           )
  isFalse( is_nil(120)            )
  isFalse( is_nil(-2.1)           )
  isFalse( is_nil('0')            )
  isFalse( is_nil({1,2,3})        )
  isFalse( is_nil(Object 'O1' {}) )
  --isFalse( is_nil(1..20..1)       )
  --isFalse( is_nil(logrange(1,20)) )
  --add test: fun()) with output=nil
end

function TestUtils:testIs_boolean()
  local f=\x x*2
  local b = true
  isTrue ( is_boolean(is_nil(a))  )
  isTrue ( is_boolean(b)          )
  isTrue ( is_boolean(true)       )
  isTrue ( is_boolean(false)      )

  isFalse( is_boolean(nil)            )
  isFalse( is_boolean(10)             )
  isFalse( is_boolean(4.1)            )
  isFalse( is_boolean(f)              )
  isFalse( is_boolean('10')           )
  isFalse( is_boolean({1,2,3})        )
  isFalse( is_boolean(Object 'O1' {}) )
  --isFalse( is_boolean(XR(1,20))       )
  --isFalse( is_boolean(logrange(1,20)) )
  --add test: fun()) with output=boolean
end

function TestUtils:testIs_number()
  local f=\x x*2
  isTrue ( is_number(2.2)            )
  isTrue ( is_number(-2.2)           )
  isTrue ( is_number(10)             )
  isTrue ( is_number(f(2))           )
  isTrue( is_number(XR(1,20)[1])     )

  isFalse( is_number(nil)            )
  isFalse( is_number(true)           )
  isFalse( is_number(f)              )
  isFalse( is_number('10')           )
  isFalse( is_number({1,2,3})        )
  isFalse( is_number(Object '1' {})  )
  --isFalse( is_number(XR(1,20))       )
  --isFalse( is_number(logrange(1,20)) )
  --isFalse( is_number(C(1,2) ) )
end

function TestUtils:testIs_string()
  isTrue ( is_string('a')       )
  isTrue ( is_string('10.1')    )
  isTrue ( is_string('true')    )
  isTrue ( is_string(tostring(2)      ) )
  isTrue ( is_string(tostring(-2.2)   ) )
  isTrue ( is_string(tostring('10')   ) )
  --isTrue ( is_string(tostring(XR(1,2))) )
  --isTrue ( is_string(tostring(C(1,2))) )

  isFalse( is_string({'1','2'})      )
  isFalse( is_string(nil)            )
  isFalse( is_string(false)          )
  isFalse( is_string({1,2,3})        )
  isFalse( is_string(-2.2)           )
  isFalse( is_string(10)             )
  local O1 = Object 'O1' {x=1}
  isFalse( is_string(O1)                )
  isFalse( is_string(O1 'O2' {y ='aa'}) )
  isTrue ( is_string(O1.name )          )
  --isFalse( is_string(XR(1,1))        )
  --isFalse( is_string(logrange(1,20)) )
  --isFalse( is_string(C(1,1))     )
end

function TestUtils:testIs_function()
  local is_fun = is_function
  local a = \x x+1
  isTrue ( is_fun(is_fun)         )
  isTrue ( is_fun(a    )          )
  isTrue ( is_fun(G.unm)          )

  local O1 = Object 'O1' {x=1, y=\s s.x+1}
  isFalse( is_fun(O1.y)           ) -- should it be recognize as a function?
  isFalse( is_fun(O1)             )
  isFalse( is_fun(O1.name)        )
  isFalse( is_fun(O1.x)           )
  isFalse( is_fun()               )
  isFalse( is_fun(nil)            )
  isFalse( is_fun(true)           )
  isFalse( is_fun(-2.2)           )
  isFalse( is_fun(12)             )
  isFalse( is_fun({1,2,3})        )
  isFalse( is_fun('10')           )
  --isFalse( is_fun(XR(1,2))        )
  --isFalse( is_fun(logrange(1,20)) )
--  isFalse( is_fun(C(1,2))  )
end

function TestUtils:testIs_table()
  --additional matrix tests after integration
  isTrue ( is_table({1,2,3})        )
  isTrue ( is_table({1,2,3})        )
  isTrue ( is_table({-3})           )
  isTrue ( is_table({'1','2'})      )
  isTrue ( is_table(Object {y=1})   )

  isFalse( is_table(nil)            )
  isFalse( is_table(true)           )
  isFalse( is_table(-2.2)           )
  isFalse( is_table('10')           )
  --isFalse( is_table(logrange(1,20)) )
  --isFalse( is_table(XR(1,20))       )
  --isFalse( is_table(C(1,2))    )
end

function TestUtils:testIs_cdata()
  --what else can be a cdata except for ranges? Complex? -> tests after integration
  local f=\x x*2
  --isTrue ( is_cdata(XR(1,20))        )
  --isTrue ( is_cdata(XR(-20,-40,-2))  )
  --isTrue ( is_cdata(XR(-20,-40,-2))  )
  --isTrue ( is_cdata(XR(-20,-40,-2))  )
  --isTrue ( is_cdata(-2..20)          )
  --isTrue ( is_cdata(10..2)           )
  --isTrue ( is_cdata(1..10..0)        )
  --isTrue ( is_cdata(10.1..1.2..-0.1) )
  --isTrue ( is_cdata(logrange(1,20))  )
  --isTrue ( is_cdata(C(1,2))          )

  isFalse( is_cdata(nil)             )
  isFalse( is_cdata(true)            )
  isFalse( is_cdata(120)             )
  isFalse( is_cdata('0')             )
  isFalse( is_cdata({1,2,3})         )
  isFalse( is_cdata(f(2))            )
  isFalse( is_cdata(f)               )
  isFalse( is_cdata(Object {y=1})    )
end

function TestUtils:testIs_range()
  local f=\x x*2
  local f1=\x (x..10)
  --isTrue ( is_xrange(XR(1,20))        )
  --isTrue ( is_xrange(-2..20)          )
  --isTrue ( is_xrange(10..2)           )
  --isTrue ( is_xrange(1..10..0)        )
  --isTrue ( is_xrange(10.1..1.2..-0.1) )
  --isTrue ( is_xrange(f1(1))           )

  isFalse( is_xrange(nil)             )
  isFalse( is_xrange(true)            )
  isFalse( is_xrange(120)             )
  isFalse( is_xrange('0')             )
  isFalse( is_xrange({1,2,3})         )
  isFalse( is_xrange(f(2))            )
  isFalse( is_xrange(f)               )
  isFalse( is_xrange(f1)              )
  --isFalse( is_xrange(logrange(1,20))  )
  isFalse( is_xrange(Object {y=1})    )
end

--[[function TestUtils:testIs_complex()
  isTrue ( is_complex(C(1,2))         )
  isTrue ( is_complex(C(-2,2.))       )
  isTrue ( is_complex(C(0,0))         )
  isTrue ( is_complex(C(1,0))         )

  isFalse( is_complex(nil)            )
  isFalse( is_complex(true)           )
  isFalse( is_complex({1,2,3})        )
  isFalse( is_complex(2.2)            )
  isFalse( is_complex(-2.2)           )
  isFalse( is_complex('10')           )
  isFalse( is_complex(XR(2,10))       )
  isFalse( is_complex(Object {y=1})   )
  isFalse( is_complex(logrange(1,20)) )
end]]

function TestUtils:testIs_integer()
  isTrue ( is_integer( 2)              )
  isTrue ( is_integer(-2)              )
  --isTrue ( is_integer((1..20)[1])      )

  --isFalse( is_integer(logrange(1,20))  )
  --isFalse( is_integer(1..20)           )
  --isFalse( is_integer((20..1)[2])      )
  isFalse( is_integer(XR(-10.1,12)[2]) )
  isFalse( is_integer(nil)             )
  isFalse( is_integer(true)            )
  isFalse( is_integer(2^60)            )
  isFalse( is_integer(-2^60)           )
  isFalse( is_integer(2.2)             )
  isFalse( is_integer(-2.2)            )
  isFalse( is_integer('10')            )
  isFalse( is_integer({1,2,3})         )
  isFalse( is_integer(Object {y=1})    )
 -- isFalse( is_int(C(1,2))          )
end

function TestUtils:testIs_scalar()
  --isTrue ( is_scalar(C(1,2))         )
  isTrue ( is_scalar(-2.2)           )
  isTrue ( is_scalar(1)              )
  --isTrue ( is_scalar(XR(1,2)[1])     )

  --isFalse( is_scalar(logrange(1,20)) )
  --isFalse( is_scalar(XR(1,2))        )
  isFalse( is_scalar(nil)            )
  isFalse( is_scalar(true)           )
  isFalse( is_scalar({1,2,3})        )
  isFalse( is_scalar('10')           )
  isFalse( is_scalar(Object {y=1})   )
end

function TestUtils:testIs_rawtable()
  --rawtable = table without metatable
  isTrue ( is_rawtable({1,2})          )
  isTrue ( is_rawtable({'a','b'})      )

  local f=\x x+2
  isFalse( is_rawtable(f)              )
  isFalse( is_rawtable(logrange(1,20)) )
  isFalse( is_rawtable(nil)            )
  isFalse( is_rawtable(true)           )
  isFalse( is_rawtable(-2.2)           )
  isFalse( is_rawtable('10')           )
  isFalse( is_rawtable(Object {y=1})   )
  isFalse( is_rawtable(Object {})      )
  --isFalse( is_rawtable(1..20)          )
  --isFalse( is_rawtable(XR(1,20))       )
  --isFalse( is_rawtable(C(1,2))         )
end

function TestUtils:testIs_iterable()
  isTrue ( is_iterable({1,2})          )
  isTrue ( is_iterable({'a','b'})      )
  isTrue ( is_iterable(Object {x=2})   )
  isTrue ( is_iterable(1..20)          )
  --isTrue ( is_iterable(XR(1,20))       )
  --isTrue ( is_iterable(logrange(1,20)) )

  local f=\x x+2
  isFalse( is_iterable(f)              )
  isFalse( is_iterable(nil)            )
  isFalse( is_iterable(true)           )
  isFalse( is_iterable(-2.2)           )
  isFalse( is_iterable('10')           )
  --isFalse( is_iterable(C(1,2))    )
end


function TestUtils:testIs_indexable()
  isTrue ( is_indexable({1,2})          )
  isTrue ( is_indexable({'a','b'})      )
  isTrue ( is_indexable('10')           )
  isTrue ( is_indexable(Object {x=2})   )
  --isTrue ( is_indexable(XR(1,20))       )
  --isTrue ( is_indexable(1..20)          )
  --isTrue ( is_indexable(logrange(1,20)) )

  local f=\x x+2
  isFalse( is_indexable(f)              )
  isFalse( is_indexable(nil)            )
  isFalse( is_indexable(true)           )
  isFalse( is_indexable(-2.2)           )
  --isFalse( is_index(C(1,2))    )
end

function TestUtils:testIs_callable()
  local f=\x x+2
  isTrue ( is_callable(f)              )
  isTrue ( is_callable(is_callable)    )
  isTrue ( is_callable(G.sin)          )
  isTrue ( is_callable(Object {x=2})   )

  isFalse( is_callable({1,2})          )
  isFalse( is_callable({'a','b'})      )
  isFalse( is_callable('10')           )
  isFalse( is_callable(nil)            )
  isFalse( is_callable(true)           )
  isFalse( is_callable(-2.2)           )
  --isFalse( is_callable(logrange(1,20)) )
  --isFalse( is_callable(1..20)          )
  --isFalse( is_callable(XR(1,20))       )
  --isFalse( is_call(C(1,2))    )
end

function TestUtils:testIs_comparable()
  local f=\x x+2
  isTrue ( is_comparable(-2.2)           )
  isTrue ( is_comparable(12)             )
  isTrue ( is_comparable('10')           )
  isTrue ( is_comparable('test')         )

  isFalse( is_comparable(Object {x=2})   )
  isFalse( is_comparable({1,2})          )
  isFalse( is_comparable({'a','b'})      )
  isFalse( is_comparable(f)              )
  isFalse( is_comparable(nil)            )
  isFalse( is_comparable(true)           )
  --isFalse( is_comparable(1..20)          )
  --isFalse( is_comparable(XR(1,20))       )
  --isTrue ( is_comparable(logrange(1,20)) )
end

function TestUtils:testIs_ordered()
  local f=\x x+2
  isTrue ( is_ordered(-2.2)           )
  isTrue ( is_ordered(12)             )
  isTrue ( is_ordered('10')           )
  isTrue ( is_ordered('test')         )

  isFalse( is_ordered(Object {x=2})   )
  isFalse( is_ordered({1,2})          )
  isFalse( is_ordered({'a','b'})      )
  isFalse( is_ordered(f)              )
  isFalse( is_ordered(nil)            )
  isFalse( is_ordered(true)           )
  --isFalse( is_ordered(1..20)          )
  --isFalse( is_ordered(XR(1,20))       )
  --isFalse( is_ordered(logrange(1,20)) )
end
