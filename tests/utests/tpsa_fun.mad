--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module regression tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, monomial                    in MAD
local eps, abs, pi                                               in MAD.constant
local abs, fact                                                  in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals               in MAD.utest
local is_number                                                  in MAD.typeid

-- locals ---------------------------------------------------------------------o
local DEBUG = 1-- 1 for max err and order of the err, 2 for all the errors

local dat1D = assert(loadfile('data/tpsa1D.dat'))()
local dat3D = assert(loadfile('data/tpsa3D.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,13,15}

-- regression test suites -----------------------------------------------------o

TestTPSAFun = {}

local d1D = gtpsad(1,15)


local function tpsa1Dinit(tbl,o,cplx)
  local t
  if cplx then 
    t = ctpsa(d1D,o)
  else
    t =  tpsa(d1D,o)
  end

  local i = 1
  while i <= o+1 do
    t:set(i,tbl[i])
    i = i+1
  end
  return t
end


local function checkFun1D(fnam, dbg)
  local fun, t, r = dat1D.fun[fnam]
  local t, t_ref
  for _,c in ipairs(fun) do
    local tol =  c.eps or eps
    for _,o in ipairs(ord) do

      if is_number(c.xo) then 
        t     = tpsa(o):set(1,c.x0):set(2,1)
        t_ref = tpsa1Dinit(c,o,false)
      else
        t     = ctpsa(o):set(1,c.x0):set(2,1)
        t_ref = tpsa1Dinit(c,o,true)
      end
      
      t = t[fnam](t) 
      t:print()
      t_ref:print()
      local err,s = t:dif(t_ref,nil,true)

      if dbg == 1 then 
        print("maximum error = "..tostring(err:get(s.mi):abs()).." observed at index "..tostring(s.mi).." at x0 = "..tostring(c.x0).." and maximum order of the tpsa = "..tostring(o)) 
      elseif dbg == 2 then
        s.print(s) 
      end

      assertAlmostEquals(err:get(s.mi):abs(),0,tol, "Test Failed with tolerance = "..tostring(tol).." at x0 = "..tostring(c.x0).." and maximum order of the tpsa = "..tostring(o))

    end 
   end
end

TestTPSAFun.testInv   = \ -> checkFun1D('inv',DEBUG)
TestTPSAFun.testISqrt = \ -> checkFun1D('invsqrt',DEBUG)
TestTPSAFun.testSqrt  = \ -> checkFun1D('sqrt',DEBUG)
TestTPSAFun.testExp   = \ -> checkFun1D('exp',DEBUG)
TestTPSAFun.testLog   = \ -> checkFun1D('log',DEBUG)
TestTPSAFun.testSin   = \ -> checkFun1D('sin',DEBUG)
TestTPSAFun.testCos   = \ -> checkFun1D('cos',DEBUG)
TestTPSAFun.testTan   = \ -> checkFun1D('tan',DEBUG)
TestTPSAFun.testCot   = \ -> checkFun1D('cot',DEBUG)
TestTPSAFun.testSinc  = \ -> checkFun1D('sinc',DEBUG)
TestTPSAFun.testSinh  = \ -> checkFun1D('sinh',DEBUG)
TestTPSAFun.testCosh  = \ -> checkFun1D('cosh',DEBUG)
TestTPSAFun.testTanh  = \ -> checkFun1D('tanh',DEBUG)
TestTPSAFun.testCoth  = \ -> checkFun1D('coth',DEBUG)
TestTPSAFun.testAsin  = \ -> checkFun1D('asin',DEBUG)
TestTPSAFun.testAcos  = \ -> checkFun1D('acos',DEBUG)
TestTPSAFun.testAtan  = \ -> checkFun1D('atan',DEBUG)
TestTPSAFun.testAcot  = \ -> checkFun1D('acot',DEBUG)
TestTPSAFun.testAsinh = \ -> checkFun1D('asinh',DEBUG)
TestTPSAFun.testAcosh = \ -> checkFun1D('acosh',DEBUG)
TestTPSAFun.testAtanh = \ -> checkFun1D('atanh',DEBUG)
TestTPSAFun.testAcoth = \ -> checkFun1D('acoth',DEBUG)
TestTPSAFun.testErf   = \ -> checkFun1D('erf',DEBUG)
TestTPSAFun.testSinhc = \ -> checkFun1D('sinhc',DEBUG)
TestTPSAFun.testAsinc   = \ -> checkFun1D('asinc',DEBUG)
TestTPSAFun.testAsinhc   = \ -> checkFun1D('asinhc',DEBUG)









--[[ useful tests?

local d3D = gtpsad(3,15)

local function tpsa3Dinit(tbl,o)
  local t = tpsa(d3D,o)
  local i = 1
  local ml = d3D:maxlen()
  local m = monomial("000")
  while i <= ml do
    t:set(m,tbl[i])
    d3D:nxtbyvar(m)
    i = i + 1
  end
  return t
end

local function checkFun3D (fnam, dbg)
 local fun, t, r = dat3D.fun[fnam]
    
  for _,c in ipairs(fun) do
    local tol = c.eps or eps
    for _,o in ipairs(ord) do

      local t     = tpsa(o):fill({c.x0,1,1,1})
      local t_ref = tpsa3Dinit(c,o)
      t = t[fnam](t) 
      local err,s = t:dif(t_ref,nil,true)
      --s.print(s)
      print()
      assertAlmostEquals(err:get(s.mi),0,tol)

      end 
    end
end
-- performance tests ----------------------------------------------------------o

Test_TPSAFun = {}

local ord_ = {1,2,3,6,7}
local div_ = 5 -- shrink the tests by factor 5

local function benchFun1 (fnam, x0, trc)
  local d = gtpsad(6,15)
  local fun, t, r = dat1D.fun[fnam]
  for _,o in ipairs(ord_) do
--  for o=1,d.mo do
    if fun.omin and o < fun.omin then break end -- limit order
    if fun.omax and o > fun.omax then break end -- limit order
    t = tpsa(o):setvar(x0):set(2,1):set(3,1):set(4,1):set(5,1):set(6,1):set(7,1)
    r = tpsa(o)
    if not trc then io.write(o," ") io.flush() end
    local t0 = os.clock()
    for i=1,fun.iter[o]/div_ do t[fnam](t,r) end
    local dt = os.clock()-t0
    assertAlmostEquals( dt, 0.5/div_, 1/div_ )
    if trc then
      local n = math.floor(0.5*fun.iter[o]/dt)
      io.write(string.format("\no=%-2d, dt=%.4f, n=%-8d, ", o, dt, n),
               "len=", t:length(o), "  ")
    end
  end
end

Test_TPSAFun.testInv   = \s -> benchFun1('inv'    , pi/5)
Test_TPSAFun.testSqrt  = \s -> benchFun1('sqrt'   , pi/5)
Test_TPSAFun.testExp   = \s -> benchFun1('exp'    , pi/5)
Test_TPSAFun.testLog   = \s -> benchFun1('log'    , pi/3)
Test_TPSAFun.testSin   = \s -> benchFun1('sin'    , pi/5)
Test_TPSAFun.testCos   = \s -> benchFun1('cos'    , pi/5)
Test_TPSAFun.testTan   = \s -> benchFun1('tan'    , pi/5)
Test_TPSAFun.testISqrt = \s -> benchFun1('invsqrt', pi/5)
]]--

-- end ------------------------------------------------------------------------o