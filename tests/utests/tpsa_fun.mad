--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module regression tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, gtpsad, monomial                    in MAD
local eps, abs, pi                                               in MAD.constant
local abs, fact                                                  in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals               in MAD.utest

-- locals ---------------------------------------------------------------------o
local DEBUG = 0 -- 1 for max err and order of the err, 2 for all the errors

local dat1D = assert(loadfile('data/tpsa1D.dat'))()
local dat3D = assert(loadfile('data/tpsa3D.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

TestTPSAFun = {}

local d1D = gtpsad(1,15)


local function tpsa1Dinit(tbl,o)
  local t = tpsa(d1D,o)
  local i = 1
  while i <= o+1 do
    t:set(i,tbl[i])
    i = i+1
  end
  return t
end


local function checkFun1D(fnam, dbg)
  local fun, t, r = dat1D.fun[fnam]
    
  for _,c in ipairs(fun) do
    local tol =  c.eps or eps
    for _,o in ipairs(ord) do

      local t     = tpsa(o):set(1,c.x0):set(2,1)
      local t_ref = tpsa1Dinit(c,o)
      t = t[fnam](t) 
      local err,s = t:dif(t_ref,nil,true)

      if dbg == 1 then 
        print("maximum error = "..tostring(err:get(s.mi)).." observed at index "..tostring(s.mi).." at x0 = "..tostring(c.x0).." and maximum order of the tpsa = "..tostring(o)) 
      elseif dbg == 2 then
        s.print(s) 
      end

      assertAlmostEquals(err:get(s.mi),0,tol, "Test Failed with tolerance = "..tostring(tol))

    end 
   end
end

TestTPSAFun.testInv   = \ -> checkFun1D('inv',DEBUG)
TestTPSAFun.testISqrt = \ -> checkFun1D('invsqrt',DEBUG)
TestTPSAFun.testSqrt  = \ -> checkFun1D('sqrt',DEBUG)
TestTPSAFun.testExp   = \ -> checkFun1D('exp',DEBUG)
TestTPSAFun.testLog   = \ -> checkFun1D('log',DEBUG)
TestTPSAFun.testSin   = \ -> checkFun1D('sin',DEBUG)
TestTPSAFun.testCos   = \ -> checkFun1D('cos',DEBUG)
TestTPSAFun.testTan   = \ -> checkFun1D('tan',DEBUG)
TestTPSAFun.testCot   = \ -> checkFun1D('cot',DEBUG)
TestTPSAFun.testSinc  = \ -> checkFun1D('sinc',DEBUG)
TestTPSAFun.testSinh  = \ -> checkFun1D('sinh',DEBUG)
TestTPSAFun.testCosh  = \ -> checkFun1D('cosh',DEBUG)
TestTPSAFun.testTanh  = \ -> checkFun1D('tanh',DEBUG)
TestTPSAFun.testCoth  = \ -> checkFun1D('coth',DEBUG)
TestTPSAFun.testAsin  = \ -> checkFun1D('asin',DEBUG)
TestTPSAFun.testAcos  = \ -> checkFun1D('acos',DEBUG)
TestTPSAFun.testAtan  = \ -> checkFun1D('atan',DEBUG)
TestTPSAFun.testAcot  = \ -> checkFun1D('acot',DEBUG)
TestTPSAFun.testAsinh = \ -> checkFun1D('asinh',DEBUG)
TestTPSAFun.testAcosh = \ -> checkFun1D('acosh',DEBUG)
TestTPSAFun.testAtanh = \ -> checkFun1D('atanh',DEBUG)
TestTPSAFun.testAcoth = \ -> checkFun1D('acoth',DEBUG)
TestTPSAFun.testErf   = \ -> checkFun1D('erf',DEBUG)
TestTPSAFun.testSinhc = \ -> checkFun1D('sinhc',DEBUG)
TestTPSAFun.testAsinc   = \ -> checkFun1D('asinc',DEBUG)
TestTPSAFun.testAsinhc   = \ -> checkFun1D('asinhc',DEBUG)


-- end ------------------------------------------------------------------------o