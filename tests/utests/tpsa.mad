--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: 
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, tpsa_eqn                                in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, 
      assrtIsFalse, assertErrorMsgContains, 
      assertError, assertIsNil, assertFalse                      in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad, is_number, is_complex        in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

local Data = {}
Data.t1v = {}
Data.t2v = {}
Data.ct1v = {}
Data.ct2v = {}

TestIs = {}
TestCtor = {}
TestLengOp = {}
TestProm = {}
TestCloning = {}
TestSetGet  = {}


local x = 2
local y = 2 + 2i


for nv=1,2 do
  for key, ord in pairs(ord) do
    local d = gtpsad(nv,ord)
    Data.t1v[#Data.t1v+1] = tpsa()
    Data.ct1v[#Data.ct1v+1] = ctpsa()
    Data.t2v[#Data.t1v+1] = tpsa()
    Data.ct2v[#Data.ct1v+1] = ctpsa()
  end
end


function TestCtor:testCtorDflt()
--check if the last descriptor created is the one used by default
local t  = tpsa()
local ct = ctpsa()

assertEquals(t.nv(t), 2)
assertEquals(t.maxord(t), 15)
assertEquals(ct.nv(ct), 2)
assertEquals(ct.maxord(ct), 15)
 
end


function TestCtor:testCtorSingVar()

  for i, t in ipairs(Data.t1v) do 
    local len = t.maxlen(t)
    assertTrue(is_tpsa(t) )
    assertFalse(is_ctpsa(t))
    for i=1, len do
      assertEquals(t.coef[i-1], 0 )
    end
  end

  for i, ct in ipairs(Data.ct1v) do 
    local len = ct.maxlen(ct)
    assertTrue(is_ctpsa(ct) )
    assertFalse(is_tpsa(ct))
    for i=1, len do
      assertEquals( ct.coef[i-1], 0 + 0i )
    end
  end

end


function TestCtor:testCtorMultVar()

  for i, t in ipairs(Data.t2v) do 
    local len = t.maxlen(t)
    assertTrue(is_tpsa(t) )
    assertFalse(is_ctpsa(t))
    for i=1, len do
      assertEquals(t.coef[i-1], 0 )
    end
  end

  for i, ct in ipairs(Data.ct2v) do 
    local len = ct.maxlen(ct)
    assertTrue(is_ctpsa(ct) )
    assertFalse(is_tpsa(ct))
    for i=1, len do
      assertEquals( ct.coef[i-1], 0 + 0i )
    end
  end

end

function TestCtor:testCtorParams()

  local mo = 4
  local desc = gtpsad(2,4)
  local t1 = tpsa(mo)
  local t2 = tpsa(desc)
  local t3 = tpsa(t1)

  assertEquals(t1.nv(t1), 2)
  assertEquals(t1.maxord(t1), 4)
  assertEquals(t2.nv(t2), 2)
  assertEquals(t2.maxord(t2), 4)
  assertEquals(t3.nv(t3), 2)
  assertEquals(t3.maxord(t3), 4)

end