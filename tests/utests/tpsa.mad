--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: 
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, cvector, tpsa, ctpsa, gtpsad, tpsa_eqn, monomial            in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, 
      assrtIsFalse, assertErrorMsgContains, 
      assertError, assertNil, assertFalse                        in MAD.utest
local is_tpsa, is_vector, is_ctpsa, is_gtpsad, is_number, is_complex        in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

local d1v = gtpsad(1,5)
local d2v = gtpsad(2,5)
local d3v = gtpsad(3,5)
local d5v = gtpsad(5,4)

TestTPSACtor       = {}
TestTPSA2Idx       = {}
TestTPSAGet        = {}
TestTPSASet        = {}
TestTPSALinComb    = {}
TestTPSALogicOps   = {}
TestTPSAArithmetic = {}
TestTPSAInv        = {}
TestTPSADeriv      = {}



function TestTPSACtor:testCtor()
  for nv = 1, 2 do
    local d   = gtpsad(nv, 15)
    local t1  = tpsa  (      )
    local t2  = tpsa  (     d)
    local t3  = tpsa  (    t1)
    local ct1 = ctpsa (      )
    local ct2 = ctpsa (     d)
    local ct3 = ctpsa (   ct1)

    assertEquals(t1 :nv()  , nv)
    assertEquals(t1 :mord(), 15)
    assertEquals(t2 :nv()  , nv)
    assertEquals(t2 :mord(), 15)
    assertEquals(t3 :nv()  , nv)
    assertEquals(t3 :mord(), 15)
    assertEquals(ct1:nv()  , nv)
    assertEquals(ct1:mord(), 15)
    assertEquals(ct2:nv()  , nv)
    assertEquals(ct2:mord(), 15)
    assertEquals(ct3:nv()  , nv)
    assertEquals(ct3:mord(), 15)
  end
end


function TestTPSACtor:testCtorMo()
  for nv = 1, 2 do
    local d   = gtpsad(nv, 15)
    for o=0, d:maxord() + 1 do
      local t1  = tpsa (     o)
      local t2  = tpsa (d,   o)
      local t3  = tpsa (t1,  o)
      local ct1 = ctpsa(     o)
      local ct2 = ctpsa(d  , o)
      local ct3 = ctpsa(ct1, o)
      if o < 15 then
        assertEquals(t1 :nv(),   nv)
        assertEquals(t2 :nv(),   nv)
        assertEquals(t3 :nv(),   nv)
        assertEquals(ct1:nv(),   nv)
        assertEquals(ct2:nv(),   nv)
        assertEquals(ct3:nv(),   nv)
        assertEquals(t1 :mord(),  o)
        assertEquals(t2 :mord(),  o)
        assertEquals(t3 :mord(),  o)
        assertEquals(ct1:mord(),  o)
        assertEquals(ct2:mord(),  o)
        assertEquals(ct3:mord(),  o)
      else  --check that if we create a tpsa with ord > d.maxord() is not allowed
        assertEquals(t1 :mord(),  d:maxord())
        assertEquals(t2 :mord(),  d:maxord())
        assertEquals(t3 :mord(),  d:maxord())
        assertEquals(ct1:mord(),  d:maxord())
        assertEquals(ct2:mord(),  d:maxord())
        assertEquals(ct3:mord(),  d:maxord())
      end
    end
  end
end


function TestTPSA2Idx:testTPSAMonoStr2IdxSingVar()
  local d = gtpsad(1,50)
  local t = tpsa()
  local ct = ctpsa()

  assertEquals(t :get_idx(monomial(1,  2)),  t:get_idx("2"))
  assertEquals(ct:get_idx(monomial(1,  2)), ct:get_idx("2"))
  assertEquals(t :get_idx(monomial(1, 21)),  t:get_idx("L"))
  assertEquals(ct:get_idx(monomial(1, 21)), ct:get_idx("L"))
  assertEquals(t :get_idx(monomial(1, 42)),  t:get_idx("g"))
  assertEquals(ct:get_idx(monomial(1, 42)), ct:get_idx("g"))
  assertEquals(t :get_idx(monomial({16} )),  t:get_idx("G"))
  assertEquals(ct:get_idx(monomial({16} )), ct:get_idx("G"))
  assertEquals(t :get_idx(monomial("a"  )),  t:get_idx("a"))
  assertEquals(ct:get_idx(monomial("a"  )), ct:get_idx("a"))
end


function TestTPSA2Idx:testTPSAMonoStr2IdxMultVar()
  local d = gtpsad(2,50)
  local t = tpsa()
  local ct = ctpsa()

  assertEquals(t :get_idx(monomial(2,     2)),  t:get_idx("22"))
  assertEquals(ct:get_idx(monomial(2,     2)), ct:get_idx("22"))
  assertEquals(t :get_idx(monomial(2,    21)),  t:get_idx("LL"))
  assertEquals(ct:get_idx(monomial(2,    21)), ct:get_idx("LL"))
  assertEquals(t :get_idx(monomial(2,    25)),  t:get_idx("PP"))
  assertEquals(ct:get_idx(monomial(2,    25)), ct:get_idx("PP"))
  assertEquals(t :get_idx(monomial({16, 15})),  t:get_idx("GF"))
  assertEquals(ct:get_idx(monomial({16, 15})), ct:get_idx("GF"))
  assertEquals(t :get_idx(monomial("AB"    )),  t:get_idx("AB"))
  assertEquals(ct:get_idx(monomial("AB"    )), ct:get_idx("AB"))
end


function TestTPSA2Idx:testTPSAMono2IdxSingVar()
  local t = tpsa(d1v)
  local ct = ctpsa(d1v)
  
  --check that non valid orders return Idx 0
  assertEquals(t :get_idx(monomial(1,d1v:maxord() + 1)), 0)
  assertEquals(ct:get_idx(monomial(1,              -1)), 0)
  for ord = 0, d1v:maxord() do
    assertEquals(t :get_idx(monomial(1,ord)), ord + 1)
    assertEquals(ct:get_idx(monomial(1,ord)), ord + 1)
  end
end


function TestTPSA2Idx:testTPSAMono2IdxMultVar()
  local t = tpsa(d2v)
  local ct = ctpsa(d2v)
  local count = 0
  
  --check that non valid orders return Idx 0
  assertEquals(t :get_idx(monomial({1           ,  d1v:maxord()})), 0)
  assertEquals(t :get_idx(monomial({d1v:maxord(),             1})), 0)
  assertEquals(t :get_idx(monomial({-1          ,             0})), 0)
  assertEquals(t :get_idx(monomial({0           ,            -1})), 0)
  for ord = 0, d1v:maxord() do
    for idx = 0, ord  do  --scanning all the coeff of a given order
      assertEquals(t :get_idx(monomial({ord - idx, idx})), count + 1)
      count = count + 1
    end
  end
end


function TestTPSAGet:testGet0()
  for _,d in ipairs{d1v,d2v} do
    local t  =  tpsa(d,1):set0(   1)
    local ct = ctpsa(d,1):set0(1+1i)

    assertEquals(t :get0(),    1)
    assertEquals(ct:get0(), 1+1i)
  end
end


function TestTPSAGet:testGetIdx()
  for _,d in ipairs{d1v,d2v} do
    local n  = d:maxlen()
    local t  = tpsa (d):fill(1..n)
    local ct = ctpsa(d):fill(1..n)*1i
  
    for i=1,n do
      assertEquals(t :get(i),  i   )
      assertEquals(ct:get(i),  i*1i)
    end

    assertError(t .get,  t,  -1)
    assertError(ct.get, ct,  -1)
    assertError(t .get,  t, n+1)
    assertError(ct.get, ct, n+1)
  end
end


function TestTPSAGet:testGetIdxMo()
  for _,d in ipairs{d1v,d2v} do
    for o=0, d:maxord() + 1 do
      local n  =  tpsa(d,o):mlen()
      print(n)
      local t  =  tpsa (d,o):fill(1..n)
      local ct =  ctpsa(d,o):fill(1..n)*1i

      for i=1, n do
        assertEquals(t :get(i), i   )
        assertEquals(ct:get(i), i*1i)
      end

      if o < 5 then
        assertError (t .get,  t, -1)
        assertError (ct.get, ct, -1)
        assertEquals(t :get(    n+1),       0)
        assertEquals(ct:get(    n+1),  0 + 0i)
      else
        assertError (t .get,  t,   0)
        assertError (ct.get, ct,   0)
        assertError (t .get,  t, n+1)
        assertError (ct.get, ct, n+1)
      end
    end
  end
end


function TestTPSAGet:testGetVecSingVar()
  local sz_t = d1v:maxlen()
  local t    = tpsa (d1v,4):set(3,  1):set(4,  2):set(5,  3)
  local ct   = ctpsa(d1v,4):set(3, 1i):set(4, 2i):set(5, 3i)

  assertEquals(t :getvec(2,1), vector(1):fill(0..0)          )
  assertEquals(ct:getvec(2,1), vector(1):fill(0..0)*       1i)
  assertEquals(t :getvec(2,2), vector(2):fill(0..1)          )
  assertEquals(ct:getvec(2,2), vector(2):fill(0..1)*       1i)
  assertEquals(t :getvec(3,3), vector(3):fill(1..3)          )
  assertEquals(ct:getvec(3,3), vector(3):fill(1..3)*       1i)
  assertEquals(t :getvec(4,3), vector(3):fill({2,3,0})       )
  assertEquals(ct:getvec(4,3), vector(3):fill({2,3,0})*    1i)
  assertEquals(t :getvec(2,5), vector(5):fill({0,1,2,3,0})   )
  assertEquals(ct:getvec(2,5), vector(5):fill({0,1,2,3,0})*1i)
  assertError(t .getvec,      0, 1)
  assertError(ct.getvec,      0, 1)
  assertError(t .getvec, sz_t+1, 1)
  assertError(ct.getvec, sz_t+1, 1)
end


function TestTPSAGet:testGetVec ()
  local t,v = tpsa, vector
  local mo, nc = d5v:maxord(), d5v:maxlen()
  local idx = {[0]=0} for o=0,mo do idx[o+1] = d5v:maxlen(o)+1 end

  -- helpers to setvec tpsas and vectors within start..end
  local mkt = \s,e -> (s, v(e-s+1):fill(s..e))
  local mkv = \s,e -> (s..e, s..e)

  -- ref tpsa, see cases in mad_tpsa.c
  local r = t(d5v):setvec(idx[2], idx[2]..idx[4]-1)

--   0   1     lo=2      hi=3        mo=4
--  [.|?????|........|..........|????????????]
--  [ |i000n|        |          |            ]
  assertTrue( r:copy():setvec(mkt(idx[1]  , idx[2]-1)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]  , idx[4]-1)) )
--  [ | i0n |        |          |            ]
  assertTrue( r:copy():setvec(mkt(idx[1]+1, idx[2]-1)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]+1, idx[4]-1)) )
--  [ | i00n|        |          |            ]
  assertTrue( r:copy():setvec(mkt(idx[1]+1, idx[2]-2)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]+1, idx[4]-1)):set(idx[2]-1,1,0) )
--  [ | i000|....n   |          |            ]
  assertTrue( r:copy():setvec(mkt(idx[1]+1, idx[3]-4)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]+1, idx[4]-1)) )
--  [ | i000|........|..........|0000000n    ]
  assertTrue( r:copy():setvec(mkt(idx[1]+1, idx[5]-4)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]+1, idx[5]-4)) )
--  [ |     |  i.....|......n   |            ]
  assertTrue( r:copy():setvec(mkt(idx[2]+2, idx[3]-3)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[4]-1)) )
--  [ |     |        |   i......|.......n0000]
  assertTrue( r:copy():setvec(mkt(idx[3]+3, idx[5]-5)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[5]-5)) )
--  [ |     |        |          |i......n0000]
  assertTrue( r:copy():setvec(mkt(idx[4]  , idx[5]-5)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[5]-5)) )
--  [ |     |        |          |0i.....n0000]
  assertTrue( r:copy():setvec(mkt(idx[4]+1, idx[5]-5)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[5]-5)):set(idx[4],1,0) )
--  [ |     |        |          |i..........n]
  assertTrue( r:copy():setvec(mkt(idx[4]  , idx[5]-1)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[5]-1)) )
end


function TestTPSASet:testTPSASet0SingVar()
  for _,d in ipairs{d1v,d2v} do
    local t1  =  tpsa(d,1):set0(   1)
    local ct1 = ctpsa(d,1):set0(1+1i)
    local t2  =  tpsa(d,1):set0(   1):set0(   2,    3)
    local ct2 = ctpsa(d,1):set0(   1):set0(2+1i, 3+1i)

    assertEquals(t1 :get0(),    1)
    assertEquals(ct1:get0(), 1+1i)
    assertEquals(t2 :get0(),    5)
    assertEquals(ct2:get0(), 5+2i)
  end
end


function TestTPSASet:testSetStrSingVar()
  local t  = tpsa (d1v)
  local ct = ctpsa(d1v)

  assertEquals(t :set("2" ,   1):mord(true), 2)
  assertEquals(ct:set("2" ,  1i):mord(true), 2)
  assertEquals(t :set("4" ,   1):mord(true), 4)
  assertEquals(ct:set("4" ,  1i):mord(true), 4)
  assertEquals(t :get("1"),  0)
  assertEquals(ct:get("1"), 0i)
  assertEquals(t :get("2"),  1)
  assertEquals(ct:get("2"), 1i)
  assertEquals(t :get("3"),  0)
  assertEquals(ct:get("3"), 0i)
  assertEquals(t :get("4"),  1)
  assertEquals(ct:get("4"), 1i)
  assertEquals(t :get("5"),  0)
  assertEquals(ct:get("5"), 0i)
  assertError (t .set,   t, "-1", 1)
  assertError (ct.set,  ct, "-1", 1)
  assertError (t .set,   t,  "6", 1)
  assertError (ct.set,  ct,  "6", 1)
end


function TestTPSASet:testSetStrMultVar()
  local t    = tpsa (d3v)
  local ct   = ctpsa(d3v)
  local sz_t = t:mlen()
  local vec = vector(sz_t):zeros():set(5,1,1):set(7,1,1):set(10,1,1):set(21,1,1):set(28,1,1):set(35,1,1)
 
  assertEquals(t :set("200", 1):mord(true), 2)  
  assertEquals(ct:set("200",1i):mord(true), 2)
  assertEquals(t :set("020", 1):mord(true), 2)  
  assertEquals(ct:set("020",1i):mord(true), 2)
  assertEquals(t :set("002", 1):mord(true), 2)  
  assertEquals(ct:set("002",1i):mord(true), 2)
  assertEquals(t :set("400", 1):mord(true), 4)
  assertEquals(ct:set("400",1i):mord(true), 4)
  assertEquals(t :set("121", 1):mord(true), 4)
  assertEquals(ct:set("121",1i):mord(true), 4)
  assertEquals(t :set("004", 1):mord(true), 4)
  assertEquals(ct:set("004",1i):mord(true), 4)
  assertEquals(t :get("000")     ,      0)
  assertEquals(ct:get("000")     ,     0i)
  assertEquals(t :get("200")     ,      1)
  assertEquals(ct:get("200")     ,     1i)
  assertEquals(t :get("020")     ,      1)
  assertEquals(ct:get("020")     ,     1i)
  assertEquals(t :get("002")     ,      1)
  assertEquals(ct:get("002")     ,     1i)
  assertEquals(t :get("400")     ,      1)
  assertEquals(ct:get("400")     ,     1i)
  assertEquals(t :get("121")     ,      1)
  assertEquals(ct:get("121")     ,     1i)
  assertEquals(t :get("004")     ,      1)
  assertEquals(ct:get("004")     ,     1i)
  assertEquals(t :getvec(1, sz_t),    vec)
  assertEquals(ct:getvec(1, sz_t), vec*1i)
  assertError (t .set, t , "-1",1)
  assertError (ct.set, ct, "-1",1)
  assertError (t .set, t ,  "6",1)
  assertError (ct.set, ct,  "6",1)
end


function TestTPSASet:testSetVec ()
  local t,v = tpsa, vector
  local mo, nc = d5v:maxord(), d5v:maxlen()
  local idx = {[0]=0} for o=0,mo do idx[o+1] = d5v:maxlen(o)+1 end

  -- helpers to setvec tpsas and vectors within start..end
  local mkt = \s,e -> (s, v(e-s+1):fill(s..e))
  local mkv = \s,e -> (s..e, s..e)

  -- ref tpsa, see cases in mad_tpsa.c
  local r = t(d5v):setvec(idx[2], idx[2]..idx[4]-1)

--   0   1     lo=2      hi=3        mo=4
--  [.|?????|........|..........|????????????]
--  [ |i...n|        |          |            ]
  assertTrue( r:copy():setvec(mkt(idx[1]  , idx[2]-1)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]  , idx[4]-1)) )
--  [ |0i..n|        |          |            ]
  assertTrue( r:copy():setvec(mkt(idx[1]+1, idx[2]-1)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]+1, idx[4]-1)) )
--  [ |0i.n0|        |          |            ]
  assertTrue( r:copy():setvec(mkt(idx[1]+1, idx[2]-2)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]+1, idx[4]-1)):set(idx[2]-1,1,0) )
--  [ |0i...|....n   |          |            ]
  assertTrue( r:copy():setvec(mkt(idx[1]+1, idx[3]-4)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]+1, idx[4]-1)) )
--  [ |0i...|........|..........|.......n0000]
  assertTrue( r:copy():setvec(mkt(idx[1]+1, idx[5]-4)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[1]+1, idx[5]-4)) )
--  [ |     |  i.....|......n   |            ]
  assertTrue( r:copy():setvec(mkt(idx[2]+2, idx[3]-3)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[4]-1)) )
--  [ |     |        |   i......|.......n0000]
  assertTrue( r:copy():setvec(mkt(idx[3]+3, idx[5]-5)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[5]-5)) )
--  [ |     |        |          |i......n0000]
  assertTrue( r:copy():setvec(mkt(idx[4]  , idx[5]-5)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[5]-5)) )
--  [ |     |        |          |0i.....n0000]
  assertTrue( r:copy():setvec(mkt(idx[4]+1, idx[5]-5)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[5]-5)):set(idx[4],1,0) )
--  [ |     |        |          |i..........n]
  assertTrue( r:copy():setvec(mkt(idx[4]  , idx[5]-1)):getvec(1,nc)
              == v(nc):setvec(mkv(idx[2]  , idx[5]-1)) )
end


function TestTPSALogicOps:testEqu()
  for _,d in ipairs{d1v,d2v,d3v} do
    local mo  = d:maxord()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    for o = 0, d:maxord() do
      assertFalse(            nil           ==          tpsa(d,idx[o]))
      assertFalse( tpsa(d,idx[o])           ==                     nil)
      assertFalse(            nil           ==         ctpsa(d,idx[o]))
      assertFalse(ctpsa(d,idx[o])           ==                     nil)
      assertTrue (              0           ==          tpsa(d,idx[o]))
      assertTrue ( tpsa(d,idx[o])           ==                       0)
      assertTrue (             0i           ==         ctpsa(d,idx[o]))
      assertTrue (ctpsa(d,idx[o])           ==                      0i)
      assertFalse(              1           ==          tpsa(d,idx[o]))
      assertFalse( tpsa(d,idx[o])           ==                       1)
      assertFalse(             1i           ==         ctpsa(d,idx[o]))
      assertFalse(ctpsa(d,idx[o])           ==                      1i)
      assertTrue ( tpsa(d  ):set(idx[o], 1) ==  tpsa(d):set(idx[o], 1))
      assertTrue (ctpsa(d  ):set(idx[o],1i) == ctpsa(d):set(idx[o],1i))
      assertFalse( tpsa(d  ):set(idx[o], 1) ==  tpsa(d):set(idx[o], 2))
      assertFalse(ctpsa(d  ):set(idx[o],1i) == ctpsa(d):set(idx[o],2i))
      assertFalse( tpsa(d  ):set(idx[o], 2) ==  tpsa(d):set(idx[o], 1))
      assertFalse(ctpsa(d  ):set(idx[o],2i) == ctpsa(d):set(idx[o],1i))
      assertTrue ( tpsa(d  ):set(idx[o], 1) == ctpsa(d):set(idx[o], 1))
      assertTrue (ctpsa(d  ):set(idx[o], 1) == ctpsa(d):set(idx[o], 1))
      assertError( tpsa(d,idx[o]).__eq , tpsa(d), 1, 'err')
      assertError(ctpsa(d,idx[o]).__eq ,ctpsa(d), 1, 'err')
    end

    for o = 0, d:maxord()-1 do
      assertFalse( tpsa(d         ):set(idx[o]  , 1) ==  tpsa(d         ):set(idx[o+1], 1))
      assertFalse( tpsa(d         ):set(idx[o+1], 1) ==  tpsa(d         ):set(idx[o]  , 1))
      assertFalse(ctpsa(d         ):set(idx[o]  ,1i) == ctpsa(d         ):set(idx[o+1],1i))
      assertFalse(ctpsa(d         ):set(idx[o+1],1i) == ctpsa(d         ):set(idx[o]  ,1i))
      assertFalse(ctpsa(d         ):set(idx[o]  ,1i) ==  tpsa(d         ):set(idx[o+1],1i))
      assertFalse(ctpsa(d         ):set(idx[o+1],1i) == ctpsa(d         ):set(idx[o]  ,1i))
      assertTrue ( tpsa(d,  idx[o]):set(idx[o]  , 1) ==  tpsa(d,idx[o+1]):set(idx[o]  , 1))
      assertTrue ( tpsa(d,idx[o+1]):set(idx[o]  , 1) ==  tpsa(d,  idx[o]):set(idx[o]  , 1))
      assertTrue (ctpsa(d,  idx[o]):set(idx[o]  ,1i) == ctpsa(d,idx[o+1]):set(idx[o]  ,1i))
      assertTrue (ctpsa(d,idx[o+1]):set(idx[o]  ,1i) == ctpsa(d,  idx[o]):set(idx[o]  ,1i))
    end
  end
end


--[=[ cases for LinComb and Arithmetic
   0   1     lo=2      hi=3        mo=4
  [.|.....|........|..........|............]
   .|     |        |          |               lo=1, hi=0 #0
    |.....|        |          |               lo=1, hi=1 #1
    |.....|........|          |               lo=1, hi=2 #2
    |.....|........|..........|............   lo=1, hi=4 #3
    |     |........|..........|               lo=2, hi=3 #4
    |     |        |..........|............   lo=3, hi=4 #5
    |     |        |          |............   lo=4, hi=4 #6
]=]

function TestTPSALinComb:testAxpbypcR()
  local t,v = tpsa, vector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helpers to setvec tpsas and vectors within start..end
    local mkt = \s,e -> t(d):setvec(s, v(e-s+1):fill(s..e))
    local mkv = \a,b,c,s1,e1,s2,e2 -> a*v(nc):setvec(s1..e1,s1..e1) + b*v(nc):setvec(s2..e2,s2..e2) + v(nc):set(1,1,c)

    local tab ={
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2,3,4,idx[0],idx[1]-1,idx[0],idx[1]-1),abc={2,3,4},case="#0 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2,3,4,idx[1],idx[2]-1,idx[0],idx[1]-1),abc={2,3,4},case="#1 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(3,2,4,idx[0],idx[1]-1,idx[1],idx[2]-1),abc={3,2,4},case="#0 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2,3,4,idx[1],idx[3]-1,idx[0],idx[1]-1),abc={2,3,4},case="#2 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(3,2,4,idx[0],idx[1]-1,idx[1],idx[3]-1),abc={3,2,4},case="#0 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2,3,4,idx[1],idx[5]-1,idx[0],idx[1]-1),abc={2,3,4},case="#3 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(3,2,4,idx[0],idx[1]-1,idx[1],idx[5]-1),abc={3,2,4},case="#0 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2,3,4,idx[2],idx[4]-1,idx[0],idx[1]-1),abc={2,3,4},case="#4 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(3,2,4,idx[0],idx[1]-1,idx[2],idx[4]-1),abc={3,2,4},case="#0 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2,3,4,idx[3],idx[5]-1,idx[0],idx[1]-1),abc={2,3,4},case="#5 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3,2,4,idx[0],idx[1]-1,idx[3],idx[5]-1),abc={3,2,4},case="#0 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2,3,4,idx[4],idx[5]-1,idx[0],idx[1]-1),abc={2,3,4},case="#6 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3,2,4,idx[0],idx[1]-1,idx[4],idx[5]-1),abc={3,2,4},case="#0 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2,3,4,idx[1],idx[2]-1,idx[1],idx[2]-1),abc={2,3,4},case="#1 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2,3,4,idx[1],idx[3]-1,idx[1],idx[2]-1),abc={2,3,4},case="#2 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(3,2,4,idx[1],idx[2]-1,idx[1],idx[3]-1),abc={3,2,4},case="#1 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2,3,4,idx[1],idx[5]-1,idx[1],idx[2]-1),abc={2,3,4},case="#3 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(3,2,4,idx[1],idx[2]-1,idx[1],idx[5]-1),abc={3,2,4},case="#1 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2,3,4,idx[2],idx[4]-1,idx[1],idx[2]-1),abc={2,3,4},case="#4 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(3,2,4,idx[1],idx[2]-1,idx[2],idx[4]-1),abc={3,2,4},case="#1 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2,3,4,idx[3],idx[5]-1,idx[1],idx[2]-1),abc={2,3,4},case="#5 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3,2,4,idx[1],idx[2]-1,idx[3],idx[5]-1),abc={3,2,4},case="#1 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2,3,4,idx[4],idx[5]-1,idx[1],idx[2]-1),abc={2,3,4},case="#6 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3,2,4,idx[1],idx[2]-1,idx[4],idx[5]-1),abc={3,2,4},case="#1 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2,3,4,idx[1],idx[3]-1,idx[1],idx[3]-1),abc={2,3,4},case="#2 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2,3,4,idx[1],idx[5]-1,idx[1],idx[3]-1),abc={2,3,4},case="#3 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(3,2,4,idx[1],idx[3]-1,idx[1],idx[5]-1),abc={3,2,4},case="#2 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2,3,4,idx[2],idx[4]-1,idx[1],idx[3]-1),abc={2,3,4},case="#4 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(3,2,4,idx[1],idx[3]-1,idx[2],idx[4]-1),abc={3,2,4},case="#2 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2,3,4,idx[3],idx[5]-1,idx[1],idx[3]-1),abc={2,3,4},case="#5 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3,2,4,idx[1],idx[3]-1,idx[3],idx[5]-1),abc={3,2,4},case="#2 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2,3,4,idx[4],idx[5]-1,idx[1],idx[3]-1),abc={2,3,4},case="#6 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3,2,4,idx[1],idx[3]-1,idx[4],idx[5]-1),abc={3,2,4},case="#2 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(2,3,4,idx[1],idx[5]-1,idx[1],idx[5]-1),abc={2,3,4},case="#3 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(2,3,4,idx[2],idx[4]-1,idx[1],idx[5]-1),abc={2,3,4},case="#4 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(3,2,4,idx[1],idx[5]-1,idx[2],idx[4]-1),abc={3,2,4},case="#3 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(2,3,4,idx[3],idx[5]-1,idx[1],idx[5]-1),abc={2,3,4},case="#5 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3,2,4,idx[1],idx[5]-1,idx[3],idx[5]-1),abc={3,2,4},case="#3 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(2,3,4,idx[4],idx[5]-1,idx[1],idx[5]-1),abc={2,3,4},case="#6 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3,2,4,idx[1],idx[5]-1,idx[4],idx[5]-1),abc={3,2,4},case="#3 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(2,3,4,idx[2],idx[4]-1,idx[2],idx[4]-1),abc={2,3,4},case="#4 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(2,3,4,idx[3],idx[5]-1,idx[2],idx[4]-1),abc={2,3,4},case="#5 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3,2,4,idx[2],idx[4]-1,idx[3],idx[5]-1),abc={3,2,4},case="#4 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(2,3,4,idx[4],idx[5]-1,idx[2],idx[4]-1),abc={2,3,4},case="#6 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3,2,4,idx[2],idx[4]-1,idx[4],idx[5]-1),abc={3,2,4},case="#4 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(2,3,4,idx[3],idx[5]-1,idx[3],idx[5]-1),abc={2,3,4},case="#5 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(2,3,4,idx[4],idx[5]-1,idx[3],idx[5]-1),abc={2,3,4},case="#6 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3,2,4,idx[3],idx[5]-1,idx[4],idx[5]-1),abc={3,2,4},case="#5 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(2,3,4,idx[4],idx[5]-1,idx[4],idx[5]-1),abc={2,3,4},case="#6 vs #6 with "..nv.." variable(s)"}
              }

    for key, val in ipairs(tab) do
      assertTrue(val.t1:axpbypc(val.t2,unpack(val.abc)):getvec(1,nc) == val.v ,val.case)
    end
  end
end


function TestTPSALinComb:testAxpbypC()
  local ct,cv = ctpsa, cvector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helpers to setvec tpsas and vectors within start..end
    local mkt = \s,e -> ct(d):setvec(s, cv(e-s+1):fill((s..e))*1i)
    local mkv = \a,b,c,s1,e1,s2,e2 -> a*cv(nc):setvec(s1..e1,(s1..e1))*1i + b*cv(nc):setvec(s2..e2,(s2..e2))*1i + cv(nc):set(1,1,c)

      local tab ={
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2i,3i,4i,idx[0],idx[1]-1,idx[0],idx[1]-1),abc={2i,3i,4i},case="#0 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2i,3i,4i,idx[1],idx[2]-1,idx[0],idx[1]-1),abc={2i,3i,4i},case="#1 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(3i,2i,4i,idx[0],idx[1]-1,idx[1],idx[2]-1),abc={3i,2i,4i},case="#0 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2i,3i,4i,idx[1],idx[3]-1,idx[0],idx[1]-1),abc={2i,3i,4i},case="#2 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(3i,2i,4i,idx[0],idx[1]-1,idx[1],idx[3]-1),abc={3i,2i,4i},case="#0 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2i,3i,4i,idx[1],idx[5]-1,idx[0],idx[1]-1),abc={2i,3i,4i},case="#3 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(3i,2i,4i,idx[0],idx[1]-1,idx[1],idx[5]-1),abc={3i,2i,4i},case="#0 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2i,3i,4i,idx[2],idx[4]-1,idx[0],idx[1]-1),abc={2i,3i,4i},case="#4 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(3i,2i,4i,idx[0],idx[1]-1,idx[2],idx[4]-1),abc={3i,2i,4i},case="#0 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2i,3i,4i,idx[3],idx[5]-1,idx[0],idx[1]-1),abc={2i,3i,4i},case="#5 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3i,2i,4i,idx[0],idx[1]-1,idx[3],idx[5]-1),abc={3i,2i,4i},case="#0 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),v=mkv(2i,3i,4i,idx[4],idx[5]-1,idx[0],idx[1]-1),abc={2i,3i,4i},case="#6 vs #0 with "..nv.." variable(s)"},
                {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3i,2i,4i,idx[0],idx[1]-1,idx[4],idx[5]-1),abc={3i,2i,4i},case="#0 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2i,3i,4i,idx[1],idx[2]-1,idx[1],idx[2]-1),abc={2i,3i,4i},case="#1 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2i,3i,4i,idx[1],idx[3]-1,idx[1],idx[2]-1),abc={2i,3i,4i},case="#2 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(3i,2i,4i,idx[1],idx[2]-1,idx[1],idx[3]-1),abc={3i,2i,4i},case="#1 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2i,3i,4i,idx[1],idx[5]-1,idx[1],idx[2]-1),abc={2i,3i,4i},case="#3 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(3i,2i,4i,idx[1],idx[2]-1,idx[1],idx[5]-1),abc={3i,2i,4i},case="#1 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2i,3i,4i,idx[2],idx[4]-1,idx[1],idx[2]-1),abc={2i,3i,4i},case="#4 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(3i,2i,4i,idx[1],idx[2]-1,idx[2],idx[4]-1),abc={3i,2i,4i},case="#1 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2i,3i,4i,idx[3],idx[5]-1,idx[1],idx[2]-1),abc={2i,3i,4i},case="#5 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3i,2i,4i,idx[1],idx[2]-1,idx[3],idx[5]-1),abc={3i,2i,4i},case="#1 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),v=mkv(2i,3i,4i,idx[4],idx[5]-1,idx[1],idx[2]-1),abc={2i,3i,4i},case="#6 vs #1 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3i,2i,4i,idx[1],idx[2]-1,idx[4],idx[5]-1),abc={3i,2i,4i},case="#1 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2i,3i,4i,idx[1],idx[3]-1,idx[1],idx[3]-1),abc={2i,3i,4i},case="#2 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2i,3i,4i,idx[1],idx[5]-1,idx[1],idx[3]-1),abc={2i,3i,4i},case="#3 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(3i,2i,4i,idx[1],idx[3]-1,idx[1],idx[5]-1),abc={3i,2i,4i},case="#2 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2i,3i,4i,idx[2],idx[4]-1,idx[1],idx[3]-1),abc={2i,3i,4i},case="#4 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(3i,2i,4i,idx[1],idx[3]-1,idx[2],idx[4]-1),abc={3i,2i,4i},case="#2 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2i,3i,4i,idx[3],idx[5]-1,idx[1],idx[3]-1),abc={2i,3i,4i},case="#5 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3i,2i,4i,idx[1],idx[3]-1,idx[3],idx[5]-1),abc={3i,2i,4i},case="#2 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),v=mkv(2i,3i,4i,idx[4],idx[5]-1,idx[1],idx[3]-1),abc={2i,3i,4i},case="#6 vs #2 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3i,2i,4i,idx[1],idx[3]-1,idx[4],idx[5]-1),abc={3i,2i,4i},case="#2 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(2i,3i,4i,idx[1],idx[5]-1,idx[1],idx[5]-1),abc={2i,3i,4i},case="#3 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(2i,3i,4i,idx[2],idx[4]-1,idx[1],idx[5]-1),abc={2i,3i,4i},case="#4 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(3i,2i,4i,idx[1],idx[5]-1,idx[2],idx[4]-1),abc={3i,2i,4i},case="#3 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(2i,3i,4i,idx[3],idx[5]-1,idx[1],idx[5]-1),abc={2i,3i,4i},case="#5 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3i,2i,4i,idx[1],idx[5]-1,idx[3],idx[5]-1),abc={3i,2i,4i},case="#3 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),v=mkv(2i,3i,4i,idx[4],idx[5]-1,idx[1],idx[5]-1),abc={2i,3i,4i},case="#6 vs #3 with "..nv.." variable(s)"},
                {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3i,2i,4i,idx[1],idx[5]-1,idx[4],idx[5]-1),abc={3i,2i,4i},case="#3 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(2i,3i,4i,idx[2],idx[4]-1,idx[2],idx[4]-1),abc={2i,3i,4i},case="#4 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(2i,3i,4i,idx[3],idx[5]-1,idx[2],idx[4]-1),abc={2i,3i,4i},case="#5 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(3i,2i,4i,idx[2],idx[4]-1,idx[3],idx[5]-1),abc={3i,2i,4i},case="#4 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),v=mkv(2i,3i,4i,idx[4],idx[5]-1,idx[2],idx[4]-1),abc={2i,3i,4i},case="#6 vs #4 with "..nv.." variable(s)"},
                {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3i,2i,4i,idx[2],idx[4]-1,idx[4],idx[5]-1),abc={3i,2i,4i},case="#4 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(2i,3i,4i,idx[3],idx[5]-1,idx[3],idx[5]-1),abc={2i,3i,4i},case="#5 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),v=mkv(2i,3i,4i,idx[4],idx[5]-1,idx[3],idx[5]-1),abc={2i,3i,4i},case="#6 vs #5 with "..nv.." variable(s)"},
                {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(3i,2i,4i,idx[3],idx[5]-1,idx[4],idx[5]-1),abc={3i,2i,4i},case="#5 vs #6 with "..nv.." variable(s)"},
                {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),v=mkv(2i,3i,4i,idx[4],idx[5]-1,idx[4],idx[5]-1),abc={2i,3i,4i},case="#6 vs #6 with "..nv.." variable(s)"}
              }

    for key, val in ipairs(tab) do
      assertTrue(val.t1:axpbypc(val.t2,unpack(val.abc)):getvec(1,nc) == val.v ,val.case)
    end
  end
end


function TestTPSAArithmetic:testAddR()  
  local t,v =tpsa, vector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helper to set tpsas within start..end
    local mkt = \s,e -> t(d):setvec(s, v(e-s+1):fill((s..e)))
    local tab = {
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#0 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#1 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#0 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#2 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#0 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#3 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#0 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#4 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#0 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#5 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#0 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#6 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#0 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#1 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#2 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#1 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#3 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#1 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#4 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#1 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#5 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#1 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#6 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#1 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#2 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#3 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#2 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#4 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#2 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#5 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#2 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#6 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#2 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#3 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#4 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#3 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#5 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#3 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#6 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#3 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#4 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#5 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#4 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#6 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#4 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#5 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#6 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#5 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#6 vs #6 with "..nv.." variable(s)"}
          }

    for key, val in ipairs(tab) do
      assertTrue(val.t1:axpbypc(val.t2,unpack(val.abc)) == val.t1+val.t2,val.case)
    end
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(mkt(idx[0],idx[1]-1),1,0,1) == mkt(idx[0],idx[1]-1)+                   1) 
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(mkt(idx[0],idx[1]-1),1,0,1) == 1                   +mkt(idx[0],idx[1]-1))
  end
end


function TestTPSAArithmetic:testAddC()
  local ct,cv = ctpsa, cvector

  -- helper to setvec tpsas within start..end
  local mkt = \s,e -> ct():setvec(s, cv(e-s+1):fill((s..e))*1i)

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helpers to setvec tpsas and vectors within start..end
    local mkt = \s,e -> ct(d):setvec(s, cv(e-s+1):fill((s..e))*1i)

    local tab = {
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#0 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#1 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#0 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#2 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#0 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#3 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#0 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#4 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#0 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#5 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#0 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,1,0},case="#6 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#0 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#1 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#2 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#1 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#3 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#1 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#4 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#1 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#5 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#1 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,1,0},case="#6 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#1 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#2 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#3 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#2 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#4 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#2 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#5 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#2 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,1,0},case="#6 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#2 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#3 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#4 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#3 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#5 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#3 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,1,0},case="#6 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#3 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#4 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#5 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#4 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,1,0},case="#6 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#4 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#5 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,1,0},case="#6 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#5 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,1,0},case="#6 vs #6 with "..nv.." variable(s)"}
          }

    for key, val in ipairs(tab) do
      assertTrue(val.t1:axpbypc(val.t2,unpack(val.abc)) == val.t1+val.t2,val.case)
    end
    assertTrue(mkt(idx[3],idx[5]-1):axpbypc(ctpsa(d):set(1,1)  ,1,1, 0) == mkt(idx[3],idx[5]-1)+tpsa(d):set("0",1)  )
    assertTrue(mkt(idx[4],idx[5]-1):axpbypc(ctpsa(d):set(1,1)  ,1,1, 0) == mkt(idx[4],idx[5]-1)+tpsa(d):set("0",1)  )
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(ctpsa(d):set(1,1)  ,1,0,1i) == mkt(idx[0],idx[1]-1)+                  1i)
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(ctpsa(d):set(1,1)  ,1,0,1i) == 1i                  +mkt(idx[0],idx[1]-1))
  end
end


function TestTPSAArithmetic:testSubR()
  local t,v =tpsa, vector
  
  -- helpes to set tpsas within start..end
  local mkt = \s,e -> t():setvec(s, v(e-s+1):fill((s..e)))

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

      -- helpers to setvec tpsas and vectors within start..end
      local mkt = \s,e -> t(d):setvec(s, v(e-s+1):fill((s..e)))

    local tab = {
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#0 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#1 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#0 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#2 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#0 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#3 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#0 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#4 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#0 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#5 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#0 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#6 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#0 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#1 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#2 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#1 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#3 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#1 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#4 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#1 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#5 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#1 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#6 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#1 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#2 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#3 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#2 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#4 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#2 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#5 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#2 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#6 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#2 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#3 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#4 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#3 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#5 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#3 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#6 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#3 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#4 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#5 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#4 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#6 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#4 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#5 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#6 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#5 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#6 vs #6 with "..nv.." variable(s)"}
          }

    for key, val in ipairs(tab) do
      assertTrue(val.t1:axpbypc(val.t2,unpack(val.abc)) == val.t1-val.t2,val.case)
    end
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(mkt(idx[0],idx[1]-1),1,0,-1) == mkt(idx[0],idx[1]-1)-                   1)
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(mkt(idx[0],idx[1]-1),1,0,-1) == 1                   -mkt(idx[0],idx[1]-1))
  end
end


function TestTPSAArithmetic:testSubC()
  local ct,cv = ctpsa, cvector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helper to set tpsas within start..end
    local mkt = \s,e -> ct(d):setvec(s, cv(e-s+1):fill((s..e))*1i)

    local tab = {
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#0 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#1 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#0 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#2 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#0 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#3 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#0 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#4 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#0 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#5 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#0 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),abc={1,-1,0},case="#6 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#0 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#1 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#2 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#1 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#3 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#1 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#4 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#1 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#5 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#1 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),abc={1,-1,0},case="#6 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#1 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#2 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#3 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#2 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#4 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#2 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#5 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#2 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),abc={1,-1,0},case="#6 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#2 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#3 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#4 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#3 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#5 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#3 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),abc={1,-1,0},case="#6 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#3 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#4 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#5 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#4 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),abc={1,-1,0},case="#6 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#4 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#5 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),abc={1,-1,0},case="#6 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#5 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),abc={1,-1,0},case="#6 vs #6 with "..nv.." variable(s)"}
          }

    for key, val in ipairs(tab) do
      assertTrue(val.t1:axpbypc(val.t2,unpack(val.abc)) == val.t1-val.t2,val.case)
    end
    assertTrue(mkt(idx[3],idx[5]-1):axpbypc(ctpsa(d):set(1,1)  ,1,-1, 0) == mkt(idx[3],idx[5]-1)-  tpsa(d):set("0",1))
    assertTrue(mkt(idx[4],idx[5]-1):axpbypc(ctpsa(d):set(1,1)  ,1,-1, 0) == mkt(idx[4],idx[5]-1)-  tpsa(d):set("0",1))
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(mkt(idx[0],idx[1]-1),1,0,-1) == mkt(idx[0],idx[1]-1)-                   1)
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(mkt(idx[0],idx[1]-1),-1,0,1) == 1                   -mkt(idx[0],idx[1]-1))
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(ctpsa(d):set(1,1)  ,1,0,-1i) == mkt(idx[0],idx[1]-1)-                  1i)
    assertTrue(mkt(idx[0],idx[1]-1):axpbypc(ctpsa(d):set(1,1) ,-1,0, 1i) == 1i                  -mkt(idx[0],idx[1]-1))
  end
end


local function mul_polys(P, Q)
    local result = {}
    for exp1_mono, coeff1 in pairs(P) do        
        for exp2_mono, coeff2 in pairs(Q) do                
            local new_exp = exp1_mono + exp2_mono
            local new_coeff = coeff1 * coeff2
            if result[tostring(new_exp)] then
                result[tostring(new_exp)] = result[tostring(new_exp)] + new_coeff --think squared
            else
                result[tostring(new_exp)] = new_coeff
            end
        end
    end
  return result
end


local function tpsa2Poly(t)
  local poly = {}
  local size = t:desc():maxlen()
  for i=1,size do
    local mono,_ = t:get_mono(i)
    poly[mono] = t:get(i)
  end
  return poly
end

local function poly2Vec(poly,d,ctor)
  local t    = ctor(d)
  local size = d:maxlen()
  for exp, coeff in pairs(poly) do
    if d:get_idx(exp)~=0 then t:set(exp,coeff) end
  end
  return t:getvec(1,size)
end

local function polymul(t1,t2,ctor)
  local P,Q = tpsa2Poly(t1),tpsa2Poly(t2)
  local r =  mul_polys(P, Q)
  return poly2Vec(r,t1:desc(),ctor) 
end


function TestTPSAArithmetic:testMulR()
  local t,v = tpsa, vector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helper to set tpsas within start..end
    local mkt = \s,e -> t(d):setvec(s, v(e-s+1):fill((s..e)))
  
    local tab = {
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),case="#0 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),case="#1 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),case="#0 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),case="#2 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),case="#0 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#3 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),case="#0 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),case="#4 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),case="#0 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#5 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),case="#0 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#6 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),case="#0 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),case="#1 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),case="#2 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),case="#1 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#3 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),case="#1 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),case="#4 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),case="#1 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#5 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),case="#1 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#6 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),case="#1 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),case="#2 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#3 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),case="#2 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),case="#4 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),case="#2 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#5 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),case="#2 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#6 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),case="#2 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#3 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),case="#4 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#3 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#5 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#3 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#6 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#3 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),case="#4 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#5 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),case="#4 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#6 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),case="#4 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#5 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#6 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#5 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#6 vs #6 with "..nv.." variable(s)"}
          }

    for key, val in ipairs(tab) do
      assertTrue((val.t1*val.t2):getvec(1,nc) == polymul(val.t1,val.t2,t),val.case)
    end
    
    assertTrue((mkt(idx[4],idx[5]-1)*                   1):getvec(1,nc) == polymul(mkt(idx[4],idx[5]-1),mkt(idx[0],idx[1]-1),t))
    assertTrue((1*                   mkt(idx[4],idx[5]-1)):getvec(1,nc) == polymul(mkt(idx[0],idx[1]-1),mkt(idx[4],idx[5]-1),t))
  end
end


function TestTPSAArithmetic:testMulC()
local ct,cv = ctpsa, cvector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helpers to setvec tpsas and vectors within start..end
    local mkt = \s,e -> ct(d):setvec(s, cv(e-s+1):fill((s..e))*1i)

  local tab = {
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),case="#0 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),case="#1 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),case="#0 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),case="#2 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),case="#0 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#3 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),case="#0 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),case="#4 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),case="#0 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#5 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),case="#0 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#6 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),case="#0 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),case="#1 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),case="#2 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),case="#1 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#3 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),case="#1 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),case="#4 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),case="#1 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#5 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),case="#1 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#6 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),case="#1 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),case="#2 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#3 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),case="#2 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),case="#4 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),case="#2 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#5 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),case="#2 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#6 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),case="#2 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#3 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),case="#4 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#3 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#5 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#3 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#6 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#3 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),case="#4 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#5 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),case="#4 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#6 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),case="#4 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#5 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#6 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#5 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#6 vs #6 with "..nv.." variable(s)"}
          }

    for key, val in ipairs(tab) do
      assertTrue((val.t1*val.t2):getvec(1,nc) == polymul(val.t1,val.t2,ct),val.case)
    end

    assertTrue((mkt(idx[4],idx[5]-1)*  tpsa(d):set("0",1)):getvec(1,nc) == polymul(mkt(idx[4],idx[5]-1),tpsa(d):set("0",1)  ,ct))
    assertTrue((tpsa(d)  :set("0",1)*mkt(idx[4],idx[5]-1)):getvec(1,nc) == polymul(mkt(idx[4],idx[5]-1),tpsa(d):set("0",1)  ,ct))
    assertTrue((mkt(idx[4],idx[5]-1)*                  1i):getvec(1,nc) == polymul(mkt(idx[4],idx[5]-1),mkt(idx[0],idx[1]-1),ct))
    assertTrue((1i*                  mkt(idx[4],idx[5]-1)):getvec(1,nc) == polymul(mkt(idx[0],idx[1]-1),mkt(idx[4],idx[5]-1),ct))
  end
end


function TestTPSAInv:testInversionR()
local t,v = tpsa, vector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helpers to setvec tpsas and vectors within start..end
    local mkt = \s,e -> t(d):setvec(s, v(e-s+1):fill((s..e))):set("0",1)

    assertTrue((mkt(idx[0],idx[1]-1)*mkt(idx[0],idx[1]-1):inv()) == 1)
    assertTrue((mkt(idx[1],idx[2]-1)*mkt(idx[1],idx[2]-1):inv()) == 1)
    assertTrue((mkt(idx[1],idx[3]-1)*mkt(idx[1],idx[3]-1):inv()) == 1)
    assertTrue((mkt(idx[1],idx[5]-1)*mkt(idx[1],idx[5]-1):inv()) == 1)
    assertTrue((mkt(idx[4],idx[5]-1)*mkt(idx[4],idx[5]-1):inv()) == 1)
    assertTrue((mkt(idx[2],idx[4]-1)*mkt(idx[2],idx[4]-1):inv()) == 1)
    assertTrue((mkt(idx[3],idx[5]-1)*mkt(idx[3],idx[5]-1):inv()) == 1)
  end
end


function TestTPSAInv:testInversionC()
local ct,cv = ctpsa, cvector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helpers to setvec tpsas and vectors within start..end
    local mkt = \s,e -> ct(d):setvec(s, cv(e-s+1):fill((s..e))*1i):set("0",1i)

    assertTrue((mkt(idx[0],idx[1]-1)*mkt(idx[0],idx[1]-1):inv()) == 1)
    assertTrue((mkt(idx[1],idx[2]-1)*mkt(idx[1],idx[2]-1):inv()) == 1)
    assertTrue((mkt(idx[1],idx[3]-1)*mkt(idx[1],idx[3]-1):inv()) == 1)
    assertTrue((mkt(idx[1],idx[5]-1)*mkt(idx[1],idx[5]-1):inv()) == 1)
    assertTrue((mkt(idx[4],idx[5]-1)*mkt(idx[4],idx[5]-1):inv()) == 1)
    assertTrue((mkt(idx[2],idx[4]-1)*mkt(idx[2],idx[4]-1):inv()) == 1)
    assertTrue((mkt(idx[3],idx[5]-1)*mkt(idx[3],idx[5]-1):inv()) == 1)
  end
end


function TestTPSAArithmetic:testDivR()
local t,v = tpsa, vector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helper to set tpsas within start..end
    local mkt = \s,e -> t(d):setvec(s, v(e-s+1):fill((s..e))):set("0",1)
  
    local tab = {
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),case="#0 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),case="#1 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),case="#0 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),case="#2 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),case="#0 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#3 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),case="#0 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),case="#4 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),case="#0 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#5 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),case="#0 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#6 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),case="#0 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),case="#1 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),case="#2 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),case="#1 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#3 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),case="#1 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),case="#4 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),case="#1 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#5 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),case="#1 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#6 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),case="#1 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),case="#2 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#3 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),case="#2 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),case="#4 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),case="#2 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#5 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),case="#2 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#6 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),case="#2 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#3 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),case="#4 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#3 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#5 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#3 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#6 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#3 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),case="#4 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#5 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),case="#4 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#6 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),case="#4 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#5 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#6 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#5 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#6 vs #6 with "..nv.." variable(s)"}
          }

    for key, val in ipairs(tab) do
      assertTrue(val.t1/val.t2 == val.t1*val.t2:inv(),val.case)
    end

    assertTrue((mkt(idx[4],idx[5]-1)/                   2) == mkt(idx[4],idx[5]-1)*tpsa(d)  :set("0",2):inv())
    assertTrue((2/                   mkt(idx[4],idx[5]-1)) == tpsa(d)  :set("0",2)*mkt(idx[4],idx[5]-1):inv())
  end
end


function TestTPSAArithmetic:testDivC()
local ct,cv = ctpsa, cvector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helper to set tpsas within start..end
    local mkt = \s,e -> ct(d):setvec(s, cv(e-s+1):fill((s..e))*1i):set("0",1i)
  
    local tab = {
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[0],idx[1]-1),case="#0 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[0],idx[1]-1),case="#1 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[2]-1),case="#0 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[0],idx[1]-1),case="#2 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[3]-1),case="#0 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#3 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[1],idx[5]-1),case="#0 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[0],idx[1]-1),case="#4 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[2],idx[4]-1),case="#0 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#5 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[3],idx[5]-1),case="#0 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[0],idx[1]-1),case="#6 vs #0 with "..nv.." variable(s)"},
            {t1=mkt(idx[0],idx[1]-1),t2=mkt(idx[4],idx[5]-1),case="#0 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[2]-1),case="#1 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[2]-1),case="#2 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[3]-1),case="#1 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#3 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[1],idx[5]-1),case="#1 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[2]-1),case="#4 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[2],idx[4]-1),case="#1 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#5 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[3],idx[5]-1),case="#1 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[2]-1),case="#6 vs #1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),t2=mkt(idx[4],idx[5]-1),case="#1 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[3]-1),case="#2 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#3 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[1],idx[5]-1),case="#2 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[3]-1),case="#4 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[2],idx[4]-1),case="#2 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#5 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[3],idx[5]-1),case="#2 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[3]-1),case="#6 vs #2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),t2=mkt(idx[4],idx[5]-1),case="#2 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#3 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[1],idx[5]-1),case="#4 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#3 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#5 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#3 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[1],idx[5]-1),case="#6 vs #3 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#3 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[2],idx[4]-1),case="#4 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#5 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[3],idx[5]-1),case="#4 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[2],idx[4]-1),case="#6 vs #4 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),t2=mkt(idx[4],idx[5]-1),case="#4 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#5 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[3],idx[5]-1),case="#6 vs #5 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#5 vs #6 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),t2=mkt(idx[4],idx[5]-1),case="#6 vs #6 with "..nv.." variable(s)"}
          }

    for key, val in ipairs(tab) do
      assertTrue((val.t1/val.t2) == val.t1*val.t2:inv(),val.case)
    end
    
    assertTrue((mkt(idx[4],idx[5]-1)/                  2i) == mkt(idx[4],idx[5]-1)*ctpsa(d):set("0",2i):inv())
    assertTrue((2i/                  mkt(idx[4],idx[5]-1)) == ctpsa(d):set("0",2i)*mkt(idx[4],idx[5]-1):inv())
  end
end

function diff_mono(m1,m2)
  local diff = {}
  for i=1,#m1 do
    diff[i] = m1[i]-m2[i]
  end
end

function deriv_coef(m1,m2)
  local coef = 1
  for v=1,#m1 do
    local tmp = 1
    for j=1,m2[v] do
      tmp = tmp*(m1[v]-j+1)
    end
    coef = coef*tmp 
  end
  return coef
end

function is_valid_mono(m)
  for v, ord in ipairs(m) do
    if ord<0 then return 0 end
  end
  return 1
end

function deriv_poly(t,deriv,ctor)
  local r = ctor(t:desc())
  local derivative = {}
  local P = tpsa2Poly(t1)
  
  for exp_mono, coef in ipairs(P) do
    local exp = exp_mono:totable()
    local new_exp = diff_mono(m1,m2)
    if is_valid_mono(new_exp) then
      coef = deriv_coef(exp,deriv)*coef
    end
    t:set(monomial(new_exp),coef)
  end
  return r
end

function TestTPSADeriv: testDerivation()
local ct,cv = ctpsa, cvector

  for _,d in ipairs({d1v,d2v,d3v,d5v}) do
    local mo, nc, nv = d:maxord(), d:maxlen(), d:nvnp()
    local idx = {[0]=1} for o=0,mo do idx[o+1] = d:maxlen(o)+1 end

    -- helper to set tpsas within start..end
    local mkt = \s,e -> ct(d):setvec(s, cv(e-s+1):fill((s..e))*1i):set("0",1i)
  
    local tab = {
            {t1=mkt(idx[0],idx[1]-1),case="#0 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[2]-1),case="#1 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[3]-1),case="#2 with "..nv.." variable(s)"},
            {t1=mkt(idx[1],idx[5]-1),case="#3 with "..nv.." variable(s)"},
            {t1=mkt(idx[2],idx[4]-1),case="#4 with "..nv.." variable(s)"},
            {t1=mkt(idx[3],idx[5]-1),case="#5 with "..nv.." variable(s)"},
            {t1=mkt(idx[4],idx[5]-1),case="#6 with "..nv.." variable(s)"},
          }

    for key, val in ipairs(tab) do
      for i=1,val.t1:nv() do
        assertTrue(val.t1:deriv(i                           ) == deriv_poly(val.t1,val.t1:get_mono(i):totable()),val.case)
      end
      for i=1,d:maxlen() do
        assertTrue(val.t1:deriv(val.t1:get_mono(i):totable()) == deriv_poly(val.t1,val.t1:get_mono(i):totable()),val.case)
      end
    end
  end
end
--pensare a teardown e setup, pensare a totable, pensare a derivation e scrivere e capire quali casi scegliere.Per ora stessi casi di prima