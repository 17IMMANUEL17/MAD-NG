--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, tpsa_eqn                                in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, assrtIsFalse              in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad                               in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

TestTPSAOps = {}


TestIs = {}
TestConstr = {}
TestProm = {}
TestLogicOper = {}
TestSetGet  = {}


function TestConstr:testConstrDefault()
  local ord  = 15
  local nv = 2
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local max_n_coef = ((ord+nv)*(ord+nv - 1))/2
  assertEquals(t.mo,ord)
  assertEquals(ct.mo,ord)
  

  --check all order equal to zeros
  for o = 0, max_n_coef-1 do
    assertEquals(t.coef[o],0)
    assertEquals(ct.coef[o], 0 + 0i)
  end

  --same check for only one variable 
  local ord  = 15
  local nv = 1
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local max_ord = ord
  assertEquals(t.mo,ord)
  assertEquals(ct.mo,ord)

  --check all order equal to zeros
  for o = 0, max_ord-1 do
    assertEquals(t.coef[o],0)
    assertEquals(ct.coef[o], 0 + 0i)
  end
 
end

function TestConstr:testConstrParams()
  local mo  = 15
  local nv = 2
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d,1)
  local ct = ctpsa(d,1)
  
  assertEquals(d.mo, 15)
  assertEquals(d.nv, 2)
  assertEquals(d.np, 3)
  assertEquals(d.po, 2)
  assertEquals(t.mo, 1)
  assertEquals(ct.mo,1)

  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  assertEquals(t2.mo, 15)
  assertEquals(ct2.mo, 15)

  -- check with only one variable
  local mo  = 15
  local nv = 1
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d,1)
  local ct = ctpsa(d,1)

  assertEquals(d.mo, 15)
  assertEquals(d.nv, 1)
  assertEquals(d.np, 3)
  assertEquals(d.po, 2)
  assertEquals(t.mo, 1)
  assertEquals(ct.mo,1)

  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  assertEquals(t2.mo, 15)
  assertEquals(ct2.mo, 15)



-- other stuff to be tested
end


function TestIs:testTandD()
  local ord  = 15
  local nv = 2
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)

  assertTrue(is_tpsa(t))
  assertTrue(is_ctpsa(ct))
  assertTrue(is_gtpsad(d))
  assertTrue(not is_tpsa(ct))
  assertTrue(not is_ctpsa(t))
  assertTrue(not is_tpsa(d))
  assertTrue(not is_ctpsa(d))
  assertTrue(not is_gtpsad(t))
  assertTrue(not is_gtpsad(ct))
  assertTrue(not is_tpsa(0))
  assertTrue(not is_ctpsa(0))
  assertTrue(not is_gtpsad(0))

  local ord  = 15
  local nv = 1
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)

  assertTrue(is_tpsa(t))
  assertTrue(is_ctpsa(ct))
  assertTrue(is_gtpsad(d))
  assertTrue(not is_tpsa(ct))
  assertTrue(not is_ctpsa(t))
  assertTrue(not is_tpsa(d))
  assertTrue(not is_ctpsa(d))
  assertTrue(not is_gtpsad(t))
  assertTrue(not is_gtpsad(ct))
  assertTrue(not is_tpsa(0))
  assertTrue(not is_ctpsa(0))
  assertTrue(not is_gtpsad(0))
  end

  
function TestProm:testPromotion()
  local number = 1
  local complex = 1 + 1i

  local mo  = 15
  local nv = 2
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  assertTrue(is_tpsa(number + t))
  assertTrue(is_tpsa(t + number))
  assertTrue(is_tpsa(t + t2))
  assertTrue(is_ctpsa(number + ct))
  assertTrue(is_ctpsa(complex + t))
  assertTrue(is_ctpsa(complex + ct))
  assertTrue(is_ctpsa(t + ct))
  assertTrue(is_ctpsa(ct + number))
  assertTrue(is_ctpsa(ct + complex))
  assertTrue(is_ctpsa(ct + t))
  assertTrue(is_ctpsa(ct + ct2))
end


function TestLogicOper:testEq()
  local number = 1
  local complex = 1 + 1i

  local mo  = 15
  local nv = 2
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  assertTrue(not (t == number))
  assertTrue(not (number == t))
  assertTrue(not (ct == number))
  assertTrue(not (number == ct))
  assertTrue(0 == t)
  assertTrue(0 == ct)
  assertTrue(ct == (0 + 0i))

end


function TestLogicOper:testDiff()

end


function TestLogicOper:testLarger()

end



function TestSetGet:testSet()

end

function TestSetGet:testGet()
end
