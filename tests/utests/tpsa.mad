--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module regression tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, gtpsa_desc                                    in MAD
local assertEquals, assertAlmostEquals, assertAllAlmostEquals     in MAD.utest
local eps, abs                                                    in MAD.gmath

-- locals ---------------------------------------------------------------------o

local dat = require 'tpsa_dat'
local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

TestTPSAFun = {}

local function checkFun1 (fnam)
  gtpsa_desc(1,15)
  for _,c in ipairs(dat.fun[fnam]) do
  for _,o in ipairs(ord) do
    local t = tpsa(o):set(1,c[0]):set(2,1)
    local r = t[fnam](t)
--    io.write('f=', fnam, '(', c[0], ') @ ', o, '\n')
--    r:debug('r')
    for i=1,#t do
      local v = c[i] or 0
--      io.write('i=', i, ', v=', v, ', r=', r:get(i), '\n')
      if abs(v) > 1 then
        assertAlmostEquals(r:get(i) / v -1, 0, c.eps or i*eps)
      else
        assertAlmostEquals(r:get(i)       , v, c.eps or i*eps)
      end
    end
  end end
end

TestTPSAFun.testInv     = \s -> checkFun1('inv')
TestTPSAFun.testInvSqrt = \s -> checkFun1('invsqrt')
TestTPSAFun.testSqrt    = \s -> checkFun1('sqrt')
TestTPSAFun.testExp     = \s -> checkFun1('exp')
TestTPSAFun.testLog     = \s -> checkFun1('log')
TestTPSAFun.testSin     = \s -> checkFun1('sin')
TestTPSAFun.testCos     = \s -> checkFun1('cos')
TestTPSAFun.testTan     = \s -> checkFun1('tan')
TestTPSAFun.testCot     = \s -> checkFun1('cot')

-- end ------------------------------------------------------------------------o


