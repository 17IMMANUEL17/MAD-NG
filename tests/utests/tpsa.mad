--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: 
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, tpsa_eqn, monomial            in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, 
      assrtIsFalse, assertErrorMsgContains, 
      assertError, assertIsNil, assertFalse                      in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad, is_number, is_complex        in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

local Data = {}
Data.t1v = {}
Data.t2v = {}
Data.ct1v = {}
Data.ct2v = {}
local d1v = gtpsad(1,15)
local d2v = gtpsad(2,15)

TestCtor = {}
TestSet = {}
TestGet = {}
TestMonoString2Index = {}


for nv=1,2 do
  for key, ord in pairs(ord) do
    local d = gtpsad(nv,ord)
    Data.t1v[#Data.t1v+1] = tpsa()
    Data.ct1v[#Data.ct1v+1] = ctpsa()
    Data.t2v[#Data.t1v+1] = tpsa()
    Data.ct2v[#Data.ct1v+1] = ctpsa()
  end
end


function TestCtor:testCtorParams()
  local mo = 4
  local desc = gtpsad(2,4)
  local t1 = tpsa(mo)
  local t2 = tpsa(desc)
  local t3 = tpsa(t1)

  assertEquals(t1.nv(t1), 2)
  assertEquals(t1.maxord(t1), 4)
  assertEquals(t2.nv(t2), 2)
  assertEquals(t2.maxord(t2), 4)
  assertEquals(t3.nv(t3), 2)
  assertEquals(t3.maxord(t3), 4)
end


function TestMonoString2Index:testmonoString2IndexSingVar()
  local d = gtpsad(1,50)
  local t1 = tpsa()
  local t2 = tpsa()
  local ct1 = ctpsa()
  local ct2 = ctpsa()

  assertTrue(t1:set(monomial(1, 2),1) == t2:set("2", 1))
  assertTrue(t1:set(monomial(1, 21),1) == t2:set("L", 1))
  assertTrue(t1:set(monomial({16}),1) == t2:set("G", 1))
  assertTrue(t1:set(monomial(1, 42),1) == t2:set("g", 1))
  assertTrue(t1:set(monomial("a"),1) == t2:set("a", 1))
end


function TestMonoString2Index:testmonoString2IndexMultVar()
  local d = gtpsad(2,50)
  local t1 = tpsa()
  local t2 = tpsa()
  local ct1 = ctpsa()
  local ct2 = ctpsa()

  assertTrue(t1:set(monomial(2, 2),1) == t2:set("22", 1))
  assertTrue(t1:set(monomial(2, 21),1) == t2:set("LL", 1))
  assertTrue(t1:set(monomial({16, 15}),1) == t2:set("GF", 1))
  assertTrue(t1:set(monomial(2, 25),1) == t2:set("PP", 1))
  assertTrue(t1:set(monomial("AA"),1) == t2:set("AA", 1))
end


function TestGet:testGet0SingVar()
  local t = tpsa(d1v,4):set(1,1)
  local ct = ctpsa(d1v, 4):set0(1+1i)

  assertEquals(t:get0(), 1)
  assertEquals(ct:get0(), 1 + 1i)
end


function TestGet:testGet0MultVar()
  local t = tpsa(d2v,4):set0(1)
  local ct = ctpsa(d2v, 4):set0(1+1i)

  assertEquals(t:get0(), 1)
  assertEquals(ct:get0(), 1 + 1i)
end


