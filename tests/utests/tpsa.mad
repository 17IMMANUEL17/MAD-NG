--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: 
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, tpsa_eqn, monomial            in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, 
      assrtIsFalse, assertErrorMsgContains, 
      assertError, assertNil, assertFalse                      in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad, is_number, is_complex        in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

local Data = {}
Data.t1v = {}
Data.t2v = {}
Data.ct1v = {}
Data.ct2v = {}
local d1v = gtpsad(1,15)
local d2v = gtpsad(2,15)

TestTPSACtor = {}
TestTPSASet = {}
TestTPSAGet = {}
TestTPSA2Index = {}


for nv=1,2 do
  for key, ord in pairs(ord) do
    local d = gtpsad(nv,ord)
    Data.t1v[#Data.t1v+1] = tpsa()
    Data.ct1v[#Data.ct1v+1] = ctpsa()
    Data.t2v[#Data.t1v+1] = tpsa()
    Data.ct2v[#Data.ct1v+1] = ctpsa()
  end
end


function TestTPSACtor:testTPSACtorParams()
  local mo = 4
  local desc = gtpsad(2,4)
  local t1 = tpsa(mo)
  local t2 = tpsa(desc)
  local t3 = tpsa(t1)

  assertEquals(t1.nv(t1), 2)
  assertEquals(t1.maxord(t1), 4)
  assertEquals(t2.nv(t2), 2)
  assertEquals(t2.maxord(t2), 4)
  assertEquals(t3.nv(t3), 2)
  assertEquals(t3.maxord(t3), 4)
end


function TestTPSA2Index:testTPSAMonoStr2IndexSingVar()
  local d = gtpsad(1,50)
  local t = tpsa()
  local ct = ctpsa()

  assertEquals(t   :get_idx(monomial(1, 2)),  t:get_idx("2"))
  assertEquals(t:get_idx(monomial(1, 21),1),  t:get_idx("L"))
  assertEquals(t:get_idx(monomial(1, 42),1),  t:get_idx("g"))
  assertEquals(t :get_idx(monomial({16}),1),  t:get_idx("G"))
  assertEquals(t  :get_idx(monomial("a"),1),  t:get_idx("a"))
  assertEquals(ct   :get_idx(monomial(1, 2)), ct:get_idx("2"))
  assertEquals(ct:get_idx(monomial(1, 21),1), ct:get_idx("L"))
  assertEquals(ct:get_idx(monomial(1, 42),1), ct:get_idx("g"))
  assertEquals(ct :get_idx(monomial({16}),1), ct:get_idx("G"))
  assertEquals(ct  :get_idx(monomial("a"),1), ct:get_idx("a"))
end


function TestTPSA2Index:testTPSAMonoStr2IndexMultVar()
  local d = gtpsad(2,50)
  local t = tpsa()
  local ct = ctpsa()

  assertEquals(t     :get_idx(monomial(2,2)),  t:get_idx("22"))
  assertEquals(t   :get_idx(monomial(2, 21)),  t:get_idx("LL"))
  assertEquals(t   :get_idx(monomial(2, 25)),  t:get_idx("PP"))
  assertEquals(t:get_idx(monomial({16, 15})),  t:get_idx("GF"))
  assertEquals(t    :get_idx(monomial("AB")),  t:get_idx("AB"))
  assertEquals(ct     :get_idx(monomial(2,2)), ct:get_idx("22"))
  assertEquals(ct   :get_idx(monomial(2, 21)), ct:get_idx("LL"))
  assertEquals(ct   :get_idx(monomial(2, 25)), ct:get_idx("PP"))
  assertEquals(ct:get_idx(monomial({16, 15})), ct:get_idx("GF"))
  assertEquals(ct    :get_idx(monomial("AB")), ct:get_idx("AB"))
end


function TestTPSA2Index:testTPSAMono2IndexSingVar()
  local d = gtpsad(1,30)
  local t = tpsa()
  local ct = ctpsa()

  for ord = 0, 30 do
    assertEquals(t:get_idx(monomial(1,ord)), ord + 1)
  end
end


function TestTPSA2Index:testTPSAMono2IndexSingVar()
  local t = tpsa(d1v)
  local ct = ctpsa(d1v)
  
  --check that non valid orders return index 0
  assertEquals(t :get_idx(monomial(1,d1v:maxord() + 1)), 0)
  assertEquals(ct:get_idx(monomial(1,              -1)), 0)
  for ord = 0, d1v:maxord() do
    assertEquals(t :get_idx(monomial(1,ord)), ord + 1)
    assertEquals(ct:get_idx(monomial(1,ord)), ord + 1)
  end
end


function TestTPSA2Index:testTPSAMono2IndexMultVar()
  local t = tpsa(d2v)
  local ct = ctpsa(d2v)
  local count = 0
  
  --check that non valid orders return index 0
  assertEquals(t :get_idx(monomial({1, d1v:maxord()})), 0)
  assertEquals(t :get_idx(monomial({d1v:maxord(), 1})), 0)
  assertEquals(ct:get_idx(monomial({1, d1v:maxord()})), 0)
  assertEquals(ct:get_idx(monomial({d1v:maxord(), 1})), 0)
  assertEquals(t :get_idx(monomial({-1,           0})), 0)
  assertEquals(t :get_idx(monomial({0,           -1})), 0)
  assertEquals(ct:get_idx(monomial({-1,           0})), 0)
  assertEquals(ct:get_idx(monomial({0,           -1})), 0)
  for ord = 0, d1v:maxord() do
    for idx = 0, ord  do  --scanning all the coeff of a given order
      print(idx, ord - idx)
      assertEquals(t :get_idx(monomial({ord - idx, idx})), count + 1)
      assertEquals(ct:get_idx(monomial({ord - idx, idx})), count + 1)
      count = count + 1
    end
  end
end


function TestTPSAGet:testTPSAGet0SingVar()
  local t = tpsa(d1v,4):set(1,1)
  local ct = ctpsa(d1v, 4):set0(1+1i)

  assertEquals(t:get0(), 1)
  assertEquals(ct:get0(), 1 + 1i)
end


function TestTPSAGet:testTPSAGet0MultVar()
  local t = tpsa(d2v,4):set0(1)
  local ct = ctpsa(d2v, 4):set0(1+1i)

  assertEquals(t:get0(), 1)
  assertEquals(ct:get0(), 1 + 1i)
end


function TestTPSAGet:testTPSAGetSingVar()
  local d = gtpsad(1,10)
  local t  = tpsa():fill(1..11)
  local ct  = ctpsa():fill((1..11)) 
  
  ct = ct*1i
  for ord = 1, t:maxlen() do
    assertEquals(t:get(ord), ord)
    assertEquals(ct:get(ord), ord*1i)
  end
  for ord = -3, 0 do
    assertError(t.get,ord)
    assertError(ct.get,ord)
  end
  for ord = t:maxlen()+1, t:maxlen()+2 do
    assertError(t.get,ord)
    assertError(ct.get,ord)
  end
end


function TestTPSAGet:testTPSAGetMultVar()
  local d = gtpsad(2,10)
  local t  = tpsa():fill(1..66)
  local ct  = ctpsa():fill((1..66)) 

  ct = ct*1i
  for ord = 1, t:maxlen() do
    assertEquals(t:get(ord), ord)
    assertEquals(ct:get(ord), ord*1i)
  end
  for ord = -3, 0 do
    assertError(t.get,ord)
    assertError(ct.get,ord)
  end
  for ord = t:maxlen()+1, t:maxlen()+2 do
    assertError(t.get,ord)
    assertError(ct.get,ord)
  end
end


function TestTPSASet:testTPSASet0SingVar()

end


function TestTPSASet:testTPSASet0MultVar()
end
