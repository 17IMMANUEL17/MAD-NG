--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad                                in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, assrtIsFalse              in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad                               in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

TestTPSAOps = {}


TestIs = {}
TestConstr = {}
TestProm = {}
TestSet   = {}
TestGet = {}

function TestConstr:testConstrDefault()
    local ord  = 15
    local nv = 2
    local d = gtpsad(nv, ord)
    local t = tpsa(d)
    local ct = ctpsa(d)
    local max_ord = ((ord+nv)*(ord+nv - 1))/2
    assertEquals(t.mo,ord)
    assertEquals(ct.mo,ord)
   

    --check all order equal to zeros
    for o = 0, max_ord-1 do
      assertEquals(t.coef[o],0)
      assertEquals(ct.coef[o], 0 + 0i)
    end

   --same check for only one variable 
    local ord  = 15
    local nv = 1
    local d = gtpsad(nv, ord)
    local t = tpsa(d)
    local ct = ctpsa(d)
    local max_ord = ord
    assertEquals(t.mo,ord)
    assertEquals(ct.mo,ord)

    --check all order equal to zeros
    for o = 0, max_ord-1 do
      assertEquals(t.coef[o],0)
      assertEquals(ct.coef[o], 0 + 0i)
    end
 
end




function TestIs:testTandD()
    local ord  = 15
    local nv = 2
    local d = gtpsad(nv, ord)
    local t = tpsa(d)
    local ct = ctpsa(d)
  
    assertTrue(is_tpsa(t))
    assertTrue(is_ctpsa(ct))
    assertTrue(is_gtpsad(d))
    assertTrue(not is_tpsa(ct))
    assertTrue(not is_ctpsa(t))
    assertTrue(not is_tpsa(d))
    assertTrue(not is_ctpsa(d))
    assertTrue(not is_gtpsad(t))
    assertTrue(not is_gtpsad(ct))
    assertTrue(not is_tpsa(0))
    assertTrue(not is_ctpsa(0))
    assertTrue(not is_gtpsad(0))

    local ord  = 15
    local nv = 1
    local d = gtpsad(nv, ord)
    local t = tpsa(d)
    local ct = ctpsa(d)
  
    assertTrue(is_tpsa(t))
    assertTrue(is_ctpsa(ct))
    assertTrue(is_gtpsad(d))
    assertTrue(not is_tpsa(ct))
    assertTrue(not is_ctpsa(t))
    assertTrue(not is_tpsa(d))
    assertTrue(not is_ctpsa(d))
    assertTrue(not is_gtpsad(t))
    assertTrue(not is_gtpsad(ct))
    assertTrue(not is_tpsa(0))
    assertTrue(not is_ctpsa(0))
    assertTrue(not is_gtpsad(0))
  end

  



