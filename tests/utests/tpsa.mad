--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, tpsa_eqn                                in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, assrtIsFalse,
      assertErrorMsgContains, assertError, assertIsNil, assertFalse                                     in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad, is_number, is_complex                            in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o


TestIs = {}
TestConstr = {}
TestLengOp = {}
TestProm = {}
TestCloning = {}
TestSetGet  = {}


local x = 2
local y = 2 + 2i
local ord  = 15
local nv1 = 1
local nv2 = 2
local d1v = gtpsad(nv1, ord)
local d2v = gtpsad(nv2, ord)


function TestConstr:testConstrDefault()
  
  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  local max_ord2v = ((ord+nv2)*(ord+nv2 - 1))/2
  local d3 = gtpsad(nil, nil, 2) -- if we have params then po is 1 by default otherwise 0
  print(max_ord2v)
  assertEquals(t2v.mo,ord)
  assertEquals(ct2v.mo,ord)

  assertEquals(d2v.nv,2)
  assertEquals(d2v.mo,15)
  assertEquals(d2v.np, 0)
  assertEquals(d2v.po, 0)

  assertEquals(d3.nv,6)
  assertEquals(d3.mo,1)
  assertEquals(d3.np, 2)
  assertEquals(d3.po, 1)
  
  --check all order equal to zeros
  for o = 1, max_ord2v do
    assertEquals(t2v:get(o),0)
    assertEquals(ct2v:get(o), 0 + 0i)
  end

  --same check for only one variable 
  assertEquals(t1v.mo,ord)
  assertEquals(ct1v.mo,ord)

  --check all order equal to zeros
  for o = 1, ord do
    assertEquals(t1v:get(o),0)
    assertEquals(ct1v:get(o), 0 + 0i)
  end
 
end


function TestLengOp:testLength()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  assertEquals(136, #t2v)
  assertEquals(136, #ct2v)
  assertEquals(16, #t1v)
  assertEquals(16, #ct1v)

end


function TestIs:testTandDSingVar()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)

  assertTrue(is_tpsa(t1v))
  assertTrue(is_ctpsa(ct1v))
  assertTrue(is_gtpsad(d1v))
  assertFalse(is_tpsa(ct1v))
  assertFalse(is_ctpsa(t1v))
  assertFalse(is_tpsa(d1v))
  assertFalse(is_ctpsa(d1v))
  assertFalse(is_gtpsad(t1v))
  assertFalse(is_gtpsad(ct1v))
  assertFalse(is_tpsa(0))
  assertFalse(is_ctpsa(0))
  assertFalse(is_gtpsad(0))

  end


function TestIs:testTandDMultVar()

  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)

  assertTrue(is_tpsa(t2v))
  assertTrue(is_ctpsa(ct2v))
  assertTrue(is_gtpsad(d2v))
  assertFalse(is_tpsa(ct2v))
  assertFalse(is_ctpsa(t2v))
  assertFalse(is_tpsa(d2v))
  assertFalse(is_ctpsa(d2v))
  assertFalse(is_gtpsad(t2v))
  assertFalse(is_gtpsad(ct2v))
  assertFalse(is_tpsa(0))
  assertFalse(is_ctpsa(0))
  assertFalse(is_gtpsad(0))

  end


function TestSetGet:testSetGetSingVar()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)

  t1v:set(1,1)
  t1v:set(4,1)
  t1v:set(8,1)
  t1v:set(12,1)
  t1v:set(16,1)
  
  assertEquals(t1v:get(1), 1)
  assertEquals(t1v:get(4), 1)
  assertEquals(t1v:get(8), 1)
  assertEquals(t1v:get(12), 1)
  assertEquals(t1v:get(16), 1)
  assertError(t1v.get, t1v, 0)

  t1v:set(1,2,3)
  t1v:set(4,2,3)
  t1v:set(8,2,3)
  t1v:set(12,2,3)
  t1v:set(16,2,3)

  assertEquals(t1v:get(1), 5)
  assertEquals(t1v:get(4), 5)
  assertEquals(t1v:get(8), 5)
  assertEquals(t1v:get(12), 5)
  assertEquals(t1v:get(16), 5)
  

  
end

function TestSetGet:testSetGetMultVar()

  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)

  t2v:set(1,1)
  t2v:set(4,1)
  t2v:set(8,1)
  t2v:set(12,1)
  t2v:set(16,1)
  
  assertEquals(t2v:get(1), 1)
  assertEquals(t2v:get(4), 1)
  assertEquals(t2v:get(8), 1)
  assertEquals(t2v:get(12), 1)
  assertEquals(t2v:get(16), 1)
  assertError(t2v.get, t2v, 0)

  t2v:set(1,2,3)
  t2v:set(4,2,3)
  t2v:set(8,2,3)
  t2v:set(12,2,3)
  t2v:set(16,2,3)

  assertEquals(t2v:get(1), 5)
  assertEquals(t2v:get(4), 5)
  assertEquals(t2v:get(8), 5)
  assertEquals(t2v:get(12), 5)
  assertEquals(t2v:get(16), 5)

end


function TestLogicOper:testDiffSingVar()

  
end


function TestLogicOper:testDiffMultiVar()

end


function TestCloning:testCopySingVar()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t_temp = tpsa(d1v)
  local ct_temp = ctpsa(d1v)

  t1v:set(1,1)
  t1v:set(3,1)
  t1v:set(5,1)
  ct1v:set(1,1)
  ct1v:set(3,1)
  ct1v:set(5,1)
  
  t1v:copy(t_temp)
  ct1v:copy(ct_temp)

  assertTrue(t1v==t_temp)
  assertTrue(ct1v==ct_temp)

  t1v:set(1,0)
  ct1v:set(1,0)
  
  t_temp = t1v:copy()
  ct_temp = ct1v:copy()
  assertTrue(t1v==t_temp)
  assertTrue(ct1v==ct_temp)

  --clean the tpsa for the other tests
  t1v:set(1,0)
  t1v:set(3,0)
  t1v:set(5,0)
  ct1v:set(1,0)
  ct1v:set(3,0)
  ct1v:set(5,0)

end


function TestCloning:testCopyMultVar()
 
  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  local t_temp = tpsa(d2v)
  local ct_temp = ctpsa(d2v)

  t2v:set(1,1)
  t2v:set(3,1)
  t2v:set(5,1)
  ct2v:set(1,1)
  ct2v:set(3,1)
  ct2v:set(5,1)
  
  t2v:copy(t_temp)
  ct2v:copy(ct_temp)

  assertTrue(t2v==t_temp)
  assertTrue(ct2v==ct_temp)

  t2v:set(1,0)
  ct2v:set(1,0)
  
  t_temp = t2v:copy()
  ct_temp = ct2v:copy()
  assertTrue(t2v==t_temp)
  assertTrue(ct2v==ct_temp)
  
  --clean the tpsa for the other tests
  t2v:set(1,0)
  t2v:set(3,0)
  t2v:set(5,0)
  ct2v:set(1,0)
  ct2v:set(3,0)
  ct2v:set(5,0)
  
end


function TestCloning:testSameSingVar()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t_temp1, ct_temp1, t_temp2, ct_temp2, t_temp3, ct_temp3, temp_4, ctemp_4

  t_temp1 = t1v:same(nil,10)
  ct_temp1 = ct1v:same()

  assertTrue(is_tpsa(t_temp1))
  assertTrue(is_ctpsa(ct_temp1))
  assertEquals(t_temp1.mo, 10)

  for o=1, #t1v - 1 do
  assertTrue(is_number(t_temp1:get(1)))
  assertTrue(is_complex(ct_temp1:get(1)))
  end

  t_temp2 = t1v:same(1)
  ct_temp2 = ct1v:same(1)
  assertTrue(is_tpsa(t_temp2))
  assertTrue(is_tpsa(ct_temp2))

  for o=1, #t1v - 1 do
    assertTrue(is_number(t_temp2:get(1)))
    assertTrue(is_number(ct_temp2:get(1)))
  end

  t_temp3 = t1v:same(1 + 1i)
  ct_temp3 = ct1v:same(1 + 1i)
  assertTrue(is_ctpsa(t_temp3))
  assertTrue(is_ctpsa(ct_temp3))

  for o=1, #t1v - 1 do
    assertTrue(is_complex(t_temp3.coef[0]))
    assertTrue(is_complex(ct_temp3.coef[0]))
  end

  temp_4 = t1v:same(nil, 1)
  ctemp_4 = ct1v:same(nil, 1)
  assertTrue(is_tpsa(temp_4))
  assertTrue(is_ctpsa(ctemp_4))
  assertEquals(temp_4.mo,1)
  assertEquals(ctemp_4.mo,1)
  
end


function TestCloning:testSameMultVar()
  
  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  local t_temp1, ct_temp1, t_temp2, ct_temp2, t_temp3, ct_temp3, temp_4, ctemp_4

  t_temp1 = t2v:same(nil,10)
  ct_temp1 = ct2v:same()

  assertTrue(is_tpsa(t_temp1))
  assertTrue(is_ctpsa(ct_temp1))
  assertEquals(t_temp1.mo, 10)

  for o=1, #t2v - 1 do
  assertTrue(is_number(t_temp1:get(1)))
  assertTrue(is_complex(ct_temp1:get(1)))
  end

  t_temp2 = t2v:same(1)
  ct_temp2 = ct2v:same(1)
  assertTrue(is_tpsa(t_temp2))
  assertTrue(is_tpsa(ct_temp2))
  for o=1, #t2v - 1 do
  assertTrue(is_number(t_temp2:get(1)))
  assertTrue(is_number(ct_temp2:get(1)))
  end

  t_temp3 = t2v:same(1 + 1i)
  ct_temp3 = ct2v:same(1 + 1i)
  assertTrue(is_ctpsa(t_temp3))
  assertTrue(is_ctpsa(ct_temp3))
  for o=1, #t2v - 1 do
  assertTrue(is_complex(t_temp3.coef[0]))
  assertTrue(is_complex(ct_temp3.coef[0]))
  end

  temp_4 = t2v:same(nil, 1)
  ctemp_4 = ct2v:same(nil, 1)
  assertTrue(is_tpsa(temp_4))
  assertTrue(is_ctpsa(ctemp_4))
  assertEquals(temp_4.mo,1)
  assertEquals(ctemp_4.mo,1)
  
end


function TestArithmetic:testaddition()

  local mo  = 15
  local nv = 1
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  
  
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)
  local temp1, temp2

  t.set(2,2)
  t2.set(-2,1)
  ct.set(2 + 2i,1)
  ct2.set(-2 + 2i,1)
  
  assertEquals((t + x).coef[0], 3)

  
end


function TestProm:testPromotionSingvar()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t_temp = tpsa(d1v)
  local ct_temp = ctpsa(d1v)
  
  assertTrue(is_tpsa(x + t1v))
  assertTrue(is_tpsa(t1v + x))
  assertTrue(is_tpsa(t1v + t_temp))
  assertTrue(is_ctpsa(x + ct1v))
  assertTrue(is_ctpsa(y + t1v))
  assertTrue(is_ctpsa(y + ct1v))
  assertTrue(is_ctpsa(t1v + ct1v))
  assertTrue(is_ctpsa(ct1v + x))
  assertTrue(is_ctpsa(ct1v + y))
  assertTrue(is_ctpsa(ct1v + t1v))
  assertTrue(is_ctpsa(ct1v + ct_temp))

  assertTrue(is_tpsa(x - t1v))
  assertTrue(is_tpsa(t1v - x))
  assertTrue(is_tpsa(t1v - t_temp))
  assertTrue(is_ctpsa(x - ct1v))
  assertTrue(is_ctpsa(y - t1v))
  assertTrue(is_ctpsa(x - ct1v))
  assertTrue(is_ctpsa(t1v - ct1v))
  assertTrue(is_ctpsa(ct1v - x))
  assertTrue(is_ctpsa(ct1v - y))
  assertTrue(is_ctpsa(ct1v - t1v))
  assertTrue(is_ctpsa(ct1v - ct_temp))

  assertTrue(is_tpsa(x * t1v))
  assertTrue(is_tpsa(t1v * x))
  assertTrue(is_tpsa(t1v * t_temp))
  assertTrue(is_ctpsa(x * ct1v))
  assertTrue(is_ctpsa(y * t1v))
  assertTrue(is_ctpsa(x * ct1v))
  assertTrue(is_ctpsa(t1v * ct1v))
  assertTrue(is_ctpsa(ct1v * x))
  assertTrue(is_ctpsa(ct1v * y))
  assertTrue(is_ctpsa(ct1v * t1v))
  assertTrue(is_ctpsa(ct1v * ct_temp))

  t1v:set(1, 2)
  ct1v:set(1, 2 + 2i)
  t_temp:set0(2)
  ct_temp:set0(2 + 2i)
  
  assertTrue(is_tpsa(x / t1v))
  assertTrue(is_tpsa(t1v / x))
  assertTrue(is_tpsa(t1v / t_temp))
  assertTrue(is_ctpsa(x / ct1v))
  assertTrue(is_ctpsa(y / t1v))
  assertTrue(is_ctpsa(x / ct1v))
  assertTrue(is_ctpsa(t1v / ct1v))
  assertTrue(is_ctpsa(ct1v / x))
  assertTrue(is_ctpsa(ct1v / y))
  assertTrue(is_ctpsa(ct1v / t1v))
  assertTrue(is_ctpsa(ct1v / ct_temp))

  assertTrue(is_tpsa(x ^ t1v))
  assertTrue(is_tpsa(t1v ^ x))
  assertTrue(is_tpsa(t1v ^ t_temp))
  assertTrue(is_ctpsa(x ^ ct1v))
  assertTrue(is_ctpsa(y ^ t1v))
  assertTrue(is_ctpsa(x ^ ct1v))
  assertTrue(is_ctpsa(t1v ^ ct1v))
  assertTrue(is_ctpsa(ct1v ^ x))
  assertTrue(is_ctpsa(ct1v ^ y))
  assertTrue(is_ctpsa(ct1v ^ t1v))
  assertTrue(is_ctpsa(ct1v ^ ct_temp))

  --clean the tpsa for the other tests
  t1v:set(1,0)
  ct1v:set(1,0)

end


function TestProm:testPromotionMultvar()

  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  local t_temp = tpsa(d2v)
  local ct_temp = ctpsa(d2v)
  
  assertTrue(is_tpsa(x + t2v))
  assertTrue(is_tpsa(t2v + x))
  assertTrue(is_tpsa(t2v + t_temp))
  assertTrue(is_ctpsa(x + ct2v))
  assertTrue(is_ctpsa(y + t2v))
  assertTrue(is_ctpsa(y + ct2v))
  assertTrue(is_ctpsa(t2v + ct2v))
  assertTrue(is_ctpsa(ct2v + x))
  assertTrue(is_ctpsa(ct2v + y))
  assertTrue(is_ctpsa(ct2v + t2v))
  assertTrue(is_ctpsa(ct2v + ct_temp))

  assertTrue(is_tpsa(x - t2v))
  assertTrue(is_tpsa(t2v - x))
  assertTrue(is_tpsa(t2v - t_temp))
  assertTrue(is_ctpsa(x - ct2v))
  assertTrue(is_ctpsa(y - t2v))
  assertTrue(is_ctpsa(x - ct2v))
  assertTrue(is_ctpsa(t2v - ct2v))
  assertTrue(is_ctpsa(ct2v - x))
  assertTrue(is_ctpsa(ct2v - y))
  assertTrue(is_ctpsa(ct2v - t2v))
  assertTrue(is_ctpsa(ct2v - ct_temp))

  assertTrue(is_tpsa(x * t2v))
  assertTrue(is_tpsa(t2v * x))
  assertTrue(is_tpsa(t2v * t_temp))
  assertTrue(is_ctpsa(x * ct2v))
  assertTrue(is_ctpsa(y * t2v))
  assertTrue(is_ctpsa(x * ct2v))
  assertTrue(is_ctpsa(t2v * ct2v))
  assertTrue(is_ctpsa(ct2v * x))
  assertTrue(is_ctpsa(ct2v * y))
  assertTrue(is_ctpsa(ct2v * t2v))
  assertTrue(is_ctpsa(ct2v * ct_temp))

  t2v:set(1, 2)
  ct2v:set(1, 2 + 2i)
  t_temp:set0(2)
  ct_temp:set0(2 + 2i)
  
  assertTrue(is_tpsa(x / t2v))
  assertTrue(is_tpsa(t2v / x))
  assertTrue(is_tpsa(t2v / t_temp))
  assertTrue(is_ctpsa(x / ct2v))
  assertTrue(is_ctpsa(y / t2v))
  assertTrue(is_ctpsa(x / ct2v))
  assertTrue(is_ctpsa(t2v / ct2v))
  assertTrue(is_ctpsa(ct2v / x))
  assertTrue(is_ctpsa(ct2v / y))
  assertTrue(is_ctpsa(ct2v / t2v))
  assertTrue(is_ctpsa(ct2v / ct_temp))

  assertTrue(is_tpsa(x ^ t2v))
  assertTrue(is_tpsa(t2v ^ x))
  assertTrue(is_tpsa(t2v ^ t_temp))
  assertTrue(is_ctpsa(x ^ ct2v))
  assertTrue(is_ctpsa(y ^ t2v))
  assertTrue(is_ctpsa(x ^ ct2v))
  assertTrue(is_ctpsa(t2v ^ ct2v))
  assertTrue(is_ctpsa(ct2v ^ x))
  assertTrue(is_ctpsa(ct2v ^ y))
  assertTrue(is_ctpsa(ct2v ^ t2v))
  assertTrue(is_ctpsa(ct2v ^ ct_temp))

  --clean the tpsa for the other tests
  t2v:set(1,0)
  ct2v:set(1,0)

end




