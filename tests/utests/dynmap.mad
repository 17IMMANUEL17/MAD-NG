--[=[
 o-----------------------------------------------------------------------------o
 |
 | Dynmap tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the dynmap module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains                  in MAD.utest

local sequence, beam, track, plot, option, filesys               in MAD
local fnil, ftrue                                                in MAD.gfunc
local drift_element, thick_element, thin_element, drift, marker  in MAD.element
local eps, pi                                                    in MAD.constant
local openfile                                                   in MAD.utility

local refdir = \s -> 'dynmap_ref/'..(s or '')
local rundir = \s -> 'dynmap_run/'..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot = false

if doplot then
  local pause, atexit in MAD.utility
  atexit(pause, true)
end

local function plot (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title,
             x1y1 = { s={'x','px','y','py','t','pt'} } }
end

local function plotxy (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title, x1y1 = { x='px', y='py'} }
end

local function plott (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title,
             x1y1 = {'x','px','y','py','t','pt'} }
end

local function plottw (mtbl, seq)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title, sequence=seq,
             x1y1 = { s={'beta11','beta22'} },
             x1y2 = { s={'mu1'   ,'mu2'   } } }
end

-- regression test suite ------------------------------------------------------o

-- TODO: vary parameters nst, lw, sdir, tdir, s0, X0 ...

TestDynmap = {}

function TestDynmap:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.numfmt
  option.numfmt = "% -.16e"
end

function TestDynmap:tearDown ()
  option.numfmt = self.optfmt
end

function TestDynmap:testDrift ()
  local nst = 20
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local seq = sequence 'seq' { nst * drift_element{ l=1 } }
  local tbl = track { sequence=seq, beam=beam, X0=X0, title='drift' }

  tbl:write(rundir('dynmap_drift'))
  plotxy(tbl)

  assertEquals(#tbl, nst+2)
  local s, x, px, y, py, t, pt in tbl[#tbl]
  assertAllAlmostEquals({  s,    x,   px,    y,   py,      t, pt},
                        {nst, 2e-5, 1e-6, 2e-7, 1e-8, -1e-11,  0},
                        {  0,  eps,  eps,  eps,  eps,  5*eps,  0} )
end

local trkhdr = {'title', 'type', 'origin', 'date', 'time', 'refcol'}
local trkcol = {'name','kind','c10','c20','c30','c40','c50','c60',
                              'c11','c12','c13','c14','c15','c16',
                              'c21','c22','c23','c24','c25','c26',
                              'c31','c32','c33','c34','c35','c36',
                              'c41','c42','c43','c44','c45','c46',
                              'c51','c52','c53','c54','c55','c56',
                              'c61','c62','c63','c64','c65','c66'}

function TestDynmap:testQuad ()
  local quadrupole in MAD.element
  local X0  = { 3e-3, -2e-4, -2e-3, 3e-4, 1e-5, 2e-5 }
  local bem = beam {particle='proton', energy=6500}
  local seq = sequence 'seq' { l=2,
      quadrupole 'mq' {at=0.75, l=1.5, k1=0.21}
    }

  print('') -- for internal dynmap mdump
  local tbl = track { sequence=seq, beam=bem, X0=X0, method=2, observe=0,
                      mapdef={xy=2}, mapsave=true }

  for i=1,6 do
    tbl:addcol('c'..i..'0', \r -> tbl.M[r][i]:get(1))
  end
  for i=1,6 do for j=1,6 do
    tbl:addcol('c'..i..j, \r -> tbl.M[r][i]:get(j+1))
  end end

  MAD.option.numfmt = "%-.16e"
  tbl:write(rundir('Cmad.txt'), trkcol, trkhdr)

--   plotxy(tbl)
--  assertEquals(#tbl, nst+2)
--  local s, x, px, y, py, t, pt in tbl[#tbl]
--  assertAllAlmostEquals({  s,    x,   px,    y,   py,      t, pt},
--                        {nst, 2e-5, 1e-6, 2e-7, 1e-8, -1e-11,  0},
--                        {  0,  eps,  eps,  eps,  eps,  5*eps,  0} )
end

function TestDynmap:testSABACQuad ()
  local nst = 1
  local nsl = 10
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local seq = sequence 'seq' { nst * thick_element 'quad' { l=3.1, knl := {0,0.02698620624} } } -- , k1=0.00870522782
  local tbl = track { sequence=seq, beam=beam, X0=X0, method=4, title='integ4 quad',
                      nofill=true, nslice=nsl, atslice=\e,m,l,i -> i>0 and m.fill(e,m,l) }

  tbl:write(rundir('dynmap_sabac_quad'))
  plotxy(tbl)

--  assertEquals(#tbl, nst+2)
--  local s, x, px, y, py, t, pt in tbl[#tbl]
--  assertAllAlmostEquals({  s,    x,   px,    y,   py,      t, pt},
--                        {nst, 2e-5, 1e-6, 2e-7, 1e-8, -1e-11,  0},
--                        {  0,  eps,  eps,  eps,  eps,  5*eps,  0} )
end

function TestDynmap:testThinFODO ()
  local nsl = 10
  local dl  = 1/nsl
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3037241107
  local mq1 = thin_element 'mq1' { knl := {0,  k1l/nsl} }
  local mq2 = thin_element 'mq2' { knl := {0, -k1l/nsl} }
  local seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2}, (nsl-1)*mq1 {at=dl, from='prev'},
                mq2 {at=5+dl/2}, (nsl-1)*mq2 {at=dl, from='prev'},
              }
  local tbl = track { sequence=seq, beam=beam, X0=X0, title='thinfodo', mapdef=true, mapsave=true,
                      implicit=false, atslice=\e,m,l,i -> i==0 and m.fill(e,m,l)}

  for i=1,6 do
  for j=1,6 do
    tbl:addcol(('re'..i)..j, \r -> tbl.M[r][i]:get(j+1))
  end end

  tbl:write(rundir('dynmap_thinfodo'))

  assertEquals(#tbl, 42)
  local s, x, px, y, py, t, pt in tbl[#tbl]
  assertAllAlmostEquals({ s, x, px, y, py, t, pt},
  --[[from MADX Twiss]] {10, 1.543323861e-05, 2.375333367e-06, 3.316704929e-08, -6.538000521e-09, -1.452572329e-11, 0},
                        { 0, 12*eps, 3*eps, 2*eps, eps, 3*eps, eps} )

--  local file = openfile(rundir('map.dat'), 'w', '.dat')
--  for i=1,#tbl do
--    file:write("**** [", i, "]: ", tbl[i].name, ", ", tbl[i].s, "\n")
--    tbl[i].map. x:write(file)
--    tbl[i].map.px:write(file)
--    tbl[i].map. y:write(file)
--    tbl[i].map.py:write(file)
--    tbl[i].map. t:write(file)
--    tbl[i].map.pt:write(file)
--  end
end

function TestDynmap:testThickFODO ()
  local nsl = 10
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3037241107 -- from MADX
  local mq1 = thick_element 'mq1' { l=1, knl := {0,  k1l} }
  local mq2 = thick_element 'mq2' { l=1, knl := {0, -k1l} }
  local seq = sequence 'seq' { l=10, refer='entry', mq1 {at=0}, mq2 {at=5} }
  local tbl = track { sequence=seq, beam=beam, X0=X0, title='thinfodo',
                      implicit=false, nslice=nsl, atslice=\e,m,l -> m.fill(e,m,l)}

  tbl:write(rundir('dynmap_thickfodo'))
--  plott(tbl)

--  assertEquals(#tbl, 54)
--  local s, x, px, y, py, t, pt in tbl[#tbl]
--  assertAllAlmostEquals({  s, x, px, y, py, t, pt},
--      --[[from MADX]]   { 10, 1.759885023e-05, 2.519770046e-06, 2.401149771e-08, -5.197700457e-09, -1.837374937e-11, 2.220446049e-16},
--                        {  0, 2.5e-15, 5e-16, eps, eps, eps, eps} )
end

function TestDynmap:testThickFODOTeapot ()
  local nsl = 10
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3039603842 -- from MADX
  local mq1 = thick_element 'mq1' { l=1, knl := {0,  k1l} }
  local mq2 = thick_element 'mq2' { l=1, knl := {0, -k1l} }
  local seq = sequence 'seq' { l=10, refer='entry', mq1 {at=0}, mq2 {at=5} }
  local tbl = track { sequence=seq, beam=beam, X0=X0, title='thinfodo', method='teapot',
                      implicit=false, nslice=nsl, atslice=\e,m,l -> m.fill(e,m,l)}

  tbl:write(rundir('dynmap_thickfodoteapot'))
--  plott(tbl)

--  assertEquals(#tbl, 54)
--  local s, x, px, y, py, t, pt in tbl[#tbl]
--  assertAllAlmostEquals({  s, x, px, y, py, t, pt},
--      --[[from MADX]]   { 10, 1.759885023e-05, 2.519770046e-06, 2.401149771e-08, -5.197700457e-09, -1.837374937e-11, 2.220446049e-16},
--                        {  0, 2.5e-15, 5e-16, eps, eps, eps, eps} )
end

-- end ------------------------------------------------------------------------o
