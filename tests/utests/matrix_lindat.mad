--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix module regression tests - data for real matrices linear algebra
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide matlab created output regression test suites for the matrix module.

 o-----------------------------------------------------------------------------o
]=]

local vector, cvector, matrix, cmatrix, is_vector, is_matrix, is_cvector,
      is_cmatrix, isa_vector, isa_matrix, linspace, logspace in MAD

local complex, infi, tiny, eps, huge, inf, nan, pi, Pi, sqrt in MAD

-- locals ---------------------------------------------------------------------o

local M = {}

-- linear algebra -------------------------------------------------------------o

-- eigen
M.eigenIn = {
matrix{
  {1, 1, 1, 1},
  {0, 2, 2, 2},
  {0, 0, 3, 3},
  {0, 0, 0, 4}
},
matrix{
  {3, 1, 0},
  {0, 3, 1},
  {0, 0, 3},
  },
matrix{
  { 3.0  ,-2.0  ,-0.9, 2*eps},
  {-2.0  , 4.0  , 1.0,-eps  },
  {-eps/4, eps/2,-1.0, 0    },
  {-0.5  ,-0.5  , 0.1, 1.0  },
  },
matrix{
  { 1, 7 , 3 },
  { 2, 9 , 12},
  { 5, 22, 7 },
  },
}

--w (values)
M.eigenD = {
matrix{
  {1, 0, 0, 0},
  {0, 2, 0, 0},
  {0, 0, 3, 0},
  {0, 0, 0, 4},
  },
matrix{
  {3, 0, 0},
  {0, 3, 0},
  {0, 0, 3},
  },
matrix{
  {5.561552812808834, 0                , 0                 , 0},
  {0                , 1.438447187191171, 0                 , 0},
  {0                , 0                , 0.9999999999999999, 0},
  {0                , 0                , 0                 ,-1},
  },
matrix{
  {25.55483863429071, 0                 , 0                },
  {0                ,-0.5789337929080569, 0                },
  {0                , 0                 ,-7.975904841382666},
  },
}

--vr
M.eigenV = {
matrix{
  {1, 0.707106781186548, 0.557086014531156, 0.463427557090794},
  {0, 0.707106781186548, 0.742781352708207, 0.695141335636191},
  {0, 0                , 0.371390676354104, 0.521356001727143},
  {0, 0                , 0                , 0.173785333909048},
  },

matrix{
  {1,-1                   , 1                   },
  {0, 6.66133814775094e-16,-6.66133814775094e-16},
  {0, 0                   , 4.43734259186819e-31},
  },
matrix{
  { 0.615301855596054   ,-0.417622469697774   ,-4.44089209850062e-16,-0.152821435699993 },
  {-0.788064099464283   ,-0.326069771124365   ,-2.22044604925031e-16, 0.134482863415994 },
  {-1.85396366744117e-17,-5.33877163674955e-18,-6.62038418383103e-34,-0.978057188479956 },
  { 0.0189367799692150  , 0.848097858246580   ,-1                   , 0.0443182163529980},
  },

matrix{
  {-0.260976503318146,-0.973445274559594 , 0.189104107807029},
  {-0.587027077498621, 0.228061283850043 ,-0.581572782101413},
  {-0.766348794609388,-0.0198077824671653, 0.791209665973142},
},
}

--vl
M.eigenW = {
matrix{
  { 0.662589156449079, 0                , 0                , 0},
  {-0.662589156449079, 0.333333333333333, 0                , 0},
  { 0.331294578224540,-0.666666666666667, 0.316227766016838, 0},
  {-0.110431526074847, 0.666666666666667,-0.948683298050514, 1},
  },
matrix{
  { 4.43734259186819e-31, 0                   , 0},
  {-6.66133814775094e-16, 6.66133814775094e-16, 0},
  { 1                   ,-1                   , 1},
  },
matrix{
  { 0.602929602215022   ,-0.787620779108487   ,-0.662251655629139 ,-3.46944695195361e-18},
  {-0.772218009239799   ,-0.614955721521770   ,-0.529801324503311 , 2.08166817117217e-17},
  {-0.200387726616569   , 0.0385093350264578  ,0.00662251655629148,-1                   },
  { 9.62876878652362e-17,-4.86321489687467e-16,-0.529801324503312 , 9.24446373305873e-33},
  },

matrix{
  {-0.179108285735172,-0.958732627596164 ,-0.188133371464411},
  {-0.812659411334709, 0.0648538806540042,-0.747709565272864},
  {-0.554531246324436, 0.276813516553422 , 0.636817274059756},
  },
}

-- svd
M.svdIn = {
matrix{
  { 1, 0, 1},
  {-1,-2, 0},
  { 0, 1,-1},
},
matrix{
  {1, 2},
  {3, 4},
  {5, 6},
  {7, 8},
},
matrix{
  {2, 0, 2},
  {0, 1, 0},
  {0, 0, 0},
},
}

M.svdU = {
matrix{
  {-0.120000260381534,-0.809712281592778, 0.574426634607223},
  { 0.901752646908814, 0.153122822484369, 0.404222172854692},
  {-0.415261485453819, 0.566497504206538, 0.711785414592383},
},
matrix{
  {-0.152483233310201,-0.822647472225660 ,-0.394501022283829,-0.379959133877596 },
  {-0.349918371807964,-0.421375287684580 , 0.242796545704358, 0.800655879510063 },
  {-0.547353510305727,-0.0201031031435017, 0.697909975442775,-0.461434357387337 },
  {-0.744788648803490, 0.381169081397574 ,-0.546205498863304, 0.0407376117548703},
},
matrix{
  {1, 0, 0},
  {0, 1, 0},
  {0, 0, 1},
},
}

M.svdS = {
matrix{
  {2.46050487001876, 0               , 0                },
  {0               , 1.69962814827532, 0                },
  {0               , 0               , 0.239123278256554},
},
matrix{
  {14.2690954992615,0                },
  {0               ,0.626828232417542},
  {0               ,0                },
  {0               ,0                },
},
matrix{
  {2.82842712474619, 0, 0},
  {0               , 1, 0},
  {0               , 0, 0},
},
}

M.svdV = {
matrix{
  {-0.415261485453819,-0.566497504206539, 0.711785414592383},
  {-0.901752646908814, 0.153122822484370,-0.404222172854692},
  { 0.120000260381534,-0.809712281592779,-0.574426634607224},
},
matrix{
  {-0.641423027995072, 0.767187395072177},
  {-0.767187395072177,-0.641423027995072},
},
matrix{
  {0.707106781186548, 0,-0.707106781186548},
  {0                , 1, 0                },
  {0.707106781186548, 0, 0.707106781186548},
},
}

-- solve
M.solveIn1 = {
matrix(3):eye(),
matrix{
  {1, 1, 1},
  {2, 3, 5},
  {4, 0, 5}
},
matrix{
  {1, 1, 2, 0},
  {2,-1, 0, 1},
  {1,-1,-1,-2},
  {2,-1, 2,-1}
},
}

M.solveIn2 = {
  matrix(3):fill(1..9),
  matrix{5, 8, 2},
  matrix{1,-2, 4, 0},
}

M.solveOut = {
  matrix(3):fill(1..9),
  matrix{3, 4,-2},
  matrix{1, 2,-1,-2},
}

-- end ------------------------------------------------------------------------o

return M
