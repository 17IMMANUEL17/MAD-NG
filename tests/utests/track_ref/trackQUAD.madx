! cd track_ref ; ../madx64 trackQUAD.madx > trackQUAD.out 2>&1 ; cat trackQUAD.out ; cd -

! ./madx64 track_ref/trackQUAD.madx  | grep -A 1 'model='

option, -info, -echo ;

beam ; ! positron 1Gev

l.mq  = 1.5 ; ![m]
l.seq = 10 ; ! [m]
u.seq = pi/2 ; ! [rad]
f.seq = l.seq/(4*sin(u.seq/2)) ;
k.seq = 1/(f.seq * l.mq) ;
k1f = k.seq ; k1d = -k.seq ;
value, k1f, k1d ;

! set strengths for numerical comparison
k1f =  0.2110222185 ;
k1d = -0.2110222186 ;

! SEQUENCE WITH QUADS
seq: sequence, l=l.seq, refer=entry ;
m1: quadrupole, at=0  , l=1.5 , k1:=k1f ;
d1: drift,      at=1.5, l=3.5 ;
m2: quadrupole, at=5  , l=1.5 , k1:=k1d ;
d2: drift,      at=6.5, l=3.5 ;
endsequence ;

! MATCH THICK LENS
! use, sequence=seq ;
! match, sequence=seq ;
!   ! search for quads strengths
!   vary, name = k1f, step = 1e-5 ;
!   vary, name = k1d, step = 1e-5 ;
!   ! for cell with phase advance of pi/2 (specified in 2*pi unit!)
!   constraint, range = #e, mux = u.seq/(2*pi) ;
!   constraint, range = #e, muy = u.seq/(2*pi) ;
!   lmdif, calls = 20, tolerance = 1e-16 ;
! endmatch ;
! value, m1->k1, m2->k1 ;

! PTC TRACK
model=1;
while (model <= 2) {
  if (model == 2) { nst = 1; } else { nst = 10; }

  method=2;
  while (method <= 6) {
    use, sequence=seq ;
    ptc_create_universe;
    ptc_create_layout, model=model, method=method, nst=nst, time=true, exact=true;
    ptc_start, x=4e-5, px=1e-5, y=3e-5, py=2e-5, t=2e-5, pt=1e-5;
    ptc_observe, place=#s ;
    ptc_observe, place=m1 ;
    ptc_observe, place=d1 ;
    ptc_observe, place=m2 ;
    ptc_observe, place=d2 ;
    ptc_observe, place=#e ;
    ptc_track, icase=56, closed_orbit=false, dump, onetable, element_by_element, file="trackQUADptc." ;
    ptc_track_end;
    ptc_end;

    printf, text="model=%g, method=%g, nst=%g", value={model, method, nst} ;
    system, "tail -n 1 trackQUADptc.one" ;

    method = method + 2 ;
  }
  model = model + 1 ;
}

! MADX TRACK
use, sequence=seq ;
track, onepass, onetable, dump, file="trackQUADmadx." ;
start, x=4e-5, px=1e-5, y=3e-5, py=2e-5, t=2e-5, pt=1e-5;
observe, place=#s ;
observe, place=m1 ;
observe, place=d1 ;
observe, place=m2 ;
observe, place=d2 ;
observe, place=#e ;
run, turns=1 ;
endtrack ;

printf, text="model=madx", value={} ;
system, "tail -n 1 trackQUADmadx.one" ;

stop;