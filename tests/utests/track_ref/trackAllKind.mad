--[[ Run and data extraction assuming mapdump=2 in the script below.
cd track_ref
time ../mad trackAllKind.mad > trackAllKindMad.out 2>&1
grep "^@@\|%%" trackAllKindMad.out | grep -v "exit" > trackAllKindMad_res.txt
cd ..
--]]

local beam, sequence, mtable, track, option                       in MAD
local drift, hkicker, vkicker, kicker, multipole, solenoid, rfcavity,
      sbend, rbend, quadrupole, sextupole, octupole, decapole, dodecapole
                                                                  in MAD.element
local printf, tblicpy                                             in MAD.utility
local pi, abs in math

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

local colres = {'name','cfgid',
                'c10','c20','c30','c40','c50','c60',
                'c11','c12','c13','c14','c15','c16',
                'c21','c22','c23','c24','c25','c26',
                'c31','c32','c33','c34','c35','c36',
                'c41','c42','c43','c44','c45','c46',
                'c51','c52','c53','c54','c55','c56',
                'c61','c62','c63','c64','c65','c66'}

local colcfg = {        'model','energy','tilt','tpath','method','nslice','eon','x0i'}
local prtcfg = {'cfgid','model','energy','tilt','tpath','method','nslice','eon','x0i'}
local prthdr = {'name','type','title','origin','date','time'}

local Cmad     = mtable 'Cmad'    (tblicpy(colres)) -- colres becomes the object
local Cmad_cfg = mtable 'Cmad_cfg'(tblicpy(colcfg)) -- colcfg becomes the object

local models = {'DKD','TKT'}

local X0s = {{x=0   , px=0    , y=0    , py=0   , t=0   , pt=0   }, -- zero
             {x=3e-3, px=-2e-4, y=-2e-3, py=3e-4, t=0   , pt=0   }, -- 4D
             {x=3e-3, px=-2e-4, y=-2e-3, py=3e-4, t=0   , pt=2e-5}, -- 5D
             {x=3e-3, px=-2e-4, y=-2e-3, py=3e-4, t=1e-5, pt=2e-5}} -- 6D

local e_on = 0
local e_tlt = 0
local mapdef = true
local mapdump -- = 2

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

do -- setup (from PTC checks)
  for model=1,#models do
  for energy = 1,6500,6499 do
  for tilt=0,2 do
  for tpath=0,1 do
  for method=2,6,2 do
  for nslice=1,3 do
  for eon=0,1 do
  for x0i=1,#X0s do -- v v v order matters!
    Cmad_cfg = Cmad_cfg + {model, energy, tilt, tpath, method, nslice, eon, x0i}
  end end end end end end end end

  -- add columns for pretty print
  Cmad_cfg:addcol('cfgid', \i -> i)
  for _,c in ipairs {'x','px','y','py','t','pt'} do
    Cmad_cfg:addcol(c, \i -> X0s[Cmad_cfg.x0[i]][c])
  end
  option.format = "% -8.4g"
  Cmad_cfg.colwidth = 8
  Cmad_cfg:write("Cmad_cfg.txt", prtcfg, prthdr)
  option.format = "% -.16e"

  -- attach config to results
  Cmad.cfg = Cmad_cfg
end

-- os.exit()

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

local nooff, notilt = 1, 1
local totcfgrun = 0

local function rchk (tbl, seq)
  local beam = beam {particle = 'proton'}
  local cfg  = tbl.cfg
  local row  = {}

  for i=1,#cfg do
    -- global settings
    e_on  = cfg.eon[i]
    e_tlt = cfg.tilt[i]*pi/8

    -- skip invalid cases (madx compat)
    if not (e_on >= nooff and e_tlt <= notilt) then
      goto skip
    end

    -- skip invalid cases (physics compat)
--    if e_on  == 0 and seq[2].angle ~= 0 or    -- curved element
--       e_tlt ~= 0 and seq[2].tilt  == 0 then  -- drift (no tilt)
      -- printf("skipping %s\n", seq[2].name)
--      goto skip
--    end

    -- dump sequence name and config id
    if mapdump then
      printf("@@ %s CFGID=%g\n", seq.name, cfg.cfgid[i])
    end

    -- run track for these settings
    beam.energy = cfg.energy[i]
    local tmp = track {
      beam      = beam,
      sequence  = seq,
      X0        = X0s   [cfg.x0i  [i]],
      model     = models[cfg.model[i]],
      method    = cfg.method[i],
      nslice    = cfg.nslice[i],
      totalpath = cfg.tpath [i]<1,
      mapdef    = mapdef,
      mapdump   = mapdump,
      save      = true,
      mapsave   = true,
      observe   = false,
    }

    -- extend track mtable
    tmp:addcol('cfgid', \ -> cfg.cfgid[i])
    for i=1,6 do
      tmp:addcol('c'..i..'0', \r -> tmp.M[r][i]:get(1))
    end
    for i=1,6 do for j=1,6 do
      tmp:addcol('c'..i .. j, \r -> tmp.M[r][i]:get(j+1))
    end end

    -- copy to results
    for i=1,#tmp do
      for j=1,#colres do row[j] = tmp:getcol(colres[j])[i] end
      tbl = tbl + row
    end

    totcfgrun = totcfgrun + 1
::skip::
  end
  printf("#case=%d, #tbl=%d\n", totcfgrun, #tbl)
end

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

-- TODO: trueRBEND, RFMULTIPOLE, CRABCAVITY, BEAMBEAM, ELSEPARATOR, WIGGLER, ...
-- TODO: all versions with knl, ksl...

local seqs = {

sequence 'seqDRIFT' {
  drift 'DRIFT1' {at=0.75, l=1.5, tilt:=e_tlt },
  drift 'DRIFT2' {at=3.25, l=1.5, tilt:=e_tlt },
},

sequence 'seqSBEND' {
  sbend 'SBEND1' {at=0.75, l=1.5, tilt:=e_tlt, k0:= 0.05*e_on, angle= 0.05*1.5, kill_ent_fringe=true, kill_exi_fringe=true},
  sbend 'SBEND2' {at=3.25, l=1.5, tilt:=e_tlt, k0:=-0.05*e_on, angle=-0.05*1.5, kill_ent_fringe=true, kill_exi_fringe=true},
},

sequence 'seqSBENDfr' {
  sbend 'SBENDfr1' {at=0.75, l=1.5, tilt:=e_tlt, k0:= 0.05*e_on, angle= 0.05*1.5},
  sbend 'SBENDfr2' {at=3.25, l=1.5, tilt:=e_tlt, k0:=-0.05*e_on, angle=-0.05*1.5},
},

sequence 'seqSBENDfh' {
  sbend 'SBENDfh1' {at=0.75, l=1.5, tilt:=e_tlt, k0:= 0.05*e_on, angle= 0.05*1.5, e1= 0.05*1.5/2, e2= 0.05*1.5/1.5, hgap=0.03, fint=0.5},
  sbend 'SBENDfh2' {at=3.25, l=1.5, tilt:=e_tlt, k0:=-0.05*e_on, angle=-0.05*1.5, e1=-0.05*1.5/2, e2=-0.05*1.5/1.5, hgap=0.03, fint=0.5},
},

sequence 'seqRBEND' {
  rbend 'RBEND1' {at=0.75, l=1.5, tilt:=e_tlt, k0:= 0.05*e_on, angle= 0.05*1.5, kill_ent_fringe=true, kill_exi_fringe=true},
  rbend 'RBEND2' {at=3.25, l=1.5, tilt:=e_tlt, k0:=-0.05*e_on, angle=-0.05*1.5, kill_ent_fringe=true, kill_exi_fringe=true},
},

sequence 'seqRBENDfr' {
  rbend 'RBENDfr1' {at=0.75, l=1.5, tilt:=e_tlt, k0:= 0.05*e_on, angle= 0.05*1.5},
  rbend 'RBENDfr2' {at=3.25, l=1.5, tilt:=e_tlt, k0:=-0.05*e_on, angle=-0.05*1.5},
},

sequence 'seqQUAD' {
  quadrupole 'QUAD1' {at=0.75, l=1.5, tilt:=e_tlt, k1:= 0.25*e_on},
  quadrupole 'QUAD2' {at=3.25, l=1.5, tilt:=e_tlt, k1:=-0.25*e_on},
},

sequence 'seqSEXT' {
  sextupole 'SEXT1' {at=0.75, l=1.5, tilt:=e_tlt, k2:= 0.25*e_on},
  sextupole 'SEXT2' {at=3.25, l=1.5, tilt:=e_tlt, k2:=-0.25*e_on},
},

sequence 'seqOCTU' {
  octupole 'OCTU1' {at=0.75, l=1.5, tilt:=e_tlt, k3:= 0.25*e_on},
  octupole 'OCTU2' {at=3.25, l=1.5, tilt:=e_tlt, k3:=-0.25*e_on},
},

sequence 'seqDECA' {l=4,
  multipole 'DECA1' {at=0.75, lrad=1.5, tilt:=e_tlt, knl:={0,0,0,0, 0.25*e_on}},
  multipole 'DECA2' {at=3.25, lrad=1.5, tilt:=e_tlt, knl:={0,0,0,0,-0.25*e_on}},
},

sequence 'seqDODECA' {l=4,
  multipole 'DODECA1' {at=0.75, lrad=1.5, tilt:=e_tlt, knl:={0,0,0,0,0, 0.25*e_on}},
  multipole 'DODECA2' {at=3.25, lrad=1.5, tilt:=e_tlt, knl:={0,0,0,0,0,-0.25*e_on}},
},

sequence 'seqMULT' {l=4,
  multipole 'MULT1' {at=0.75, lrad=1.5, tilt:=e_tlt, knl:={ 0.05*1.5*e_on, 0.25*1.5*e_on}, angle= 0.05*1.5},
  multipole 'MULT2' {at=3.25, lrad=1.5, tilt:=e_tlt, knl:={-0.05*1.5*e_on,-0.25*1.5*e_on}, angle=-0.05*1.5},
},

sequence 'seqHKICK' {
  hkicker 'HKICK1' {at=0.75, l=1.5, tilt:=e_tlt, kick:= 0.25e-3*e_on},
  hkicker 'HKICK2' {at=3.25, l=1.5, tilt:=e_tlt, kick:=-0.25e-3*e_on},
},

sequence 'seqVKICK' {
  vkicker 'VKICK1' {at=0.75, l=1.5, tilt:=e_tlt, kick:=-0.25e-3*e_on},
  vkicker 'VKICK2' {at=3.25, l=1.5, tilt:=e_tlt, kick:= 0.25e-3*e_on},
},

sequence 'seqKICK' {
  kicker 'KICK1' {at=0.75, l=1.5, tilt:=e_tlt, hkick:= 0.25e-3*e_on, vkick:=-0.25e-3*e_on},
  kicker 'KICK2' {at=3.25, l=1.5, tilt:=e_tlt, hkick:=-0.25e-3*e_on, vkick:= 0.25e-3*e_on},
},

sequence 'seqSOL' {
  solenoid 'SOL1' {at=0.75, l=1.5, tilt:=e_tlt, ks:= 0.25*e_on},
  solenoid 'SOL2' {at=3.25, l=1.5, tilt:=e_tlt, ks:=-0.25*e_on},
},

sequence 'seqCAV0' {l=4,
  rfcavity 'CAV01' {at=0.75, l=0, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5, no_cavity_totalpath=true},
  rfcavity 'CAV02' {at=3.25, l=0, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5, no_cavity_totalpath=true},
},

sequence 'seqCAV0t' {l=4,
  rfcavity 'CAV0t1' {at=0.75, l=0, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5},
  rfcavity 'CAV0t2' {at=3.25, l=0, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5},
},

sequence 'seqCAV' {
  rfcavity 'CAV1' {at=0.75, l=1.5, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5, no_cavity_totalpath=true},
  rfcavity 'CAV2' {at=3.25, l=1.5, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5, no_cavity_totalpath=true},
},

sequence 'seqCAVt' {
  rfcavity 'CAVt1' {at=0.75, l=1.5, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5},
  rfcavity 'CAVt2' {at=3.25, l=1.5, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5},
},

sequence 'seqCAVh' {
  rfcavity 'CAVh1' {at=0.75, l=1.5, tilt:=e_tlt, volt:=8*e_on, harmon=2, lag=0.5},
  rfcavity 'CAVh2' {at=3.25, l=1.5, tilt:=e_tlt, volt:=8*e_on, harmon=2, lag=0.5},
},

sequence 'seqCAVb' {
  rfcavity 'CAVb1' {at=0.75, l=1.5, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5, n_bessel=3},
  rfcavity 'CAVb2' {at=3.25, l=1.5, tilt:=e_tlt, volt:=8*e_on, freq=400, lag=0.5, n_bessel=3},
},

}

-- setkeys
for _,seq in ipairs(seqs) do seqs[seq.name] = seq end

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

nooff  = 1;
notilt = 1;
rchk(Cmad, seqs.seqDRIFT)

notilt = 0;
rchk(Cmad, seqs.seqSBEND  )
rchk(Cmad, seqs.seqSBENDfr) ! fringe
rchk(Cmad, seqs.seqSBENDfh) ! fringe, fint, hgap
rchk(Cmad, seqs.seqRBEND  )
rchk(Cmad, seqs.seqRBENDfr) ! fringe

nooff  = 0;
rchk(Cmad, seqs.seqQUAD  )
rchk(Cmad, seqs.seqSEXT  )
rchk(Cmad, seqs.seqOCTU  )
rchk(Cmad, seqs.seqDECA  )
rchk(Cmad, seqs.seqDODECA)
rchk(Cmad, seqs.seqMULT  )
rchk(Cmad, seqs.seqHKICK )
rchk(Cmad, seqs.seqVKICK )
rchk(Cmad, seqs.seqKICK  )

notilt = 0;
rchk(Cmad, seqs.seqSOL)

! switch to 6D for cavities
nooff  = 1;
rchk(Cmad, seqs.seqCAV0 )
rchk(Cmad, seqs.seqCAV0t)
rchk(Cmad, seqs.seqCAV  )
rchk(Cmad, seqs.seqCAVt )
rchk(Cmad, seqs.seqCAVh )
rchk(Cmad, seqs.seqCAVb )

-- for _,seq in ipairs(seqs) do
--   rchk(Cmad, seq)
-- end
printf("total config run: %d\n", totcfgrun)
printf("** minima / maxima **\n")
local fmt = "%3s: "..option.format.." / "..option.format.." [%d/%d]\n"
for i=4,#colres do
  local vec = Cmad[colres[i]]
  local imin, imax = vec:minmax(true)
  printf(fmt, colres[i], abs(vec[imin]), abs(vec[imax]), imin, imax)
end

Cmad.colwidth = 24
Cmad:write("Cmad.txt",prtcol,prthdr)

local Cptc = mtable:read("Cptc.txt")

printf("MAD: #tbl=%d\n", #Cmad)
printf("PTC: #tbl=%d\n", #Cptc)

