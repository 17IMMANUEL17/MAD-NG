--[[ Run and data extraction assuming mapdump=true below:
cd track_ref
../mad trackAllKind.mad > trackAllKindMad.out 2>&1 ; tail -n 5 trackAllKindMad.out
grep "^@@\|%%" trackAllKindMad.out | grep -B 1 "^%%" | grep -v "\-\-" > trackAllKindMad_res.txt
grep "^@@\|%%" trackAllKindMad.out > trackAllKindMad_dump.txt
grep "warn"    trackAllKindMad.out > trackAllKindMad_warn.txt
cd ..
--]]

local beam, track, sequence, mtable, option                       in MAD
local drift, kicker, multipole, solenoid, rfcavity, sbend, rbend,
      quadrupole, sextupole, octupole, decapole, dodecapole       in MAD.element
local printf, tblicpy                                             in MAD.utility

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!! prepare tables: Cmad and Cmad_cfg
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

local colres = {'name','cfgid',
                'c10','c20','c30','c40','c50','c60',
                'c11','c12','c13','c14','c15','c16',
                'c21','c22','c23','c24','c25','c26',
                'c31','c32','c33','c34','c35','c36',
                'c41','c42','c43','c44','c45','c46',
                'c51','c52','c53','c54','c55','c56',
                'c61','c62','c63','c64','c65','c66'}

local colcfg = {'cfgid','energy','model','method','nslice','mapdef','mapdump','X0'}
local prtcfg = {'cfgid','energy','model','method','nslice','no','x','px','y','py','t','pt'}

local Cmad     = mtable 'Cmad'    (tblicpy(colres)) -- colres becomes the object
local Cmad_cfg = mtable 'Cmad_cfg'(tblicpy(colcfg)) -- colcfg becomes the object

do -- setup (from PTC checks)
  local mapdef, mapdump = {xy=2}, 2
  local X0 = {x=3e-3, px=-2e-4, y=-2e-3, py=3e-4, t=1e-5, pt=2e-5}

  local cfgid = 1
  for energy = 1,6500,6499 do
  for _,model in ipairs{'DKD','TKT'} do
  for method = 2,6,2 do
  for nslice = 1,3 do     -- order matters!
    Cmad_cfg = Cmad_cfg + {cfgid, energy, model, method, nslice, mapdef, mapdump, X0}
    cfgid = cfgid + 1
  end end end end

  -- add columns for pretty print
  Cmad_cfg:addcol('no', \r -> Cmad_cfg.mapdef[r].xy)
  for _,c in ipairs {'x','px','y','py','t','pt'} do
    Cmad_cfg:addcol(c, \r -> Cmad_cfg.X0[r][c])
  end
  Cmad_cfg.column = prtcfg
end

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!! run the tests from Cptc_cfg, save the results in Cptc.txt
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

local function rchk (seq, res, cfg)
  local bem = beam {particle = 'proton'}
  local row = {}

  for i=1,#cfg do
    -- dump sequence name and config id
    if cfg.mapdump[i] then
      printf("%%%% %s CFGID=%g\n", seq.name, cfg.cfgid[i])
    end

    -- run track for these settings
    bem.energy = cfg.energy[i]
    local tmp = track {
      beam     = bem,
      sequence = seq,
      X0       = cfg.X0    [i],
      model    = cfg.model [i],
      method   = cfg.method[i],
      nslice   = cfg.nslice[i],
      mapdef   = cfg.mapdef[i],
      save     = true,
      mapsave  = true,
      mapdump  = cfg.mapdump[i],
      observe  = false,
    }

    -- extend track mtable
    tmp:addcol('cfgid', \ -> cfg.cfgid[i])
    for i=1,6 do
      tmp:addcol('c'..i..'0', \r -> tmp.M[r][i]:get(1))
    end
    for i=1,6 do for j=1,6 do
      tmp:addcol('c'..i .. j, \r -> tmp.M[r][i]:get(j+1))
    end end

    -- copy to results
    for i=1,#tmp do
      for j=1,#colres do row[j] = tmp:getcol(colres[j])[i] end
      res = res + row
    end
  end
end

local seqDRIFT = sequence 'seqDRIFT' { l=5,
  drift 'DRIFT1' {at=0.75, l=1.5},
  drift 'DRIFT2' {at=3.25, l=1.5},
}

rchk (seqDRIFT, Cmad, Cmad_cfg)

! ------

local seqKICK = sequence 'seqKICK' { l=5,
  kicker 'KICK1' {at=0.75, l=1.5, hkick= 0.25e-3, vkick=-0.25e-3},
  kicker 'KICK2' {at=3.25, l=1.5, hkick=-0.25e-3, vkick= 0.25e-3},
}

rchk (seqKICK, Cmad, Cmad_cfg)

! ------

local seqMULT = sequence 'seqMULT' { l=5,
  multipole 'MULT1' {at=0.75, lrad=1.5, knl={ 0.05*1.5, 0.25*1.5}, angle= 0.05*1.5},
  multipole 'MULT2' {at=3.25, lrad=1.5, knl={-0.05*1.5,-0.25*1.5}, angle=-0.05*1.5},
}

rchk (seqMULT, Cmad, Cmad_cfg)

! ------

local seqSBEND = sequence 'seqSBEND' { l=5,
  sbend 'SBEND1' {at=0.75, l=1.5, k0= 0.05, angle= 0.05*1.5, kill_ent_fringe, kill_exi_fringe},
  sbend 'SBEND2' {at=3.25, l=1.5, k0=-0.05, angle=-0.05*1.5, kill_ent_fringe, kill_exi_fringe},
}

rchk (seqSBEND, Cmad, Cmad_cfg)

! ------

local seqSBENDfr = sequence 'seqSBENDfr' { l=5,
  sbend 'SBENDfr1' {at=0.75, l=1.5, k0= 0.05, angle= 0.05*1.5},
  sbend 'SBENDfr2' {at=3.25, l=1.5, k0=-0.05, angle=-0.05*1.5},
}

rchk (seqSBENDfr, Cmad, Cmad_cfg)

! ------

local seqSBENDfh = sequence 'seqSBENDfh' { l=5,
  sbend 'SBENDfh1' {at=0.75, l=1.5, k0= 0.05, angle= 0.05*1.5, e1= 0.05*1.5/2, e2= 0.05*1.5/1.5, hgap=0.03, fint=0.5},
  sbend 'SBENDfh2' {at=3.25, l=1.5, k0=-0.05, angle=-0.05*1.5, e1=-0.05*1.5/2, e2=-0.05*1.5/1.5, hgap=0.03, fint=0.5},
}

rchk (seqSBENDfh, Cmad, Cmad_cfg)

! ------

local seqRBEND = sequence 'seqRBEND' { l=5,
  rbend 'RBEND1' {at=0.75, l=1.5, k0= 0.05, angle= 0.05*1.5, kill_ent_fringe, kill_exi_fringe},
  rbend 'RBEND2' {at=3.25, l=1.5, k0=-0.05, angle=-0.05*1.5, kill_ent_fringe, kill_exi_fringe},
}

rchk (seqRBEND, Cmad, Cmad_cfg)

! ------

local seqRBENDfr = sequence 'seqRBENDfr' { l=5,
  rbend 'RBENDfr1' {at=0.75, l=1.5, k0= 0.05, angle= 0.05*1.5},
  rbend 'RBENDfr2' {at=3.25, l=1.5, k0=-0.05, angle=-0.05*1.5},
}

rchk (seqRBENDfr, Cmad, Cmad_cfg)

! ------

local seqQUAD = sequence 'seqQUAD' { l=5,
  quadrupole 'QUAD1' {at=0.75, l=1.5, k1= 0.25},
  quadrupole 'QUAD2' {at=3.25, l=1.5, k1=-0.25},
}

rchk (seqQUAD, Cmad, Cmad_cfg)

! ------

local seqSEXT = sequence 'seqSEXT' { l=5,
  sextupole 'SEXT1' {at=0.75, l=1.5, k2= 0.25},
  sextupole 'SEXT2' {at=3.25, l=1.5, k2=-0.25},
}

rchk (seqSEXT, Cmad, Cmad_cfg)

! ------

local seqOCTU = sequence 'seqOCTU' { l=5,
  octupole 'OCTU1' {at=0.75, l=1.5, k3= 0.25},
  octupole 'OCTU2' {at=3.25, l=1.5, k3=-0.25},
}

rchk (seqOCTU, Cmad, Cmad_cfg)

! ------

local seqDECA = sequence 'seqDECA' { l=5,
  multipole 'DECA1' {at=0.75, lrad=1.5, knl={0,0,0,0, 0.25*1.5}},
  multipole 'DECA2' {at=3.25, lrad=1.5, knl={0,0,0,0,-0.25*1.5}},
}

rchk (seqDECA, Cmad, Cmad_cfg)

! ------

local seqDODECA = sequence 'seqDODECA' { l=5,
  multipole 'DODECA1' {at=0.75, lrad=1.5, knl={0,0,0,0,0, 0.25*1.5}},
  multipole 'DODECA2' {at=3.25, lrad=1.5, knl={0,0,0,0,0,-0.25*1.5}},
}

rchk (seqDODECA, Cmad, Cmad_cfg)

! ------

local seqSOL = sequence 'seqSOL' { l=5,
  solenoid 'SOL1' {at=0.75, l=1.5, ks= 0.25},
  solenoid 'SOL2' {at=3.25, l=1.5, ks=-0.25},
}

rchk (seqSOL, Cmad, Cmad_cfg)

! ------

local seqCAV = sequence 'seqCAV' { l=5,
  rfcavity 'CAV1' {at=0.75, l=1.5, volt=8, freq=400, lag=0.5},
  rfcavity 'CAV2' {at=3.75, l=1.5, volt=8, freq=400, lag=0.5},
}

rchk (seqCAV, Cmad, Cmad_cfg)

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!
!! save results and setup
!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

option.format = "% -.16e"
Cmad:write "Cmad.txt"

option.format = "% -8.4g"
Cmad_cfg:write "Cmad_cfg.txt"
