--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix module regression tests - real matrices
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the matrix module.

 o-----------------------------------------------------------------------------o
]=]

local assertEquals, assertAlmostEquals, assertInf, assertFalse, assertNotEquals,
      assertErrorMsgContains, assertNil, assertNaN, assertIsString, assertTrue,
      assertAllEquals in require 'luaunit'

local vector, cvector, matrix, cmatrix, is_vector, is_matrix, is_cvector,
      is_cmatrix, isa_vector, isa_matrix, linspace, logspace in MAD

local complex, range, nrange, nlogrange,infi, tiny, eps, huge, inf, nan, pi, Pi,
      sqrt, abs, log, exp, min, randomseed, floor, round,
      sin, cos, tan, sinh, cosh, tanh, asin, acos, atan, asinh, acosh, atanh,
      totable, is_complex, is_cdata, is_table, is_nil, is_string in MAD
local rep in MAD.utility

-- locals ---------------------------------------------------------------------o

local dat    = require 'matrix_dat'
local mth = \f,s,... s[f](s,...)
local ref = \i,j,nc ( (i-1)*nc+j )

local values = {
  num = { tiny, 2^-64, 2^-63, 2^-53, eps, 2^-52, 2*eps, 2^-32, 2^-31, 1e-9,
          0.1-eps, 0.1, 0.1+eps, 0.5, 0.7-eps, 0.7, 0.7+eps, 1-eps, 1, 1+eps,
          1.1, 1.7, 2, 10, 1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53,
          2^63, 2^64, huge },
}

local errMat = matrix(2)

local G = {}
G.mat   = {}
G.size  = {}
G.res   = {}
G.vi    = {}
G.vj    = {}

for nr=1,5 do
  G.vi[nr] = vector(nr):fill(1..nr)
  G.vj[nr] = vector(nr):fill(1..nr)
  for nc=1,5 do
    G.mat  [ref(nr,nc,5)] = matrix(nr,nc):fill(1..nr*nc)
    G.res  [ref(nr,nc,5)] = matrix(nr,nc)
    G.size [ref(nr,nc,5)] = {nr,nc}
  end
end

randomseed( os.clock() )

-- regression test suites -----------------------------------------------------o

TestMatrix    = {}
TestMatrixErr = {}

TestMatrixGet = {}
TestMatrixSet = {}

TestMatrixInPlace   = {}
TestMatrixInPlaceII = {}
TestMatrixFun       = {}

TestMatrixSMapsI  = {}
TestMatrixSMapsII = {}
TestMatrixSFolds  = {}
TestMatrixSScans  = {}

TestMatrixSympl  = {}
TestMatrixLinAlg = {}
TestMatrixOps    = {}
TestMatrixLapack = {}
TestMatrixFFT    = {}
TestMatrixRot    = {}
TestMatrixConv   = {}

function TestMatrixErr:testCtor()
  local msg = {
  "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)",
   "matrix too large",
  }
  assertErrorMsgContains( msg[1], matrix, ''     )
  assertErrorMsgContains( msg[1], matrix, nil    )
  assertErrorMsgContains( msg[1], matrix, 0      )
  assertErrorMsgContains( msg[1], matrix, tiny   )
  assertErrorMsgContains( msg[1], matrix, eps    )
  assertErrorMsgContains( msg[1], matrix, 1..2   )
  assertErrorMsgContains( msg[1], matrix, infi   )
  assertErrorMsgContains( msg[1], matrix, nan    )
  assertErrorMsgContains( msg[1], matrix,-1      )
  assertErrorMsgContains( msg[1], matrix,-eps    )
  assertErrorMsgContains( msg[2], matrix, inf    )
  assertErrorMsgContains( msg[2], matrix, huge   )
  assertErrorMsgContains( msg[2], matrix, 2^15+1 )
  assertErrorMsgContains( msg[2], vector, 2^30+1 )
end

function TestMatrix:testCtor()
  local nr, nc
  assertTrue( is_matrix( vector(2^(30-1))) )
  assertTrue( is_matrix( matrix(2^(15-1))) )
  collectgarbage()
  for i,m in ipairs(G.mat) do
    nr, nc = m:sizes()
    assertTrue  ( is_matrix(m) )
    if nc==1 then
      assertTrue  ( is_vector(m) )
      assertEquals( nc, 1 )
    else
    assertEquals( nr, G.size[i][1] )
    assertEquals( nc, G.size[i][2] )
    end
  end
end

function TestMatrixErr:testCtorFromtable()
  local msg = {
  "invalid argument #1 (non-empty table expected)",
  "cannot convert 'string' to 'double'"           ,
  "cannot convert 'string' to 'complex'"          ,
  }
  assertErrorMsgContains( msg[1],  matrix, {nil} )
  assertErrorMsgContains( msg[2],  matrix, {''}  )
end

function TestMatrix:testCtorFromtable()
  assertTrue  ( is_matrix( matrix{2} ) )
  assertTrue  ( is_vector( matrix{2} ) )
  assertTrue  ( is_matrix ( matrix{complex(0,0)} ) )
  assertEquals( matrix{complex(0,0)},  matrix(1) ) -- complex/real matrix
  assertEquals( matrix{complex(0,0)}, cmatrix(1) )
end

function TestMatrix:testCdataType()
  local m, v = matrix(2), vector(2)
  assertTrue ( is_matrix ( m ) )
  assertTrue ( is_matrix ( v ) )
  assertFalse( is_vector ( m ) )
  assertTrue ( is_vector ( v ) )
  assertFalse( is_cmatrix( m ) )
  assertFalse( is_cmatrix( v ) )
  assertFalse( is_cvector( m ) )
  assertFalse( is_cvector( v ) )
  assertFalse( isa_vector( m ) )
  assertTrue ( isa_vector( v ) )
  assertTrue ( isa_matrix( m ) )
  assertTrue ( isa_matrix( v ) )
end

function TestMatrixErr:testLinspace()
  local msg = {
    "invalid argument #1 (finite scalar expected)"  ,
    "invalid argument #2 (finite scalar expected)"  ,
    "invalid argument #3 (positive number expected)",
    "bad argument #1 to 'ceil'"                     ,
    "matrix too large"                              ,
  }
  assertErrorMsgContains( msg[1], linspace, nil       )
  assertErrorMsgContains( msg[1], linspace, nil, 2    )
  assertErrorMsgContains( msg[1], linspace, '' , 2    )
  assertErrorMsgContains( msg[1], linspace, nan, 2    )
  assertErrorMsgContains( msg[1], linspace, inf, 2    )
  assertErrorMsgContains( msg[1], linspace,-inf, 2    )
  assertErrorMsgContains( msg[2], linspace, 2  , ''   )
  assertErrorMsgContains( msg[2], linspace, 2  , 1..2 )
  assertErrorMsgContains( msg[2], linspace, 2  , nan  )
  assertErrorMsgContains( msg[2], linspace, 2  , inf  )
  assertErrorMsgContains( msg[2], linspace, 2  ,-inf  )
  assertErrorMsgContains( msg[2], linspace, 2  , 1..2 )
  assertErrorMsgContains( msg[3], linspace, 2  , 2  , 0    )
  assertErrorMsgContains( msg[3], linspace, 2  , 2  ,-1    )
  assertErrorMsgContains( msg[3], linspace, 2  , 2  , nan  )
  assertErrorMsgContains( msg[5], linspace, 2  , 2  , inf  )
  assertErrorMsgContains( msg[3], linspace, 2  , 2  ,-inf  )
  assertErrorMsgContains( msg[4], linspace, 2  , 2  , ''   )
  assertErrorMsgContains( msg[4], linspace, 2  , 2  , 1..2 )
end

function TestMatrix:testLinspace()
  local nrng, l, nr = {
        { 1 , 10, 100}, { 1, 10, 100}, { 10, 1 , 10}, { 1,-10, 10},
        { 10,-1 , 100}, {-1, 10, 100}, {-10, 1 , 10}, {-1,-10, 10},
        {-10,-1 , 100},
        }
  assertTrue  (  is_vector (linspace(1,1))          )
  assertTrue  (  is_cvector(linspace(complex(1,1))) )
  assertEquals(  linspace( 1 )           [1]  , 0   )
  assertEquals(  linspace( 1 )           [100], 1   )
  assertEquals(  linspace( 2, 2, nil)    [1]  , 2   )
  assertEquals(  linspace( 2, 2, nil)    [100], 2   )
  assertEquals( #linspace( 2, 2, nil)         , 100 )
  assertEquals(  linspace( complex(1,1) )[100], complex(1,1) )
  assertEquals(  linspace( complex(1,1) )[1]  , complex(0,0) )
  nr = nrange  ( 0.5, 1 , 1000 )
  l  = linspace( 0.5, 1 , 1000 )
  assertEquals ( l[1]   , nr[1]    )
  assertEquals ( l[1000], nr[1000] )

  for _,v in ipairs(nrng) do
    nr = nrange  ( v[1], v[2], v[3] )
    l  = linspace( v[1], v[2], v[3] )
    for i=1,#nr do
      assertEquals( l[i] - nr[i], 0 )
    end
    nr = nrange  ( v[1], v[2], v[3] )
    l  = linspace( complex(v[1],v[1]), complex(v[2],v[2]), v[3] )
    for i=1,#nr do
      assertAlmostEquals( l[i].re - complex(nr[i],nr[i]).re , 0, eps )
      assertAlmostEquals( l[i].im - complex(nr[i],nr[i]).im , 0, eps )
    end
  end
end

function TestMatrixErr:testLogspace()
  local msg = {
    "invalid argument #1 (positive finite number expected)",
    "invalid argument #2 (positive finite number expected)",
    "invalid argument #3 (positive number expected)"       ,
    "bad argument #1 to 'ceil'"                            ,
  }
  assertErrorMsgContains( msg[1], logspace, 0          )
  assertErrorMsgContains( msg[1], logspace, nil        )
  assertErrorMsgContains( msg[1], logspace, nil , 1    )
  assertErrorMsgContains( msg[1], logspace, ''  , 1    )
  assertErrorMsgContains( msg[1], logspace, 1..2, 2    )
  assertErrorMsgContains( msg[1], logspace, nan , 2    )
  assertErrorMsgContains( msg[1], logspace, inf , 2    )
  assertErrorMsgContains( msg[1], logspace,-inf , 2    )
  assertErrorMsgContains( msg[2], logspace, 1   , ''   )
  assertErrorMsgContains( msg[2], logspace, 2   , 1..2 )
  assertErrorMsgContains( msg[2], logspace, 2   , nan  )
  assertErrorMsgContains( msg[2], logspace, 2   , inf  )
  assertErrorMsgContains( msg[2], logspace, 2   ,-inf  )
  assertErrorMsgContains( msg[3], logspace, 2   , 2  ,-1    )
  assertErrorMsgContains( msg[3], logspace, 2   , 2  , 0    )
  assertErrorMsgContains( msg[3], logspace, 2   , 2  , nan  )
  assertErrorMsgContains( msg[3], logspace, 2   , 2  ,-inf  )
  assertErrorMsgContains( msg[4], logspace, 2   , 2  , ''   )
  assertErrorMsgContains( msg[4], logspace, 2   , 2  , 1..2 )
end

function TestMatrix:testLogspace()
  local nlrng, nr, l =  { { 10^5, 1, 100 }, { 1, 10^5, 100 }, { 1, 10^-5, 100 }, }
  assertTrue  ( is_vector (logspace(1,1))          )
  assertTrue  ( is_cvector(logspace(complex(1,1))) )
  assertEquals( logspace( 1 )           [1]  , 1   )
  assertEquals( logspace( 1 )           [100], 1   )
  assertEquals( logspace( 2, 2, nil)    [1]  , 2   )
  assertEquals( logspace( 2, 2, nil)    [100], 2   )
  assertEquals(#logspace( 2, 2, nil)         , 100 )
  assertAlmostEquals( logspace( 0.1 )         [100] - 0.1, 0, eps )
  assertAlmostEquals( logspace( complex(1,1) )[100].re - complex(1,1).re, 0, eps )
  assertAlmostEquals( logspace( complex(1,1) )[100].im - complex(1,1).im, 0, eps )

  for _,v in ipairs(nlrng) do
    nr = nlogrange  ( v[1], v[2], v[3] )
    l  = logspace( v[1], v[2], v[3] )
    for i=1,#nr do
      assertEquals( l[i] - nr[i], 0 )
    end
    nr = nrange  ( v[1], v[2], v[3] )
    l  = linspace( complex(v[1],v[1]), complex(v[2],v[2]), v[3] )
    for i=1,#nr do
      assertAlmostEquals( l[i].re - complex(nr[i],nr[i]).re , 0, eps )
      assertAlmostEquals( l[i].im - complex(nr[i],nr[i]).im , 0, eps )
    end
  end
end

-- get, set -------------------------------------------------------------------o

function TestMatrixSet:setUp()
  self.mat   = {}
  self.empty = {}
  for nr=1,5 do
  for nc=1,5 do
    self.mat  [ref(nr,nc,5)] = matrix(nr,nc):fill(1..nr*nc)
    self.empty[ref(nr,nc,5)] = matrix(nr,nc)
  end end
end

function TestMatrixErr:testGeti0()
    local msg = {
    "attempt to compare nil with number",
    }
  assertErrorMsgContains( msg[1], mth, 'geti0', errMat, nil )
end

function TestMatrixGet:testGeti0()
  for _,m in ipairs(G.mat) do
    for i=1,m:size() do assertEquals( m:geti0(i-1), i ) end
  end
end

function TestMatrixErr:testGeti()
  local msg = {
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'geti', errMat, nil )
end

function TestMatrixGet:testGeti()
  for _,m in ipairs(G.mat) do
    for i=1,m:size() do assertEquals( m:geti(i), i ) end
  end
end

function TestMatrixErr:testGet0()
  local msg = {
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'get0', errMat, 0  , nil )
  assertErrorMsgContains( msg[1], mth, 'get0', errMat, nil, 0   )
end

function TestMatrixGet:testGet0()
  local nr, nc
  for _,m in ipairs(G.mat) do
    nr, nc = m:sizes()
    for i=1,nr do
    for j=1,nc do
      assertEquals( m:get0(i-1,j-1), ref(i,j,nc) )
    end end
  end
end

function TestMatrixErr:testGet()
  local msg = {
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'get0', errMat, 1  , nil )
  assertErrorMsgContains( msg[1], mth, 'get0', errMat, nil, 1   )
end

function TestMatrixGet:testGet()
  local nr, nc
  for _,m in ipairs(G.mat) do
    nr, nc = m:sizes()
    for i=1,nr do
    for j=1,nc do
      assertEquals( m:get(i,j), ref(i,j,nc) )
    end end
  end
end

function TestMatrixErr:testSeti0()
  local msg = {
    "0-index out of bounds"             ,
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'seti0', errMat, nan  , 1 )
  assertErrorMsgContains( msg[1], mth, 'seti0', errMat,-1    , 1 )
  assertErrorMsgContains( msg[1], mth, 'seti0', errMat,-eps  , 1 )
  assertErrorMsgContains( msg[1], mth, 'seti0', errMat, 4    , 1 )
  assertErrorMsgContains( msg[2], mth, 'seti0', errMat, nil  , 1 )
end

function TestMatrixSet:testSeti0()
  for _,m in ipairs(self.empty) do
    for i=1,m:size() do
      m:seti0((i-1), i)
      assertEquals( m:geti0(i-1), i )
    end
  end
end

function TestMatrixErr:testSeti()
  local msg = {
    "1-index out of bounds"             ,
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'seti', errMat, nan  , 1 )
  assertErrorMsgContains( msg[1], mth, 'seti', errMat, 0    , 1 )
  assertErrorMsgContains( msg[1], mth, 'seti', errMat, 1-eps, 1 )
  assertErrorMsgContains( msg[1], mth, 'seti', errMat, 5    , 1 )
  assertErrorMsgContains( msg[2], mth, 'seti', errMat, nil  , 1 )
end

function TestMatrixSet:testSeti()
  for _,m in ipairs(self.empty) do
    for i=1,m:size() do
      m:seti((i), i)
      assertEquals( m:geti(i), i )
    end
  end
end

function TestMatrixErr:testSet0()
  local msg = {
    "0-index out of bounds"             ,
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'set0', errMat, nan  , 1    , 1 )
  assertErrorMsgContains( msg[1], mth, 'set0', errMat,-1    , 0    , 1 )
  assertErrorMsgContains( msg[1], mth, 'set0', errMat,-1+eps, 0    , 1 )
  assertErrorMsgContains( msg[1], mth, 'set0', errMat, 0    ,-1+eps, 1 )
  assertErrorMsgContains( msg[1], mth, 'set0', errMat, 2    , 1    , 1 )
  assertErrorMsgContains( msg[1], mth, 'set0', errMat, 1    , 2    , 1 )
  assertErrorMsgContains( msg[2], mth, 'set0', errMat, nil  , 1    , 1 )
  assertErrorMsgContains( msg[2], mth, 'set0', errMat, 1    , nil  , 1 )
end

function TestMatrixSet:testSet0()
  local nr, nc
  for _,m in ipairs(self.empty) do
    nr, nc = m:sizes()
    for i=1,nr do
    for j=1,nc do
      m:set0(i-1,j-1, ref(i,j,nc) )
      assertEquals( m:get0(i-1,j-1), ref(i,j,nc) )
    end end
  end
end

function TestMatrixErr:testSet()
  local msg = {
    "1-index out of bounds"             ,
    "attempt to compare nil with number",
  }
  assertErrorMsgContains( msg[1], mth, 'set', errMat, nan  , 1    , 1 )
  assertErrorMsgContains( msg[1], mth, 'set', errMat, 0    , 1    , 1 )
  assertErrorMsgContains( msg[1], mth, 'set', errMat, 1    , 0    , 1 )
  assertErrorMsgContains( msg[1], mth, 'set', errMat, 1-eps, 1    , 1 )
  assertErrorMsgContains( msg[1], mth, 'set', errMat, 1    , 1-eps, 1 )
  assertErrorMsgContains( msg[2], mth, 'set', errMat, nil  , 1    , 1 )
end

function TestMatrixSet:testSet()
  local nr, nc
  for _,m in ipairs(self.empty) do
    nr, nc = m:sizes()
    for i=1,nr do
    for j=1,nc do
      m:set(i, j, ref(i,j,nc) )
      assertEquals( m:get(i,j), ref(i,j,nc) )
    end end
  end
end

function TestMatrixErr:testSame()
  local msg, s = {
    "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)",
    "invalid argument #1 (non-empty table expected)"                           ,
    "invalid argument #2 (nil or scalar expected)"                             ,
  }
  assertErrorMsgContains( msg[1], mth, 'same', errMat, 1   , ''   )
  assertErrorMsgContains( msg[1], mth, 'same', errMat, 1   , 1..2 )
  assertErrorMsgContains( msg[1], mth, 'same', errMat, 1   , nan  )
  assertErrorMsgContains( msg[2], mth, 'same', errMat, 1   , {}   )
  assertErrorMsgContains( msg[3], mth, 'same', errMat, ''  , 2, 2 )
  assertErrorMsgContains( msg[3], mth, 'same', errMat, 1..2, 2, 2 )
end

function TestMatrixSet:testSame()
  local s
  s = errMat:same( nan)          assertEquals( s:get(1,1), 0 )
  s = errMat:same( inf)          assertEquals( s:get(1,1), 0 )
  s = errMat:same( 0  )          assertEquals( s:get(1,1), 0 )

  for _,m in ipairs(G.mat) do
    -- no input
    s = m:same()        assertEquals( s, matrix(m:sizes()) )
    -- two arg: nr, nc
    s = m:same(2  ,2  ) assertEquals( s, matrix(2) )
    s = m:same(6  ,6  ) assertEquals( s, matrix(6) )
    s = m:same(nil,2,2) assertEquals( s, matrix(2) )
    -- three arg: e_, nr, nc
    s = m:same(complex(1,1), 2, 2) assertEquals( {s:sizes()}, {2,2} ) assertFalse( is_matrix(s) )
    s = m:same(1, 2, 2)            assertEquals( {s:sizes()}, {2,2} ) assertTrue ( is_matrix(s) )
  end
end

-- getx, setx -----------------------------------------------------------------o

function TestMatrixErr:testGetsub()
  local msg = {
    "invalid argument #2 (iterable expected)"                                  ,
    "invalid argument #3 (iterable expected)"                                  ,
    "invalid argument #4 (iterable expected)"                                  ,
    "invalid range member '1'"                                                 ,
    "cannot convert 'nil' to 'double'"                                         ,
    "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'getsub', errMat, nil          )
  assertErrorMsgContains( msg[1], mth, 'getsub', errMat, ''           )
  assertErrorMsgContains( msg[1], mth, 'getsub', errMat, \x x         )
  assertErrorMsgContains( msg[1], mth, 'getsub', errMat, complex(1,1) )
  assertErrorMsgContains( msg[2], mth, 'getsub', errMat, 1   , nil    )
  assertErrorMsgContains( msg[2], mth, 'getsub', errMat, 1   , ''     )
  assertErrorMsgContains( msg[2], mth, 'getsub', errMat, 1   , \x x   )
  assertErrorMsgContains( msg[3], mth, 'getsub', errMat, 0   , 0   , 1    )
  assertErrorMsgContains( msg[3], mth, 'getsub', errMat, 1   , 1   , \x x )
  assertErrorMsgContains( msg[4], mth, 'getsub', errMat, 1   , 1   , 1..4 )
  assertErrorMsgContains( msg[5], mth, 'getsub', errMat, 0   , 0      )
  assertErrorMsgContains( msg[5], mth, 'getsub', errMat, 0   , 1      )
  assertErrorMsgContains( msg[5], mth, 'getsub', errMat, 1   , 0      )
  assertErrorMsgContains( msg[5], mth, 'getsub', errMat, 3   , 1      )
  assertErrorMsgContains( msg[5], mth, 'getsub', errMat, 1   , 3      )
  assertErrorMsgContains( msg[5], mth, 'getsub', errMat, {0}      , 1 )
  assertErrorMsgContains( msg[5], mth, 'getsub', errMat, vector(1), 1 )
  assertErrorMsgContains( msg[6], mth, 'getsub', errMat, 2..1     , 1 )
end

function TestMatrixGet:testGetsub()
  local nr, nc, r
  local m = G.mat[25]
  r = m:getsub( 2   , 2    )  assertEquals( r:get(1,1), m:get(2,2))
  r = m:getsub( 2   , 2, {})  assertEquals( r[1], m:get(2,2))
  r = m:getsub( 2   , 2, vector(2) )
  assertEquals( r:get(1,1), m:get(2,2) )
  assertEquals( r:get(2,1), 0          )

  r = m:getsub( 1..2, 1..3)   nr, nc = r:sizes()
  for i=1,nr do for j=1,nc do assertEquals(r:get(i,j), m:get(i, j)) end end
  r = m:getsub({1}  ,{1,2})   nr, nc = r:sizes()
  for i=1,nr do for j=1,nc do assertEquals(r:get(i,j), ref(i,j,nc)) end end

  for _,m in ipairs(G.mat) do    -- 25  (all shapes over 5x5)
    local nr, nc = m:sizes()
    for li=1,nr do               -- 625 (all sub-shapes over 5x5)
    for lj=1,nc do
      local vi, vj = G.vi[li], G.vj[lj]
      vi:perm(); vj:perm()
      local r = m:getsub(vi, vj)
      for i=1,li do
      for j=1,lj do
        assertEquals(r:get(i,j), m:get(vi[i], vj[j]))
      end end
    end end
  end
end

function TestMatrixErr:testSetsub()
  local msg = {
    "invalid argument #2 (iterable expected)"          ,
    "invalid argument #3 (iterable expected)"          ,
    "invalid argument #4 (scalar or iterable expected)",
    "1-index out of bounds"                            ,
    "cannot convert 'nil' to 'double'"                 ,
  }
  assertErrorMsgContains( msg[1], mth, 'setsub', errMat, nil , 1  , 1  )
  assertErrorMsgContains( msg[1], mth, 'setsub', errMat, ''  , 1  , 1  )
  assertErrorMsgContains( msg[1], mth, 'setsub', errMat, NaN , 1  , 1  )
  assertErrorMsgContains( msg[1], mth, 'setsub', errMat, \x x, 1  , 1  )
  assertErrorMsgContains( msg[2], mth, 'setsub', errMat, 1             )
  assertErrorMsgContains( msg[2], mth, 'setsub', errMat, 1   , nil, 1  )
  assertErrorMsgContains( msg[2], mth, 'setsub', errMat, 1   , '' , 1  )
  assertErrorMsgContains( msg[2], mth, 'setsub', errMat, 1   , NaN, 1  )
  assertErrorMsgContains( msg[3], mth, 'setsub', errMat, 1   , 1 , nil )
  assertErrorMsgContains( msg[3], mth, 'setsub', errMat, 1   , 1 , ''  )
  assertErrorMsgContains( msg[3], mth, 'setsub', errMat, 1   , 1 , NaN )
  assertErrorMsgContains( msg[4], mth, 'setsub', errMat, 0   , 1 , 1   )
  assertErrorMsgContains( msg[4], mth, 'setsub', errMat, 1   , 0 , 1   )
  assertErrorMsgContains( msg[5], mth, 'setsub', errMat, 1..2, 1..2, 1..3 )
  assertErrorMsgContains( msg[5], mth, 'setsub', errMat, 1..2, 1..2, {1}  )
  assertErrorMsgContains( msg[1], mth, 'setsub', errMat, complex(1,1), 1 , 1 )
  assertErrorMsgContains( msg[2], mth, 'setsub', errMat, 1 , complex(1,1), 1 )
end

function TestMatrixSet:testSetsub()
  local mt = matrix(5)
  mt:setsub( 1..5, 1, {1,1,1,1,1})
  for i=1,5 do
  for j=1,5 do
    if j==1 then assertEquals( mt:get(i,j), 1 )
            else assertEquals( mt:get(i,j), 0 ) end
  end end
  mt:setsub( 1..5, 1, 1..5)
  for i=1,5 do
  for j=1,5 do
    if j==1 then assertEquals( mt:get(i,j), i )
            else assertEquals( mt:get(i,j), 0 ) end
  end end
  mt:setsub( 1..5, 1..5, 1)
  for i=1,25 do assertEquals( mt:geti(i), 1 ) end

  for i,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    for li=1,nr do
    for lj=1,nc do
      local vi, vj = G.vi[li], G.vj[lj]
      vi:perm(); vj:perm()
      mt = m:getsub(vi, vj)
      m:setsub(vi,vj,1..#vi*#vj)
      local r = m:getsub(vi, vj)
      for i=1,li do
      for j=1,lj do
        assertEquals(r:get(i,j), ref(i,j,lj))
      end end
      m:setsub(vi,vj,mt)
    end end
  end
end

function TestMatrixErr:testGetv()
  local msg = {
    "invalid argument #2 (iterable expected)",
    "invalid argument #3 (iterable expected)",
    "cannot convert 'nil' to 'double"        ,
    "invalid range member '1'"               ,
  }
  assertErrorMsgContains( msg[1], mth, 'getv', errMat, nil )
  assertErrorMsgContains( msg[1], mth, 'getv', errMat, ''  )
  assertErrorMsgContains( msg[1], mth, 'getv', errMat, NaN )
  assertErrorMsgContains( msg[2], mth, 'getv', errMat, 1  , ''   )
  assertErrorMsgContains( msg[2], mth, 'getv', errMat, 1  , 1    )
  assertErrorMsgContains( msg[2], mth, 'getv', errMat, 1  , \x x )
  assertErrorMsgContains( msg[3], mth, 'getv', errMat, 0         )
  assertErrorMsgContains( msg[3], mth, 'getv', errMat, matrix(2) )
  assertErrorMsgContains( msg[4], mth, 'getv', errMat, 1  , 1..2 )
end

function TestMatrixGet:testGetv()
  local m1 = matrix(4):fill(1..16)
  assertEquals( m1:getv(1   , {} )      , {1}                  )
  assertEquals( m1:getv(1   , vector(2)), vector{1,0}          )
  assertEquals( m1:getv(1..2)           , vector(2):fill(1..2) )
  assertEquals( m1:getv{1,2}            , vector(2):fill(1..2) )

  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    for j=1,m:size() do
      assertEquals( m:getv(j), vector{j} )
    end
    for li=1,nr do
      local vi = G.vi[li]:copy()
      for j=1,li do vi[j] = math.random(1,nc*nr) end
      vi:perm()
      assertEquals( m:getv(vi), vector(#vi):fill(vi) )
    end
  end
  m1:getv(1..5,'in') assertEquals( m1, matrix(4):fill(1..16) ) -- same output - to documentation
end

function TestMatrixErr:testSetv()
  local msg = {
    "invalid argument #2 (iterable expected)"          ,
    "invalid argument #3 (scalar or iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'setv', errMat, nil , 0    )
  assertErrorMsgContains( msg[1], mth, 'setv', errMat, ''  , 0    )
  assertErrorMsgContains( msg[1], mth, 'setv', errMat, NaN , 0    )
  assertErrorMsgContains( msg[1], mth, 'setv', errMat, \x x, 0    )
  assertErrorMsgContains( msg[2], mth, 'setv', errMat, 1   , ''   )
  assertErrorMsgContains( msg[2], mth, 'setv', errMat, 1   , nil  )
  assertErrorMsgContains( msg[2], mth, 'setv', errMat, 1   , NaN  )
  assertErrorMsgContains( msg[2], mth, 'setv', errMat, 1   , \x x )
end

function TestMatrixSet:testSetv()
  local mt = self.empty[25]
  mt:setv(1..5, 1)           for i=1,5 do assertEquals( mt:getv(1..5):geti(i), 1 ) end
  mt:setv(1..5, 1..5)        for i=1,5 do assertEquals( mt:getv(1..5):geti(i), i ) end
  mt:setv(1..5, {0,0,0,0,0}) for i=1,5 do assertEquals( mt:getv(1..5):geti(i), 0 ) end

  for _,m in ipairs(self.empty) do
    local nr, nc = m:sizes()
    for j=1,m:size() do
      m:setv(j,j)
      assertEquals( m:getv(j), vector{j} )
    end
    for li=1,nr do
      local vi = G.vi[li]
      vi:perm()
      local mt = m:getv(vi)
      m:setv(vi,1..li)
      assertEquals( m:getv(vi), vector(li):fill(1..li) )
      m:setv(vi,mt)
    end
  end
end

function TestMatrixErr:testGetdiag()
  local msg = {
    "invalid argument #2 (iterable expected)",
    "invalid range member '1'"               ,
  }
  assertErrorMsgContains( msg[1], mth, 'getdiag', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'getdiag', errMat, \x x )
  assertErrorMsgContains( msg[1], mth, 'getdiag', errMat, 1    )
  assertErrorMsgContains( msg[2], mth, 'getdiag', errMat, 1..2 )
end

function TestMatrixGet:testGetdiag()
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    local n , d  = min(nr,nc), m:getdiag()
    assertEquals( {d:sizes()}, {n,1} )
    for i=1,n do assertEquals( d[i], m:get(i,i) ) end
  end
end

function TestMatrixErr:testSetdiag()
  local msg = {
    "invalid argument #2 (scalar or iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'setdiag', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'setdiag', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'setdiag', errMat, \x x )
end

function TestMatrixSet:testSetdiag()
  for _,m in ipairs(self.empty) do
    local nr, nc = m:sizes()
    local n = min(nr,nc)
    for i=1,n do
      local ra = 1..i
      m:setdiag(ra)
      local d = m:getdiag()
      assertEquals( {m:getdiag():sizes()}, {n,1} )
      for i=1,n do assertEquals( d[i], m:get(i,i) ) end
    end
  end
end

function TestMatrixErr:testGetrow()
  local msg = {
    "invalid argument #2 (iterable expected)",
    "invalid argument #3 (iterable expected)",
    "cannot convert 'nil' to 'double'"       ,
    "invalid range member '1'"               ,
    "1-index out of bounds"                  ,
  }
  assertErrorMsgContains( msg[1], mth, 'getrow', errMat, ''         )
  assertErrorMsgContains( msg[1], mth, 'getrow', errMat, nil        )
  assertErrorMsgContains( msg[1], mth, 'getrow', errMat, NaN        )
  assertErrorMsgContains( msg[1], mth, 'getrow', errMat, \x x       )
  assertErrorMsgContains( msg[2], mth, 'getrow', errMat, 1   , ''   )
  assertErrorMsgContains( msg[2], mth, 'getrow', errMat, 1   , 1    )
  assertErrorMsgContains( msg[3], mth, 'getrow', errMat, 0          )
  assertErrorMsgContains( msg[3], mth, 'getrow', errMat, 5          )
  assertErrorMsgContains( msg[4], mth, 'getrow', errMat, 1   , 1..2 )
  assertErrorMsgContains( msg[5], mth, 'getrow', errMat, 1   , vector(1) )
end

function TestMatrixGet:testGetrow()
  local m = G.mat[25]
  assertEquals( m:getrow{1,2}            , m:getsub({1,2},1..5   ) )
  assertEquals( m:getrow(vector{1,2})    , m:getsub({1,2},1..5   ) )
  assertEquals( m:getrow(vector{1,2}, {}), m:getsub({1,2},1..5,{}) )

  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    for i=1,nr do
    for a=1,i  do
      for li=1,i-a+1 do
        local ra = a..i..li
        assertEquals( m:getrow(ra), m:getsub(ra,1..nc) )
      end
    end end
  end
end

function TestMatrixErr:testSetrow()
  local m = matrix(3)
  local msg = {
    "invalid argument #2 (iterable expected)"          ,
    "invalid argument #3 (scalar or iterable expected)",
    "1-index out of bounds"                            ,
    "cannot convert 'nil' to 'double'"                 ,
  }
  assertErrorMsgContains( msg[1], mth, 'setrow', errMat, ''         )
  assertErrorMsgContains( msg[1], mth, 'setrow', errMat, nil        )
  assertErrorMsgContains( msg[1], mth, 'setrow', errMat, NaN        )
  assertErrorMsgContains( msg[1], mth, 'setrow', errMat, \x x       )
  assertErrorMsgContains( msg[2], mth, 'setrow', errMat, 1   , nil  )
  assertErrorMsgContains( msg[2], mth, 'setrow', errMat, 1   , ''   )
  assertErrorMsgContains( msg[3], mth, 'setrow', errMat, 0   , 1    )
  assertErrorMsgContains( msg[3], mth, 'setrow', errMat, 3   , 1    )
  assertErrorMsgContains( msg[4], mth, 'setrow', m     , 1   ,1..2  )
  assertErrorMsgContains( msg[4], mth, 'setrow', m     , 1   ,{1,2} )
  assertErrorMsgContains( msg[4], mth, 'setrow', errMat, 1   , matrix(1) )
end

function TestMatrixSet:testSetrow()
  local mt = self.empty[25]
  mt:setrow(1, 1)           for i=1,5 do assertEquals( mt:getrow(1):geti(i), 1 ) end
  mt:setrow(1, 1..5)        for i=1,5 do assertEquals( mt:getrow(1):geti(i), i ) end
  mt:setrow(1, {0,0,0,0,0}) for i=1,5 do assertEquals( mt:getrow(1):geti(i), 0 ) end

  for _,m in ipairs(self.empty) do
    local nr, nc = m:sizes()
    for i=1,nr do
    for a=1,i  do
      for li=1,i-a+1 do
        local ra = a..i..li
        local r = 1..nc*#ra
        m:setrow(ra,r)
        for ii=1,#ra do
        for jj=1,nc  do
          assertEquals( m:getrow(ra):get(ii,jj), ref(ii,jj,nc) )
        end end
        m:setrow(ra,0)
      end
    end end
  end
end

function TestMatrixErr:testGetcol()
  local msg = {
    "invalid argument #2 (iterable expected)",
    "invalid argument #3 (iterable expected)",
    "cannot convert 'nil' to 'double'"       ,
    "invalid range member '1'"               ,
    "1-index out of bounds"                  ,
  }
  assertErrorMsgContains( msg[1], mth, 'getcol', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'getcol', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'getcol', errMat, NaN  )
  assertErrorMsgContains( msg[1], mth, 'getcol', errMat, \x x )
  assertErrorMsgContains( msg[2], mth, 'getcol', errMat, 1   , ''   )
  assertErrorMsgContains( msg[2], mth, 'getcol', errMat, 1   , 1    )
  assertErrorMsgContains( msg[3], mth, 'getcol', errMat, 0          )
  assertErrorMsgContains( msg[3], mth, 'getcol', errMat, 3          )
  assertErrorMsgContains( msg[4], mth, 'getcol', errMat, 1   , 1..2 )
  assertErrorMsgContains( msg[5], mth, 'getcol', errMat, 1   , vector(1) )
end

function TestMatrixGet:testGetcol()
  local m = G.mat[25]
  assertEquals( m:getcol{1,2}            , m:getsub(1..5,{1,2}   ) )
  assertEquals( m:getcol(vector{1,2})    , m:getsub(1..5,{1,2}   ) )
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    for j=1,nc do
    for b=1,j  do
      for lj = 1,j-b+1 do
        local rb = b..j..lj
        assertEquals( m:getcol(rb) , m:getsub(1..nr,rb) )
      end
    end end
  end
end

function TestMatrixErr:testSetcol()
  local m = matrix(3)
  local msg = {
    "invalid argument #2 (iterable expected)"          ,
    "invalid argument #3 (scalar or iterable expected)",
    "1-index out of bounds"                            ,
    "cannot convert 'nil' to 'double'"                 ,
  }
  assertErrorMsgContains( msg[1], mth, 'setcol', errMat, ''         )
  assertErrorMsgContains( msg[1], mth, 'setcol', errMat, nil        )
  assertErrorMsgContains( msg[1], mth, 'setcol', errMat, NaN        )
  assertErrorMsgContains( msg[1], mth, 'setcol', errMat, \x x       )
  assertErrorMsgContains( msg[2], mth, 'setcol', errMat, 1   ,  ''  )
  assertErrorMsgContains( msg[2], mth, 'setcol', errMat, 1   ,  nil )
  assertErrorMsgContains( msg[3], mth, 'setcol', errMat, 0   ,  1   )
  assertErrorMsgContains( msg[3], mth, 'setcol', errMat, 3   ,  1   )
  assertErrorMsgContains( msg[4], mth, 'setcol', errMat, 1   ,  matrix(1) )
  assertErrorMsgContains( msg[4], mth, 'setcol', m     , 1,  1..2  )
  assertErrorMsgContains( msg[4], mth, 'setcol', m     , 1,  {1,2} )
end

function TestMatrixSet:testSetcol()
  local mt = self.empty[25]
  mt:setcol(1, 1)           for i=1,5 do assertEquals( mt:getcol(1):geti(i), 1 ) end
  mt:setcol(1, 1..5)        for i=1,5 do assertEquals( mt:getcol(1):geti(i), i ) end
  mt:setcol(1, {0,0,0,0,0}) for i=1,5 do assertEquals( mt:getcol(1):geti(i), 0 ) end

  for _,m in ipairs(self.empty) do
    local nr, nc = m:sizes()
    for j=1,nc do
    for b=1,j  do
      for lj = 1,j-b+1 do
        local rb = b..j..lj
        local r = 1..nr*#rb
        m:setcol(rb,r)
        for ii=1,nr  do
        for jj=1,#rb do
          assertEquals( m:getcol(rb):get(ii,jj), ref(jj,ii,nr) )
        end end
        m:setcol(rb,0)
      end
    end end
  end
end

-- size, same -----------------------------------------------------------------o

function TestMatrix:testNrow()
  for i,m in ipairs(G.mat) do
    assertEquals( m:nrow(), G.size[i][1] )
  end
end

function TestMatrix:testNcol()
  for i,m in ipairs(G.mat) do
    assertEquals( m:ncol(), G.size[i][2] )
  end
end

function TestMatrix:testSize()
  for i,m in ipairs(G.mat) do
    assertEquals( m:size(), G.size[i][1]*G.size[i][2] )
  end
end

function TestMatrix:testSizes()
  for i,m in ipairs(G.mat) do
    assertEquals( {m:sizes()}, G.size[i] )
  end
end

function TestMatrix:testTsizes()
  for i,m in ipairs(G.mat) do
    assertEquals( {m:tsizes()}, {G.size[i][2], G.size[i][1]} )
  end
end

-- in place -------------------------------------------------------------------o

function TestMatrixInPlace:setUp()
  self.mat   = {}
  for nr=1,5 do
  for nc=1,5 do
    self.mat[ref(nr,nc,5)] = matrix(nr,nc):fill(1..nr*nc)
  end end
end

function TestMatrixErr:testRandom()
  local msg, s = {
    "invalid argument #1 or #2 (nrow[,ncol] >=1 or table [of tables] expected)",
    "invalid argument #1 (non-empty table expected)"                           ,
  }
  assertErrorMsgContains( msg[1], mth, 'same', errMat, 1, ''   )
  assertErrorMsgContains( msg[1], mth, 'same', errMat, 1, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'same', errMat, 1, nan  )
  assertErrorMsgContains( msg[2], mth, 'same', errMat, 1, {}   )
end

function TestMatrixInPlace:testRandom()
  local oldVal, val = {}, {}
  for _,m in ipairs(self.mat) do
    m:random()
    for i = 1,m:size() do
      val[i] = m:geti(i)
      assertTrue ( val[i] <  1    )
      assertTrue ( val[i] >= 0    )
      assertFalse( val[i] == oldVal[i] )
      oldVal[i] =  val[i]
    end
  end
end

function TestMatrixInPlaceII:testPerm()
  local oldV = {}
  local v = vector(25):fill(1..25)
  oldV[0] = 0
  for i=1,10 do
    v = v:perm()
    for is=1,v:size() do
      assertTrue( v:geti(is) <= 25 )
      assertTrue( v:geti(is) >= 1  )
    end
    assertFalse( v == oldV[i-1] )
    oldV[i] = v:copy()
  end
end

function TestMatrixErr:testFill()
  local msg = {
    "invalid argument #2 (scalar, callable or indexable expected)",
    "incompatible container size"                                 ,
    "invalid container (iterable expected)"                       ,
  }
  assertErrorMsgContains( msg[1], mth,'fill', errMat, nil  )
  assertErrorMsgContains( msg[1], mth,'fill', errMat, true )
  assertErrorMsgContains( msg[2], mth,'fill', errMat, {}   )
end
function TestMatrixInPlace:testFill()
  for _,m in ipairs(self.mat) do
    --scalar
    m:fill(nan)               for i=1,m:size() do assertNaN   ( m:geti(i)      ) end
    m:fill(inf)               for i=1,m:size() do assertInf   ( m:geti(i)      ) end
    m:fill(1  )               for i=1,m:size() do assertEquals( m:geti(i), 1   ) end
    m:fill(complex(1,1))      for i=1,m:size() do assertEquals( m:geti(i), 1   ) end
    --generator
    m:fill(1..#m)             for i=1,m:size() do assertEquals( m:geti(i), i   ) end
    m:fill\x x^2              for i=1,m:size() do assertEquals( m:geti(i), i^2 ) end
    --2D container
    m:fill( m:same() )        for i=1,m:size() do assertEquals( m:geti(i), 0   ) end
    --1D container
    t={} for i=1,m :size() do t[i]=i end
    m:fill(t)                 for i=1,m:size() do assertEquals( m:geti(i), i   ) end
    m:fill(vector(m :size())) for i=1,m:size() do assertEquals( m:geti(i), 0   ) end
  end
  local m, t = matrix(5), {}
  for i=1,5 do t[i] = {}      for j=1,5 do t[i][j]=(i-1)*5+j end end
  m :fill(t)                  for i=1,m:size() do assertEquals( m:geti(i), i ) end
  assertTrue( is_matrix ( matrix(5,5):fill(complex(1,1))) )  --matrix types change
end

function TestMatrixErr:testCopy()
  local msg = {
    "invalid argument #1 (matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth,'copy', errMat,  1 )
end

function TestMatrixInPlaceII:testCopy()
  for i,m in ipairs(G.mat) do
    local mcopy = matrix( m:sizes() )
    mcopy:copy(m)
    assertEquals( m, mcopy )
  end
end

function TestMatrixInPlaceII:testResize()
  local mres, minr, minc
  for i,m in ipairs(G.mat) do
    local nr,nc = m:sizes()
    for ic=nc+1,nc+3 do
    for ir=nr+1,nr+3 do
      mres       = m:resize(ir, ic)
      minr, minc = min(nr,ir), min(nc,ic)
      assertEquals( {mres:sizes()}, {ir, ic} )
      assertEquals( mres:getsub(1..minr   ,1..minc   ), m:getsub(1..minr,1..minc) )
      assertEquals( mres:getsub(minr+1..ir,1..minc   ), matrix(ir-minr, minc   ) )
      assertEquals( mres:getsub(1..minr   ,minc+1..ic), matrix(minr   , ic-minc) )
    end
    end
    for ic=1,nc do
    for ir=1,nr do
      mres       = m:resize(ir, ic)
      minr, minc = min(nr,ir), min(nc,ic)
      assertEquals( {mres:sizes()}, {ir, ic} )
      assertEquals( mres, m:getsub(1..minr,1..minc) )
    end
    end
  end
end

function TestMatrixInPlace:testZeros()
  for _,m in ipairs(self.mat) do
    local  m1 = m:zeros()
    for i=1,m:size() do assertEquals( m1:geti(i), 0 ) end
  end
end

function TestMatrixInPlace:testOnes()
  for _,m in ipairs(self.mat) do
    m:ones()
    for i=1,m:size() do assertEquals( m:geti(i), 1 ) end
  end
end

function TestMatrixInPlace:testEye()
  for i,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    m:eye()
    for i=1,nr do
    for j=1,nc do
      if i==j then assertEquals( m:get(i,j), 1 )
      else         assertEquals( m:get(i,j), 0 ) end
    end end
  end
end

function TestMatrixErr:testSymp()
  local msg = {
    "invalid argument #1 (2n matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth,'symp',  matrix(3)   )
  assertErrorMsgContains( msg[1], mth,'symp',  vector(2)   )
  assertErrorMsgContains( msg[1], mth,'symp',  matrix(4,3) )
end

function TestMatrixInPlaceII:testSymp()
  for i=2,6,2 do
    local m = matrix(i):symp()
    assertTrue( m:t() == -m )
    for ii=1,i do
    for jj=1,i do
      if     ii==2 and jj==1 then assertEquals( m:get(ii,jj),-1 )
      elseif ii==4 and jj==3 then assertEquals( m:get(ii,jj),-1 )
      elseif ii==6 and jj==5 then assertEquals( m:get(ii,jj),-1 )
      elseif ii==1 and jj==2 then assertEquals( m:get(ii,jj), 1 )
      elseif ii==3 and jj==4 then assertEquals( m:get(ii,jj), 1 )
      elseif ii==5 and jj==6 then assertEquals( m:get(ii,jj), 1 )
      else                        assertEquals( m:get(ii,jj), 0 ) end
    end end
  end
end

function TestMatrixErr:testCirc()
  local msg = {
    "invalid argument #2 (iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth,'circ', errMat, nil  )
  assertErrorMsgContains( msg[1], mth,'circ', errMat, 1    )
  assertErrorMsgContains( msg[1], mth,'circ', errMat, \x x )
end

function TestMatrixInPlaceII:testCirc()
  for i=1,5 do
    local m = matrix(i)
    local t = {} for j=1,i do t[j]=j end
    --'row'
    m:circ(t)
    for j=1,i   do assertEquals( m:get(j  ,j  ), 1   ) end
    for j=1,i-1 do assertEquals( m:get(j+1,j  ), 2   )
                   assertEquals( m:get(j  ,j+1), i   ) end
    for j=1,i-2 do assertEquals( m:get(j+2,j  ), 3   )
                   assertEquals( m:get(j  ,j+2), i-1 ) end
    for j=1,i-3 do assertEquals( m:get(j+3,j  ), 4   )
                   assertEquals( m:get(j  ,j+3), i-2 ) end
    m:fill(0):circ(vector(i):fill(1..i))
    for j=1,i   do assertEquals( m:get(j  ,j  ), 1   ) end
    for j=1,i-1 do assertEquals( m:get(j+1,j  ), 2   )
                   assertEquals( m:get(j  ,j+1), i   ) end
    for j=1,i-2 do assertEquals( m:get(j+2,j  ), 3   )
                   assertEquals( m:get(j  ,j+2), i-1 ) end
    for j=1,i-3 do assertEquals( m:get(j+3,j  ), 4   )
                   assertEquals( m:get(j  ,j+3), i-2 ) end
    --'col'
    m:fill(0):circ(matrix(1,i):fill(1..i))
    for j=1,i   do assertEquals( m:get(j  ,j  ), 1   ) end
    for j=1,i-1 do assertEquals( m:get(j+1,j  ), i   )
                   assertEquals( m:get(j  ,j+1), 2   ) end
    for j=1,i-2 do assertEquals( m:get(j+2,j  ), i-1 )
                   assertEquals( m:get(j  ,j+2), 3   ) end
    for j=1,i-3 do assertEquals( m:get(j+3,j  ), i-2 )
                   assertEquals( m:get(j  ,j+3), 4   ) end
  end
end

function TestMatrixInPlaceII:testShift()
  local m = vector(4):fill(1..4)
  assertEquals( m:shift( 0, 0), m )
  assertEquals( m:shift( 4, 0), m )
  assertEquals( m:shift( 0, 1), m )
  assertEquals( m:shift( 0, 2), m )
  local m = matrix(2):fill(1..4)
  assertEquals( m:shift( 0, 0), m )
  assertEquals( m:shift( 3, 0), m )
  assertEquals( m:shift(-3, 0), m )

  for nr=1,5 do
  for nc=1,5 do
    m = matrix(nr,nc):fill(1..nr*nc)
    for inc=0,nc do
    for inr=0,nr do
      m:shift(inr,inc)
      for jnr=1,nr do
      for jnc=1,nc do
        if     jnc<=inc and jnr<=inr then assertEquals( m:get(jnr,jnc), ref(jnr+(nr-inr),jnc+(nc-inc),nc) )
        elseif jnc<=inc and jnr> inr then assertEquals( m:get(jnr,jnc), ref(jnr-inr     ,jnc+(nc-inc),nc) )
        elseif jnc> inc and jnr<=inr then assertEquals( m:get(jnr,jnc), ref(jnr+(nr-inr),jnc- inc    ,nc) )
        else                              assertEquals( m:get(jnr,jnc), ref(jnr-inr     ,jnc- inc    ,nc) ) end
      end end
      m:shift(-inr,-inc)
    end end
  end end
end

function TestMatrixErr:testReshape()
  local msg = {
    "invalid matrix new sizes",
  }
  assertErrorMsgContains( msg[1], mth,'reshape', errMat, nil, 2 )
  assertErrorMsgContains( msg[1], mth,'reshape', errMat, 0  , 1 )
  assertErrorMsgContains( msg[1], mth,'reshape', errMat, 1  , 0 )
  assertErrorMsgContains( msg[1], mth,'reshape', errMat, 3  , 2 )
  assertErrorMsgContains( msg[1], mth,'reshape', errMat, 1  , 5 )
end

function TestMatrixInPlaceII:testReshape()
  local m
  m = matrix(2,2) assertEquals( {m:reshape() :sizes()}, {4,1} )
  m = matrix(2,2) assertEquals( {m:reshape(1):sizes()}, {1,1} )
  for nr=1,5 do
  for nc=1,5 do
    for i=1,nr do
    for j=1,nc do
      m = matrix(nr,nc):fill(1..nr*nc)
      m:reshape(i,j)
      assertEquals( {m:sizes()}, {i,j} )
      assertEquals( m, matrix(i,j):fill(1..i*j) )
    end end
  end end
end

-- foreach, filter, map, fold, scan -------------------------------------------o

function TestMatrixFun:setUp()
  self.mat = {}
  for nr=1,5 do
  for nc=1,5 do
    self.mat[ref(nr,nc,5)] = matrix(nr,nc):fill(1..nr*nc)
  end end
end

function TestMatrixErr:testForeach()
  local msg = {
    "invalid argument #2 (callable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'foreach', errMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'foreach', errMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'foreach', errMat, 1         )
  assertErrorMsgContains( msg[1], mth, 'foreach', errMat, 1..2      )
  assertErrorMsgContains( msg[1], mth, 'foreach', errMat, matrix(1) )
  assertErrorMsgContains( msg[1], mth, 'foreach', errMat, { }       )
end

function TestMatrixFun:testForeach()
  local t, nr, nc
  local f = \x,i,j => t[i][j] = x  end
  for _,m in ipairs(self.mat) do
    nr, nc = m:sizes()
    t = table.new(nr, nc)
    for i=0,nr-1 do local c = t[i+1] or table.new(nc,0); t[i+1] = c end
    m:foreach(f)
    for i=1,nr do for j=1,nc do assertEquals( t[i][j], ref(i,j,nc) ) end end
  end
end

function TestMatrixErr:testMap()
  local msg = {
    "invalid argument #2 (callable expected)"                 ,
    "invalid argument #2 (scalar function expected)"          ,
    "invalid argument #3 (iterable expected)"                 ,
    "attempt to perform arithmetic on local 'y' (a nil value)",
    "invalid range member '1'"                                ,
  }
  assertErrorMsgContains( msg[1], mth, 'map', errMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'map', errMat, 1..2      )
  assertErrorMsgContains( msg[1], mth, 'map', errMat, 1         )
  assertErrorMsgContains( msg[1], mth, 'map', errMat, matrix(1) )
  assertErrorMsgContains( msg[1], mth, 'map', errMat, {}        )
  assertErrorMsgContains( msg[2], mth, 'map', errMat, '!'       )
  assertErrorMsgContains( msg[4], mth, 'map', errMat, '+'       )
  assertErrorMsgContains( msg[3], mth, 'map', errMat, \x x+1, ''   )
  assertErrorMsgContains( msg[3], mth, 'map', errMat, \x x+1, 1    )
  assertErrorMsgContains( msg[5], mth, 'map', errMat, \x x+1, 1..2 )
end

function TestMatrixFun:testMap()
  local m1
  for i,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    m1 = m:map '~'        assertEquals( m1, matrix(nr,nc):fill(-1..-#m1..-1) )
    m1 = m:map \x x-x     assertEquals( m1, matrix(nr,nc) )
    --totable test
    m1 = m:map(\x x-x,{}) assertTrue  ( matrix(m1) == 0 )
    m1 = m:map('!'   ,{}) assertEquals( m1, rep(false, #m1) )
    --'in' place test
    m:map('~'   , 'in')   assertEquals( m, matrix(nr,nc):fill(-1..-nr*nc..-1) )
    m:map(\x x-x, 'in')   assertEquals( m, matrix(nr,nc) )
  end
end

function TestMatrixErr:testMap2()
  local m = matrix(1)
  local msg = {
    "invalid argument #2 (scalar or iterable expected)"       ,
    "invalid argument #3 (callable expected)"                 ,
    "invalid argument #3 (scalar function expected)"          ,
    "invalid argument #4 (iterable expected)"                 ,
    "invalid range member '1'"                                ,
    "attempt to perform arithmetic on local 'y' (a nil value)",
  }
  assertErrorMsgContains( msg[1], mth, 'map2', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'map2', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'map2', errMat, NaN  )
  assertErrorMsgContains( msg[1], mth, 'map2', errMat, \x x )
  assertErrorMsgContains( msg[2], mth, 'map2', errMat, m    , nil  )
  assertErrorMsgContains( msg[2], mth, 'map2', errMat, m    , ''   )
  assertErrorMsgContains( msg[2], mth, 'map2', errMat, m    , 1..2 )
  assertErrorMsgContains( msg[2], mth, 'map2', errMat, m    , 1    )
  assertErrorMsgContains( msg[3], mth, 'map2', errMat, m    , '!'  )
  assertErrorMsgContains( msg[4], mth, 'map2', errMat, m    , \x x, 1    )
  assertErrorMsgContains( msg[5], mth, 'map2', errMat, m    , \x x, 1..2 )
  assertErrorMsgContains( msg[6], mth, 'map2', errMat, m    , \x,y  x+y  )
end

function TestMatrixFun:testMap2()
  local mt
  for _,m1 in ipairs(self.mat) do
    local nr, nc = m1:sizes()
    mt = m1:same()
    mt = m1:map2(1 , '+'      )     assertEquals( mt, matrix(nr,nc):fill(2..nr*nc+1) )
    mt = m1:map2(1 , \x,y x-y )     assertEquals( mt, matrix(nr,nc):fill(0..nr*nc-1) )
    mt = m1:map2(m1, '~'      )     assertEquals( mt, matrix(nr,nc):fill(-1..-nr*nc..-1) )

    ir = { m1, 1..#m1, totable(1..#m1) }
    for d=1,#ir do
    mt = m1:map2(ir[d], '+'     )   assertEquals( mt, matrix(nr,nc):fill(2..2*nr*nc..2) )
    mt = m1:map2(ir[d], \x,y x-y)   assertEquals( mt, matrix(nr,nc) )
    --totable test
    mt = m1:map2(ir[d], '-'   , {}) assertTrue  ( matrix(mt) == 0 )
    mt = m1:map2(ir[d], \x x+x, {}) assertEquals( matrix(mt), matrix(nr*nc,1):fill(2..2*nr*nc..2) )
    mt = m1:map2(ir[d], '<'   , {}) assertEquals( mt, rep(false, #m1) )
    mt = m1:map2(m1   , '!'   , {}) assertEquals( mt, rep(false, #m1) )

    end
    --'in' place test
    for d=1,#ir do
      m1:map2(ir[d], '~'  , 'in')
      for i=1,#m1 do assertEquals( m1:geti(i), i*(-1)^d ) end
    end
      m1:map2(m1, \x,y x-y, 'in')   assertEquals( m1, matrix(nr,nc) )
  end
end

function TestMatrixErr:testMap3()
  local m = matrix(1)
  local msg = {
    "invalid argument #2 (scalar or iterable expected)"       ,
    "invalid argument #3 (scalar or iterable expected)"       ,
    "invalid argument #4 (callable expected)"                 ,
    "invalid argument #4 (scalar function expected)"          ,
    "invalid argument #5 (iterable expected)"                 ,
    "invalid range member '1'"                                ,
    "attempt to perform arithmetic on local 'y' (a nil value)",
    "attempt to perform arithmetic on local 'z' (a nil value)",
  }
  assertErrorMsgContains( msg[1], mth, 'map3', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'map3', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'map3', errMat, NaN  )
  assertErrorMsgContains( msg[1], mth, 'map3', errMat, \x x )
  assertErrorMsgContains( msg[2], mth, 'map3', errMat, errMat, nil  )
  assertErrorMsgContains( msg[2], mth, 'map3', errMat, errMat, ''   )
  assertErrorMsgContains( msg[2], mth, 'map3', errMat, errMat, NaN  )
  assertErrorMsgContains( msg[2], mth, 'map3', errMat, errMat, \x x )
  assertErrorMsgContains( msg[3], mth, 'map3', errMat, errMat, errMat, nil  )
  assertErrorMsgContains( msg[3], mth, 'map3', errMat, errMat, errMat, 1..2 )
  assertErrorMsgContains( msg[3], mth, 'map3', errMat, errMat, errMat, 1    )
  assertErrorMsgContains( msg[4], mth, 'map3', errMat, m     , m     , '!'  )
  assertErrorMsgContains( msg[5], mth, 'map3', errMat, errMat, errMat, \x x, 1    )
  assertErrorMsgContains( msg[6], mth, 'map3', errMat, errMat, errMat, \x x, 1..2 )
  assertErrorMsgContains( msg[7], mth, 'map3', errMat, m     , errMat, \x,y,z x+y+z )
  assertErrorMsgContains( msg[7], mth, 'map3', errMat, m     , m     , \x,y,z x+y+z )
  assertErrorMsgContains( msg[8], mth, 'map3', errMat, errMat, m     , \x,y,z x+y+z )
end

function TestMatrixFun:testMap3()
  local mt
  for _,m1 in ipairs(self.mat) do
    local nr, nc = m1:sizes()
    mt = m1:same()
    mt = m1:map3(m1, m1, '~'          ) assertEquals( mt, matrix(nr,nc):fill(-1..-nr*nc..-1) )
    mt = m1:map3(m1, m1, '+'          ) assertEquals( mt, matrix(nr,nc):fill(2..2*nr*nc..2)  )
    mt = m1:map3(m1, m1, \x,y,z x+y+z ) assertEquals( mt, matrix(nr,nc):fill(3..3*nr*nc..3)  )
    mt = m1:map3(m1, m1, '<'      , {}) assertEquals( mt, rep(false, #m1) )

    m2 = { m1, 1..#m1, totable(1..#m1) }
    m3 = { m1, 1..#m1, totable(1..#m1) }
    for i=1,#m2 do
    for j=1,#m3 do
      mt = m1:map3(m2[i],m3[j], \x,y,z x+y+z)     assertEquals( mt        , matrix(nr   ,nc):fill(3..3*nr*nc..3) )
      mt = m1:map3(m2[i],m3[j], \x,y,z x+y+z, {}) assertEquals( matrix(mt), matrix(nr*nc,1 ):fill(3..3*nr*nc..3) ) -- totable test
    end end
    --'in' place test
    m1:map3(m1, m1, '~'         , 'in') assertEquals( m1, matrix(nr,nc):fill(-1..  -nr*nc..-1) )
    m1:map3(m1, m1, \x,y,z x+y+z, 'in') assertEquals( m1, matrix(nr,nc):fill(-3..-3*nr*nc..-3) )
  end
end

function TestMatrixErr:testMapij()
  local msg = {
    "invalid argument #2 (callable expected)",
    "invalid argument #3 (iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'mapij', errMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'mapij', errMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'mapij', errMat, 1..2      )
  assertErrorMsgContains( msg[1], mth, 'mapij', errMat, 1         )
  assertErrorMsgContains( msg[1], mth, 'mapij', errMat, matrix(1) )
  assertErrorMsgContains( msg[1], mth, 'mapij', errMat, { }       )
  assertErrorMsgContains( msg[2], mth, 'mapij', errMat, \x x+1  , ''   )
  assertErrorMsgContains( msg[2], mth, 'mapij', errMat, \x x+1  , \x x )
end

function TestMatrixFun:testMapij()
  local m1
  for i,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    m1 = m:mapij '~'        assertEquals( m1, matrix(nr,nc):fill(-1..-nr*nc..-1) )
    m1 = m:mapij \x x-x     assertEquals( m1, matrix(nr,nc) )
    m1 = m:mapij \x,i,j i+j for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), i+j ) end end
    --totable test
    m1 = m:mapij('!'   ,{}) assertEquals( m1, rep(false, #m1) )
    m1 = m:mapij(\x x-x,{}) assertEquals( m1, rep(0    , #m1) )
    --'in' place test
    m:mapij('~'   , 'in')   assertEquals( m, matrix(nr,nc):fill(-1..-nr*nc..-1) )
    m:mapij(\x x-x, 'in')   assertEquals( m, matrix(nr,nc) )

    m1 = m :fill(1..nr*nc)
    m1 = m1:mapij( \x,i,j => if j>3 then x=3 end return x end, {} )
    for i=1,nr do
    for j=1,nc do
      if j > 3 then assertEquals( m1[ref(i,j,nc)], 3           )
               else assertEquals( m1[ref(i,j,nc)], ref(i,j,nc) ) end
    end end
  end
end

function TestMatrixErr:testMapat()
  local msg = {
    "invalid argument #2 (callable expected)"                 ,
    "invalid argument #3 (iterable expected)"                 ,
    "invalid argument #4 (iterable expected)"                 ,
    "invalid range member '1'"                                ,
    "attempt to perform arithmetic on local 'x' (a nil value)",
    "attempt to perform arithmetic on local 'y' (a nil value)",
  }
  assertErrorMsgContains( msg[1], mth, 'mapat', errMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'mapat', errMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'mapat', errMat, 1..2      )
  assertErrorMsgContains( msg[1], mth, 'mapat', errMat, 1         )
  assertErrorMsgContains( msg[1], mth, 'mapat', errMat, matrix(1) )
  assertErrorMsgContains( msg[1], mth, 'mapat', errMat, { }       )
  assertErrorMsgContains( msg[2], mth, 'mapat', errMat, \x x+1 , ''   )
  assertErrorMsgContains( msg[2], mth, 'mapat', errMat, \x x+1 , nil  )
  assertErrorMsgContains( msg[2], mth, 'mapat', errMat, \x x+1 , NaN  )
  assertErrorMsgContains( msg[2], mth, 'mapat', errMat, \x x+1 , \x x )
  assertErrorMsgContains( msg[3], mth, 'mapat', errMat, \x x+1 , 1    , ''   )
  assertErrorMsgContains( msg[3], mth, 'mapat', errMat, \x x+1 , 1    , \x x )
  assertErrorMsgContains( msg[4], mth, 'mapat', errMat, \x x+1 , 1    , 1..2 )
  assertErrorMsgContains( msg[5], mth, 'mapat', errMat, \x x+1 , 0    )
  assertErrorMsgContains( msg[5], mth, 'mapat', errMat, \x x+1 , 5    )
  assertErrorMsgContains( msg[6], mth, 'mapat', errMat, '+'    , 1    )
end

function TestMatrixFun:testMapat()
  local mt, mres
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    for li=1,nr do
      local vi = G.vi[li]:copy()
      for j=1,li do vi[j] = math.random(1,nc*nr) end
      vi:perm()
      mt = m:mapat('~',vi) assertEquals( mt:getv(vi), vector(#vi):fill(-vi) )
      mt = m:mapat('!',vi) assertEquals( mt:getv(vi), vector(#vi):fill( 0)  )
    end
  end
  m  = self.mat[5]
  mres = {-1,-2,-3, 4, 5}
  mt = m:mapat('~',vector{1,2,3})     assertEquals( mt, vector(mres):t() )
  mt = m:mapat('~',vector{1,2,3}, {}) assertAllEquals( mt, mres )
  mres = { 2, 3, 4, 4, 5}
  m:mapat(\x x+1,vector{1,2,3}, 'in') assertEquals( m, vector(mres):t() )
end

function TestMatrixErr:testFoldl()
  local msg = {
    "invalid argument #2 (callable expected)"                    ,
    "invalid argument #5 (iterable expected)"                    ,
    "invalid argument #4 (string 'vec', 'row' or 'col' expected)",
    "invalid range member '1'"                                   ,
    "attempt to perform arithmetic on local 'x' (a table value)" ,
  }
  m, cm = matrix(2), cmatrix(2)
  assertErrorMsgContains( msg[1], mth, 'foldl', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'foldl', errMat, NaN  )
  assertErrorMsgContains( msg[1], mth, 'foldl', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'foldl', errMat, {}   )
  assertErrorMsgContains( msg[1], mth, 'foldl', errMat, 1    )
  assertErrorMsgContains( msg[1], mth, 'foldl', errMat, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'foldl', errMat, m    )
  assertErrorMsgContains( msg[1], mth, 'foldl', errMat, cm   )
  assertErrorMsgContains( msg[3], mth, 'foldl', errMat, \x x, '')
  assertErrorMsgContains( msg[3], mth, 'foldl', errMat, \x x, 1 , {}   , {}   )
  assertErrorMsgContains( msg[3], mth, 'foldl', errMat, \x x, 1 , 1..2 , {}   )
  assertErrorMsgContains( msg[3], mth, 'foldl', errMat, \x x, 1 , ''   , {}   )
  assertErrorMsgContains( msg[2], mth, 'foldl', errMat, \x x, 1 , "vec", ''   )
  assertErrorMsgContains( msg[2], mth, 'foldl', errMat, \x x, 1 , "vec", 1    )
  assertErrorMsgContains( msg[2], mth, 'foldl', errMat, \x x, 1 , "vec", \x x )
  assertErrorMsgContains( msg[5], mth, 'foldl', errMat, '+' , {} )
end
--[[
parameters:
  f: callable, x0: initial value, d: ['vec', 'row', 'col'], r: iterable
  r:{}, cmatrix(2), matrix(2), 1..2

fold cases:
  1) x:fold( f )
  2) x:fold( f, nil, d )      and 2') x:fold( f, d )
  3) x:fold( f, nil, nil, r ) and 3') x:fold( f, r ) and  3") x:fold( f, nil, r)
  4) x:fold( f, nil, d, r )   and 4') x:fold( f, d, r) and  4") x:fold( f, d, nil, r )
  5) x:fold( f, x0 )
  6) x:fold( f, x0 , d )
  7) x:fold( f, x0, nil, r ) and 7') x:fold( f, x0, r )
  8) x:fold( f, x0 , d, r )
]]

local sum = \r =>local x = 0    for i=1,r:size() do x = x + r[i] end return x end
local sub = \r =>local x = r[1] for i=2,r:size() do x = x - r[i] end return x end

function TestMatrixFun:testFoldl()
  local m1, mt
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    assertEquals( m:foldl \x x, 1 )                                 -- 1)
    assertEquals( m:foldl('+' , 2  , nil, {}), sum(1..m:size())+2 ) -- 7)
    local mRes = {
      m:foldl '+'                 , -- 1)
      m:foldl('+'     , 'vec')    , -- 2)
      m:foldl('+', nil, 'vec')    , -- 2)
      m:foldl('+'     , 'vec', {}), -- 4)
      m:foldl('+' , 0)            , -- 5)
      m:foldl('+' , 0,  'vec')    , -- 6)
      m:foldl('+' , nil      , {}), -- 3)
      m:foldl('+' , nil, nil , {}), -- 3)
    }
    for j=1,#mRes do assertEquals( mRes[j], sum(1..m:size()) ) end

    local t ={}  for i=1,nc do t [i]=sum(ref(1,i,nc)..ref(nr,i,nc)..nc) end
    local tr={}  for i=1,nr do tr[i]=sum(ref(i,1,nc)..ref(i,nc,nc)..1 ) end
    m1 = m:foldl('+'   , 'col')    for i=1,nc do assertEquals( m1:geti(i), t [i] ) end -- 2)
    m1 = m:foldl('+'   , 'row')    for i=1,nr do assertEquals( m1:geti(i), tr[i] ) end -- 2)
    m1 = m:foldl('+', 0, 'col')    for i=1,nc do assertEquals( m1:geti(i), t [i] ) end -- 6)
    m1 = m:foldl('+', 0, 'row')    for i=1,nr do assertEquals( m1:geti(i), tr[i] ) end -- 6)
    m1 = m:foldl('+', 0, 'col',{}) for i=1,nc do assertEquals( m1[i]     , t [i] ) end -- 8)
    m1 = m:foldl('+', 0, 'row',{}) for i=1,nr do assertEquals( m1[i]     , tr[i] ) end -- 8)

  -- non-commutative operations
    if nr*nc%2 == 0 then assertEquals( m:foldl '~',-1 )
                    else assertEquals( m:foldl '~', 1 ) end
    assertEquals( m:foldl '-', sub(1..m:size()) )
    m1 = m:foldl('-', 'col') for i=1,nc do assertEquals( m1:geti(i), sub(ref(1,i,nc)..ref(nr,i,nc)..nc) ) end
    m1 = m:foldl('-', 'row') for j=1,nr do assertEquals( m1:geti(j), sub(ref(j,1,nc)..ref(j,nc,nc)..1 ) ) end
  end
  assertEquals( vector(4):fill(4..1..-1):foldl '^' , (4^3)^2 )
end

function TestMatrixErr:testFoldr()
  local msg = {
    "invalid argument #2 (callable expected)"                    ,
    "invalid argument #5 (iterable expected)"                    ,
    "invalid argument #4 (string 'vec', 'row' or 'col' expected)",
    "invalid range member '1'"                                   ,
  }
  m, cm = matrix(2), cmatrix(2)
  assertErrorMsgContains( msg[1], mth, 'foldr', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'foldr', errMat, NaN  )
  assertErrorMsgContains( msg[1], mth, 'foldr', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'foldr', errMat, {}   )
  assertErrorMsgContains( msg[1], mth, 'foldr', errMat, 1    )
  assertErrorMsgContains( msg[1], mth, 'foldr', errMat, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'foldr', errMat, m    )
  assertErrorMsgContains( msg[1], mth, 'foldr', errMat, cm   )
  assertErrorMsgContains( msg[3], mth, 'foldr', errMat, \x x, '')
  assertErrorMsgContains( msg[3], mth, 'foldr', errMat, \x x, 1 , {}   , {}   )
  assertErrorMsgContains( msg[3], mth, 'foldr', errMat, \x x, 1 , 1..2 , {}   )
  assertErrorMsgContains( msg[3], mth, 'foldr', errMat, \x x, 1 , ''   , {}   )
  assertErrorMsgContains( msg[2], mth, 'foldr', errMat, \x x, 1 , "vec", ''   )
  assertErrorMsgContains( msg[2], mth, 'foldr', errMat, \x x, 1 , "vec", 1    )
  assertErrorMsgContains( msg[2], mth, 'foldr', errMat, \x x, 1 , "vec", \x x )
end

function TestMatrixFun:testFoldr()
  local m1, v
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    assertEquals( m:foldr \x x, 1 )                                 -- 1)
    assertEquals( m:foldr('+' , 2  , nil, {}), sum(1..m:size())+2 ) -- 7)
    local mRes = {
      m:foldr '+'                 , -- 1)
      m:foldr('+'     , 'vec')    , -- 2)
      m:foldr('+', nil, 'vec')    , -- 2)
      m:foldr('+'     , 'vec', {}), -- 4)
      m:foldr('+' , 0 )           , -- 5)
      m:foldr('+' , 0 , 'vec')    , -- 6)
      m:foldr('+' , nil      , {}), -- 3)
      m:foldr('+' , nil, nil , {}), -- 3)
    }
    for j=1,#mRes do assertEquals( mRes[j], sum(1..m:size()) ) end

    local t ={} for i=1,nc do t [i]=sum(ref(1,i,nc)..ref(nr,i,nc)..nc) end
    local tr={} for i=1,nr do tr[i]=sum(ref(i,1,nc)..ref(i,nc,nc)..1 ) end

    m1 = m:foldr('+'   , 'col')    for i=1,nc do assertEquals( m1:geti(i), t [i] ) end -- 2)
    m1 = m:foldr('+'   , 'row')    for i=1,nr do assertEquals( m1:geti(i), tr[i] ) end -- 2)
    m1 = m:foldr('+', 0, 'col')    for i=1,nc do assertEquals( m1:geti(i), t [i] ) end -- 6)
    m1 = m:foldr('+', 0, 'row')    for i=1,nr do assertEquals( m1:geti(i), tr[i] ) end -- 6)
    m1 = m:foldr('+', 0, 'col',{}) for i=1,nc do assertEquals( m1[i]     , t [i] ) end -- 8)
    m1 = m:foldr('+', 0, 'row',{}) for i=1,nr do assertEquals( m1[i]     , tr[i] ) end -- 8)

  -- non-commutative operations
    if nr*nc == 1 then assertEquals( m:foldr '~', 1 )
                  else assertEquals( m:foldr '~',-1 ) end

    v =  vector( m:size() ):fill(1..m:size()):map(\x => if x%2==0 then x=-x end return x end)
    assertEquals( m:foldr '-', v:foldr('+') )
    m1 = m:foldr('-', 'col')
    for i=1,nc do
      assertEquals( m1:geti(i), sum(ref(1,i,nc)..ref(nr,i,nc)..2*nc) - sum(ref(2,i,nc)..ref(nr,i,nc)..2*nc) )
    end
    m1 = m:foldr('-', 'row')
    for j=1,nr do
      assertEquals( m1:geti(j), sum(ref(j,1,nc)..ref(j,nc,nc)..2 ) - sum(ref(j,2,nc)..ref(j,nc,nc)..2 ) )
    end
  end
  assertEquals( vector(4):fill(4..1..-1):foldr '^', 4^(3^2) )
end

--[[ scan cases:
1) x:scan( f )
2) x:scan( f, nil, d )      and 2') x:scan( f, d )
3) x:scan( f, nil, nil, r ) and 3') x:scan( f, r ) and  3") x:scan( f, nil, r)
4) x:scan( f, nil, d, r )   and 4') x:scan( f, d, r) and  4")x:scan( f, d, nil, r )
5) x:scan( f, x0 )
6) x:scan( f, x0 , d )
7) x:scan( f, x0 , nil, r ) and 7') x:scan( f, x0, r )
8) x:scan( f, x0 , d, r )              ]]

function TestMatrixErr:testScanl()
  local msg = {
    "invalid argument #2 (callable expected)"                    ,
    "invalid argument #5 (iterable expected)"                    ,
    "invalid argument #4 (string 'vec', 'row' or 'col' expected)",
    "invalid range member '1'"                                   ,
  }
  m, cm = matrix(2), cmatrix(2)
  assertErrorMsgContains( msg[1], mth, 'scanl', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'scanl', errMat, NaN  )
  assertErrorMsgContains( msg[1], mth, 'scanl', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'scanl', errMat, {}   )
  assertErrorMsgContains( msg[1], mth, 'scanl', errMat, 1    )
  assertErrorMsgContains( msg[1], mth, 'scanl', errMat, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'scanl', errMat, m    )
  assertErrorMsgContains( msg[1], mth, 'scanl', errMat, cm   )
  assertErrorMsgContains( msg[3], mth, 'scanl', errMat, \x x, '')
  assertErrorMsgContains( msg[3], mth, 'scanl', errMat, \x x, 1 , {}   , {}   )
  assertErrorMsgContains( msg[3], mth, 'scanl', errMat, \x x, 1 , 1..2 , {}   )
  assertErrorMsgContains( msg[3], mth, 'scanl', errMat, \x x, 1 , ''   , {}   )
  assertErrorMsgContains( msg[2], mth, 'scanl', errMat, \x x, 1 , "vec", ''   )
  assertErrorMsgContains( msg[2], mth, 'scanl', errMat, \x x, 1 , "vec", 1    )
  assertErrorMsgContains( msg[2], mth, 'scanl', errMat, \x x, 1 , "vec", \x x )
end

function TestMatrixFun:testScanl()
  local m1
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    m1 = m:scanl \x x                 for i=1,#m1 do assertEquals( m1:geti(i), 1           ) end -- 1)
    m1 = m:scanl '+'                  for i=1,#m1 do assertEquals( m1:geti(i), sum(1..i)   ) end -- 1)
    m1 = m:scanl('+','vec')           for i=1,#m1 do assertEquals( m1:geti(i), sum(1..i)   ) end -- 2)
    m1 = m:scanl('+', 0   )           for i=1,#m1 do assertEquals( m1:geti(i), sum(1..i)   ) end -- 5)
    m1 = m:scanl('+', 0   ,'vec')     for i=1,#m1 do assertEquals( m1:geti(i), sum(1..i)   ) end -- 6)
    m1 = m:scanl('+','vec', {}  )     for i=1,#m1 do assertEquals( m1[i]     , sum(1..i)   ) end -- 4)
    m1 = m:scanl('+', 0   ,'vec', {}) for i=1,#m1 do assertEquals( m1[i]     , sum(1..i)   ) end -- 8)
    m1 = m:scanl('+', nil       , {}) for i=1,#m1 do assertEquals( m1[i]     , sum(1..i)   ) end -- 3)
    m1 = m:scanl('+', nil , nil , {}) for i=1,#m1 do assertEquals( m1[i]     , sum(1..i)   ) end -- 3)
    m1 = m:scanl('+',  2  , nil , {}) for i=1,#m1 do assertEquals( m1[i]     , sum(1..i)+2 ) end -- 7)
    m1 = m:scanl('+', 'col') -- 2)
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(1,j,nc)..ref(i,j,nc)..nc) ) end end
    m1 = m:scanl('+', 'row') -- 2)
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(i,1,nc)..ref(i,j,nc)..1 ) ) end end

  -- non-commutative operations
    m1 = m:scanl '-'             for i=1,#m1 do assertEquals( m1:geti(i), sub(1..i) ) end
    m1 = m:scanl('-', nil  , {}) for i=1,#m1 do assertEquals( m1[i]     , sub(1..i) ) end
    m1 = m:scanl('-', 'row')
    for i=1,nr do for j=1,nc do
      assertEquals( m1:get(i,j), sub(ref(i,1,nc)..ref(i,j,nc)..1 ) )
    end end
  end
  assertEquals( vector(4):fill(4..1..-1):scanl '^', vector{4, 4^3, (4^3)^2, ((4^3)^2)^1} )
end

function TestMatrixErr:testScanr()
  local msg = {
    "invalid argument #2 (callable expected)"                    ,
    "invalid argument #5 (iterable expected)"                    ,
    "invalid argument #4 (string 'vec', 'row' or 'col' expected)",
    "invalid range member '1'"                                   ,
  }
  m, cm = matrix(2), cmatrix(2)
  assertErrorMsgContains( msg[1], mth, 'scanr', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'scanr', errMat, NaN  )
  assertErrorMsgContains( msg[1], mth, 'scanr', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'scanr', errMat, {}   )
  assertErrorMsgContains( msg[1], mth, 'scanr', errMat, 1    )
  assertErrorMsgContains( msg[1], mth, 'scanr', errMat, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'scanr', errMat, m    )
  assertErrorMsgContains( msg[1], mth, 'scanr', errMat, cm   )
  assertErrorMsgContains( msg[3], mth, 'scanr', errMat, \x x, '')
  assertErrorMsgContains( msg[3], mth, 'scanr', errMat, \x x, 1 , {}   , {}   )
  assertErrorMsgContains( msg[3], mth, 'scanr', errMat, \x x, 1 , 1..2 , {}   )
  assertErrorMsgContains( msg[3], mth, 'scanr', errMat, \x x, 1 , ''   , {}   )
  assertErrorMsgContains( msg[2], mth, 'scanr', errMat, \x x, 1 , "vec", ''   )
  assertErrorMsgContains( msg[2], mth, 'scanr', errMat, \x x, 1 , "vec", 1    )
  assertErrorMsgContains( msg[2], mth, 'scanr', errMat, \x x, 1 , "vec", \x x )
end

function TestMatrixFun:testScanr()
  local function subR(r)
    local x = table.new(r:size(),1)
    x[r:size()] = r[r:size()]
    for i=r:size()-1,1,-1 do
      if i%2 == 0 then x[i]= -(x[i+1] - r[i])
                  else x[i]= - x[i+1] + r[i]  end
    end
    return x
  end

  local m1
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    m1 = m:scanr \x x                 for i=1  ,#m1  do assertEquals( m1:geti(i), i               ) end -- 1)
    m1 = m:scanr '+'                  for i=#m1,1,-1 do assertEquals( m1:geti(i), sum(i..nr*nc)   ) end -- 1)
    m1 = m:scanr('+','vec')           for i=#m1,1,-1 do assertEquals( m1:geti(i), sum(i..nr*nc)   ) end -- 2)
    m1 = m:scanr('+', 0   )           for i=#m1,1,-1 do assertEquals( m1:geti(i), sum(i..nr*nc)   ) end -- 5)
    m1 = m:scanr('+', 0   ,'vec')     for i=#m1,1,-1 do assertEquals( m1:geti(i), sum(i..nr*nc)   ) end -- 6)
    m1 = m:scanr('+','vec', {})       for i=#m1,1,-1 do assertEquals( m1[i]     , sum(i..nr*nc)   ) end -- 4)
    m1 = m:scanr('+', 0   ,'vec', {}) for i=#m1,1,-1 do assertEquals( m1[i]     , sum(i..nr*nc)   ) end -- 8)
    m1 = m:scanr('+', nil       , {}) for i=#m1,1,-1 do assertEquals( m1[i]     , sum(i..nr*nc)   ) end -- 3)
    m1 = m:scanr('+', nil , nil , {}) for i=#m1,1,-1 do assertEquals( m1[i]     , sum(i..nr*nc)   ) end -- 3)
    m1 = m:scanr('+',  2  , nil , {}) for i=#m1,1,-1 do assertEquals( m1[i]     , sum(i..nr*nc)+2 ) end -- 7)
    m1 = m:scanr('+', 'col')
    for i=nr,1,-1 do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(nr,j,nc)..ref(i,j,nc)..-nc) ) end end
    m1 = m:scanr('+', 'row')
    for j=nc,1,-1 do for i=1,nr do assertEquals( m1:get(i,j), sum(ref(i,nc,nc)..ref(i,j,nc)..-1 ) ) end end

    -- non-commutative operations
    local refT = subR(1..nr*nc)
    m1 = m:scanr '-'           for i=#m1,1,-1 do assertEquals( m1:geti(i), refT[i] ) end
    m1 = m:scanr('-', nil, {}) for i=#m1,1,-1 do assertEquals( m1[i]     , refT[i] ) end

    m1 = m:scanr('-', 'col')
    for i=nr,1,-1 do
    for j=1 ,nc   do
      assertEquals( m1:get(i,j),  sum(ref(i,j,nc)..ref(nr,j,nc)..2*nc ) - sum(ref(i+1,j,nc)..ref(nr,j,nc)..2*nc) )
    end end

    m1 = m:scanr('-', 'row')
    for i=1 ,nr   do
    for j=nc,1,-1 do
      assertEquals( m1:get(i,j), sum(ref(i,j,nc)..ref(i,nc,nc)..2) - sum(ref(i,j+1,nc)..ref(i,nc,nc)..2 ) )
    end end
  end
  assertEquals( vector(4):fill(4..1..-1):scanr '^', vector{ 4^3^2^1, 3^2^1, 2^1, 1 } )
end

function TestMatrixErr:testFilter()
  local msg = {
    "invalid argument #2 (callable expected)",
    "invalid argument #3 (iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'filter', errMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'filter', errMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'filter', errMat, 1..2      )
  assertErrorMsgContains( msg[1], mth, 'filter', errMat, 1         )
  assertErrorMsgContains( msg[1], mth, 'filter', errMat, matrix(1) )
  assertErrorMsgContains( msg[1], mth, 'filter', errMat, { }       )
  assertErrorMsgContains( msg[2], mth, 'filter', errMat, \x x     , ''   )
  assertErrorMsgContains( msg[2], mth, 'filter', errMat, \x x     , 1    )
  assertErrorMsgContains( msg[2], mth, 'filter', errMat, \x x     , \x x )
end

function TestMatrixFun:testFilter()
 for _,m in ipairs(self.mat) do
    local m1
    m1 = m:filter(\x x==1, vector(25)) assertEquals( m1, vector(1):seti(1,1) )
    m1 = m:filter(\x x==1    )         assertEquals( m1, matrix(m1:sizes()):fill(1) )
    m1 = m:filter(\x x>1 , {})         assertEquals( m1, totable(2..#m1+1) )
    m1 = m:filter(\x x==1, {})         assertEquals( m1, rep(1,#m1) )
    m1 = m:filter(\x x<5)
    local nr, nc = m1:sizes()
    assertEquals( m1, matrix(nr,nc):fill(1..ref(nr,nc,nc)) )
  end
end

function TestMatrixErr:testFilter_out()
  local msg = {
    "invalid argument #2 (callable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'filter_out', errMat, nil       )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errMat, ''        )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errMat, 1..2      )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errMat, 1         )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errMat, matrix(1) )
  assertErrorMsgContains( msg[1], mth, 'filter_out', errMat, {}        )
end

function TestMatrixFun:testFilter_out()
  for _,m in ipairs(self.mat) do
    local m1
    m1 = m:filter(\x x==1, vector(25)) assertEquals( m1, vector(1):seti(1,1) )
    m1 = m:filter_out(\x x~=1    )     assertEquals( m1, matrix(m1:sizes()):fill(1) )
    m1 = m:filter_out(\x x<=1, {})     assertEquals( m1, totable(2..#m1+1) )
    m1 = m:filter_out(\x x~=1, {})     assertEquals( m1, rep(1,#m1) )
    m1 = m:filter_out(\x x>=5)
    local nr, nc = m1:sizes()
    assertEquals( m1, matrix(nr,nc):fill(1..ref(nr,nc,nc)) )
  end
end

-- special maps ---------------------------------------------------------------o

function TestMatrixSMapsI:SetUp ()
  self.empty = {}
  for nr=1,3 do
  for nc=1,3 do
    self.empty[ref(nr,nc,3)] = matrix(nr,nc)
  end end
end

function TestMatrixSMapsII:SetUp ()
  self.mat = {}
  for nr=1,3 do
  for nc=1,3 do
    local r = 1..nr*nc
    self.mat[ref(nr,nc,3)] = matrix(nr,nc):fill(r)
  end end
end

function TestMatrixSMapsI:testCeil ()
  for _,m in ipairs(self.empty) do
    local r  = nrange(0.01, 1, m:size())
    m:fill(r):ceil('in')
    assertEquals( m, matrix(m:sizes()):fill(1) )
  end
end

function TestMatrixSMapsI:testFloor()
  for _,m in ipairs(self.empty) do
    local r  = nrange(0, 1-0.01, m:size())
    m:fill(r):floor('in')
    assertEquals( m, matrix(m:sizes()) )
  end
end

function TestMatrixSMapsI:testFrac ()
  for _,m in ipairs(self.empty) do
    local r  = range(0.1,(m:size())/10,0.1)
    m:fill(r):frac('in')
    for i=1,#m do
      if     r[i] < 1 then assertAlmostEquals( m:geti(i) -i/10  , 0, eps )
      elseif r[i] < 2 then assertEquals      ( m:geti(i), i/10-1 )
                      else assertEquals      ( m:geti(i), i/10-2 )         end
    end
  end
end

function TestMatrixSMapsI:testTrunc()
  for _,m in ipairs(self.empty) do
    local r  = nrange(0, 3-0.01, m:size())
    m:fill(r):trunc('in')
    for i=1,#m do
      if     r[i] < 1 then assertEquals( m:geti(i), 0 )
      elseif r[i] < 2 then assertEquals( m:geti(i), 1 )
                      else assertEquals( m:geti(i), 2 ) end
    end
  end
end

function TestMatrixSMapsI:testRound()
  for _,m in ipairs(self.empty) do
    local r = nrange(0, 1, m:size())
    m:fill(r):round('in')
    for i=1,#m do
    if r[i] < 0.5 then assertEquals( m:geti(i), 0 )
                  else assertEquals( m:geti(i), 1 ) end
    end
  end
end

function TestMatrixSMapsI:testAbs()
  for _,m in ipairs(self.empty) do
    local r = nrange(-3, 3, m:size())
    m:fill(r):abs('in')
    m = m:map(\x x>=0, {})
    assertEquals( m, rep(true, #m) )
  end
end

function TestMatrixSMapsII:testSqrt()
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    m = m:map(\x x*x)
    m:sqrt('in')
    assertEquals( m, matrix(nr,nc):fill(1..nr*nc) )
  end
end

function TestMatrixSMapsII:testExp()
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    m:exp('in')
    m = m:map(log)
    assertEquals( m, matrix(nr,nc):fill(1..nr*nc) )
  end
end

function TestMatrixSMapsII:testLog()
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    local r = 1..nr*nc
    m:log('in')
    m = m:map(\x exp(x) )
    assertTrue( m:eq(matrix(nr,nc):fill(r), 8*eps) )
  end
end

function TestMatrixSMapsII:testLog10()
  for _,m in ipairs(self.mat) do
    local nr, nc = m:sizes()
    local mres = m:copy():map(\x log(x)/log(10) )
    m:log10('in')
    assertTrue( m:eq(mres, eps) )
  end
end

function TestMatrixSMapsI:testSin()
  for _,m in ipairs(self.empty) do
    local r, m1 = nrange(1, pi/2, m:size())
    m  = m:fill(r)
    m1 = m:copy()
    assertEquals( m:sin(), m1:map(\x -sin(-x)) )
  end
end

function TestMatrixSMapsI:testCos()
  for _,m in ipairs(self.empty) do
    local r, m1 = nrange(1, pi/2, m:size())
    m  = m:fill(r)
    m1 = m:copy()
    assertEquals( m:cos(),   m1:map(\x cos(-x    ))       )
    assertTrue  ( m:cos():eq(m1:map(\x sin(pi/2-x)), eps) )
  end
end

function TestMatrixSMapsI:testTan()
  for _,m in ipairs(self.empty) do
    local r, m1 = nrange(1,pi/2,m:size())
    m  = m:fill(r)
    m1 = m:copy()
    assertTrue( m:tan():eq(m1:map(\x sin(x)/cos(x)), 32*eps) )
  end
end

function TestMatrixSMapsI:testSinh()
  for _,m in ipairs(self.empty) do
    local r, m1 = nrange(1,pi/2,m:size())
    m  = m:fill(r)
    m1 = m:copy()
    assertTrue( m:sinh():eq(m1:map(\x 2*sinh(x/2)*cosh(x/2)), 2*eps) )
  end
end

function TestMatrixSMapsI:testCosh()
  for _,m in ipairs(self.empty) do
    local r, m1 = nrange(1,pi/2,m:size())
    m  = m:fill(r)
    m1 = m:copy()
    assertTrue( m:cosh():eq(m1:map(\x 2*sinh(x/2)^2 + 1), 2*eps) )
  end
end

function TestMatrixSMapsI:testTanh()
  for _,m in ipairs(self.empty) do
    local r, m1 = nrange(1,pi/2,m:size())
    m  = m:fill(r)
    m1 = m:copy()
    assertTrue( m:tanh():eq(m1:map(\x sinh(x)/cosh(x)), eps) )
  end
end

function TestMatrixSMapsI:testAsin()
  for _,m in ipairs(self.empty) do
    local r = nrange(1,pi/2,m:size())
    m = m:fill(r):sin():asin()
    assertTrue( m:eq(m:same():fill(r), 2*eps) )
  end
end

function TestMatrixSMapsI:testAcos()
  for _,m in ipairs(self.empty) do
    local r = nrange(1,pi/2,m:size())
    m = m:fill(r):cos():acos()
    assertTrue( m:eq(m:same():fill(r), eps) )
  end
end

function TestMatrixSMapsI:testAtan()
  for _,m in ipairs(self.empty) do
    local r = nrange(1,pi/2,m:size())
    m = m:fill(r):tan():atan()
    assertTrue( m:eq(m:same():fill(r), eps) )
  end
end

function TestMatrixSMapsI:testAsinh()
  for _,m in ipairs(self.empty) do
    local r = nrange(1,pi/2,m:size())
    m = m:fill(r):asinh():sinh()
    assertTrue( m:eq(m:same():fill(r), eps) )
  end
end

function TestMatrixSMapsI:testAcosh()
  for _,m in ipairs(self.empty) do
    local r = nrange(1,pi/2,m:size())
    m = m:fill(r):acosh():cosh()
    assertTrue( m:eq(m:same():fill(r), eps) )
  end
end

function TestMatrixSMapsI:testAtanh()
  for _,m in ipairs(self.empty) do
    local r = nrange(1,pi/2,m:size())
    m = m:fill(r):tanh():atanh()
    assertTrue( m:eq(m:same():fill(r), 2*eps) )
  end
end

--function TestMatrixSMaps:testErf()    end
--function TestMatrixSMaps:testTgamma() end
--function TestMatrixSMaps:testLgamma() end

function TestMatrixSMapsII:testCarg()
  for _,m in ipairs(self.mat) do
    m:carg('in')
    assertEquals( m, matrix(m:sizes()) )
  end
end

function TestMatrixSMapsII:testReal()
  for _,m in ipairs(self.mat) do
    local nr,nc = m:sizes()
    m:real('in')
    assertEquals( m, matrix(nr,nc):fill(1..nr*nc) )
  end
end

function TestMatrixSMapsII:testImag()
  for i,m in ipairs(self.mat) do
    m:imag('in')
    assertEquals( m, matrix(m:sizes()) )
  end
end

function TestMatrixSMapsII:testConj()
  for _,m in ipairs(self.mat) do
    local nr,nc = m:sizes()
    m:conj('in')
    assertEquals( m, matrix(nr,nc):fill(1..nr*nc) )
  end
end

function TestMatrixSMapsII:testProj() -- complex values, cmatrix
  for _,m in ipairs(self.mat) do
    local nr,nc = m:sizes()
    m = m:proj()
    assertEquals( m, cmatrix(nr,nc):fill(1..nr*nc) )
  end
  for _,m in ipairs(self.mat) do
    local nr,nc = m:sizes()
    m:proj('in')
    assertEquals( m, matrix(nr,nc):fill(1..nr*nc) )
  end
end

function TestMatrixSMapsII:testRect()
  for _,m in ipairs(self.mat) do
    local nr,nc = m:sizes()
    m:rect('in')
    assertEquals( m, matrix(nr,nc):fill(1..nr*nc) )
  end
end

function TestMatrixSMapsII:testPolar() -- complex values, cmatrix
  for _,m in ipairs(self.mat) do
    local nr,nc = m:sizes()
    m = m:polar()
    assertEquals( m, cmatrix(nr,nc):fill(1..nr*nc) )
  end
  for _,m in ipairs(self.mat) do
    local nr,nc = m:sizes()
    m:polar('in')
    assertEquals( m, matrix(nr,nc):fill(1..nr*nc) )
  end
end

-- special folds --------------------------------------------------------------o

function TestMatrixSFolds:testMin()
  for _,m in ipairs(G.mat) do
    local nr, nc, m1 = m:sizes()
    assertEquals( m:min(), 1 )
    m1 = m:min("col") assertEquals( m1, matrix(1 ,nc):fill(1..nc) )
    m1 = m:min("row") assertEquals( m1, matrix(nr,1 ):fill(1..ref(nr,1,nc)..nc) )
  end
end

function TestMatrixSFolds:testMax()
  for _,m in ipairs(G.mat) do
    local nr, nc, m1 = m:sizes()
    assertEquals( m:max(), m:size() )
    m1 = m:max("col") assertEquals( m1, matrix(1 ,nc):fill(ref(nr,1,nc)..ref(nr,nc,nc)..1 ) )
    m1 = m:max("row") assertEquals( m1, matrix(nr,1 ):fill(ref(1,nc,nc)..ref(nr,nc,nc)..nc) )
  end
end

function TestMatrixSFolds:testSum()
  for _,m in ipairs(G.mat) do
    local nr, nc, m1 = m:sizes()
    assertEquals( m:sum(), sum(1..m:size()) )
    m1 = m:sum('col') for i=1,nc do  assertEquals( m1:geti(i), sum(ref(1,i,nc)..ref(nr,i,nc)..nc) ) end
    m1 = m:sum('row') for i=1,nr do  assertEquals( m1:geti(i), sum(ref(i,1,nc)..ref(i,nc,nc)..1 ) ) end
  end
end

function TestMatrixSFolds:testSumabs()
  local m1, mres
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:copy():map(\x -x)
    assertEquals( m1:sumabs(), sum(1..m:size()) )
    mres = m:sumabs('col') for i=1,nc do assertEquals( mres:geti(i), sum(ref(1,i,nc)..ref(nr,i,nc)..nc) ) end
    mres = m:sumabs('row') for i=1,nr do assertEquals( mres:geti(i), sum(ref(i,1,nc)..ref(i,nc,nc)..1 ) ) end
  end
end

function TestMatrixSFolds:testSumsqr()
  local sumsqr = \r =>local x = 0 for i=1,r:size() do x = x + r[i]^2 end return x end
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    assertEquals( m:sumsqr(), sumsqr(1..m:size()) )
    m1 = m:sumsqr('col') for i=1,nc do assertEquals( m1:geti(i), sumsqr(ref(1,i,nc)..ref(nr,i,nc)..nc) ) end
    m1 = m:sumsqr('row') for i=1,nr do assertEquals( m1:geti(i), sumsqr(ref(i,1,nc)..ref(i,nc,nc)..1 ) ) end
  end
end

function TestMatrixSFolds:testProduct()
  local prod = \r =>local x = 1 for i=1,r:size() do x = x * r[i] end return x end
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    assertEquals( m:product(), prod(1..m:size()) )
    m1 = m:product('col') for i=1,nc do assertEquals( m1:geti(i), prod(ref(1,i,nc)..ref(nr,i,nc)..nc) ) end
    m1 = m:product('row') for i=1,nr do assertEquals( m1:geti(i), prod(ref(i,1,nc)..ref(i,nc,nc)..1 ) ) end
  end
end

function TestMatrixErr:testAll()
  local msg = {
    "invalid argument #2 (callable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'all', errMat, nil    )
  assertErrorMsgContains( msg[1], mth, 'all', errMat, ''     )
  assertErrorMsgContains( msg[1], mth, 'all', errMat, 1..2   )
  assertErrorMsgContains( msg[1], mth, 'all', errMat, 1      )
  assertErrorMsgContains( msg[1], mth, 'all', errMat, errMat )
  assertErrorMsgContains( msg[1], mth, 'all', errMat, { }    )
end

function TestMatrixSFolds:testAll()
  for _,m in ipairs(G.mat) do
    local nr, nc, mref = m:sizes()
    assertFalse ( m:all \x x> m:size()   )
    assertTrue  ( m:all \x x< m:size()+1 )

    mref = matrix(1,nc)
    if     m:size() <  16 then mref:setrow(1,1)
    elseif m:size() == 16 then mref:setrow(1,1):seti(nc, 0) end
    assertEquals( m:all( \x x<16, 'col'), mref )

    mref = matrix(nr,1):setcol(1,1)
    if m:size() >= 16 then for i=4,nr do mref:seti(i,0) end end
    assertEquals( m:all( \x x<16, 'row'), mref )
 end
end

function TestMatrixErr:testAny()
  local msg = {
    "invalid argument #2 (callable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'any', errMat, nil    )
  assertErrorMsgContains( msg[1], mth, 'any', errMat, ''     )
  assertErrorMsgContains( msg[1], mth, 'any', errMat, 1..2   )
  assertErrorMsgContains( msg[1], mth, 'any', errMat, 1      )
  assertErrorMsgContains( msg[1], mth, 'any', errMat, errMat )
  assertErrorMsgContains( msg[1], mth, 'any', errMat, { }    )
end

function TestMatrixSFolds:testAny()
  for _,m in ipairs(G.mat) do
    local nr, nc, mref = m:sizes()
    assertFalse ( m:any \x x> m:size()   )
    assertTrue  ( m:any \x x< m:size()+1 )

    mref = matrix(1,nc)
    if nr == 4 and nc == 5 then for i=2,nc do mref:seti  (i,1) end
    elseif m:size() > 16   then               mref:setrow(1,1) end
    assertEquals( m:any( \x x>16, 'col'), mref )


    mref = matrix(nr,1)
    if     m:size() == 20 then               mref:seti(nr,1)
    elseif m:size() >  16 then for i=4,nr do mref:seti(i ,1) end end
    assertEquals( m:any( \x x>16, 'row'), mref )
  end
end

-- special scans --------------------------------------------------------------o

-- left accumulation
function TestMatrixSScans:testAccmin()
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    local mref   = matrix(nr,nc)
    assertEquals( m:accmin()     , m:same():fill(1) )
    for i=1,nr do mref:setrow(i, 1..nc      ) end
    assertEquals( m:accmin("col"), mref )
    for i=1,nr do mref:setrow(i, ref(i,1,nc)) end
    assertEquals( m:accmin("row"), mref )
  end
end

function TestMatrixSScans:testAccmax()
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    local mref   = matrix(nr,nc)
    assertEquals( m:accmax()     , m:same():fill(1..nr*nc) )
    m1 = m:accmax("col") for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), ref(i,j,nc) ) end end
    m1 = m:accmax("row") for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), ref(i,j,nc) ) end end
  end
end

function TestMatrixSScans:testAccsum()
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:accsum() for i=1,m:size() do assertEquals( m1:geti(i), sum(1..i) ) end
    m1 = m:accsum("col")
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(1,j,nc)..ref(i,j,nc)..nc) ) end end
    m1 = m:accsum("row")
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(i,1,nc)..ref(i,j,nc)..1 ) ) end end
  end
end

function TestMatrixSScans:testAccsumabs()
for _,mg in ipairs(G.mat) do
    local nr, nc = mg:sizes()
    m = matrix(nr,nc)
    m = mg:copy():map(\x -x)
    m1 = m:accsumabs() for i=1,m:size() do assertEquals( m1:geti(i), sum(1..i) ) end
    m1 = m:accsumabs("col")
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(1,j,nc)..ref(i,j,nc)..nc) ) end end
    m1 = m:accsumabs("row")
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(i,1,nc)..ref(i,j,nc)..1 ) ) end end
  end
end

function TestMatrixSScans:testAccsumsqr()
  local sumsqr = \r =>local x = 0 for i=1,r:size() do x = x + r[i]^2 end return x end
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:accsumsqr() for i=1,m:size() do assertEquals( m1:geti(i), sumsqr(1..i) ) end
    m1 = m:accsumsqr("col")
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), sumsqr(ref(1,j,nc)..ref(i,j,nc)..nc) ) end end
    m1 = m:accsumsqr("row")
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), sumsqr(ref(i,1,nc)..ref(i,j,nc)..1 ) ) end end
  end
end

function TestMatrixSScans:testAccprod()
  local prod = \r =>local x = 1 for i=1,r:size() do x = x * r[i] end return x end
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:accprod() for i=1,m:size() do assertEquals( m1:geti(i), prod(1..i) ) end
    m1 = m:accprod("col")
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), prod(ref(1,j,nc)..ref(i,j,nc)..nc) )  end end
    m1 = m:accprod("row")
    for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), prod(ref(i,1,nc)..ref(i,j,nc)..1 ) )  end end
  end
end

-- right accumulation
function TestMatrixSScans:testRaccmin()
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:raccmin()    assertEquals( m1, m:same():fill(1..nr*nc) )
    m1 = m:raccmin("col") for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), ref(i,j,nc) ) end end
    m1 = m:raccmin("row") for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), ref(i,j,nc) ) end end
  end
end

function TestMatrixSScans:testRaccmax()
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:raccmax() assertEquals( m1, m:same():fill(m1:geti(m:size())) )
    m1 = m:raccmax("col") for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), ref(nr,j,nc) ) end end
    m1 = m:raccmax("row") for i=1,nr do for j=1,nc do assertEquals( m1:get(i,j), ref(i,nc,nc) ) end end
  end
end

function TestMatrixSScans:testRaccsum()
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:raccsum()
    for i=1,m:size()            do assertEquals( m1:geti(i) , sum(i..nr*nc)   ) end
    m1 = m:raccsum("col")
    for i=nr,1,-1 do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(nr,j,nc)..ref(i,j,nc)..-nc) ) end end
    m1 = m:raccsum("row")
    for i=1,nr do for j=nc,1,-1 do assertEquals( m1:get(i,j), sum(ref(i,j,nc)..ref(i,nc,nc))      ) end end
  end
end

function TestMatrixSScans:testRaccsumabs()
  local m1
  for _,mg in ipairs(G.mat) do
    local nr, nc = mg:sizes()
    m = matrix(nr,nc)
    m = mg:copy():map(\x -x)
    m1 = m:raccsumabs()
    for i=1,m:size()            do assertEquals( m1:geti(i) , sum(i..nr*nc)   ) end
    m1 = m:raccsumabs("col")
    for i=nr,1,-1 do for j=1,nc do assertEquals( m1:get(i,j), sum(ref(nr,j,nc)..ref(i,j,nc)..-nc) ) end end
    m1 = m:raccsumabs("row")
    for i=1,nr do for j=nc,1,-1 do assertEquals( m1:get(i,j), sum(ref(i,j,nc)..ref(i,nc,nc))      ) end end
  end
end

function TestMatrixSScans:testRaccsumsqr()
  local sumsqr = \r =>local x = 0 for i=1,r:size() do x = x + r[i]^2 end return x end
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:raccsumsqr()
    for i=1,m:size()            do assertEquals( m1:geti(i) , sumsqr(i..nr*nc)   ) end
    m1 = m:raccsumsqr("col")
    for i=nr,1,-1 do for j=1,nc do assertEquals( m1:get(i,j), sumsqr(ref(nr,j,nc)..ref(i,j,nc)..-nc) ) end end
    m1 = m:raccsumsqr("row")
    for i=1,nr do for j=nc,1,-1 do assertEquals( m1:get(i,j), sumsqr(ref(i,j,nc)..ref(i,nc,nc))      ) end end
  end
end

function TestMatrixSScans:testRaccprod()
  local prod = \r =>local x = 1 for i=1,r:size() do x = x * r[i] end return x end
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:raccprod()
    if nr*nc < 25 then
      for i=1,m:size() do assertEquals( m1:geti(i) - prod(i..nr*nc), 0 ) end
    end
    m1 = m:raccprod("col")
    for i=nr,1,-1 do for j=1,nc do assertAlmostEquals( m1:get(i,j) - prod(ref(nr,j,nc)..ref(i,j,nc)..-nc), 0, eps ) end end
    m1 = m:raccprod("row")
    for i=1,nr do for j=nc,1,-1 do assertAlmostEquals( m1:get(i,j) - prod(ref(i,j,nc)..ref(i,nc,nc)), 0, eps ) end end
  end
end

-- symplectic matrix ----------------------------------------------------------o

function TestMatrixErr:testSympinv()
  local msg = {
   "invalid argument #1 (2n matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth,'sympinv',  matrix(3)   )
  assertErrorMsgContains( msg[1], mth,'sympinv',  matrix(4,3) )
end

function TestMatrixSympl:testSympinv()
-- -J M' J
--[[ M' J M = J => M^-1 = J^-1 M'      det(M)  = ±1 (i.e. Sp(n))
     symp M = {{A,B},{C,D}} <=> A'D - C'B = 1, A'C = C'A, B'D = D'B ]]
  local mat = matrix(2)
  local j  = matrix(2):symp()
  local m1 = { matrix{{1,0},{0,1}},
               matrix{{1,0},{1,1}},
               matrix{{1,1},{0,1}}, }
  for _,m in ipairs(m1) do
    assertEquals( m:t()*j*m      , j )
    assertEquals( m:sympinv()   , -j*m:t()*j )
    assertEquals( m:sympinv(mat), -j*m:t()*j )
  end
end

function TestMatrixErr:testSymperr()
  local msg = {
    "invalid argument #1 (2n matrix expected)"       ,
    "invalid argument #2 (different matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth,'symperr',  matrix(3)   )
  assertErrorMsgContains( msg[1], mth,'symperr',  matrix(4,3) )
end

function TestMatrixSympl:testSymperr()
  -- M' J M - J
  --assertEquals( m:symperr(), m:t()*j*m-j )
  local j  = matrix(2):symp()
  local m1 = { matrix{{1,0},{0,1}},
               matrix{{1,0},{1,1}},
               matrix{{1,1},{0,1}}, }
  for _,m in ipairs(m1) do
    assertEquals( m:symperr(), 0 )
  end
  local m1 = { matrix{{0,0},{0,1}},
               matrix{{0,1},{0,1}}, }
  for _,m in ipairs(m1) do
    assertTrue( m:symperr() ~= 0 )
  end
end

-- conjugate, transpose -------------------------------------------------------o

function TestMatrixLinAlg:testConjugate()
  for _,m in ipairs(G.mat) do assertEquals( m:conj(), m )  end
end

function TestMatrixLinAlg:testTranspose()
  local m1
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    m1 = m:copy()
    assertEquals( {m:t():sizes()}, {nc,nr}        )
    assertEquals(  m:t()  :t()   , m              )
    assertEquals( (m + m1):t()   , m:t() + m1:t() )
    assertEquals( (2 * m) :t()   , 2 * m:t()      )
    if nr == nc then assertEquals( (m*m1):t(), m:t()*m1:t() ) end
    m1 = m:t()
    for i=1,nr do for j=1,nc do
      assertEquals( m1:get(i,j), m:get(j,i) )
    end end
  end
end

function TestMatrixLinAlg:testTrace()
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    assertEquals( m:tr(), m:getdiag():sum() )
  end
end

-- inner, cross, mixed, outer -------------------------------------------------o

function TestMatrixErr:testInner()
  local msg = {
    "invalid argument #2 (matrix expected)",
    "incompatible matrix sizes"            ,
  }
  assertErrorMsgContains( msg[1], mth, 'inner', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'inner', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'inner', errMat, 1    )
  assertErrorMsgContains( msg[1], mth, 'inner', errMat, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'inner', errMat, {}   )
  assertErrorMsgContains( msg[2], mth, 'inner', errMat, errMat, errMat )
end

function TestMatrixLinAlg:testInner()
  -- inner prod:  u'.v = |u|.|v| cos(u^v)
  for _,m1 in ipairs(G.mat) do
    local m2   = m1:copy()
    local mres = m1:inner(m2)
    local mref = (m1:t()*m2):getdiag():t()
    local s = mref:size()
    if s == 1 then assertEquals( mres, mref:geti(1) )
    else           assertEquals( mres, mref )         end
    assertEquals( m1:inner(m2, 'tr'), (m1:t()*m2):tr() )
  end
end

function TestMatrixErr:testOuter()
  local m = matrix(2,1)
  local msg = {
    "invalid argument #2 (matrix expected)",
    "incompatible matrix sizes",
  }
  assertErrorMsgContains( msg[1], mth, 'outer', m          , nil  )
  assertErrorMsgContains( msg[1], mth, 'outer', m          , ''   )
  assertErrorMsgContains( msg[1], mth, 'outer', m          , {}   )
  assertErrorMsgContains( msg[1], mth, 'outer', m          , 1    )
  assertErrorMsgContains( msg[1], mth, 'outer', m          , 1..2 )
  assertErrorMsgContains( msg[2], mth, 'outer', matrix(1,2), matrix(2,2) )
end

function TestMatrixLinAlg:testOuter()
  -- x * y:t() without temporary
  for nr=1,5 do
    local m1 = vector(nr):fill(1..2*nr..2)
    local m2 = vector(nr):fill(1..nr)
    assertEquals( m1:outer(m2), m1*m2:t() )
  end
end

function TestMatrixErr:testCross()
  local m = matrix(3)
  local msg = {
    "invalid argument #2 (matrix expected)",
    "invalid matrix sizes"                 ,
  }
  assertErrorMsgContains( msg[1], mth, 'cross', m     , nil  )
  assertErrorMsgContains( msg[1], mth, 'cross', m     , ''   )
  assertErrorMsgContains( msg[1], mth, 'cross', m     , 1    )
  assertErrorMsgContains( msg[1], mth, 'cross', m     , 1..2 )
  assertErrorMsgContains( msg[1], mth, 'cross', m     , {}   )
  assertErrorMsgContains( msg[2], mth, 'cross', errMat, m    )
end

function TestMatrixLinAlg:testCross() --TODO: check
  -- cross prod:  uxv = |u|.|v| sin(u^v) \vec{n}
  local m1  = matrix(3):fill(0..8)   -- skew-symmetric matrix
  local m2 = vector {2,-4,2}
  local m3 = vector {2,-4,2}
  assertEquals( m2:cross(m3), m1*m3 )

  for nc=1,5 do
    m1 = matrix(3,nc):fill(1..3*nc)
    m2 = matrix(3,nc):fill(3*nc..1..-1)
    m3 = m2:copy()
    assertEquals(    m1 :cross(m2)   ,-m2  :cross( m1)              )
    assertEquals(    m1 :cross(m2+m3), m1  :cross( m2)+m1:cross(m3) )
    assertEquals( (2*m1):cross(m2)   , m1  :cross( m2*2)            )
    assertEquals( (2*m1):cross(m2)   , 2*m1:cross( m2)              )
    assertEquals( (2*m1):cross(m2)   , 2*m1:cross( m2)              )
    --assertEquals( m1:cross( m2:cross(m3) ) , m2*(m1*m3)-m3*(m1*m2)  ) -- after multiplication tests
  end
end

function TestMatrixErr:testMixed()
  local msg = {
    "invalid argument #2 (matrix expected)",
    "invalid argument #3 (matrix expected)",
    "invalid matrix sizes"                 ,
    "incompatible matrix sizes"            ,
  }
  local m1 = matrix(3,1)
  assertErrorMsgContains( msg[1], mth, 'mixed', m1, nil  )
  assertErrorMsgContains( msg[1], mth, 'mixed', m1, ''   )
  assertErrorMsgContains( msg[1], mth, 'mixed', m1, 1    )
  assertErrorMsgContains( msg[1], mth, 'mixed', m1, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'mixed', m1, {}   )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1, m1  , nil  )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1, m1  , ''   )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1, m1  , 1    )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1, m1  , 1..2 )
  assertErrorMsgContains( msg[2], mth, 'mixed', m1, m1  , {}   )
  assertErrorMsgContains( msg[3], mth, 'mixed', matrix(2,1), m1, m1 )
  assertErrorMsgContains( msg[4], mth, 'mixed', matrix(3,2), m1, m1 )
  assertErrorMsgContains( msg[4], mth, 'mixed', m1, matrix(2,1), m1 )
  assertErrorMsgContains( msg[4], mth, 'mixed', m1, matrix(3,2), m1 )
  assertErrorMsgContains( msg[4], mth, 'mixed', m1, m1 ,matrix(2,1) )
  assertErrorMsgContains( msg[4], mth, 'mixed', m1, m1 ,matrix(3,2) )
end

function TestMatrixLinAlg:testMixed()
  -- x:cross(y):inner(z) without temporary
  for nc=1,5 do
    m1 = matrix(3,nc):fill(1..3*nc)
    m2 = matrix(3,nc):fill(3*nc..1..-1)
    m3 = matrix(3,nc):fill(1)
    assertEquals( m1:mixed(m2,m3), m1:cross(m2):inner(m3) )
  end
end

-- norm, unit, center, angle (in place) ---------------------------------------o

function TestMatrixLinAlg:testNorm() --|u| = sqrt(u'.u), forbidius norm
  for _,m in ipairs(G.mat) do
    assertEquals( m:norm(), sqrt(m:map(\x x^2):foldl('+')) )
  end
end

function TestMatrixErr:testDistance()
  local msg = {
    "invalid argument #2 (matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'distance', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'distance', errMat, 1..2 )
  assertErrorMsgContains( msg[1], mth, 'distance', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'distance', errMat, {}   )
end

function TestMatrixLinAlg:testDistance()
  --sqrt( trace((A-B) * (A-B)') )
  for _,m1 in ipairs(G.mat) do
    local m2 = m1:copy()
    assertEquals( m1:distance(m2), sqrt( ( ( m1:map2(m2,'-'))*(m1:map2(m2,'-') ):t() ):tr() ) )
  end
end

function TestMatrixErr:testUnit()
  local msg = {
    "null matrix norm",
  }
  assertErrorMsgContains( msg[1], mth, 'unit', matrix(2) )
end

function TestMatrixLinAlg:testUnit()  --  unit :  u / |u|
  for _,m in ipairs(G.mat) do
    assertEquals( m:unit(), m / m:norm() )
  end
end

function TestMatrixLinAlg:testCenter()
  for _,m in ipairs(G.mat) do
    local mid = m:sum() / m:size()
    assertEquals( m:center(),  m:map(\x x-mid) )
  end
end

function TestMatrixErr:testAngle()
  local msg = {
    "null vector norm",
  }
  assertErrorMsgContains( msg[1], mth, 'angle', vector{1,1,1}, vector{0,0,0} )
  assertErrorMsgContains( msg[1], mth, 'angle', vector{0,0,0}, vector{1,1,1} )
end

function TestMatrixLinAlg:testAngle()
  -- angle:  u^v = acos(u'.v / |u|.|v|)  in [0,pi] (or [-pi,pi] if n)
  local rad = \i,n -> pi*(i-1)/n
  local function unitVectors(n1, n2, r)
    local v = {}
    if is_nil(r) then r=1 end
    for i = 1, n1 do
      local a = rad(i, n1)
      v[i]={}
      for j = 1, n2 do
        local b = rad(j,n2)
        local x = r * cos(a) * sin(b)
        local y = r * sin(a) * sin(b)
        local z = r * cos(b)
        v[i][j] = vector{x,y,z}
      end
    end
    return v
  end

  local n, m = 16, 16
  for i,t in ipairs( unitVectors( m, n ) ) do
  for j,v in ipairs( t ) do
    assertAlmostEquals( vector{0,0,1}:angle( v ) - rad(j, n), 0,2* eps )
  end
  end
  assertEquals      ( vector{1,0,0}:angle(vector{ 1, 0, 0}), 0    )
  assertAlmostEquals( vector{1,0,0}:angle(vector{ 1, 1, 0}), pi/4, eps )
  assertAlmostEquals( vector{1,0,1}:angle(vector{ 1, 1, 0}), pi/3, eps )
  assertEquals      ( vector{1,0,0}:angle(vector{ 0, 1, 0}), pi/2 )
  assertEquals      ( vector{1,0,0}:angle(vector{-1,-1, 0}), 3*pi/4 )
  assertEquals      ( vector{1,0,0}:angle(vector{-1, 0, 0}), pi   )
  assertEquals      ( vector{0,0,1}:angle(vector{ 0, 0, 1}), 0    )
  assertEquals      ( vector{0,0,1}:angle(vector{ 0, 0,-1}), pi   )
end

-- operators ------------------------------------------------------------------o

function TestMatrixOps:testUnm()
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    local mref = matrix(nr,nc):fill(-1..-nr*nc..-1)
    assertEquals( -m      , mref )
    assertEquals(  m:unm(), mref )
  end
end

function TestMatrixOps:testMod()
  for _,m in ipairs(G.mat) do
    assertEquals( m%m:copy(), matrix(m:sizes()) )
  end
end

function TestMatrixOps:testPow()
  for _,m in ipairs(G.mat) do
    local mref = m:copy():map(\x x*x)
    assertEquals( m^2               , mref )
    assertEquals( m^m:same():fill(2), mref )
  end
end

function TestMatrixErr:testEq()
  local errMat = matrix(2):fill(1..4)
  local msg = {
  "invalid arguments (unsupported matrix operation)",
  "invalid argument #3 (callable expected)"         ,
  }
  assertErrorMsgContains( msg[1], mth, 'eq', errMat, {} )
  assertErrorMsgContains( msg[1], mth, 'eq', errMat, '' )
  assertErrorMsgContains( msg[1], mth, 'eq', errMat, 1..4 )
  assertErrorMsgContains( msg[2], mth, 'eq', errMat, matrix(1), '' )
  assertErrorMsgContains( msg[2], mth, 'eq', errMat, matrix(1), {} )
end

function TestMatrixOps:testEq()
  for _,m1 in ipairs(G.mat) do
    local m2  = m1:copy()
    local m3  = m1:same()
    local cm1 = m1:map(\x complex(x,0))
    assertTrue ( m1  == m2  ) -- mat == mat
    assertFalse( m1  == m3  )
    assertTrue ( m1  == cm1 ) -- mat == cmat
    assertTrue ( cm1 == m2  ) -- cmat == mat
    -- f defined
    assertTrue ( m1:eq( m2, nil) )
    assertTrue ( m1:eq( m2, 0  ) )

    m2 = m1:map(\x x+eps)
    m3 = m1:map(\x x+2*eps)
    assertTrue ( m1:eq( m2, eps) )
    assertFalse( m1:eq( m3, eps) )

    m2 = m1:map(\x x+eps):seti(1,3*eps)
    assertFalse( m1:eq( m2, eps) )
    -- f as function
    assertFalse( matrix(2):fill(1):eq( matrix(2):fill(eps), \x,y  x/y < eps) )
    assertTrue ( matrix(2):fill(1):eq( matrix(2):fill(eps), \x,y  x/y > eps) )

    local cm2 = cm1:map(\x x+eps*1i)
    assertTrue ( cm1:eq( cm2, eps) )
    cm2 = cm1:map(\x x+eps+eps*1i)
    assertTrue ( cm1:eq( cm2, 2*eps) )
    assertTrue ( (cm1:imag()):eq( cm2:imag(), eps) )
    assertTrue ( (cm1:real()):eq( cm2:real(), eps) )
  end
  assertTrue ( 0    ==  matrix(2) ) -- num  == mat
  assertFalse( 0    ==  matrix(2):fill(1) )
  assertTrue ( 0    == cmatrix(2) ) -- num  == cmat
  assertFalse( 0    == cmatrix(2):fill(1) )
  assertTrue ( 0+0i ==  matrix(2) ) -- cpx  == mat
  assertFalse( 1+0i ==  matrix(2) )
  assertTrue ( 0+0i == cmatrix(2) ) -- cpx  == cmat
  assertFalse( 0+1i == cmatrix(2) )
  assertTrue (  matrix(2) == 0 )    -- mat  == num
  assertTrue ( cmatrix(2) == 0 )    -- cmat == num
  assertTrue (  matrix(2) == 0+0i ) -- mat  == cpx
  assertTrue ( cmatrix(2) == 0+0i ) -- cmat == cpx
end

function TestMatrixErr:testAdd()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'add', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'add', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'add', errMat, 1..4 )
  assertErrorMsgContains( msg[2], mth, 'add', errMat, matrix(1) )
  assertErrorMsgContains( msg[2], mth, 'add', errMat, matrix(3) )
  assertErrorMsgContains( msg[2], mth, 'add', errMat, matrix(2), {} )
  assertErrorMsgContains( msg[2], mth, 'add', errMat, matrix(2), 1..4 )
end

function TestMatrixOps:testAdd()
  for _,m1 in ipairs(G.mat) do
    local nr, nc = m1:sizes()
    local m2  = m1:copy()
    local cm1 = cmatrix(m1:sizes()):fill(1..m1:size()):map(\x x+x*1i)
    assertEquals( 2  + m1 , m1:same():fill(1+2..nr*nc+2) ) -- num + mat  => num + vec
    assertEquals( m1 + 2  , m1:same():fill(1+2..nr*nc+2) ) -- mat + num  => vec + num
    assertEquals( m1 + m2 , m1:copy():map(\x 2*x     ) )   -- mat + mat  => vec + vec
    assertEquals( m1 + 2i , m1:copy():map(\x x+2i    ) )   -- mat + cpx  => vec + cpx
    assertEquals( m1 + cm1, m1:copy():map(\x 2*x+x*1i) )   -- mat + cmat => vec + cvec
    assertTrue  ( is_cmatrix(m1 + 2i ) )
    assertTrue  ( is_cmatrix(m1 + cm1) )
  end
end

function TestMatrixOps:testAddCPx()
  for _,m in ipairs(G.mat) do
    assertEquals( 2i + m, m:copy():map(\x x+2i) ) -- cpx + mat => cpx + vec
    assertTrue  ( is_cmatrix(2i + m) )
  end
end

function TestMatrixErr:testSub()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'sub', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'sub', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'sub', errMat, 1..4 )
  assertErrorMsgContains( msg[2], mth, 'sub', errMat, matrix(1) )
  assertErrorMsgContains( msg[2], mth, 'sub', errMat, matrix(3) )
end

function TestMatrixOps:testSub()
  for _,m1 in ipairs(G.mat) do
    local nr, nc = m1:sizes()
    local m2  = m1:copy()
    local cm1 = cmatrix(m1:sizes()):fill(1..m1:size()):map(\x x+x*1i)
    assertEquals( 2  - m1 , m1:copy():map(\x 2-x ) )       -- num - mat  => num - vec
    assertEquals( m1 - 2  , m1:same():fill(1-2..nr*nc-2) ) -- mat - num  => vec + -num
    assertEquals( m1 - m2 , m1:same() )                    -- mat - mat  => vec - vec
    assertEquals( m1 - 2i , m1:copy():map(\x x-2i) )       -- mat - cpx  => vec + -cpx
    assertEquals( m1 - cm1, m1:copy():map(\x x*1i) )       -- mat - cmat => vec - cvec
    assertTrue  ( is_cmatrix(m1 - 2i) )
    assertTrue  ( is_cmatrix(m1 - cm1) )
  end
end

function TestMatrixOps:testSubCPx()
  for _,m in ipairs(G.mat) do
    assertEquals( 2i + m, m:copy():map(\x x+2i) ) -- cpx - mat => cpx - vec
    assertTrue  ( is_cmatrix(2i + m) )
  end
end

function TestMatrixErr:testMul()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'mul', errMat, ''     )
  assertErrorMsgContains( msg[1], mth, 'mul', errMat, nil    )
  assertErrorMsgContains( msg[1], mth, 'mul', errMat, 1..4   )
  assertErrorMsgContains( msg[2], mth, 'mul', matrix(2,1), matrix(2,1) )
  assertErrorMsgContains( msg[2], mth, 'mul', matrix(1,2), matrix(1,1) )
  assertErrorMsgContains( msg[2], mth, 'mul', matrix(1,2), matrix(3,1) )
end

local function refMul(m1, m2, i, j )
  local mref = matrix(m1:nrow(), m2:ncol())
  for i=1,m1:nrow() do
  for j=1,m2:ncol() do
    local x = 0
    for ii=1,m1:ncol()
      do x = x + m1:get(i,ii) * m2:get(ii,j)
    end
    mref:set(i,j,x)
  end end
  return mref
end

function TestMatrixOps:testMul()
  local mres, m2, cm2
  for _,m1 in ipairs(G.mat) do
    local nr, nc = m1:sizes()
    assertEquals( 2  * m1, m1:same():fill(2..nr*nc*2..2) ) -- num * mat => num * vec
    assertEquals( m1 * 2 , m1:same():fill(2..nr*nc*2..2) ) -- mat * num => vec * num
    assertEquals( m1 * 2i, m1:copy():map(\x x*2i) )        -- mat * cpx => vec * cp
    assertTrue  ( is_cmatrix(m1 * 2i) )
  end
  for _,m1 in ipairs(G.mat) do
    local nc1 = m1:ncol()
    for i=1,5 do
      m2   = matrix(nc1,i):fill(1..nc1*i)
      cm2  = cmatrix(nc1,i):fill(1..nc1*i)
      assertEquals( m1 * m2 , refMul(m1,  m2) ) -- mat * mat
      assertEquals( m1 * cm2, refMul(m1, cm2) ) -- mat * cmat
      assertTrue  ( is_cmatrix(m1 * cm2) )
    end
  end
end

function TestMatrixOps:testMulCPx()
  for _,m1 in ipairs(G.mat) do
    assertEquals( 2i * m1, m1:copy():map(\x x*2i) )
    assertTrue  ( is_cmatrix(2i * m1) )
  end
end

function TestMatrixErr:testTmul()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'tmul', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'tmul', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'tmul', errMat, 1..4 )
  assertErrorMsgContains( msg[2], mth, 'tmul', matrix(2,1), matrix(1,2) )
  assertErrorMsgContains( msg[2], mth, 'tmul', matrix(1,2), matrix(3,1) )
end

function TestMatrixOps:testTmul()
  for _,m1 in ipairs(G.mat) do
    local nr1 = m1:nrow()
    for i=1,5 do
      local m2   =  matrix(nr1,i):fill(1..nr1*i)
      local cm2  = cmatrix(nr1,i):fill(1..nr1*i)
      assertEquals( m1:tmul(m2) , refMul(m1:t(),  m2) ) -- mat' * mat
      assertEquals( m1:tmul(cm2), refMul(m1:t(), cm2) ) -- mat' * cmat
      assertTrue  ( is_cmatrix(m1:tmul(cm2)) )
    end
  end
end

function TestMatrixErr:testMult()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'mult', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'mult', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'mult', errMat, 1..4 )
  assertErrorMsgContains( msg[2], mth, 'mult', matrix(2,1), matrix(1,2) )
  assertErrorMsgContains( msg[2], mth, 'mult', matrix(1,2), matrix(3,1) )
end

function TestMatrixOps:testMult()
  local mres, m2, cm1
  for _,m1 in ipairs(G.mat) do
    local nr1 = m1:ncol()
    for i=1,5 do
      local m2   =  matrix(i,nr1):fill(1..nr1*i)
      local cm2  = cmatrix(i,nr1):fill(1..nr1*i)
      assertEquals( m1:mult(m2) , refMul(m1,  m2:t()) ) -- mat * mat'
      assertEquals( m1:mult(cm2), refMul(m1, cm2:t()) ) -- mat * cmat'
      assertTrue  ( is_cmatrix(m1:mult(cm2)) )
    end
  end
end

function TestMatrixErr:testDiv()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
    "incompatible matrix sizes"                       ,
  }
  assertErrorMsgContains( msg[1], mth, 'div', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'div', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'div', errMat, 1..4 )
  assertErrorMsgContains( msg[2], mth, 'div', matrix(2,1), matrix(1,2) )
  assertErrorMsgContains( msg[2], mth, 'div', matrix(1,2), matrix(3,1) )
end

function TestMatrixOps:testDiv()
  local mres, mref, mc, cm
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    mc = m:copy():random(randomseed(2))
    if nr == nc then
      assertTrue( (mc * (1/mc)):eq(mc:copy():eye(), 5*eps) ) -- num / mat
    end
    assertEquals(  m / 2 , m:copy():map(\x  x/2   ) )        -- mat / num
    assertEquals(  m / 2i, m:copy():map(\x -x/2*1i) )        -- mat / cpx
    assertTrue  ( (m / m):eq(m:copy() * 1/m, eps) )          -- mat / mat

    cm = cmatrix(nr,nc):fill(1..nr*nc):map\x x+x*1i
    mres = m / cm      -- mat / cmat
    mref = m * 1/cm
    assertTrue( (mres:real()):eq(mref:real(), eps) )
    assertTrue( (mres:imag()):eq(mref:imag(), eps) )
  end
end

function TestMatrixOps:testDivCPx()
  for _,m in ipairs(G.mat) do
    assertTrue( is_cmatrix(2i / m) )
    assertTrue( ((2i / m):real()):eq((2i * 1/m):real(), eps) )
    assertTrue( ((2i / m):imag()):eq((2i * 1/m):imag(), eps) )
  end
end

function TestMatrixErr:testEmul()
  local msg = {
    "invalid argument #2 (matrix expected)",
    "incompatible matrix sizes"            ,
  }
  assertErrorMsgContains( msg[1], mth, 'emul', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'emul', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'emul', errMat, 1..4 )
  assertErrorMsgContains( msg[2], mth, 'emul', errMat, matrix(1) )
  assertErrorMsgContains( msg[2], mth, 'emul', errMat, matrix(3) )
end

function TestMatrixOps:testEmul()
  for _,m1 in ipairs(G.mat) do
    local m2  = m1:copy()
    local cm1 = cmatrix(m1:sizes()):fill(1..m1:size()):map(\x x+x*1i)
    assertEquals( m1:emul(m2) , m1:map2(m2 , '*') )
    assertEquals( m1:emul(cm1), m1:map2(cm1, '*') )
    assertTrue  ( is_cmatrix(m1:emul(cm1)) )
  end
end

function TestMatrixErr:testEdiv()
  local msg = {
    "invalid argument #2 (matrix expected)",
    "incompatible matrix sizes"            ,
  }
  assertErrorMsgContains( msg[1], mth, 'ediv', errMat, ''   )
  assertErrorMsgContains( msg[1], mth, 'ediv', errMat, nil  )
  assertErrorMsgContains( msg[1], mth, 'ediv', errMat, 1..4 )
  assertErrorMsgContains( msg[2], mth, 'ediv', errMat, matrix(1) )
  assertErrorMsgContains( msg[2], mth, 'ediv', errMat, matrix(3) )
end

function TestMatrixOps:tetEdiv()
  for _,m1 in ipairs(G.mat) do
    local m2  = m1:copy()
    local cm1 = cmatrix(m1:sizes()):fill(1..m1:size()):map(\x x+x*1i)
    assertEquals( m1:ediv(m2) , m1:map2(m2 , '/') )
    assertEquals( m1:ediv(cm1), m1:map2(cm1, '/') )
    assertTrue  ( is_cmatrix(m1:ediv(cm1)) )
   end
end

-- linear algebra -------------------------------------------------------------o

function TestMatrixLapack:testSolve()
  for i,m1 in ipairs(dat.solveIn1) do
    local m2 = dat.solveIn2[i]
    local m3 = dat.solveOut[i]
    assertTrue( m1:solve(m2):eq(m3, 2*eps) )
  end
end

function TestMatrixErr:testSvd()
  local msg = {
    "invalid input argument" ,
    "SVD failed to converged",
  }
end

function TestMatrixLapack:testSvd()
  local ru, rs, rv, info
  for i,m in ipairs(dat.svdIn) do
    local refU = dat.svdU[i]
    local refS = dat.svdS[i]:getdiag()
    local refV = dat.svdV[i]
    ru, rs, rv, info = m:svd()
    assertTrue( ru:eq(refU,  3*eps) )
    assertTrue( rs:eq(refS, 64*eps) )
    assertTrue( rv:eq(refV,  3*eps) )
    local m1 = ru * matrix(m:sizes()):setdiag(rs) * rv:t()     -- M = U*S*V'
    assertTrue( m1:eq(m,  32*eps) )
  end
end

function TestMatrixErr:testDet()
  local msg = {
    "matrix must be square",
  }
  assertErrorMsgContains( msg[1], mth, 'det', matrix(2,1) )
end

function TestMatrixLapack:testDet()
  assertEquals( matrix(2):symp():det(), 1 )
  assertEquals( matrix(2):eye() :det(), 1 )

  local M = {}
  for i=1,5 do M[i] = matrix(i):random() end
  for i,m in ipairs(M) do
    local m1 = matrix(i):random()
    assertAlmostEquals( (m*m1):det() - m:det()*m1:det(), 0,3*eps )
    assertAlmostEquals(  m:t():det() - m:det()         , 0,2*eps )
    assertAlmostEquals( (2*m) :det() - m:det()*(2^i)   , 0,  eps )
  end
end

function TestMatrixErr:testEigen()
  local msg = {
    "matrix must be square"                  ,
    "invalid input argument"                 ,
    "eigen failed to compute all eigenvalues",
  }
  assertErrorMsgContains( msg[1], mth, 'eigen', matrix(2,1) )
  assertErrorMsgContains( msg[1], mth, 'eigen', matrix(1,3) )
end

function TestMatrixLapack:testEigen()
  local w, vl, vr, info, m, m1, m2
  for i=1,5,1 do
    m = matrix(i)
    w, vl, vr, info = m:eigen()
    assertEquals( w   , cvector(i)      )
    assertEquals( vl  , matrix(i):eye() )
    assertEquals( vr  , matrix(i):eye() )
    assertEquals( info, 0 )
  end
  for i,m in ipairs(dat.eigenIn) do
    w, vl, vr, info = m:eigen()
    local refD  = dat.eigenD[i]:getdiag()
    local refW  = dat.eigenW[i]
    local refV  = dat.eigenV[i]
    assertTrue( w :eq(refD, 16*eps) )
    assertTrue( vr:eq(refV,  4*eps) )
    assertTrue( vl:eq(refW,  4*eps) )
    assertAlmostEquals( w   :sum().re - m:tr(), 0, 64*eps )
    local diagW = matrix(m:sizes()):setdiag(w)
    -- A*V - V*D
    m1 = m  * vr
    m2 = vr * diagW
    assertTrue( m1:eq(m2, 64*eps) )
    -- W'*A - D*W'
    m1 = vl:t() * m
    m2 = diagW  * vl:t()
    assertTrue( m1:eq(m2, 64*eps) )
  end
end

-- FFT, convolution, correlation, covrariance ---------------------------------o
  --vector sizes: 1,2,3,4,5,7,11,13,17,19,25
  --matrix sizes: (of 2,5,7 combinations)

function TestMatrixFFT:testFFT()
  for i,s in ipairs(dat.sv) do -- 1D
    local ref = dat.fftVOut[i]
    local res = dat.fftVIn:getsub(1..s, 1):fft()
    assertTrue( (res:real()):eq(ref:real(), 16*eps) )
    assertTrue( (res:imag()):eq(ref:imag(), 12*eps) )
  end
  for i ,s1 in ipairs(dat.sm) do -- 2D
  for ii,s2 in ipairs(dat.sm) do
    local ref = dat.fftMOut[ref(i,ii,3)]
    local res = dat.fftMIn:getsub(1..s1, 1..s2):fft()
    assertTrue( (res:real()):eq(ref:real(), 16*eps) )
    assertTrue( (res:imag()):eq(ref:imag(), 16*eps) )
  end end
end

function TestMatrixFFT:testIFFT()
  for i,s in ipairs(dat.sv) do -- 1D
    local ref = dat.fftVIn:getsub(1..s, 1)
    local res = ref:fft():ifft()
    assertTrue( (res:real()):eq(ref:real(), 4*eps) )
    assertTrue( (res:imag()):eq(ref:imag(),   eps) )
  end
  for i ,s1 in ipairs(dat.sm) do -- 2D
  for ii,s2 in ipairs(dat.sm) do
    local ref = dat.fftMIn:getsub(1..s1, 1..s2)
    local res = ref:fft():ifft()
    assertTrue( (res:real()):eq(ref:real(), 2*eps) )
    assertTrue( (res:imag()):eq(ref:imag(),   eps) )
  end end
end

function TestMatrixErr:testRFFT()
  local msg = {
    "incompatible matrix sizes",
  }
  assertErrorMsgContains( msg[1], mth, 'rfft', vector(1), matrix(2) )
  assertErrorMsgContains( msg[1], mth, 'rfft', matrix(3), vector(2) )
end

function TestMatrixFFT:testRFFT()
  for i,s in ipairs(dat.sv) do
    local ref = dat.fftVOut[i]
    local res = dat.fftVIn:getsub(1..s, 1):rfft()
    assertTrue( (res:imag()):eq(ref:getrow(1..res:nrow()):imag(), 12*eps) )
    assertTrue( (res:real()):eq(ref:getrow(1..res:nrow()):real(), 16*eps) )
  end
  for i ,s1 in ipairs(dat.sm) do
  for ii,s2 in ipairs(dat.sm) do
    local ref = dat.fftMOut[ref(i,ii,3)]
    local res = dat.fftMIn:getsub(1..s1, 1..s2):rfft()
    local nc, nr = res:sizes()
    assertTrue( (res:imag()):eq(ref:getsub(1..nc,1..nr):imag(), 16*eps) )
    assertTrue( (res:real()):eq(ref:getsub(1..nc,1..nr):real(), 16*eps) )
  end end
end

function TestMatrixErr:testIRFFT()
  local msg = {
    "invalid argument #1 (cmatrix expected)",
    "invalid argument #2 (matrix expected)" ,
    "incompatible matrix sizes"             ,
  }
  assertErrorMsgContains( msg[1], mth, 'irfft',  vector(1), cmatrix(2) )
  assertErrorMsgContains( msg[2], mth, 'irfft', cvector(3), nil        )
  assertErrorMsgContains( msg[3], mth, 'irfft', cvector(3), matrix(1)  )
end

function TestMatrixFFT:testIRFFT()
  for i,s in ipairs(dat.sv) do   -- 1D
    local ref  = dat.fftVIn:getsub(1..s, 1)
    local ref1 = matrix(ref:sizes())
    local res  = ref:rfft():irfft(ref1)
    assertTrue( res:eq(ref , 2*eps) )
  end
  for i ,s1 in ipairs(dat.sm) do -- 2D
  for ii,s2 in ipairs(dat.sm) do
    local ref  = dat.fftMIn:getsub(1..s1, 1..s2)
    local ref1 = matrix(ref:sizes())
    local res  = ref:rfft():irfft(ref1)
    assertTrue( res:eq(ref , 2*eps) )
  end end

  local ref = {
    matrix{{1,1,0},{1,1,0},{1,1,0}},
    matrix{{1,1,1},{1,1,1},{0,0,0}},
    matrix{{1,1,1},{0,0,0},{1,1,1}},
    matrix(3):eye()                ,
  }
  for _,m in ipairs(ref) do
    local res = m:rfft():irfft(matrix(3))
    assertTrue( res:eq(m , 2*eps) )
  end
end

function TestMatrixErr:testConv()
  local msg = {
    "incompatible matrix sizes",
  }
  assertErrorMsgContains( msg[1], mth, 'conv',  vector(1), vector(2) )
  assertErrorMsgContains( msg[1], mth, 'conv',  matrix(1), matrix(2) )
end

-- pascal triangle helpers
local pasVal = \x   => local y = 1 for i=1,x do y = y * i end return y end
local function pasVec(x)
  local v = vector(x)
  for z=1,x do v:seti(z, pasVal(x-1) / (pasVal(z-1) * pasVal(x-z))) end
  return v
end

 -- convolution theorem
function TestMatrixFFT:testConv() -- matrix test
  -- HELP - to get full conv: nr, nc = xr+yr-1, xc+yc-1
  for i=3,8 do
    local s = (i-1)+(i-2) - 1
    local v1 = pasVec(i-1):resize(s,1)
    local v2 = pasVec(i-2):resize(s,1)
    local ref = pasVec(s)
    local res = v1:conv(v2)
    assertEquals( res, v2:conv(v1) )
    assertTrue  ( res:eq(ref , 51*eps) )
  end

  local m1 = matrix(2):fill(1):resize(3)
  local m2 = matrix(2):fill(2):resize(3)
  --print( m1         , "\n" )
  --print( m1:conv(m2), "\n" )

  local m1 = matrix(3):fill(1):resize(4)
  local m2 = matrix(3):fill(2):resize(4)
  --print( m1         , "\n" )
  --print( m1:conv(m2), "\n" )
end

 -- correlation theorem
function TestMatrixFFT:testCorr() -- matrix test
  for i=3,6 do
    local s = (i-1)+(i-2) - 1
    local v1   = pasVec(i-1):resize(s,1)
    local v2   = pasVec(i-2):resize(s,1)
    local res  = v1:corr(v2)
    local res2 = v2:corr(v1):shift(1,0)
    local ref  = pasVec(s):shift(s/2+1,0)
    assertTrue( res:eq(ref , 16*eps) )
    assertTrue( res:eq(res2, 16*eps) )
  end
end

function TestMatrixFFT:testCovar() -- matrix test
for i=3,6 do
    local s = (i-1)+(i-2) - 1
    local v1 = pasVec(i-1):resize(s,1)
    local v2 = pasVec(i-2):resize(s,1)
    local res = v1:covar(v2)
    local ref = v1:corr(v2):center()
    assertTrue( res:eq(ref, 16*eps) )
  end
end

-- rotations ------------------------------------------------------------------o

function TestMatrixErr:testRot()
  local msg = {
    "invalid argument #1 (2D squared matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'rot', matrix(2,1), pi )
  assertErrorMsgContains( msg[1], mth, 'rot', matrix(2,3), pi )
end

function TestMatrixErr:testRotxyz()
  local msg = {
    "invalid argument #1 (3D squared matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'rotx', matrix(3,2), pi )
  assertErrorMsgContains( msg[1], mth, 'roty', matrix(3,2), pi )
  assertErrorMsgContains( msg[1], mth, 'rotz', matrix(3,2), pi )
end

function TestMatrixRot:testRot()
  local m = matrix(2)
  for i,a in ipairs(dat.rad) do
    local res = m:rot(a)
    local ref = dat.rot[i]
    assertTrue( res:eq(ref, eps) )
  end
end

function TestMatrixRot:testRotx()
  local m = matrix(3)
  for i,ax in ipairs(dat.rad) do
    local res = m:rotx(ax)
    local ref = dat.rotx[i]
    assertEquals( res:t()*res, matrix(3):eye() )
    assertTrue  ( res:eq(ref, eps) )
  end
end

function TestMatrixRot:testRoty()
  local m = matrix(3)
  for i,ay in ipairs(dat.rad) do
    local res = m:roty(ay)
    local ref = dat.roty[i]
    assertEquals( res:t()*res, matrix(3):eye() )
    assertTrue  ( res:eq(ref, eps) )
  end
end

function TestMatrixRot:testRotz()
  local m = matrix(3)
  for i,az in ipairs(dat.rad) do
    local res = m:rotz(az)
    local ref = dat.rotz[i]
    assertEquals( res:t()*res, matrix(3):eye() )
    assertTrue  ( res:eq(ref, eps) )
  end
end

function TestMatrixRot:testRotxy()
  for i,ax in ipairs(dat.rad) do
    for ii,ay in ipairs(dat.rad) do
      local res = matrix(3):rotxy(ax,ay)
      local ref = matrix(3):roty(ay)*matrix(3):rotx(ax)
      assertTrue( res:eq(ref, eps) )
    end
  end
end

function TestMatrixRot:testRotxz()
  for i,ax in ipairs(dat.rad) do
    for ii,az in ipairs(dat.rad) do
      local res = matrix(3):rotxz(ax,az)
      local ref = matrix(3):rotz(az)*matrix(3):rotx(ax)
      assertTrue( res:eq(ref, eps) )
    end
  end
end

function TestMatrixRot:testRotyz()
  for i,ay in ipairs(dat.rad) do
    for ii,az in ipairs(dat.rad) do
      local res = matrix(3):rotyz(ay,az)
      local ref = matrix(3):rotz(az)*matrix(3):roty(ay)
      assertTrue( res:eq(ref, eps) )
    end
  end
end

function TestMatrixRot:testRotyx()
  for i,ay in ipairs(dat.rad) do
    for ii,ax in ipairs(dat.rad) do
      local res = matrix(3):rotyx(ay,ax)
      local ref = matrix(3):rotx(ax)*matrix(3):roty(ay)
      assertTrue( res:eq(ref, eps) )
    end
  end
end

function TestMatrixRot:testRotzx()
  for i,az in ipairs(dat.rad) do
    for ii,ax in ipairs(dat.rad) do
      local res = matrix(3):rotzx(az,ax)
      local ref = matrix(3):rotx(ax)*matrix(3):rotz(az)
      assertTrue( res:eq(ref, eps) )
    end
  end
end

function TestMatrixRot:testRotzy()
  for i,az in ipairs(dat.rad) do
    for ii,ay in ipairs(dat.rad) do
      local res = matrix(3):rotzy(az,ay)
      local ref = matrix(3):roty(ay)*matrix(3):rotz(az)
      assertTrue( res:eq(ref, eps) )
    end
  end
end

function TestMatrixRot:testRotxyz()
  for i,ax in ipairs(dat.rad) do
    for ii,ay in ipairs(dat.rad) do
      for iii,az in ipairs(dat.rad) do
        local res = matrix(3):rotxyz(ax,ay,az)
        local ref = matrix(3):rotz(az)*matrix(3):roty(ay)*matrix(3):rotx(ax)
        assertTrue( res:eq(ref, eps) )
      end
    end
  end
end

function TestMatrixRot:testRotzyx()
  for i,ax in ipairs(dat.rad) do
    for ii,ay in ipairs(dat.rad) do
      for iii,az in ipairs(dat.rad) do
        local res = matrix(3):rotzyx(ax,ay,az)
        local ref = matrix(3):rotx(ax)*matrix(3):roty(ay)*matrix(3):rotz(az)
        assertTrue( res:eq(ref, eps) )
      end
    end
  end
end

function TestMatrixRot:testRotpitch()
  local m = matrix(3)
  for i,ax in ipairs(dat.rad) do
    local res = m:rotpitch(-ax)
    local ref = dat.rotx[i]
    assertEquals( res:t()*res, matrix(3):eye() )
    assertTrue  ( res:eq(ref, eps) )
  end
end

function TestMatrixRot:testRotyaw()
  local m = matrix(3)
  for i,ay in ipairs(dat.rad) do
    local res = m:rotyaw(-ay)
    local ref = dat.roty[i]
    assertEquals( res:t()*res, matrix(3):eye() )
    assertTrue  ( res:eq(ref, eps) )
  end
end

function TestMatrixRot:testRotroll()
  local m = matrix(3)
  for i,az in ipairs(dat.rad) do
    local res = m:rotroll(-az)
    local ref = dat.rotz[i]
    assertEquals( res:t()*res, matrix(3):eye() )
    assertTrue  ( res:eq(ref, eps) )
  end
end

function TestMatrixRot:testRotmad()
  for i,th in ipairs(dat.rad) do
    for ii,phi in ipairs(dat.rad) do
      for iii,psi in ipairs(dat.rad) do
        local res = matrix(3):rotmad(th,phi,psi)
        local ref = matrix(3):roty(th)*matrix(3):rotx(-phi)*matrix(3):rotz(psi)
        assertTrue( res:eq(ref, eps) )
      end
    end
  end
end

function TestMatrixRot:testTorotmad()
  for i,th in ipairs(dat.rad) do
    for ii,phi in ipairs(dat.rad) do
      for iii,psi in ipairs(dat.rad) do
        local a1, a2, a3 = matrix(3):rotmad(th,phi,psi):torotmad(th/2,phi/2,psi/2)
        if phi == pi then
          assertAlmostEquals( a1 - th ,-pi, eps )
          assertAlmostEquals( a2 - phi,-pi, eps )
          assertAlmostEquals( a3 - psi,-pi, eps )
        else
          assertAlmostEquals( a1 - th , 0 , eps )
          assertAlmostEquals( a2 - phi, 0 , eps )
          assertAlmostEquals( a3 - psi, 0 , eps )
        end
      end
    end
  end
end

function TestMatrixErr:testRotv()
  local msg = {
    "invalid argument #2 (iterable expected)"         ,
    "invalid argument #1 (3D squared matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'rotv', matrix(3)  , pi  )
  assertErrorMsgContains( msg[2], mth, 'rotv', matrix(2,3), {1,0,0}, pi )
end

function TestMatrixRot:testRotv()
  local v = vector{0,0,1}:unit()
  for _,a in ipairs(dat.rad) do
    for _,a1 in ipairs(dat.rad) do
      for _,a2 in ipairs(dat.rad) do
        local m1  = matrix(3):rotz( a1 )
        local m2  = matrix(3):roty( a2 )
        local m3  = matrix(3):rotz( a  )
        local v1  = m1 * m2 * v
        local res = matrix(3):rotv(v1,a)
        local ref = m1 * m2 * m3 * ( m1 * m2 ):t()
        assertTrue( res:eq(ref, eps) )
      end
    end
  end
end

function TestMatrixErr:testTorotv() -- TODO after fix
  local msg = {
    "invalid argument #2 (iterable expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'torotv', matrix(3), 1  )
end

function TestMatrixRot:testTorotv()
  local fmt = MAD.option.format
  MAD.option.format = "%.5e"
  MAD.export('tostring', true)
  --print()
  --print('a/pi', '', 'a1/pi', '', 'a2/pi', '', '|res|', '', '|v1|', '', 'res-v1')
  local v = vector{0,0,1}:unit()
  for _,a in ipairs(dat.rad) do
    for _,a1 in ipairs(dat.rad) do
      for _,a2 in ipairs(dat.rad) do
        local m1  = matrix(3):rotz( a1 )
        local m2  = matrix(3):roty( a2 )
        local v1  = m1 * m2 * v
        local res, ares = matrix(3):rotv(v1,a):torotv()
        assertAlmostEquals( ares - a, 0, eps )
        --print( a/pi, a1/pi, a2/pi,
        --       res[1]-v1:geti(1), res[2]-v1:geti(2), res[3]-v1:geti(3))
          --assertAlmostEquals( res[j] - v1:geti(j), 0, eps )
      end
    end
  end
  MAD.option.format = fmt
end

function TestMatrixErr:testRotq()
local msg = {
    "invalid argument #2 (iterable expected)"         ,
    "invalid argument #1 (3D squared matrix expected)",
  }
  assertErrorMsgContains( msg[1], mth, 'rotq', matrix(3)  , pi  )
  assertErrorMsgContains( msg[2], mth, 'rotq', matrix(2,3), {1,0,0,0} )
end

function TestMatrixRot:testRotq(
  )
  local v = vector{0,0,1}:unit()
  for _,a in ipairs(dat.rad) do
    for _,a1 in ipairs(dat.rad) do
      for _,a2 in ipairs(dat.rad) do
        local m1  = matrix(3):rotz( a1 )
        local m2  = matrix(3):roty( a2 )
        local m3  = matrix(3):rotz( a  )
        local v1  = m1 * m2 * v
        local ref = matrix(3):rotv(v1,a)
        local q   = {cos(a/2), v1[1]*sin(a/2), v1[2]*sin(a/2), v1[3]*sin(a/2) }
        local res = matrix(3):rotq(q)
        assertTrue( res:eq(ref, 2*eps) )
      end
    end
  end
end

function TestMatrixRot:testTorotq() -- TODO
  local v = vector{0,0,1}:unit()
  for _,a in ipairs(dat.rad) do
    for _,a1 in ipairs(dat.rad) do
      for _,a2 in ipairs(dat.rad) do
        local m1  = matrix(3):rotz( a1 )
        local m2  = matrix(3):roty( a2 )
        local v1  = m1 * m2 * v

        local q   = {cos(a/2), v1[1]*sin(a/2), v1[2]*sin(a/2), v1[3]*sin(a/2) }
        local res = (matrix(3):rotq(q)):torotq()
        --print(q  )
        --print(res,"\n --")
        assertAlmostEquals( res[1] - q[1], 0, eps)
      end
    end
  end
end

-- concatenation, conversion --------------------------------------------------o

function TestMatrixErr:testConcat()
  local msg = {
    "invalid argument #1 (matrix expected)"                     ,
    "invalid argument #2 (matrix expected)"                     ,
    "incompatible matrix sizes"                                 ,
    "invalid argument #3 (string 'vec', row' or 'col' expected)",
    "incompatible matrix sizes"                                 ,
  }
  assertErrorMsgContains( msg[2], mth, 'concat', errMat     , ''        )
  assertErrorMsgContains( msg[2], mth, 'concat', errMat     , nil       )
  assertErrorMsgContains( msg[2], mth, 'concat', errMat     , 1..4      )
  assertErrorMsgContains( msg[3], mth, 'concat', errMat     , matrix(1) )
  assertErrorMsgContains( msg[3], mth, 'concat', matrix(3)  , errMat    )
  assertErrorMsgContains( msg[4], mth, 'concat', errMat     , errMat     , ''    )
  assertErrorMsgContains( msg[4], mth, 'concat', errMat     , errMat     , 1     )
  assertErrorMsgContains( msg[5], mth, 'concat', matrix(1,2), matrix(3,2), 'row' )
  assertErrorMsgContains( msg[5], mth, 'concat', matrix(2,3), matrix(2,2), 'col' )
  assertErrorMsgContains( msg[5], mth, 'concat', errMat     , errMat     , 'col', matrix(3) )
end

function TestMatrix:testConcat()
  local concat in MAD
  local mres, mref
  for _,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    mref = matrix(2*nr,nc)
    mref:setsub(1..nr     , 1..nc, 1..nr*nc)
    mref:setsub(nr+1..2*nr, 1..nc, 1..nr*nc)
    mres = m:concat( m )        assertEquals( mres, mref )
    mres = m:concat( m, 'col' ) assertEquals( mres, mref )

    mref = matrix(nr,2*nc)
    mref:setsub(1..nr, 1..nc, 1..nr*nc)
    mref:setsub(1..nr, nc+1..2*nc, 1..nr*nc)
    mres = m:concat( m, 'row')  assertEquals( mres, mref )

    mref = vector(2*m:size())
    mref:setsub( 1..nr*nc, 1, 1..nr*nc)
    mref:setsub( nr*nc+1..nr*nc*2, 1, 1..nr*nc)
    mres = m:concat( m, 'vec')  assertEquals( mres, mref )
  end
end

function TestMatrixConv:testTosting()
  local tostring in MAD
  local m, c, r, nr, nc = matrix(2)
  assertTrue( is_string(tostring(m      )) )
  assertTrue( is_string(tostring(m, ''  )) )
  assertTrue( is_string(tostring(m, "\n")) )

  for i,m in ipairs(G.mat) do
    nr, nc = m:sizes()
    c, r = {}, {}
    for i=1,nr do for j=1,nc do c[j]=tostring(ref(i,j,nc)) end r[i]=table.concat(c, ' ')  end
    assertEquals( tostring(m      ), table.concat(r, '\n') )
    for i=1,nr do for j=1,nc do c[j]=tostring(ref(i,j,nc)) end r[i]=table.concat(c)       end
    assertEquals( tostring(m, ''  ), table.concat(r, '\n') )
    for i=1,nr do for j=1,nc do c[j]=tostring(ref(i,j,nc)) end r[i]=table.concat(c, "\n") end
    assertEquals( tostring(m, '\n'), table.concat(r, '\n') )
  end
end

function TestMatrixErr:testTotable()
  local msg = {
    "invalid argument #2 (table expected)"          ,
    "invalid argument #2 (table of tables expected)",
  }
  assertErrorMsgContains( msg[1], totable, errMat, ''     )
  assertErrorMsgContains( msg[1], totable, errMat, 1      )
  assertErrorMsgContains( msg[1], totable, errMat, true   )
  assertErrorMsgContains( msg[1], totable, errMat, 1..2   )
  assertErrorMsgContains( msg[1], totable, errMat, errMat )
  assertErrorMsgContains( msg[2], totable, errMat, {{},5} )
end

function TestMatrixConv:testTotable()
  assertTrue( is_table(totable( matrix(2))) )
  for i,m in ipairs(G.mat) do
    local nr, nc = m:sizes()
    local tref   = totable(m)
    if nc ~=1 then
      for i=1,nr do for j=1,nc do assertEquals( tref[i][j], ref(i,j,nc) ) end end
    else
      for i=1,nr do               assertEquals( tref[i]   , ref(i,1,nc) ) end
    end
    assertTrue  ( is_table(totable( m))  )
    assertEquals( matrix(totable(m )), m )
  end
end

-- performance test suite -----------------------------------------------------o

Test_Matrix = {}

--fill benchmark
function Test_Matrix:testFillGen2()
  local m = matrix(2)
  local r = 1..4
  local t0 = os.clock()
  for i=1,1e7 do
    m:fill(r)
  end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

function Test_Matrix:testFillScal2()
  local m = matrix(2)
  local t0 = os.clock()
  for i=1,1e7 do
    m:fill(1)
  end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

function Test_Matrix:testFillTab2()
  local m = matrix(2)
  local t = {1,2,3,4}
  local t0 = os.clock()
  for i=1,1e7 do
    m:fill(t)
  end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

function Test_Matrix:testFillGen3()
  local m = matrix(3)
  local r = 1..9
  local t0 = os.clock()
  for i=1,1e7 do
    m:fill(r)
  end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

function Test_Matrix:testFillScal3()
  local m = matrix(3)
  local t0 = os.clock()
  for i=1,1e7 do
    m:fill(1)
  end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

function Test_Matrix:testFillTab3()
  local m = matrix(3)
  local t = {1,2,3,4,5,6,7,8,9}
  local t0 = os.clock()
  for i=1,1e7 do
    m:fill(t)
  end
  local dt = os.clock() - t0
  assertAlmostEquals( dt, 0.5, 1 )
end

-- end ------------------------------------------------------------------------o

