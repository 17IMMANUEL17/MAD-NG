--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the matrix module.

 o-----------------------------------------------------------------------------o
]=]

local assertEquals, assertAlmostEquals, assertTrue, assertFalse,
      assertErrorMsgContains, assertNil, assertNaN, assertIsString, assertInf
      in require 'luaunit'

local vector, cvector, matrix, cmatrix, is_vector, is_matrix, is_cvector,
      is_cmatrix, isa_vector, isa_matrix, linspace, logspace in MAD

local complex, infi, tiny, eps, huge, inf, nan, pi, Pi,
      randomseed, log in MAD

-- regression test suite ------------------------------------------------------o

TestMatrix  = {}
TestCMatrix = {}

local m = {}
for j=1,10 do m[j] = matrix(10,10):random(randomseed(j)) end

local v = {}
for j=1,10 do v[j] = vector(10):random(randomseed(j)) end

local values = {
  num = { tiny, 2^-64, 2^-63, 2^-53, eps, 2^-52, 2*eps, 2^-32, 2^-31, 1e-9,
          0.1-eps, 0.1, 0.1+eps, 0.5, 0.7-eps, 0.7, 0.7+eps, 1-eps, 1, 1+eps,
          1.1, 1.7, 2, 10, 1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53,
          2^63, 2^64, huge },
}

function TestMatrix:testCtorMatrix()
  -- creation of matrices with different seeds
  local msg = {
  "invalid argument #1 or #2 (nrow[,ncol] or table [of tables] expected)",
  "bad argument #1 to 'mad_malloc' (cannot convert 'nil' to 'uint64_t')" ,
  }
  assertErrorMsgContains( msg[1], matrix, ''   )
  assertErrorMsgContains( msg[1], matrix, nil  )
  assertErrorMsgContains( msg[1], matrix, 0    )
  assertErrorMsgContains( msg[1], matrix,-1    )
  assertErrorMsgContains( msg[1], matrix, 1..2 )
  assertErrorMsgContains( msg[1], matrix, infi )
  assertErrorMsgContains( msg[1], matrix, nan  )
  assertErrorMsgContains( msg[2], matrix, inf  )

  for _,v in ipairs(v) do
    assertTrue( is_matrix(v) )
    assertTrue( is_vector(v) )
  end
  for _,m in ipairs(m) do
    assertTrue ( is_matrix(m) )
    assertFalse( is_vector(m) )
  end

end

function TestMatrix:testCtorCMatrix()
  local msg = {
  "invalid argument #1 or #2 (nrow[,ncol] or table [of tables] expected)",
  "bad argument #1 to 'mad_malloc' (cannot convert 'nil' to 'uint64_t')" ,
  }
  assertErrorMsgContains( msg[1], cmatrix, ''   )
  assertErrorMsgContains( msg[1], cmatrix, nil  )
  assertErrorMsgContains( msg[1], cmatrix, 0    )
  assertErrorMsgContains( msg[1], cmatrix,-1    )
  assertErrorMsgContains( msg[1], cmatrix, 1..2 )
  assertErrorMsgContains( msg[1], cmatrix, infi )
  assertErrorMsgContains( msg[1], cmatrix, nan  )
  assertErrorMsgContains( msg[2], cmatrix, inf  )

  --print( "\n" )
  --print( matrix(20,20):random(randomseed(0.1)) )
end

function TestMatrix:testIs_matrix()
  assertTrue ( is_matrix( matrix(2,2)) )
  assertFalse( is_matrix(cmatrix(2,2)) )
  assertTrue ( is_matrix( vector(1)  ) )
  assertFalse( is_matrix(cvector(1)  ) )
end

function TestMatrix:testIs_cmatrix()
  assertFalse( is_cmatrix( matrix(2,2)) )
  assertTrue ( is_cmatrix(cmatrix(2,2)) )
  assertFalse( is_cmatrix( vector(1)  ) )
  assertTrue ( is_cmatrix(cvector(1)  ) )
end

function TestMatrix:testIs_vector()
  assertFalse( is_vector( matrix(2,2)) )
  assertFalse( is_vector(cmatrix(2,2)) )
  assertTrue ( is_vector( vector(1)  ) )
  assertFalse( is_vector(cvector(1)  ) )
end

function TestMatrix:testIs_cvector()
  assertFalse( is_cvector( matrix(2,2)) )
  assertFalse( is_cvector(cmatrix(2,2)) )
  assertFalse( is_cvector( vector(1)  ) )
  assertTrue ( is_cvector(cvector(1)  ) )
end

function TestMatrix:testIsa_vector()
  assertFalse( isa_vector( matrix(2,2)) )
  assertFalse( isa_vector(cmatrix(2,2)) )
  assertTrue ( isa_vector( vector(1)  ) )
  assertTrue ( isa_vector(cvector(1)  ) )
end

function TestMatrix:testIsa_matrix()
  assertTrue ( isa_matrix( matrix(2,2)) )
  assertTrue ( isa_matrix(cmatrix(2,2)) )
  assertTrue ( isa_matrix( vector(1)  ) )
  assertTrue ( isa_matrix(cvector(1)  ) )
end

-- get, set -------------------------------------------------------------------o

-- all the special cases and then compering the values for generated matrices
-- with expected ones, how to reach expected val -- compare with tables of the same values

function TestMatrix:testGeti0()
  local msg = {
  "attempt to call a nil value",
  }
  assertErrorMsgContains( msg[1], geti0, m, nil   )

  assertEquals( m[1]:geti0( tiny), m[1]:geti0( 0) )
  assertEquals( m[1]:geti0( 0.1 ), m[1]:geti0( 0) )
  assertEquals( m[1]:geti0( eps ), m[1]:geti0( 0) )

  assertNil( m[1]:geti0( huge) )
  assertNil( m[1]:geti0( nan ) )
  assertNil( m[1]:geti0( inf ) )
  assertNil( m[1]:geti0(-1   ) )
end

function TestMatrix:testGeti()
  --assertNil( m[1]:geti(  ) )
  assertNil( m[1]:geti( huge) )
  assertNil( m[1]:geti( nan ) )
  assertNil( m[1]:geti( inf ) )
  assertNil( m[1]:geti(-1   ) )
  assertNil( m[1]:geti( 0   ) )
  assertNil( m[1]:geti( eps ) )

  assertEquals( m[1]:geti0( 1.1 ), m[1]:geti0( 1) )
end

function TestMatrix:testGet0()
  local msg = {
    "attempt to call a nil value",
    }
  assertErrorMsgContains( msg[1], get0, m[1], 0  , nil )
  assertErrorMsgContains( msg[1], get0, m[1], nil, 0   )

  assertNil( m[1]:get0( huge, 0   ) )
  assertNil( m[1]:get0( nan , 0   ) )
  assertNil( m[1]:get0( inf , 0   ) )
  assertNil( m[1]:get0(-1   , 0   ) )
  assertNil( m[1]:get0( 0   , huge) )
  assertNil( m[1]:get0( 0   , nan ) )
  assertNil( m[1]:get0( 0   , inf ) )
  assertNil( m[1]:get0( 0   ,-1   ) )

  --print( m[1]:get0( 0    , 0) )
end

function TestMatrix:testGet()
  local msg = {
    "attempt to call a nil value",
    }
  assertErrorMsgContains( msg[1], get0, m[1], 1  , nil )
  assertErrorMsgContains( msg[1], get0, m[1], nil, 1   )

  assertNil( m[1]:get( huge, 1   ) )
  assertNil( m[1]:get( nan , 1   ) )
  assertNil( m[1]:get( inf , 1   ) )
  assertNil( m[1]:get(-1   , 1   ) )
  assertNil( m[1]:get( 0   , 1   ) )
  assertNil( m[1]:get( 1   , huge) )
  assertNil( m[1]:get( 1   , nan ) )
  assertNil( m[1]:get( 1   , inf ) )
  assertNil( m[1]:get( 1   ,-1   ) )
  assertNil( m[1]:get( 1   , 0   ) )
end

-- sets have to use get in testing(get dependand)
function TestMatrix:testSeti0()
end

function TestMatrix:testSeti()
end

function TestMatrix:testSet0()
end

function TestMatrix:testSet()
end

-- should go after seti0
function TestMatrix:testLinspace()
  -- mess with step messeges, to be looked up
  local msg, l = {
  "attempt to perform arithmetic on local 'start'",
  "attempt to perform arithmetic on local 'stop' ",

  "invalid argument #1 or #2 (nrow[,ncol] or table [of tables] expected)",
  "bad argument #1 to 'mad_malloc' (cannot convert 'nil' to 'uint64_t'",
  "attempt to compare number with string",
  --"invalid argument #3 (size expected)"  ,
  }
  assertErrorMsgContains( msg[1], linspace, nil, 1   )
  assertErrorMsgContains( msg[1], linspace, '' , 1   )
  assertErrorMsgContains( msg[2], linspace, 1  , nil )
  assertErrorMsgContains( msg[2], linspace, 1  , ''  )

  assertErrorMsgContains( msg[3], linspace, 2  , 2  , 0   )
  assertErrorMsgContains( msg[3], linspace, 2  , 2  ,-1   )
  assertErrorMsgContains( msg[3], linspace, 2  , 2  , nan )
  assertErrorMsgContains( msg[3], linspace, 2  , 2  ,-nan )
  assertErrorMsgContains( msg[3], linspace, 2  , 2  ,-inf )
  assertErrorMsgContains( msg[4], linspace, 2  , 2  , inf )
  assertErrorMsgContains( msg[5], linspace, 2  , 2  , ''  )

  assertEquals( #linspace( 2  , 2  , nil)     , 100 )
  assertEquals(  linspace( 2  , 2  , nil)[1]  , 2   )
  assertEquals(  linspace( 2  , 2  , nil)[100], 2   )

  l = linspace( 2  ,-inf)  for i = 2, #l do assertInf( l[i] ) end assertNaN( l[1] )
  l = linspace( 2  , inf)  for i = 2, #l do assertInf( l[i] ) end assertNaN( l[1] )
  l = linspace( inf, 2  )  for i = 1, #l do assertNaN( l[i] ) end
  l = linspace(-inf, 2  )  for i = 1, #l do assertNaN( l[i] ) end
  l = linspace( 2  , nan)  for i = 1, #l do assertNaN( l[i] ) end
  l = linspace( nan, 2  )  for i = 1, #l do assertNaN( l[i] ) end
end

function TestMatrix:testLogspace()
-- investigate the values inside the logspace
--
  local msg, l = {
  "attempt to index local 'x' "  ,
  "attempt to call method 'log' ",
  "invalid argument #1 or #2 (nrow[,ncol] or table [of tables] expected)",
  "bad argument #1 to 'mad_malloc' (cannot convert 'nil' to 'uint64_t'",
  }

  assertErrorMsgContains( msg[1], logspace, nil, 1   )
  assertErrorMsgContains( msg[2], logspace, '' , 1   )  --attempt to call method 'log' ?
  assertErrorMsgContains( msg[1], logspace, 1  , nil )
  assertErrorMsgContains( msg[2], logspace, 1  , ''  )  --attempt to call method 'log' ?
  assertErrorMsgContains( msg[3], logspace, 2  ,2   ,-1  )
  assertErrorMsgContains( msg[3], logspace, 2  ,2   , 0  )
  assertErrorMsgContains( msg[3], logspace, 2  ,2   , nan)
  assertErrorMsgContains( msg[3], logspace, 2  ,2   ,-nan)
  assertErrorMsgContains( msg[3], logspace, 2  ,2   ,-inf)
  assertErrorMsgContains( msg[4], logspace, 2  ,2   , inf)

  assertEquals( #logspace( 2  , 2  , nil)     , 100 )
  assertEquals(  logspace( 2  , 2  , nil)[1]  , 2   ) -- shouldn't it be log(2) ?
  assertEquals(  logspace( 2  , 2  , nil)[100], 2   )

  l = logspace( 2  ,-inf)  for i = 1, #l do assertNaN( l[i] ) end
  l = logspace( 2  , inf)  for i = 2, #l do assertInf( l[i] ) end assertNaN( l[1] )
  l = logspace( inf, 2  )  for i = 1, #l do assertNaN( l[i] ) end
  l = logspace(-inf, 2  )  for i = 1, #l do assertNaN( l[i] ) end
  l = logspace( 2  , nan)  for i = 1, #l do assertNaN( l[i] ) end
  l = logspace( nan, 2  )  for i = 1, #l do assertNaN( l[i] ) end

end
--[[
-- size, same -----------------------------------------------------------------o

function TestMatrix:testNrow()   end
function TestMatrix:testNcol()   end
function TestMatrix:testSize()   end
function TestMatrix:testSizes()  end
function TestMatrix:testTsizes() end

function TestMatrix:testSame() end

function TestMatrix:testCopy() end
function TestCMatrix:testCopy() end

function TestMatrix:testZeros() end
function TestCMatrix:testZeros() end

function TestMatrix:testOnes() end
function TestMatrix:testEye() end
function TestMatrix:testRandom() end

function TestMatrix:testSymp() end
function TestMatrix:testCirc() end
function TestMatrix:testFill() end

function TestMatrix:testVshape() end
function TestMatrix:testReshape() end

-- getx, setx -----------------------------------------------------------------o

function TestMatrix:testGetv() end
function TestMatrix:testSetv() end
function TestMatrix:testGetdiag() end
function TestMatrix:testSetdiag() end

function TestMatrix:testGetrow() end
function TestMatrix:testSetrow() end

function TestMatrix:testGetcol() end
function TestMatrix:testSetcol() end

function TestMatrix:testGetsub() end
function TestMatrix:testSetsub() end

-- foreach, filter, map, fold, scan -------------------------------------------o

function TestMatrix:testForeach() end
function TestMatrix:testFilter() end
function TestMatrix:testMapat() end
function TestMatrix:testMap() end
function TestMatrix:testMap2() end
function TestMatrix:testMap3() end

function TestMatrix:testFoldl() end
function TestMatrix:testFoldr() end

function TestMatrix:testScanl() end
function TestMatrix:testScanr() end

-- special maps ---------------------------------------------------------------o

function TestMatrix:testCeil () end
function TestMatrix:testFloor() end
function TestMatrix:testFrac () end
function TestMatrix:testTrunc() end
function TestMatrix:testRound() end

function TestMatrix:testAbs  () end
function TestMatrix:testSqrt () end
function TestMatrix:testExp  () end
function TestMatrix:testLog  () end
function TestMatrix:testLog10() end

function TestMatrix:testSin () end
function TestMatrix:testCos () end
function TestMatrix:testTan () end
function TestMatrix:testSinh() end
function TestMatrix:testCosh() end
function TestMatrix:testTanh() end

function TestMatrix:testAsin () end
function TestMatrix:testAcos () end
function TestMatrix:testAtan () end
function TestMatrix:testAsinh() end
function TestMatrix:testAcosh() end
function TestMatrix:testAtanh() end

function TestMatrix:testErf   () end
function TestMatrix:testTgamma() end
function TestMatrix:testLgamma() end

function TestMatrix:testCarg () end
function TestMatrix:testReal () end
function TestMatrix:testImag () end
function TestMatrix:testConj () end
function TestMatrix:testProj () end
function TestMatrix:testRect () end
function TestMatrix:testPolar() end

-- special folds --------------------------------------------------------------o

function TestMatrix:testMin() end
function TestMatrix:testMax() end
function TestMatrix:testSum() end
function TestMatrix:testSumabs() end
function TestMatrix:testSumsqr() end
function TestMatrix:testProduct() end
function TestMatrix:testAll() end
function TestMatrix:testAny() end

-- conjugate, transpose -------------------------------------------------------o

function TestMatrix:testTranspose() end
function TestCMatrix:testTranspose() end

function TestMatrix:testTrace() end

-- symplectic matrix ----------------------------------------------------------o

function TestMatrix:testSympinv() end
function TestCMatrix:testSympinv() end

function TestMatrix:testSymperr() end
function TestCMatrix:testSymperr() end

-- inner, cross, mixed, outer -------------------------------------------------o

function TestMatrix:testInner() end
function TestCMatrix:testInner() end

function TestMatrix:testCross() end
function TestMatrix:testMixed() end
function TestMatrix:testOuter() end

-- norm, unit, center, angle (in place) ---------------------------------------o

function TestMatrix:testNorm() end
function TestCMatrix:testNorm() end

function TestMatrix:testDistance() end
function TestCMatrix:testDistance() end

function TestMatrix:testUnit() end
function TestCMatrix:testUnit() end

function TestMatrix:testCenter() end
function TestCMatrix:testCenter() end

function TestMatrix:testAngle() end

-- operators ------------------------------------------------------------------o

function TestMatrix:testEq() end

function TestMatrix:testAddCPx() end
function TestMatrix:testAdd() end
function TestCMatrix:testAddCPx() end
function TestCMatrix:testAdd() end

function TestMatrix:testSubCPx() end
function TestMatrix:testSub() end
function TestCMatrix:testSubCPx() end
function TestCMatrix:testSub() end

function TestMatrix:testMulCPx() end
function TestMatrix:testMul() end
function TestCMatrix:testMulCPx() end
function TestCMatrix:testMul() end

function TestMatrix:testTmul() end
function TestCMatrix:testTmul() end

function TestMatrix:testDivCPx() end
function TestMatrix:testDiv() end
function TestCMatrix:testDivCPx() end
function TestCMatrix:testDiv() end

function TestMatrix:testEmul() end
function TestCMatrix:testEmul() end
function TestMatrix:testEdiv() end
function TestCMatrix:testEdiv() end

-- linear algebra -------------------------------------------------------------o

function TestMatrix:testSolve() end
function TestMatrix:testSvd() end
function TestCMatrix:testSvd() end

function TestMatrix:testEigen() end
function TestCMatrix:testEigen() end

-- FFT, convolution, correlation, covrariance ---------------------------------o

function TestMatrix:testFft() end
function TestMatrix:testIfft() end
function TestMatrix:testRfft() end
function TestMatrix:testIrfft() end

 -- convolution theorem
function TestMatrix:testConv() end
function TestCMatrix:testConv() end

 -- correlation theorem
function TestMatrix:testCorr() end
function TestCMatrix:testCorr() end
function TestMatrix:testCovar() end
]]

-- end ------------------------------------------------------------------------o
