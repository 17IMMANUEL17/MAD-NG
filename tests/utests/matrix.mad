--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix module regression tests - real matrices
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the matrix module.

 o-----------------------------------------------------------------------------o
]=]

local assertEquals, assertAlmostEquals, assertTrue, assertFalse,
      assertErrorMsgContains, assertNil, assertNaN, assertIsString, assertInf
      in require 'luaunit'

local vector, cvector, matrix, cmatrix, is_vector, is_matrix, is_cvector,
      is_cmatrix, isa_vector, isa_matrix, linspace, logspace in MAD

local complex, range, nrange, nlogrange,infi, tiny, eps, huge, inf, nan, pi, Pi,
      randomseed, abs, log, min, totable, is_complex, is_cdata, is_table,
      is_nil, is_string in MAD

-- locals ---------------------------------------------------------------------o

local mth = \f,s,... s[f](s,...)

local values = {
  num = { tiny, 2^-64, 2^-63, 2^-53, eps, 2^-52, 2*eps, 2^-32, 2^-31, 1e-9,
          0.1-eps, 0.1, 0.1+eps, 0.5, 0.7-eps, 0.7, 0.7+eps, 1-eps, 1, 1+eps,
          1.1, 1.7, 2, 10, 1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53,
          2^63, 2^64, huge },
}

local s = {}

s.mat   = {}
s.size  = {}
s.empty = {}
for nr=1,5 do
  for nc=1,5 do
    s.mat  [(nr-1)*5+nc] = matrix(nr,nc):fill(1..nr*nc)
    s.empty[(nr-1)*5+nc] = matrix(nr,nc)
    s.size [(nr-1)*5+nc] = {nr,nc}
  end
end

-- regression test suites -----------------------------------------------------o

TestMatrix    = {}
TestMatrixErr = {}

TestMatrixGet = {}
TestMatrixSet = {}

TestMatrixInPlace = {}
TestMatrixFun     = {}

TestMatrixSMaps  = {}
TestMatrixSFolds = {}
TestMatrixSScans = {}

TestMatrixSympl  = {}
TestMatrixLinAlg = {}
TestMatrixOp     = {}
TestMatrixLapack = {}
TestMatrixFFT    = {}

function TestMatrixErr:testCtor()
end

function TestMatrix:testCtor()
end

function TestMatrixErr:testCtorFromtable()
  local msg = {
  "invalid argument #1 (non-empty table expected)",
  "cannot convert 'string' to 'double'"           ,
  "cannot convert 'string' to 'complex'"          ,
  }
  assertErrorMsgContains( msg[1],  matrix, {nil} )
  assertErrorMsgContains( msg[2],  matrix, {''}  )
end

function TestMatrix:testCtorFromtable() --TODO
end

function TestMatrix:testCdataType()
  local m, v, m1 = matrix(2), vector(2), matrix(1)
  assertTrue ( is_matrix ( m ) )
  assertTrue ( is_matrix ( v ) )
  assertFalse( is_vector ( m ) )
  assertTrue ( is_vector ( v ) )
  assertFalse( is_cmatrix( m ) )
  assertFalse( is_cmatrix( v ) )
  assertFalse( is_cvector( m ) )
  assertFalse( is_cvector( v ) )
  assertFalse( isa_vector( m ) )
  assertTrue ( isa_vector( v ) )
  assertTrue ( isa_matrix( m ) )
  assertTrue ( isa_matrix( v ) )
end

function TestMatrixErr:testLinspace() end
function TestMatrix:testLinspace() end

function TestMatrixErr:testLogspace() end
function TestMatrix:testLogspace() end

function TestMatrixErr:testSame() end
function TestMatrix:testSame() end

-- get, set -------------------------------------------------------------------o

function TestMatrixSet:setUp()
  self.mat   = {}
  self.empty = {}
  for nr=1,5 do
    for nc=1,5 do
      self.mat  [(nr-1)*5+nc] = matrix(nr,nc):fill(1..nr*nc)
      self.empty[(nr-1)*5+nc] = matrix(nr,nc)
    end
  end
end

function TestMatrixErr:testGeti0() end
function TestMatrixGet:testGeti0() end

function TestMatrixErr:testGeti() end
function TestMatrixGet:testGeti()    end

function TestMatrixErr:testGet0() end
function TestMatrixGet:testGet0()    end

function TestMatrixErr:testGet() end
function TestMatrixGet:testGet()    end

function TestMatrixErr:testSeti0() end
function TestMatrixSet:testSeti0() end

function TestMatrixErr:testSeti() end
function TestMatrixSet:testSeti() end

function TestMatrixErr:testSet0() end
function TestMatrixSet:testSet0() end

function TestMatrixErr:testSet() end
function TestMatrixSet:testSet() end

-- getx, setx -----------------------------------------------------------------o

function TestMatrixErr:testGetsub() end
function TestMatrixGet:testGetsub() end

function TestMatrixErr:testSetsub() end
function TestMatrixSet:testSetsub() end

function TestMatrixErr:testGetv() end
function TestMatrixGet:testGetv() end

function TestMatrixErr:testSetv() end
function TestMatrixSet:testSetv() end

function TestMatrixErr:testGetdiag() end
function TestMatrixGet:testGetdiag() end

function TestMatrixErr:testSetdiag()end
function TestMatrixSet:testSetdiag()end

function TestMatrixErr:testGetrow()end
function TestMatrixGet:testGetrow()end

function TestMatrixErr:testSetrow()end
function TestMatrixSet:testSetrow()end

function TestMatrixErr:testGetcol()end
function TestMatrixGet:testGetcol()end

function TestMatrixErr:testSetcol()end
function TestMatrixSet:testSetcol()end

-- size, same -----------------------------------------------------------------o

function TestMatrix:testNrow()
  for i,m in ipairs(s.mat) do
    assertEquals( m:nrow(), s.size[i][1] )
  end
end

function TestMatrix:testNcol()
  for i,m in ipairs(s.mat) do
    assertEquals( m:ncol(), s.size[i][2] )
  end
end

function TestMatrix:testSize()
  for i,m in ipairs(s.mat) do
    assertEquals( m:size(), s.size[i][1]*s.size[i][2] )
  end
end

function TestMatrix:testSizes()
  for i,m in ipairs(s.mat) do
    assertEquals( {m:sizes()}, s.size[i] )
  end
end

function TestMatrix:testTsizes()
  for i,m in ipairs(s.mat) do
    assertEquals( {m:tsizes()}, {s.size[i][2], s.size[i][1]} )
  end
end

function TestMatrixInPlace:setUp()
  self.mat   = {}
  for nr=1,5 do
    for nc=1,5 do
      self.mat  [(nr-1)*5+nc] = matrix(nr,nc):fill(1..nr*nc)
    end
  end
end

function TestMatrixErr:testRandom() end
function TestMatrixInPlace:testRandom() end

function TestMatrixErr:testFill() end
function TestMatrixInPlace:testFill() end

function TestMatrixErr:testCopy() end
function TestMatrix:testCopy() end

function TestMatrixInPlace:testZeros()
  local m1
  for _,m in ipairs(self.mat) do
    m1 = m:zeros()
    for i=1,m:size() do assertEquals( m1:geti(i), 0 ) end
  end
end

function TestMatrixInPlace:testOnes()
  for _,m in ipairs(self.mat) do
    m:ones()
    for i=1,m:size() do assertEquals( m:geti(i), 1 ) end
  end
end

function TestMatrixInPlace:testEye()
  for i,m in ipairs(self.mat) do
    m:eye()
    for i=1,m.nr do
    for j=1,m.nc do
      if i==j then assertEquals( m:get(i,j), 1 )
      else         assertEquals( m:get(i,j), 0 ) end
    end end
  end
end

function TestMatrixErr:testSymp() end
function TestMatrix:testSymp() end

function TestMatrixErr:testCirc() end
function TestMatrix:testCirc() end

function TestMatrixErr:testReshape() end
function TestMatrixInPlace:testReshape() end

-- foreach, filter, map, fold, scan -------------------------------------------o

function TestMatrixFun:testForeach() end
function TestMatrixFun:testFilter() end
function TestMatrixFun:testMapat() end
function TestMatrixFun:testMap() end
function TestMatrixFun:testMap2() end
function TestMatrixFun:testMap3() end
function TestMatrixFun:testFoldl() end
function TestMatrixFun:testFoldr() end
function TestMatrixFun:testScanl() end
function TestMatrixFun:testScanr() end

function TestMatrixErr:testForeach() end
function TestMatrixErr:testFilter() end
function TestMatrixErr:testMapat() end
function TestMatrixErr:testMap() end
function TestMatrixErr:testMap2() end
function TestMatrixErr:testMap3() end
function TestMatrixErr:testFoldl() end
function TestMatrixErr:testFoldr() end
function TestMatrixErr:testScanl() end
function TestMatrixErr:testScanr() end

-- special maps ---------------------------------------------------------------o

function TestMatrixSMaps:testCeil () end
function TestMatrixSMaps:testFloor() end
function TestMatrixSMaps:testFrac () end
function TestMatrixSMaps:testTrunc() end
function TestMatrixSMaps:testRound() end
function TestMatrixSMaps:testAbs  () end
function TestMatrixSMaps:testSqrt () end
function TestMatrixSMaps:testExp  () end
function TestMatrixSMaps:testLog  () end
function TestMatrixSMaps:testLog10() end
function TestMatrixSMaps:testSin () end
function TestMatrixSMaps:testCos () end
function TestMatrixSMaps:testTan () end
function TestMatrixSMaps:testSinh() end
function TestMatrixSMaps:testCosh() end
function TestMatrixSMaps:testTanh() end
function TestMatrixSMaps:testAsin () end
function TestMatrixSMaps:testAcos () end
function TestMatrixSMaps:testAtan () end
function TestMatrixSMaps:testAsinh() end
function TestMatrixSMaps:testAcosh() end
function TestMatrixSMaps:testAtanh() end
function TestMatrixSMaps:testErf   () end
function TestMatrixSMaps:testTgamma() end
function TestMatrixSMaps:testLgamma() end
function TestMatrixSMaps:testCarg () end
function TestMatrixSMaps:testReal () end
function TestMatrixSMaps:testImag () end
function TestMatrixSMaps:testConj () end
function TestMatrixSMaps:testProj () end
function TestMatrixSMaps:testRect () end
function TestMatrixSMaps:testPolar() end

-- special scans --------------------------------------------------------------o

function TestMatrixSScans:testAccmin    () end
function TestMatrixSScans:testAccmax    () end
function TestMatrixSScans:testAccsum    () end
function TestMatrixSScans:testAccsumabs () end
function TestMatrixSScans:testAccsumsqr () end
function TestMatrixSScans:testAccprod   () end
function TestMatrixSScans:testAccsum    () end
function TestMatrixSScans:testRaccmin   () end
function TestMatrixSScans:testRaccmax   () end
function TestMatrixSScans:testRaccsum   () end
function TestMatrixSScans:testRaccsumabs() end
function TestMatrixSScans:testRaccsumsqr() end
function TestMatrixSScans:testRaccprod  () end

-- special folds --------------------------------------------------------------o

function TestMatrixSFolds:testMin() end
function TestMatrixSFolds:testMax() end
function TestMatrixSFolds:testSum() end
function TestMatrixSFolds:testSumabs() end
function TestMatrixSFolds:testSumsqr() end
function TestMatrixSFolds:testProduct() end
function TestMatrixSFolds:testAll() end
function TestMatrixSFolds:testAny() end

-- symplectic matrix ----------------------------------------------------------o

function TestMatrixSympl:testSympinv() end
function TestMatrixSympl:testSymperr() end

-- conjugate, transpose -------------------------------------------------------o

function TestMatrixLinAlg:testTranspose() end
function TestMatrixLinAlg:testTrace() end

-- inner, cross, mixed, outer -------------------------------------------------o

function TestMatrixLinAlg:testInner() end
function TestMatrixLinAlg:testCross() end
function TestMatrixLinAlg:testMixed() end
function TestMatrixLinAlg:testOuter() end

-- norm, unit, center, angle (in place) ---------------------------------------o

function TestMatrixLinAlg:testNorm() end
function TestMatrixLinAlg:testDistance() end
function TestMatrixLinAlg:testUnit() end
function TestMatrixLinAlg:testCenter() end
function TestMatrixLinAlg:testAngle() end

function TestMatrixErr:testDistance() end
function TestMatrixErr:testUnit() end
function TestMatrixErr:testAngle() end

-- operators ------------------------------------------------------------------o

function TestMatrixOp:testEq() end

function TestMatrixOp:testAddCPx() end

function TestMatrixErr:testAdd()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
  }
end
function TestMatrixOp:testAdd() end

function TestMatrixOp:testSubCPx() end

function TestMatrixErr:testSub()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
  }
end
function TestMatrixOp:testSub() end

function TestMatrixOp:testMulCPx() end

function TestMatrixErr:testMul()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
  }
end
function TestMatrixOp:testMul() end

function TestMatrixErr:testTmul()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
  }
end
function TestMatrixOp:testTmul() end

function TestMatrixOp:testDivCPx() end

function TestMatrixErr:testDiv()
  local msg = {
    "invalid arguments (unsupported matrix operation)",
  }
end
function TestMatrixOp:testDiv() end

function TestMatrixErr:testEmul()
  local msg = {
    "invalid argument #2 (matrix expected)",
  }
end
function TestMatrixOp:testEmul() end

function TestMatrixErr:testEdiv()
  local msg = {
    "invalid argument #2 (matrix expected)",
  }
end
function TestMatrixOp:tetEdiv() end

-- linear algebra -------------------------------------------------------------o

function TestMatrixLapack:testSolve() end
function TestMatrixLapack:testSvd() end

function TestMatrixLapack:testEigen() end
function TestMatrixErr:testEigen()
  local msg = {
    "matrix must be square",
  }
end

-- FFT, convolution, correlation, covrariance ---------------------------------o

function TestMatrixFFT:testFft() end
function TestMatrixFFT:testIfft() end

function TestMatrixErr:testRfft()
  local msg = {
    "incompatible matrix sizes",
  }
end
function TestMatrixFFT:testRfft() end

function TestMatrixErr:testIrfft()
  local msg = {
    "result matrix must be real",
    "incompatible matrix sizes" ,
  }
end
function TestMatrixFFT:testIrfft() end

 -- convolution theorem
function TestMatrixFFT:testConv() end

 -- correlation theorem
function TestMatrixFFT:testCorr() end
function TestMatrixFFT:testCovar() end

-- concatenation --------------------------------------------------------------o

function TestMatrixErr:testConcat()
  local msg = {
    "invalid argument #1 (matrix expected)"               ,
    "invalid argument #2 (matrix expected)"               ,
    "incompatible matrix sizes"                           ,
    "invalid argument #3 (string 'row' or 'col' expected)",
  }
end
function TestMatrix:testConcat() end

-- end ------------------------------------------------------------------------o
