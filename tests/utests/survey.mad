--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the survey module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertEquals in require 'luaunit'
local survey, option, load in MAD

-- regression test suite ------------------------------------------------------o

local lhcb1, lhcb2

TestSurvey = {}

function TestSurvey:setUp (self)
  if is_nil(lhcb1) then
    load 'lhc_as-built_gen'
    load 'lhc_as-built_set'
    load 'lhc_uvar_gen'
    load 'opt_inj_gen'

    lhcb1, lhcb2 = MADX.lhcb1, MADX.lhcb2
    assertEquals(#lhcb1, 6675)
    assertEquals(#lhcb2, 6674)
  end

  self.fmt = option.format
  option.format = "%-18.10g" -- MAD-X default output
end

function TestSurvey:tearDown (self)
  option.format = self.fmt
end

function TestSurvey:testSurveyLHC1()
  local tbl = survey { sequence=lhcb1 }
  assertEquals(#tbl, 13267)
  tbl:write('survey_lhcb1')
end

function TestSurvey:testSurveyLHC2()
  local tbl = survey { sequence=lhcb2 }
  assertEquals(#tbl, 13265)
  tbl:write('survey_lhcb2')
end

function TestSurvey:testSurveyIterLHC1()
  local tbl, map
  for i=1,#lhcb1 do
    tbl, map = survey { sequence=lhcb1, range=i, table=tbl, map=map }
  end
  assertEquals(#tbl, 13267)
  tbl:write('survey_lhcb1_iter')
 end

function TestSurvey:testSurveyIterLHC2()
  local tbl, map
  for i=1,#lhcb2 do
    tbl, map = survey { sequence=lhcb2, range=i, table=tbl, map=map }
  end
  assertEquals(#tbl, 13265)
  tbl:write('survey_lhcb2_iter')
 end

function TestSurvey:testSurveyRangeLHC1()
  local tbl = survey { sequence=lhcb1, range={'IP2','IP3'} }
  tbl:write('survey_lhcb1_range')
end

function TestSurvey:testSurveyRangeLHC2()
  local tbl = survey { sequence=lhcb2, range={'IP2','IP3'} }
  tbl:write('survey_lhcb2_range')
end

function TestSurvey:testSurveyRangeIterLHC1()
  local tbl, map
  local start, stop = lhcb1:index_of'IP2', lhcb1:index_of'IP3'
  for i=start,stop do
    tbl, map = survey { sequence=lhcb1, range=i, table=tbl, map=map }
  end
  tbl:write('survey_lhcb1_range_iter')
end

function TestSurvey:testSurveyRangeIterLHC2()
  local tbl, map
  local start, stop = lhcb2:index_of'IP2', lhcb2:index_of'IP3'
  for i=start,stop do
    tbl, map = survey { sequence=lhcb2, range=i, table=tbl, map=map }
  end
  tbl:write('survey_lhcb2_range_iter')
end

-- end ------------------------------------------------------------------------o
