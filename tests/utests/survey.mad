--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the survey module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains in MAD.utest

local survey, option  in MAD
local observe         in MAD.element.flags

-- regression test suite ------------------------------------------------------o

TestSurvey = {}

local function loadLHC()
  if TestSurvey.LHC ~= 'loaded' then
    assertNotNil(require 'lhc_as-built_gen')
    assertNotNil(require 'lhc_as-built_set')
    assertNotNil(require 'lhc_undefvar'    )
    assertNotNil(require 'opt_inj_gen'     )

    local lhcb1, lhcb2 in MADX
    assertEquals(#lhcb1, 6677)
    assertEquals(#lhcb2, 6676)

    lhcb1:select(observe)
    lhcb2:select(observe)

    TestSurvey.LHC = 'loaded'
  end
  return MADX.lhcb1, MADX.lhcb2
end

function TestSurvey:setUp ()
  self.optfmt = option.format
  option.format = "%-18.11g"
end

function TestSurvey:tearDown ()
  option.format = self.optfmt
  if MADX:is_open_env() == true then
    MADX:reset_env()
  end
end

function TestSurvey:testSurveyLHC1()
  local lhcb1 = loadLHC()
  local tbl = survey { sequence=lhcb1 }
  assertEquals(#tbl, 13269)
  tbl:write 'survey_lhcb1'
end

function TestSurvey:testSurveyLHC2()
  local _, lhcb2 = loadLHC()
  local tbl = survey { sequence=lhcb2 }
  assertEquals(#tbl, 13267)
  tbl:write 'survey_lhcb2'
end

function TestSurvey:testSurveyNoDriftLHC1()
  local lhcb1 = loadLHC()
  local tbl = survey { sequence=lhcb1, drift=false }
  assertEquals(#tbl, 6677)
  tbl:write 'survey_lhcb1_nd'
end

function TestSurvey:testSurveyNoDriftLHC2()
  local _, lhcb2 = loadLHC()
  local tbl = survey { sequence=lhcb2, drift=false }
  assertEquals(#tbl, 6676)
  tbl:write 'survey_lhcb2_nd'
end

function TestSurvey:testSurveyIterLHC1()
  local lhcb1 = loadLHC()
  local tbl, map
  for i=1,#lhcb1 do
    tbl, map = survey { sequence=lhcb1, range=i, mtable=tbl, mflow=map }
  end
  assertEquals(#tbl, 13269)
  tbl:write 'survey_lhcb1_iter'
 end

function TestSurvey:testSurveyIterLHC2()
  local _, lhcb2 = loadLHC()
  local tbl, map
  for i=1,#lhcb2 do
    tbl, map = survey { sequence=lhcb2, range=i, mtable=tbl, mflow=map }
  end
  assertEquals(#tbl, 13267)
  tbl:write 'survey_lhcb2_iter'
 end

function TestSurvey:testSurveyRangeLHC1()
  local lhcb1 = loadLHC()
  local tbl = survey { sequence=lhcb1, range={'IP2','IP3'} }
  tbl:write 'survey_lhcb1_range'
end

function TestSurvey:testSurveyRangeLHC2()
   local _, lhcb2 = loadLHC()
 local tbl = survey { sequence=lhcb2, range={'IP2','IP3'} }
  tbl:write 'survey_lhcb2_range'
end

function TestSurvey:testSurveyRangeSetLHC1()
  local lhcb1 = loadLHC()
  local survey_ip23 = survey { sequence=lhcb1, range={'IP2','IP3'}, exec=false }
  lhcb1:set { survey_ip23 := survey_ip23 {} }
  local tbl = lhcb1.survey_ip23
  tbl:write 'survey_lhcb1_range_method'
  lhcb1:set { survey_ip23 = nil }
end

function TestSurvey:testSurveyRangeSetLHC2()
  local _, lhcb2 = loadLHC()
  local survey_ip23 = survey { sequence=lhcb2, range={'IP2','IP3'}, exec=false }
  lhcb2:set { survey_ip23 := survey_ip23 {} }
  local tbl = lhcb2.survey_ip23
  tbl:write 'survey_lhcb2_range_method'
  lhcb2:set { survey_ip23 = nil }
end

function TestSurvey:testSurveyRangeIterLHC1()
  local lhcb1 = loadLHC()
  local tbl, map
  for i in lhcb1:iter{'IP2','IP3'} do
    tbl, map = survey { sequence=lhcb1, range=i, mtable=tbl, mflow=map }
  end
  tbl:write 'survey_lhcb1_range_iter'
end

function TestSurvey:testSurveyRangeIterLHC2()
  local _, lhcb2 = loadLHC()
  local tbl, map
  for i in lhcb2:iter{'IP2','IP3'} do
    tbl, map = survey { sequence=lhcb2, range=i, mtable=tbl, mflow=map }
  end
  tbl:write 'survey_lhcb2_range_iter'
end

-- From Irina's code

function TestSurvey:testFODO()
  local drift, marker, quadrupole, sequence in MAD.element
  local lcell  = 20
  local lquad  = 5

  local kqf  =  1.4631475E-02
  local kqd  = -1.4643443E-02

  local ip   = marker 'ip' {}
  local qf   = quadrupole 'qf' { l = lquad, k1 := kqf, tilt = 4e-6 }
  local qd   = quadrupole 'qd' { l = lquad, k1 := kdf }

  local seq = sequence 'fodo1' { l = lcell, refer = 'entry',
    ip 'IP1' { at = 0 },
    qf 'QF1' { at = 0 },
    qd 'QD1' { at = 15 },
    ip 'IP2' { at = lcell },
  }
  assertEquals(seq.direction, 1)
  seq:select(observe)

  local tbl = survey { sequence=seq, X0={-1e-4, 2e-6, 0}, A0={0, 0, 3e-7} }
--check quad 'QF1'
  actual   = { tbl.QF1.angle, tbl.QF1.tilt, tbl.QF1.x, tbl.QF1.y, tbl.QF1.z, tbl.QF1.theta, tbl.QF1.phi, tbl.QF1.psi, tbl.QF1.globaltilt }
  expected = { 0               , 4e-6            , -1e-4       , 2e-6        , 5           , 0               , 0             , 3e-7          , 4.3e-6}
  margin   = { 0               , 0               , 1e-15       , 1e-15       , 0           , 0               , 0             , 0             , 1e-21}
  assertAllAlmostEquals (actual, expected, margin)
--check the whole cell
  actual   = { tbl.angle[#tbl], tbl.tilt [#tbl], tbl.x[#tbl], tbl.y[#tbl], tbl.z[#tbl], tbl.theta[#tbl], tbl.phi[#tbl], tbl.psi[#tbl], tbl.globaltilt[#tbl]}
  expected = { 0              , 0              , -1e-4      , 2e-6       , lcell      , 0              , 0            , 3e-7         , 3e-7}
  margin   = { 0              , 0              , 1e-15      , 1e-15      , 0          , 0              , 0            , 0            , 0}
  assertAllAlmostEquals (actual, expected, margin)
end

function TestSurvey:testFODODir()
  local drift, marker, quadrupole, sequence  in MAD.element
  local lcell  = 20
  local lquad  = 5

  local ip   = marker 'ip' {}
  local kqf  =  1.4631475E-02
  local kqd  = -1.4643443E-02
  local qf   = quadrupole 'qf'{ l=lquad, k1:= kqf, tilt=0.3}
  local qd   = quadrupole 'qd'{ l=lquad, k1:= kdf }

  local seq = sequence 'fodo1' {l = lcell, refer = 'entry',
    ip 'IP1' { at = 0     },
    qf 'QF1' { at = 0},
    qd 'QD1' { at = 15},
    ip 'IP2' { at = lcell },
  }
  assertEquals(seq.direction, 1)
  seq:select(observe)

  local tbl = survey { sequence=seq, X0={0, 0, 0}, A0={0, 0, 0}}

  option.format = "%-18.16g"
  tbl:write('fodo_p1')
  seq.direction = -1
  assertEquals(seq.direction, -1)
  option.format = "%-18.16g"
  tbl:write('fodo_m1')
end

function TestSurvey:testFODOPatch()
  local drift, marker, quadrupole, srotation, sequence in MAD.element
  local lcell = 20
  local lquad = 5
  local kqf =  1.4631475E-02
  local kqd = -1.4643443E-02

  local ip = marker 'ip' {}
  local qf = quadrupole 'qf'{ l=lquad, k1:=kqf, tilt=0.3 }
  local qd = quadrupole 'qd'{ l=lquad, k1:=kdf }
  local sr = srotation { tilt=0.03 }
  local seq = sequence 'fodo1' { l=lcell, refer='entry',
    ip 'IP1' { at = 0 },
    sr 'SR1' { at = 0 },
    qf 'QF1' { at = 0 },
    qd 'QD1' { at = 15},
    ip 'IP2' { at = lcell },
  }
  assertEquals(seq.direction, 1)
  seq:select(observe)

  local tbl = survey { sequence=seq, X0={0.01, -0.02, 0}, A0={0, 0, 0}}
  local actual   = { tbl.angle[#tbl], tbl.tilt[#tbl], tbl.x[#tbl], tbl.y[#tbl], tbl.z[#tbl], tbl.theta[#tbl], tbl.phi[#tbl], tbl.psi[#tbl], tbl.globaltilt[#tbl]}
  local expected = { 0              , 0             , 0.01       , -0.02      , lcell      , 0              , 0            , 0            , 0}
  local margin   = { 0              , 0             , 1e-15      , 1e-15      , 0          , 0              , 0            , 0            , 0}
  assertAllAlmostEquals (actual, expected, margin)

--dir =-1
  seq.direction = -1
  assertEquals(seq.direction, -1)
  actual   = { tbl.angle[#tbl], tbl.tilt [#tbl], tbl.x[#tbl], tbl.y[#tbl], tbl.z[#tbl], tbl.theta[#tbl], tbl.phi[#tbl], tbl.psi[#tbl], tbl.globaltilt[#tbl]}
  expected = { 0              , 0              , 0.01       , -0.02      , lcell      , 0              , 0            , 0            , 0}
  margin   = { 0              , 0              , 1e-15      , 1e-15      , 0          , 0              , 0            , 0            , 0}
  assertAllAlmostEquals (actual, expected, margin)
end


function TestSurvey:testSPSLine()
  local pi in math
  local marker, drift, monitor, hkicker, vkicker, multipole in MAD.element
  local sbend, quadrupole,  sextupole, patch, sequence      in MAD.element

-- total length
  local circum = 6912.0
-- number of cells and therefore cell length
  local ncell  = 108
  local lcell  = circum/ncell
--lengths of elements and half lengths
  local lsb    = 3.       -- arc length of dipole
  local lquad  = 3.085
  local lquad2 = lquad/2.
  local lsex   = 1.0
--marker
  local ip  = marker     'ip'{}
--drift (just to check if it works and gives the same results)
  local dr = drift      'dr'{}
--sbend
--  local asb = 0.010    -- angle
  local asb = 2.0*pi/(8*108)
--  local sb  = sbend     'sb'{ l:=lsb, angle = asb }
  local sb  = multipole     'sb'{ knl = asb }
--quads
  local kqf  =  1.4631475E-02
  local kqd  = -1.4643443E-02
  local qf  = quadrupole 'qf'{ l=lquad, k1:= kqf }
  local qd  = quadrupole 'qd'{ l=lquad, k1:= kdf }
--sextupole
  local ksf =  2.0284442E-02
  local ksd = -3.8394267E-02
  local sf  = sextupole 'sf' {l=lsex,  k2:=ksf}
  local sd  = sextupole 'sd' {l=lsex,  k2:=ksd}
-- orbit correctors and beam position monitors
  local bpm = monitor 'bpm'  {l=0.1}
  local ch  = hkicker 'ch'   {l=0.1}
  local cv  = vkicker 'vh'   {l=0.1}
--sequence
  local seq = sequence 'fodo1' {l = lcell, dir =1, refer = 'centre',
      ip  'IP1'  { at = 0        },
      qf  'QF1'  { at = lquad2},
      sf  'SF1'  { at = lquad2   +  2.5},
      ch  'CH1'  { at = lquad2   +  3.1},
      bpm 'BPM1' { at = lquad2   +  3.2},
      sb  'SB1'  { at = lquad2   +  3.5},
      sb  'SB2'  { at = lquad2   +  9.9},
      sb  'SB3'  { at = lquad2   +  22.1},
      sb  'SB4'  { at = lquad2   +  28.5},
      qd  'QD1'  { at = lquad2   +  32},
      sd  'SD1'  { at = lquad2   +  34.5},
      cv  'CV1'  { at = lquad2   +  35.1},
      bpm 'BPM2' { at = lquad2   +  35.2},
      sb  'SB1'  { at = lquad2   +  35.5},
      sb  'SB2'  { at = lquad2   +  41.9},
      sb  'SB3'  { at = lquad2   +  54.1},
      sb  'SB4'  { at = lquad2   +  60.5},
      ip  'IP2'  { at = lcell    },
  }
  seq:select(observe)
  local tbl = survey { sequence=seq,  X0={0, 0, 0}, A0={0, 0, 0}}
  option.format = "%-18.16g"
  tbl:write('sps_cell1')
  seq.direction = -1

  tbl = survey { sequence=seq, X0={0, 0, 0}, A0={0, 0, 0}}
  option.format = "%-18.16g"
  tbl:write('sps_cell2')

  local actual   = { tbl.angle[#tbl], tbl.tilt [#tbl], tbl.x[#tbl], tbl.y[#tbl], tbl.z[#tbl], tbl.theta[#tbl], tbl.phi[#tbl], tbl.psi[#tbl], tbl.globaltilt[#tbl]}
  local expected = { 0              , 0              , 0          , 0          , lcell      , 0              , 0            , 0            , 0}
  local margin   = { 0              , 0              , 1e-15      , 1e-15      , 0          , 0              , 0            , 0            , 0}
  assertAllAlmostEquals (actual, expected, margin)
end

-- end ------------------------------------------------------------------------o
