--[=[
 o-----------------------------------------------------------------------------o
 |
 | Geomap tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the geomap module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains                  in MAD.utest

local sequence, survey, plot, filesys                            in MAD
local drift_element, thick_element, thin_element                 in MAD.element
local eps, pi                                                    in MAD.constant

local refdir = \s -> 'geomap_ref/'..(s or '')
local rundir = \s -> 'geomap_run/'..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot -- = true

if doplot then
  MAD.atexit(MAD.utility.pause, true)
end

local function plot (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title,
             x1y1 = { s={'x','y','z'} },
             x1y2 = { s={'theta','phi','psi'} } }
end

local function plotxz (mtbl)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title, x1y1 = { x='z'} }
end

-- regression test suite ------------------------------------------------------o

-- TODO: vary parameters nst, lw, sdir, tdir, s0, X0, A0, ...

TestGeomap = {}

function TestGeomap:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.format
  option.format = "%-18.10g"
end

function TestGeomap:tearDown ()
  option.format = self.optfmt
end

function TestGeomap:testDrift ()
  local nst = 20
  local seq = sequence 'seq' { nst * drift_element{ l=1 } }
  local tbl = survey { sequence=seq, title='drift' }

  tbl:write(rundir('geomap_drift'))
  plotxz(tbl)

  assertEquals(#tbl, nst+2)
  local s, x, y, z, theta, phi, psi in tbl[#tbl]
  assertEquals({  s, x, y,   z, theta, phi, psi},
               {nst, 0, 0, nst,     0,   0,   0} )
end

function TestGeomap:testThin ()
  local nst = 20
  local seq = sequence 'seq' {
    nst * thin_element { at=1, from='prev', angle=2*pi/nst } }
  local tbl = survey { sequence=seq, title='thin' }

  tbl:write(rundir('geomap_thin'))
  plotxz(tbl)

  assertEquals(#tbl, 2*nst+2)
  local s, x, y, z, theta, phi, psi in tbl[#tbl]
  assertAllAlmostEquals({  s,      x, y,     z, theta, phi, psi},
                        {nst,      0, 0,     0, -2*pi,   0,   0},
                        {  0, 23*eps, 0, 7*eps, 4*eps,   0,   0} )
end

function TestGeomap:testThick ()
  local nst = 20
  local seq = sequence 'seq' {
    nst * thick_element { l=1, angle=2*pi/nst } }
  local tbl = survey { sequence=seq, title='thick' }

  tbl:write(rundir('geomap_thick'))
  plotxz(tbl)

  assertEquals(#tbl, nst+2)
  local s, x, y, z, theta, phi, psi in tbl[#tbl]
  assertAllAlmostEquals({  s,      x, y,     z, theta, phi, psi},
                        {nst,      0, 0,     0, -2*pi,   0,   0},
                        {  0, 21*eps, 0, 9*eps, 4*eps,   0,   0} )
end

-- end ------------------------------------------------------------------------o
