--[=[
 o-----------------------------------------------------------------------------o
 |
 | Survey tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the survey module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains                  in MAD.utest

local option, filesys                                            in MAD
local vector, matrix, sequence, mtable, survey, plot             in MAD
local is_string                                                  in MAD.typeid
local drift, sbend, multipole                                    in MAD.element
local eps, pi                                                    in MAD.constant

local G = MAD.geomap

local refdir = \s -> 'geomap_ref/'..s
local rundir = \s -> 'geomap_run/'..s

-- helpers --------------------------------------------------------------------o

local doplot = true

local function plot (mtbl)
  MAD.plot { table=mtbl, x1y1  = { s={'x','y','z'} },
                         x1y2  = { s={'theta','phi','psi'} },
                         colors= {x='blue', y='cyan', z='violet',
                                  theta='red', phi='orange', psi='green'} }
  io.write("press return to continue...")
  io.read()
end

local function plotxz (mtbl)
  if doplot ~= true then return end
  MAD.plot { table=mtbl, x1y1 = { x='z'} }
  io.write("press return to continue...")
  io.read()
end

-- regression test suite ------------------------------------------------------o

-- TODO: vary parameters nst, lw, sdir, tdir, spos, X0, A0, ...

TestGeomap = {}

function TestGeomap:setUp ()
  filesys.mkdir(rundir(''))
  self.optfmt = option.format
  option.format = "%-18.11g"
end

function TestGeomap:tearDown ()
  option.format = self.optfmt
end

function TestGeomap:testDrift ()
  local nst = 20
  local seq = sequence 'seq' { nst*drift{ l=1 } }
  local tbl = survey { sequence=seq, title='drift' }

  tbl:write(rundir('geomap_drift'))
  assertEquals(#tbl, nst+2)

  local s, x, y, z, theta, phi, psi in tbl[#tbl]
  assertEquals({  s, x, y,   z, theta, phi, psi},
               {nst, 0, 0, nst,     0,   0,   0} )
  plotxz(tbl)
end

function TestGeomap:testThin ()
  local nst = 20
  local seq = sequence 'seq' {
    nst*multipole{ at=1, from='prev', angle=2*pi/nst } }
  local tbl = survey { sequence=seq, title='thin' }

  tbl:write(rundir('geomap_thin'))
  assertEquals(#tbl, 2*nst+2)

  local s, x, y, z, theta, phi, psi in tbl[#tbl]
  assertAllAlmostEquals({  s,        x, y, z, theta, phi, psi},
                        {nst,        0, 0, 0, -2*pi,   0,   0},
                        {  0, 20.5*eps, 0, 0,     0,   0,   0} )
  plotxz(tbl)
end

function TestGeomap:testThick ()
  local nst = 20
  local seq = sequence 'seq' {
    nst*sbend{ l=1, angle=2*pi/nst } }
  local tbl = survey { sequence=seq, title='thick' }

  tbl:write(rundir('geomap_thick'))
  assertEquals(#tbl, nst+2)

  local s, x, y, z, theta, phi, psi in tbl[#tbl]
  assertAllAlmostEquals({  s,      x, y,     z, theta, phi, psi},
                        {nst,      0, 0,     0, -2*pi,   0,   0},
                        {  0, 21*eps, 0, 2*eps,     0,   0,   0} )
  plotxz(tbl)
end

-- end ------------------------------------------------------------------------o
