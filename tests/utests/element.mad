--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the element module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertEquals in MAD.utest

local drift, sbend, rbend, quadrupole, sextupole in MAD.element

-- regression test suite ------------------------------------------------------o

TestElement = {}

function TestElement:testDrift ()
  local e = drift {}
  assertTrue(e.is_drift)
  assertEquals(e.kind, 'drift')
end

function TestElement:testSBend ()
  local e = sbend {}
  assertTrue(e.is_curved)
  assertEquals(e.kind, 'sbend')
end

function TestElement:testRBend ()
  local e = rbend {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'rbend')
end

function TestElement:testQuadrupole ()
  local e = quadrupole {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'quadrupole')
end

function TestElement:testSextupole ()
  local e = sextupole {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'sextupole')
end

function TestElement:testTypeCheck() end
function TestElement:testKind() end
function TestElement:testUnique()
  --unsures that every element is uniqe, makes children , even the first one
  --for _,e in pairs(element) do
  --  if e.l ~= nil and not skip[e.kind] then
  --    assert(dat[e.kind], "plot: missing shape detected")
  --    assert(dat[e.kind], e.kind)
  --  end
  --end
end

function TestElement:testAdd() end
function TestElement:testMul() end
function TestElement:testUnm() end


-- end ------------------------------------------------------------------------o
