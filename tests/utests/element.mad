--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the element module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertFalse, assertEquals, assertNotEquals
                           in MAD.utest
local add, unm, mul        in MAD.operator
local is_table, is_object  in MAD.typeid

local element              in MAD
local drift, thin_element, drift_element, strait_element,
      curved_element, assembly, bline, marker, patch, slink,
      spause, drift, collimator, instrument, placeholder,
      monitor, sbend, rbend, quadrupole, sextupole, octupole,
      decapole, dodecapole, kicker, solenoid, wiggler,
      elseparator, rfcavity, multipole, rfmultipole,
      srotation, xrotation, yrotation, translate, twcavity,
      crabcavity, hkicker, vkicker, hmonitor, vmonitor         in MAD.element

-- regression test suite ------------------------------------------------------o

TestElement = {}

function TestElement:testDrift ()
  local e = drift {}
  assertTrue(e.is_drift)
  assertEquals(e.kind, 'drift')
end

function TestElement:testSBend ()
  local e = sbend {}
  assertTrue(e.is_curved)
  assertEquals(e.kind, 'sbend')
end

function TestElement:testRBend ()
  local e = rbend {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'rbend')
end

function TestElement:testQuadrupole ()
  local e = quadrupole {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'quadrupole')
end

function TestElement:testSextupole ()
  local e = sextupole {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'sextupole')
end

-- NEW
function TestElement:testThinElement()
  assertTrue( multipole  .is_thin )
  assertTrue( rfmultipole.is_thin )
end

function TestElement:testPatchElement()
  assertTrue( srotation.is_patch )
  assertTrue( xrotation.is_patch )
  assertTrue( yrotation.is_patch )
  assertTrue( translate.is_patch )
end

function TestElement:testDriftElement()
  assertTrue( drift      .is_drift )
  assertTrue( collimator .is_drift )
  assertTrue( instrument .is_drift )
  assertTrue( placeholder.is_drift )
  assertTrue( monitor    .is_drift )
end

function TestElement:testStraitElement()
  assertTrue( rbend      .is_strait )
  assertTrue( quadrupole .is_strait )
  assertTrue( sextupole  .is_strait )
  assertTrue( octupole   .is_strait )
  assertTrue( decapole   .is_strait )
  assertTrue( dodecapole .is_strait )
  assertTrue( kicker     .is_strait )
  assertTrue( solenoid   .is_strait )
  assertTrue( wiggler    .is_strait )
  assertTrue( elseparator.is_strait )
  assertTrue( rfcavity   .is_strait )
end

function TestElement:testCurvedElement()
  assertTrue( sbend.is_curved )
end

function TestElement:testSpecialElement()
  assertTrue( marker.is_special )
  assertTrue( slink .is_special )
  assertTrue( spause.is_special )
end

function TestElement:testExtraElement()
  assertTrue( assembly.is_extra )
  assertTrue( bline   .is_extra )
end

function TestElement:testInstanceRfcavity()
  assertTrue( twcavity:is_instanceOf( rfcavity) )
end

function TestElement:testInstanceRfmultipole()
  assertTrue( crabcavity:is_instanceOf( rfmultipole ) )
end

function TestElement:testInstanceKicker()
  assertTrue( hkicker:is_instanceOf( kicker ) )
  assertTrue( vkicker:is_instanceOf( kicker ) )
end

function TestElement:testInstanceMonitor()
  assertTrue( hmonitor:is_instanceOf( monitor ) )
  assertTrue( vmonitor:is_instanceOf( monitor ) )
end

function TestElement:testKind()
  local skip = { element = true, }
  for _,e in pairs(element) do
    if not skip[e.kind] then
      assertEquals( e.name, e.kind )
    end
  end
end

function TestElement:testUniqueName()
  local skip = { flags = true, } -- flags is not an element
  local t = {}
  for k,e in pairs(element) do
    if not skip[k] then
      assertNil( t[e.name] )
      t[e.name] = e
    end
  end
end

function TestElement:testAdd()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = e1+e2
  assertEquals(       (e1+e2) .kind, 'bline' )
  assertEquals(  add  (e1,e2) .kind, 'bline' )
  assertEquals( (bline{e1+e2}).kind, 'bline' )
  assertEquals( (bline{e1,e2}).kind, 'bline' )

  assertEquals( bl[1].name    , e1.name )
  assertEquals( bl[2].name    , e2.name )
  assertEquals( bl[1].kind    , e1.kind )
  assertEquals( bl[2].kind    , e2.kind )
  assertTrue  ( bl[1].is_drift )
  assertTrue  ( bl[2].is_thin  )
end

function TestElement:testMul()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = mul(3,e1+e2)
  assertEquals(    (2*e2).kind , 'bline' )
  assertEquals( mul(2,e2).kind , 'bline' )
  assertEquals( mul(3,e2).__rep, 3       )

  assertEquals( bl[1]   .name, 'bline' )
  assertEquals( bl[1][1].name, 'e1'    )
end

function TestElement:testUnm()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = (e1+e2)
  assertEquals(   (-e1)   .kind, 'bline' )
  assertEquals( unm(e1)   .kind, 'bline' )

  assertEquals( unm(e1)[1].name, 'e1'    )
  assertEquals( unm(e1)[1].kind, 'drift' )
  assertEquals( unm(bl)[1].name, 'bline' )
  assertNil   ( unm(bl)[2] )
  assertEquals( unm(e1).__rep  , -1      )
end

function TestElement:testSelect()
  assertFalse( multipole:is_selected() )  multipole:select  ()
  assertTrue ( multipole:is_selected() )  multipole:deselect()
  assertFalse( multipole:is_selected() )
end

-- end ------------------------------------------------------------------------o
