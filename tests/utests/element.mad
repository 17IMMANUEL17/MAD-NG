--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the element module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertEquals, assertNotEquals   in MAD.utest
local element                                                in MAD

local drift, thin_element, drift_element, strait_element, curved_element,
      assembly, bline, marker, patch, slink, spause, drift, collimator,
      instrument, placeholder, monitor, sbend, rbend, quadrupole, sextupole,
      octupole, decapole, dodecapole, kicker, solenoid, wiggler, elseparator,
      rfcavity, multipole, rfmultipole, srotation, xrotation, yrotation,
      translate, twcavity, crabcavity, hkicker, vkicker, hmonitor, vmonitor,
      bpm, blm
      in MAD.element

-- regression test suite ------------------------------------------------------o

TestElement = {}

function TestElement:testDrift ()
  local e = drift {}
  assertTrue(e.is_drift)
  assertEquals(e.kind, 'drift')
end

function TestElement:testSBend ()
  local e = sbend {}
  assertTrue(e.is_curved)
  assertEquals(e.kind, 'sbend')
end

function TestElement:testRBend ()
  local e = rbend {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'rbend')
end

function TestElement:testQuadrupole ()
  local e = quadrupole {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'quadrupole')
end

function TestElement:testSextupole ()
  local e = sextupole {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'sextupole')
end

-- NEW
function TestElement:testInstanceThinElement()
  assertTrue( marker     :is_instanceOf( thin_element ) )
  assertTrue( patch      :is_instanceOf( thin_element ) )
  assertTrue( slink      :is_instanceOf( thin_element ) )
  assertTrue( spause     :is_instanceOf( thin_element ) )
  assertTrue( multipole  :is_instanceOf( thin_element ) )
  assertTrue( rfmultipole:is_instanceOf( thin_element ) )
end

function TestElement:testInstanceDriftElement()
  assertTrue( drift      :is_instanceOf( drift_element ) )
  assertTrue( collimator :is_instanceOf( drift_element ) )
  assertTrue( instrument :is_instanceOf( drift_element ) )
  assertTrue( placeholder:is_instanceOf( drift_element ) )
  assertTrue( monitor    :is_instanceOf( drift_element ) )
end

function TestElement:testInstanceCurvedElement()
  assertTrue( sbend:is_instanceOf( curved_element ) )
end

function TestElement:testInstanceStraitElement()
  assertTrue( rbend      :is_instanceOf( strait_element ) )
  assertTrue( quadrupole :is_instanceOf( strait_element ) )
  assertTrue( sextupole  :is_instanceOf( strait_element ) )
  assertTrue( octupole   :is_instanceOf( strait_element ) )
  assertTrue( decapole   :is_instanceOf( strait_element ) )
  assertTrue( dodecapole :is_instanceOf( strait_element ) )
  assertTrue( kicker     :is_instanceOf( strait_element ) )
  assertTrue( solenoid   :is_instanceOf( strait_element ) )
  assertTrue( wiggler    :is_instanceOf( strait_element ) )
  assertTrue( elseparator:is_instanceOf( strait_element ) )
  assertTrue( rfcavity   :is_instanceOf( strait_element ) )
end

function TestElement:testInstancePatch()
  assertTrue( srotation:is_instanceOf( patch ) )
  assertTrue( xrotation:is_instanceOf( patch ) )
  assertTrue( yrotation:is_instanceOf( patch ) )
  assertTrue( translate:is_instanceOf( patch ) )
end

function TestElement:testInstanceRfcavity()
  assertTrue( twcavity:is_instanceOf( rfcavity) )
end

function TestElement:testInstanceRfmultipole()
  assertTrue( crabcavity:is_instanceOf( rfmultipole ) )
end

function TestElement:testInstanceKicker()
  assertTrue( hkicker:is_instanceOf( kicker ) )
  assertTrue( vkicker:is_instanceOf( kicker ) )
end

function TestElement:testInstanceMonitor()
  assertTrue( hmonitor:is_instanceOf( monitor ) )
  assertTrue( vmonitor:is_instanceOf( monitor ) )
  assertTrue( bpm     :is_instanceOf( monitor ) )
  assertTrue( blm     :is_instanceOf( monitor ) )
end

function TestElement:testKind()
  local skip = { element = true, }
  for _,e in pairs(element) do
    if not skip[e.kind] then
      assertEquals( e.name, e.kind )
    end
  end
end

function TestElement:testUnique()
  local t, i, elem = {}, 1
  for _,e in pairs(element) do
    for j=1,i do assertNotEquals( t[j], e.name ) end
    t[i], i = e.name, i+1
  end
  elem = thin_element   {}  assertEquals( elem.kind, "element"     )
  elem = drift_element  {}  assertEquals( elem.kind, "element"     )
  elem = strait_element {}  assertEquals( elem.kind, "element"     )
  elem = curved_element {}  assertEquals( elem.kind, "element"     )

  elem = assembly       {}  assertEquals( elem.kind, "assembly"    )
  elem = bline          {}  assertEquals( elem.kind, "bline"       )
  elem = marker         {}  assertEquals( elem.kind, "marker"      )
  elem = patch          {}  assertEquals( elem.kind, "patch"       )
  elem = slink          {}  assertEquals( elem.kind, "slink"       )
  elem = spause         {}  assertEquals( elem.kind, "spause"      )
  elem = drift          {}  assertEquals( elem.kind, "drift"       )
  elem = collimator     {}  assertEquals( elem.kind, "collimator"  )
  elem = instrument     {}  assertEquals( elem.kind, "instrument"  )
  elem = placeholder    {}  assertEquals( elem.kind, "placeholder" )
  elem = monitor        {}  assertEquals( elem.kind, "monitor"     )
  elem = sbend          {}  assertEquals( elem.kind, "sbend"       )
  elem = rbend          {}  assertEquals( elem.kind, "rbend"       )
  elem = quadrupole     {}  assertEquals( elem.kind, "quadrupole"  )
  elem = sextupole      {}  assertEquals( elem.kind, "sextupole"   )
  elem = octupole       {}  assertEquals( elem.kind, "octupole"    )
  elem = decapole       {}  assertEquals( elem.kind, "decapole"    )
  elem = dodecapole     {}  assertEquals( elem.kind, "dodecapole"  )
  elem = kicker         {}  assertEquals( elem.kind, "kicker"      )
  elem = solenoid       {}  assertEquals( elem.kind, "solenoid"    )
  elem = wiggler        {}  assertEquals( elem.kind, "wiggler"     )
  elem = elseparator    {}  assertEquals( elem.kind, "elseparator" )
  elem = rfcavity       {}  assertEquals( elem.kind, "rfcavity"    )
  elem = multipole      {}  assertEquals( elem.kind, "multipole"   )
  elem = rfmultipole    {}  assertEquals( elem.kind, "rfmultipole" )
  elem = srotation      {}  assertEquals( elem.kind, "srotation"   )
  elem = xrotation      {}  assertEquals( elem.kind, "xrotation"   )
  elem = yrotation      {}  assertEquals( elem.kind, "yrotation"   )
  elem = translate      {}  assertEquals( elem.kind, "translate"   )
  elem = twcavity       {}  assertEquals( elem.kind, "twcavity"    )
  elem = crabcavity     {}  assertEquals( elem.kind, "crabcavity"  )
  elem = hkicker        {}  assertEquals( elem.kind, "hkicker"     )
  elem = vkicker        {}  assertEquals( elem.kind, "vkicker"     )
  elem = hmonitor       {}  assertEquals( elem.kind, "hmonitor"    )
  elem = vmonitor       {}  assertEquals( elem.kind, "vmonitor"    )
  elem = bpm            {}  assertEquals( elem.kind, "bpm"         )
  elem = blm            {}  assertEquals( elem.kind, "blm"         )
end

function TestElement:testAdd()
  local e1 = drift {}
  local e2 = drift {}
  --print( bline{e1,e2}[1] )
end

function TestElement:testMul()

end

function TestElement:testUnm()
end

function TestElement:testIs_selected() end
function TestElement:testSelect() end
function TestElement:testeselect() end

-- end ------------------------------------------------------------------------o
