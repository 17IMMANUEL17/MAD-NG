--[=[
 o-----------------------------------------------------------------------------o
 |
 | Elements tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the element module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertFalse, assertEquals, assertNotEquals
   in MAD.utest
local element                                                in MAD
local add, unm, mul                                          in MAD.operator
local is_table, is_object                                    in MAD.typeid
local drift, thin_element, drift_element, strait_element, curved_element,
      assembly, bline, marker, patch, slink, spause, drift, collimator,
      instrument, placeholder, monitor, sbend, rbend, quadrupole, sextupole,
      octupole, decapole, dodecapole, kicker, solenoid, wiggler, elseparator,
      rfcavity, multipole, rfmultipole, srotation, xrotation, yrotation,
      translate, twcavity, crabcavity, hkicker, vkicker, hmonitor, vmonitor,
      bpm, blm
      in MAD.element

-- regression test suite ------------------------------------------------------o

TestElement = {}

function TestElement:testDrift ()
  local e = drift {}
  assertTrue(e.is_drift)
  assertEquals(e.kind, 'drift')
end

function TestElement:testSBend ()
  local e = sbend {}
  assertTrue(e.is_curved)
  assertEquals(e.kind, 'sbend')
end

function TestElement:testRBend ()
  local e = rbend {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'rbend')
end

function TestElement:testQuadrupole ()
  local e = quadrupole {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'quadrupole')
end

function TestElement:testSextupole ()
  local e = sextupole {}
  assertTrue(e.is_strait)
  assertEquals(e.kind, 'sextupole')
end

-- NEW
function TestElement:testThinElement()
  local e
  e = marker       assertTrue( e.is_thin )
  e = patch        assertTrue( e.is_thin )
  e = slink        assertTrue( e.is_thin )
  e = spause       assertTrue( e.is_thin )
  e = multipole    assertTrue( e.is_thin )
  e = rfmultipole  assertTrue( e.is_thin )
end

function TestElement:testDriftElement()
  local e
  e = drift       assertTrue( e.is_drift )
  e = collimator  assertTrue( e.is_drift )
  e = instrument  assertTrue( e.is_drift )
  e = placeholder assertTrue( e.is_drift )
  e = monitor     assertTrue( e.is_drift )
end

function TestElement:testCurvedElement()
  local e =  sbend  assertTrue( e.is_curved )
end

function TestElement:testStraitElement()
  local e
  e = rbend        assertTrue( e.is_strait )
  e = quadrupole   assertTrue( e.is_strait )
  e = sextupole    assertTrue( e.is_strait )
  e = octupole     assertTrue( e.is_strait )
  e = decapole     assertTrue( e.is_strait )
  e = dodecapole   assertTrue( e.is_strait )
  e = kicker       assertTrue( e.is_strait )
  e = solenoid     assertTrue( e.is_strait )
  e = wiggler      assertTrue( e.is_strait )
  e = elseparator  assertTrue( e.is_strait )
  e = rfcavity     assertTrue( e.is_strait )
end

function TestElement:testPatch()
  local e
  e = srotation  assertTrue( e.is_patch )
  e = xrotation  assertTrue( e.is_patch )
  e = yrotation  assertTrue( e.is_patch )
  e = translate  assertTrue( e.is_patch )
end

function TestElement:testInstanceRfcavity()
  local e = assertTrue( twcavity:is_instanceOf( rfcavity) )
end

function TestElement:testInstanceRfmultipole()
  assertTrue( crabcavity:is_instanceOf( rfmultipole ) )
end

function TestElement:testInstanceKicker()
  assertTrue( hkicker:is_instanceOf( kicker ) )
  assertTrue( vkicker:is_instanceOf( kicker ) )
end

function TestElement:testInstanceMonitor()
  assertTrue( hmonitor:is_instanceOf( monitor ) )
  assertTrue( vmonitor:is_instanceOf( monitor ) )
  assertTrue( bpm     :is_instanceOf( monitor ) )
  assertTrue( blm     :is_instanceOf( monitor ) )
end

function TestElement:testKind()
  local skip = { element = true, }
  for _,e in pairs(element) do
    if not skip[e.kind] then
      assertEquals( e.name, e.kind )
    end
  end
end

function TestElement:testUnique()
  local t, i, e = {}, 1
  for _,e in pairs(element) do
    for j=1,i do assertNotEquals( t[j], e.name ) end
    t[i], i = e.name, i+1
  end
  e = thin_element   {}  assertEquals( e.kind, 'element'     )
  e = drift_element  {}  assertEquals( e.kind, 'element'     )
  e = strait_element {}  assertEquals( e.kind, 'element'     )
  e = curved_element {}  assertEquals( e.kind, 'element'     )

  e = assembly       {}  assertEquals( e.kind, 'assembly'    )
  e = bline          {}  assertEquals( e.kind, 'bline'       )
  e = marker         {}  assertEquals( e.kind, 'marker'      )
  e = patch          {}  assertEquals( e.kind, 'patch'       )
  e = slink          {}  assertEquals( e.kind, 'slink'       )
  e = spause         {}  assertEquals( e.kind, 'spause'      )
  e = drift          {}  assertEquals( e.kind, 'drift'       )
  e = collimator     {}  assertEquals( e.kind, 'collimator'  )
  e = instrument     {}  assertEquals( e.kind, 'instrument'  )
  e = placeholder    {}  assertEquals( e.kind, 'placeholder' )
  e = monitor        {}  assertEquals( e.kind, 'monitor'     )
  e = sbend          {}  assertEquals( e.kind, 'sbend'       )
  e = rbend          {}  assertEquals( e.kind, 'rbend'       )
  e = quadrupole     {}  assertEquals( e.kind, 'quadrupole'  )
  e = sextupole      {}  assertEquals( e.kind, 'sextupole'   )
  e = octupole       {}  assertEquals( e.kind, 'octupole'    )
  e = decapole       {}  assertEquals( e.kind, 'decapole'    )
  e = dodecapole     {}  assertEquals( e.kind, 'dodecapole'  )
  e = kicker         {}  assertEquals( e.kind, 'kicker'      )
  e = solenoid       {}  assertEquals( e.kind, 'solenoid'    )
  e = wiggler        {}  assertEquals( e.kind, 'wiggler'     )
  e = elseparator    {}  assertEquals( e.kind, 'elseparator' )
  e = rfcavity       {}  assertEquals( e.kind, 'rfcavity'    )
  e = multipole      {}  assertEquals( e.kind, 'multipole'   )
  e = rfmultipole    {}  assertEquals( e.kind, 'rfmultipole' )
  e = srotation      {}  assertEquals( e.kind, 'srotation'   )
  e = xrotation      {}  assertEquals( e.kind, 'xrotation'   )
  e = yrotation      {}  assertEquals( e.kind, 'yrotation'   )
  e = translate      {}  assertEquals( e.kind, 'translate'   )
  e = twcavity       {}  assertEquals( e.kind, 'twcavity'    )
  e = crabcavity     {}  assertEquals( e.kind, 'crabcavity'  )
  e = hkicker        {}  assertEquals( e.kind, 'hkicker'     )
  e = vkicker        {}  assertEquals( e.kind, 'vkicker'     )
  e = hmonitor       {}  assertEquals( e.kind, 'hmonitor'    )
  e = vmonitor       {}  assertEquals( e.kind, 'vmonitor'    )
  e = bpm            {}  assertEquals( e.kind, 'bpm'         )
  e = blm            {}  assertEquals( e.kind, 'blm'         )
end

function TestElement:testAdd()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = e1+e2
  assertEquals(       (e1+e2) .kind, 'bline' )
  assertEquals(  add  (e1,e2) .kind, 'bline' )
  assertEquals( (bline{e1+e2}).kind, 'bline' )
  assertEquals( (bline{e1,e2}).kind, 'bline' )

  assertEquals( bl[1].name    , e1.name )
  assertEquals( bl[2].name    , e2.name )
  assertEquals( bl[1].kind    , e1.kind )
  assertEquals( bl[2].kind    , e2.kind )
  assertTrue  ( bl[1].is_drift )
  assertTrue  ( bl[2].is_thin  )
end

function TestElement:testMul()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = mul(3,e1+e2)
  assertEquals(    (2*e2).kind , 'bline' )
  assertEquals( mul(2,e2).kind , 'bline' )
  assertEquals( mul(3,e2).__rep, 3       )

  assertEquals( bl[1]   .name, 'bline' )
  assertEquals( bl[1][1].name, 'e1'    )
end

function TestElement:testUnm()
  local e1 = drift     'e1' {}
  local e2 = multipole 'e2' {}
  local bl = (e1+e2)
  assertEquals(   (-e1)   .kind, 'bline' )
  assertEquals( unm(e1)   .kind, 'bline' )

  assertEquals( unm(e1)[1].name, 'e1'    )
  assertEquals( unm(e1)[1].kind, 'drift' )
  assertEquals( unm(bl)[1].name, 'bline' )
  assertNil   ( unm(bl)[2] )
  assertEquals( unm(e1).__rep  , -1      )
end

function TestElement:testSelect()
  assertTrue ( multipole:is_selected() )    multipole:deselect()
  assertFalse( multipole:is_selected() )    multipole:select  ()
  assertTrue ( multipole:is_selected() )
end

-- end ------------------------------------------------------------------------o
