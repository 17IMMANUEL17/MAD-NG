--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, tpsa_eqn                                in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, assrtIsFalse,
      assertErrorMsgContains, assertError, assertIsNil, assertFalse                                     in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad, is_number, is_complex                            in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

TestAbs = {}
TestNrm  = {}
TestLogicOper = {}
TestUnaryMinus = {}
TestArithmetic = {}


local x = 2
local y = 2 + 2i
local ord  = 15
local nv1 = 1
local nv2 = 2
local d1v = gtpsad(nv1, ord)
local d2v = gtpsad(nv2, ord)


function TestUnaryMinus:testminusSingVar()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t_temp = tpsa(d1v)
  local ct_temp = ctpsa(d1v)

  t1v:set(1,1)
  t1v:set(3,1)
  t1v:set(5,1)
  t_temp:set(1,-1)
  t_temp:set(3,-1)
  t_temp:set(5,-1)
  ct1v:set(1,1 + 1i)
  ct1v:set(3,1 + 1i)
  ct1v:set(5,1 + 1i)
  ct_temp:set(1,-1 - 1i)
  ct_temp:set(3,-1 - 1i)
  ct_temp:set(5,-1 - 1i)

  assertTrue(t1v == -t_temp)
  assertTrue(-ct_temp == ct1v)

  --clean the tpsa for the other tests
  t1v:set(1,0)
  t1v:set(3,0)
  t1v:set(5,0)
  ct1v:set(1,0)
  ct1v:set(3,0)
  ct1v:set(5,0)

end


function TestUnaryMinus:testminusMultVar()

  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  local t_temp = tpsa(d2v)
  local ct_temp = ctpsa(d2v)

  t2v:set(1,1)
  t2v:set(3,1)
  t2v:set(5,1)
  t_temp:set(1,-1)
  t_temp:set(3,-1)
  t_temp:set(5,-1)
  ct2v:set(1,1 + 1i)
  ct2v:set(3,1 + 1i)
  ct2v:set(5,1 + 1i)
  ct_temp:set(1,-1 - 1i)
  ct_temp:set(3,-1 - 1i)
  ct_temp:set(5,-1 - 1i)

  assertTrue(t2v == -t_temp)
  assertTrue(-ct_temp == ct2v)

  --clean the tpsa for the other tests
  t2v:set(1,0)
  t2v:set(3,0)
  t2v:set(5,0)
  ct2v:set(1,0)
  ct2v:set(3,0)
  ct2v:set(5,0)

end


function TestLogicOper:testEqSingleVar()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t_temp1 = tpsa(d1v, ord)
  local t_temp2 = tpsa(d1v, ord)
  local ct_temp1 = ctpsa(d1v, ord)
  local ct_temp2 = ctpsa(d1v, ord)
  local t_smaller_ord = tpsa(d1v, ord-1)
  local ct_smaller_ord = ctpsa(d1v, ord-1)

  t_temp1:set(2, 1)
  ct_temp1:set(2, 1 + 1i)
 

  assertFalse(nil == t1v)
  assertFalse(t1v == nil)
  assertError(t1v.__eq ,t1v, x, 'tol')
  assertTrue(0 == t1v)
  assertTrue(t1v == 0)
  assertFalse(t1v == x)
  assertFalse(x == t1v)
  assertTrue(t1v == (0 + 0i))
  assertTrue((0 + 0i) == t1v)
  assertFalse(y == t1v)
  assertFalse(t1v == y)
  assertTrue(t1v == ct1v)
  assertTrue(ct1v == t1v)
  assertFalse(t1v == ct_temp1)
  assertFalse(ct_temp1 == t1v)
  assertTrue(t1v == t_temp2)
  assertTrue(t_temp2 == t1v)
  assertFalse(t1v == t_temp1)
  assertFalse(t_temp1 == t1v)
  assertFalse(nil == ct1v)
  assertFalse(ct1v == nil)
  assertError(ct1v.__eq ,ct1v, y, 'tol')
  assertTrue(0 == ct1v)
  assertTrue(ct1v == 0)
  assertFalse(x == ct1v)
  assertFalse(ct1v == x)
  assertTrue(ct1v == (0 + 0i))
  assertTrue((0 + 0i) == ct1v)
  assertFalse(y == ct1v)
  assertFalse(ct1v == y)
  assertTrue(ct1v == ct_temp2)
  assertTrue(ct_temp2 == ct1v)
  assertFalse(ct1v == ct_temp1)
  assertFalse(ct_temp1 == ct1v)
  assertTrue(t1v == t1v)
  assertTrue(ct1v == ct1v)

  t_temp1:set(2,0)
  ct_temp1:set(2,0)
  
  assertFalse(0 == t_temp1)
  assertFalse(t_temp1 == 0)
  assertFalse(0 + 0i == ct_temp1)
  assertFalse(ct_temp1 == 0 + 0i)

  assertTrue(t_smaller_ord == t1v)
  assertTrue(t1v == t_smaller_ord)
  assertTrue(ct_smaller_ord == ct1v)
  assertTrue(ct1v == ct_smaller_ord)
  assertTrue(ct_smaller_ord == t1v)
  assertTrue(t1v == ct_smaller_ord)
  assertTrue(ct_smaller_ord == t1v)
  assertTrue(t1v == ct_smaller_ord)
  assertTrue(t_smaller_ord == ct1v)
  assertTrue(ct1v == t_smaller_ord)


end


function TestLogicOper:testEqMultVar()

  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  local t_temp1 = tpsa(d2v, ord)
  local t_temp2 = tpsa(d2v, ord)
  local ct_temp1 = ctpsa(d2v, ord)
  local ct_temp2 = ctpsa(d2v, ord)
  local t_smaller_ord = tpsa(d2v, ord-1)
  local ct_smaller_ord = ctpsa(d2v, ord-1)

  t_temp1:set(2, 1)
  ct_temp1:set(2, 1 + 1i)
 

  assertFalse(nil == t2v)
  assertFalse(t2v == nil)
  assertError(t2v.__eq ,t2v, x, 'tol')
  assertTrue(0 == t2v)
  assertTrue(t2v == 0)
  assertFalse(t2v == x)
  assertFalse(x == t2v)
  assertTrue(t2v == (0 + 0i))
  assertTrue((0 + 0i) == t2v)
  assertFalse(y == t2v)
  assertFalse(t2v == y)
  assertTrue(t2v == ct2v)
  assertTrue(ct2v == t2v)
  assertFalse(t2v == ct_temp1)
  assertFalse(ct_temp1 == t2v)
  assertTrue(t2v == t_temp2)
  assertTrue(t_temp2 == t2v)
  assertFalse(t2v == t_temp1)
  assertFalse(t_temp1 == t2v)
  assertFalse(nil == ct2v)
  assertFalse(ct2v == nil)
  assertError(ct2v.__eq ,ct2v, y, 'tol')
  assertTrue(0 == ct2v)
  assertTrue(ct2v == 0)
  assertFalse(x == ct2v)
  assertFalse(ct2v == x)
  assertTrue(ct2v == (0 + 0i))
  assertTrue((0 + 0i) == ct2v)
  assertFalse(y == ct2v)
  assertFalse(ct2v == y)
  assertTrue(ct2v == ct_temp2)
  assertTrue(ct_temp2 == ct2v)
  assertFalse(ct2v == ct_temp1)
  assertFalse(ct_temp1 == ct2v)
  assertTrue(t2v == t2v)
  assertTrue(ct2v == ct2v)

  t_temp1:set(2,0)
  ct_temp1:set(2,0)
  
  --checking tpsa and ctpsa are different from scalars when hi variable is different from 0
  assertFalse(0 == t_temp1)
  assertFalse(t_temp1 == 0)
  assertFalse(0 + 0i == ct_temp1)
  assertFalse(ct_temp1 == 0 + 0i)
  
  assertTrue(t_smaller_ord == t2v)
  assertTrue(t2v == t_smaller_ord)
  assertTrue(ct_smaller_ord == ct2v)
  assertTrue(ct2v == ct_smaller_ord)
  assertTrue(ct_smaller_ord == t2v)
  assertTrue(t2v == ct_smaller_ord)
  assertTrue(ct_smaller_ord == t2v)
  assertTrue(t2v == ct_smaller_ord)
  assertTrue(t_smaller_ord == ct2v)
  assertTrue(ct2v == t_smaller_ord)

end



function TestLogicOper:testLessSingVar()

  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t_temp = tpsa(d1v, ord)
  local ct_temp = ctpsa(d1v, ord)
  local t_smaller_ord = tpsa(d1v, ord-1)

  assertFalse(1<t1v)
  assertTrue(t1v<1)
  assertFalse(1<=t1v)
  assertTrue(t1v<=1)
  assertFalse(t1v<t_temp)
  assertTrue(t1v<=t_temp)

  t_temp:set(1,1)
  assertTrue(not(t_temp<t1v))
  assertTrue(t1v<t_temp)
  
  assertFalse(t_smaller_ord < t1v)
  assertFalse(t1v < t_smaller_ord)
  assertTrue(t_smaller_ord <= t1v)
  assertTrue(t1v <= t_smaller_ord)

end


function TestLogicOper:testLessMultVar()

  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  local t_temp = tpsa(d2v, ord)
  local ct_temp = ctpsa(d2v, ord)
  local t_smaller_ord = tpsa(d2v, ord-1)

  assertFalse(1<t2v)
  assertTrue(t2v<1)
  assertFalse(1<=t2v)
  assertTrue(t2v<=1)
  assertFalse(t2v<t_temp)
  assertTrue(t2v<=t_temp)

  t_temp:set(1,1)
  assertTrue(not(t_temp<t2v))
  assertTrue(t2v<t_temp)
  
  assertFalse(t_smaller_ord < t2v)
  assertFalse(t2v < t_smaller_ord)
  assertTrue(t_smaller_ord <= t2v)
  assertTrue(t2v <= t_smaller_ord)

end


function TestArithmetic:testsubtraction()

end

function TestArithmetic:testmultiplication()

end

function TestArithmetic:testdivision()

end

function TestArithmetic:testpow()

end
