--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, tpsa_eqn                                in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, assrtIsFalse,
      assertErrorMsgContains, assertError, assertIsNil, assertFalse                                     in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad, is_number, is_complex                            in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o

TestAbs = {}

local x = 2
local y = 2 + 2i
local ord  = 15
local nv1 = 1
local nv2 = 2
local d1v = gtpsad(nv1, ord)
local d2v = gtpsad(nv2, ord)


function TestAbs:testAbsSingVar()
  
  local d_temp = gtpsad(nv1, ord-1)
  local t1v = tpsa(d1v)
  local ct1v = ctpsa(d1v)
  local t_temp = tpsa(d_temp)
  local ct_temp = ctpsa(d_temp)

  t1v:set(1,-1)
  
  assertError(t1v.abs,t1v, t_temp)
  assertEquals(t1v:abs():get(1), 1)

  t1v:set(1,-1)
  assertError(t1v.abs,t1v, t_temp)
  assertEquals(t1v:abs():get(1), 1)

end


function TestAbs:testAbsMultVar()

  local d_temp = gtpsad(nv2, ord-1)
  local t2v = tpsa(d2v)
  local ct2v = ctpsa(d2v)
  local t_temp = tpsa(d_temp)
  local ct_temp = ctpsa(d_temp)

  
  t2v:set(1,-1)
  
  assertError(t2v.abs,t2v, t_temp)
  assertEquals(t2v:abs():get(1), 1)

  t2v:set(1,-1)
  assertError(t2v.abs,t2v, t_temp)
  assertEquals(t2v:abs():get(1), 1)


end