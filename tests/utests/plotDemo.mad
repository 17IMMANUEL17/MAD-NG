--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot DEMO
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 |          A. Bloch, aurelien.bloch at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local mtable, plot, gplot in MAD
local observe             in MAD.element.flags

local toolbox  = require 'toolbox'

-- Initialization --------------------------------------------------------------

-- load LHC
MADX.option.warn = false
local lhcb1, lhcb2 = toolbox.loadLHC()
lhcb1:select(observe)
lhcb2:select(observe)
local lhc = {lhcb1, lhcb2}

-- Dummy mtable
local mtbl = mtable { {'name'}, 'x', 'y', 'z' }
for i=0, 25000 do
  mtbl = mtbl + {'A' .. i, i, i, 2*i+100 }
end

-- Examples --------------------------------------------------------------------

-- default cmd
local myplot = plot {
  table    = mtbl,
  x1y1     = { x = 'y'},
  exec     = false,
}

local sid = 0
local function newid()
  sid = sid + 1
  return sid
end

-- Many plot options used
local options = plot {
    sid         = newid(),
    sequence    = lhcb1,
    range       = { 'E.DS.L5.B1', 'S.DS.R5.B1' },
    table       = mtbl,
    x1y1        = { x = { 'y', 'z' } },
    tablerange  = { 100, 400 },
    yrange      = { 40, 1000 },
    colors      = { y = 'red',   z = 'green' },
    styles      = { y = "lines", z = "linespoints" },
    dashtypes   = { y = "..   ", z = "--  " },
    pointtypes  = 4,
    legendfont  = "Times New Roman",
    legendsize  = 21,
    legendpos   = "top right",
    legendnames = {y = "{/Symbol b} + \u{03b2}", z = "{/Symbol B} + \u{0392}"},
    xlabel      = "Absise label",
    ylabel      = "Ordinate label",
}

-- pdf multiplot

lhcb1:set_layangle(false)
lhcb2:set_layangle(false)
local multi1 = options {
    sid      = newid(),
    prolog   = "set multiplot",
    output   = "plot-multi.pdf",
    psizey   = 0.4,
}
local multi2 = myplot {
  sid        = multi1.sid,
  originy    = 0.4,
  psizey     = 0.4,
  psizex     = 0.5,
  output     = "plot-multi.pdf",
}
multi2 {
  epilog     = "unset multiplot\n unset out",
  originx    = 0.5,
}

-- flat lhcb1
myplot {
  sid      = newid(),
  sequence = lhcb1,
  title    = "Flat lhcb1",
}
lhcb1:set_layangle(true)
lhcb2:set_layangle(true)

-- two flat beam
myplot {
  sid      = newid(),
  sequence = lhc,
  seqdisty = 0.20,
  title    = "Two flat beam",
  layangle = false,
}

-- Two angled beam
myplot {
  sid      = newid(),
  sequence = lhc,
  title    = "Two angled beam",
}

-- Bottom two angled beam
myplot {
  sid      = newid(),
  sequence = lhc,
  laypos   = "bottom",
  title    = "Bottom two angled beam",
}

-- 1-turn two angled beam
myplot {
  sid      = newid(),
  sequence = lhc,
  nturn    = 1,
  title    = "1-turn two angled beam",
}

-- IP1-IP5 two angled beam
local ip1_ip5 = myplot {
  sid      = newid(),
  sequence = { lhcb1, lhcb2,lhcb1, lhcb2},
  range    = {
    {"E.DS.L1.B1", "S.DS.R1.B1"},{"E.DS.L1.B2", "S.DS.R1.B2"},
    {"E.DS.L5.B1", "S.DS.R5.B1"},{"E.DS.L5.B2", "S.DS.R5.B2"},
  },
  seqdisty = {
    lhcb2["E.DS.L1.B2"].mech_sep,
    -0.4,
    -0.4 + lhcb2['E.DS.L5.B2'].mech_sep
  },
  title    = "IP1-IP5 two angled beam",
}

-- IP1-IP5 two angled beam bigger
ip1_ip5 {
  sid     = newid(),
  laysize = 0.5,
  title   = "IP1-IP5 two angled beam bigger",
}

-- IP1-IP5 two angled beam layout only
ip1_ip5 {
  sid   = newid(),
  table = false,
}

-- IP1-IP5 two angled beam with script dump
ip1_ip5 {
  sid     = newid(),
  scrdump = "plot.gp",
  title   = "IP1-IP5 two angled beam with script dump",
}

-- IP1-IP5 two angled beam in pdf
ip1_ip5 {
  sid    = newid(),
  output = "plot.pdf",
  epilog = "unset out",
  title  = "IP1-IP5 two angled beam in pdf",
}

-- Layout in plot
local in_plot = myplot {
  sid      = newid(),
  sequence = lhc,
  laypos   = "in",
  title    = "Layout in plot",
}

-- Layout in plot only
in_plot {
  sid    = newid(),
  table  = false,
}

print("press enter to terminate...")
io.read()
