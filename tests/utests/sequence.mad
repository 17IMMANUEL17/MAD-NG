--[=[
 o-----------------------------------------------------------------------------o
 |
 | Sequence tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the sequence module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertEquals in require 'luaunit'

local sequence, bline in MAD
local drift, sbend, quadrupole in MAD.element

-- regression test suite ------------------------------------------------------o

TestSequence = {}

function TestSequence:testSPS()
  local ds = drift      'ds' {}
  local dl = drift      'dl' {}
  local dm = drift      'dm' {}
  local b1 = sbend      'b1' {}
  local b2 = sbend      'b2' {}
  local qf = quadrupole 'qf' {}
  local qd = quadrupole 'qd' {}

  local pf  = bline 'pf'  {qf,2*b1,2*b2,ds}           -- # = 6
  local pd  = bline 'pd'  {qd,2*b2,2*b1,ds}           -- # = 6
  local p24 = bline 'p24' {qf,dm,2*b2,ds,pd}          -- # = 11 (5+6)
  local p42 = bline 'p42' {pf,qd,2*b2,dm,ds}          -- # = 11 (6+5)
  local p00 = bline 'p00' {qf,dl,qd,dl}               -- # = 4
  local p44 = bline 'p44' {pf,pd}                     -- # = 12 (6+6)
  local insert = bline 'insert' {p24,2*p00,p42}       -- # = 30 (11+2*4+11)
  local super  = bline 'super'  {7*p44,insert,7*p44}  -- # = 198 (7*12+30+7*12)
  local SPS = sequence 'SPS' {6*super}                -- # = 1188 (6*198)

  assertEquals(#SPS, 1188)
end

-- end ------------------------------------------------------------------------o
