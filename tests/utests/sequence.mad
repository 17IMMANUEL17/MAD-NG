--[=[
 o-----------------------------------------------------------------------------o
 |
 | Sequence tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the sequence module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertEquals in require 'luaunit'

local sequence, bline in MAD
local drift, sbend, quadrupole in MAD.element

-- helpers --------------------------------------------------------------------o

local function dumpseq (seq)
  local fmt = MAD.option.format
  MAD.option.format = "%.5g"
  print()
  print('sequence:', seq.name)
  print('i', 'name', 'L', 'S (s)', 'S (e)')
  seq:foreach \e,i => print(i, e.name, e.l, seq.s_pos[i], seq.e_pos[i]) end
  MAD.option.format = fmt
end

-- regression test suite ------------------------------------------------------o

TestSequence = {}

function TestSequence:testSimple01()
  local marker, quadrupole, sequence in MAD.element
  local ip = marker 'ip' {}
  local qf = quadrupole 'qf' { l=6 }
  local lcell = 10

  print()
  local seq = sequence 'simple01' {
    l = lcell, direction=1, refer = 'entry',
    ip 'IP1' { at = 0 },
    qf 'QF1' { at = 0 },
    ip 'IP2' { at = lcell },
  }

  dumpseq(seq)
end

function TestSequence:testSPSDef()
  local ds = drift      'ds' {}
  local dl = drift      'dl' {}
  local dm = drift      'dm' {}
  local b1 = sbend      'b1' {}
  local b2 = sbend      'b2' {}
  local qf = quadrupole 'qf' {}
  local qd = quadrupole 'qd' {}

  local pf  = bline 'pf'  {qf,2*b1,2*b2,ds}           -- # = 6
  local pd  = bline 'pd'  {qd,2*b2,2*b1,ds}           -- # = 6
  local p24 = bline 'p24' {qf,dm,2*b2,ds,pd}          -- # = 11 (5+6)
  local p42 = bline 'p42' {pf,qd,2*b2,dm,ds}          -- # = 11 (6+5)
  local p00 = bline 'p00' {qf,dl,qd,dl}               -- # = 4
  local p44 = bline 'p44' {pf,pd}                     -- # = 12 (6+6)
  local insert = bline 'insert' {p24,2*p00,p42}       -- # = 30 (11+2*4+11)
  local super  = bline 'super'  {7*p44,insert,7*p44}  -- # = 198 (7*12+30+7*12)
  local SPS = sequence 'SPS' {6*super}                -- # = 1188 (6*198)

  assertEquals(#SPS, 1188)
  assertEquals(SPS.s_pos[#SPS], 0)
end

function TestSequence:testConvertFiveCell2File()
  MADX.option.warn = false
  MADX:load("../share/fivecell/fivecell.seq", "fivecell_gen.mad")
  MADX.option.warn = true

  require 'fivecell_gen'

  local ins in MADX
  dumpseq(ins)

  local fivecell in MADX
  dumpseq(fivecell)

  assertEquals(#fivecell, 79)
  assertEquals(fivecell.s_pos[#fivecell], 534.6)
end

function TestSequence:testConvertFiveCell2Mem()
  MADX.option.warn = false
  MADX:load("../share/fivecell/fivecell.seq")
  MADX.option.warn = true

  local fivecell in MADX
  assertEquals(#fivecell, 79)
  assertEquals(fivecell.s_pos[#fivecell], 534.6)
end

function TestSequence:testLoadFiveCell()
  require 'fivecell_gen'

  local fivecell in MADX
  assertEquals(#fivecell, 79)
  assertEquals(fivecell.s_pos[#fivecell], 534.6)
end

function TestSequence:testConvertLHC2Files()
  MADX.option.warn = false
  MADX:load("../share/LHC/lhc_as-built.seq", "lhc_as-built_gen.mad")
  MADX:load("../share/LHC/opt_inj.madx"    , "opt_inj_gen.mad"     )
  MADX.option.warn = true

  require 'lhc_as-built_gen'
  require 'opt_inj_gen'

  local lhcb1, lhcb2 in MADX
  assertEquals(#lhcb1, 6675)
  assertEquals(#lhcb2, 6674)
  assertEquals(lhcb1.s_pos[#lhcb1], 26658.8832)
  assertEquals(lhcb2.s_pos[#lhcb2], 26658.8832)
end

function TestSequence:testConvertLHC2Mem()
  MADX.option.warn = false
  MADX:load("../share/LHC/lhc_as-built.seq")
  MADX:load("../share/LHC/opt_inj.madx"    )
  MADX.option.warn = true

  local lhcb1, lhcb2 in MADX
  assertEquals(#lhcb1, 6675)
  assertEquals(#lhcb2, 6674)
  assertEquals(lhcb1.s_pos[#lhcb1], 26658.8832)
  assertEquals(lhcb2.s_pos[#lhcb2], 26658.8832)
end

function TestSequence:testLoadLHC()
  require 'lhc_as-built_gen'
  require 'opt_inj_gen'

  local lhcb1, lhcb2 in MADX
  assertEquals(#lhcb1, 6675)
  assertEquals(#lhcb2, 6674)
  assertEquals(lhcb1.s_pos[#lhcb1], 26658.8832)
  assertEquals(lhcb2.s_pos[#lhcb2], 26658.8832)
end

-- end ------------------------------------------------------------------------o
