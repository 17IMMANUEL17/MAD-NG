--[=[
 o-----------------------------------------------------------------------------o
 |
 | Sequence tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A. Bloch,  aurelien.bloch at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the sequence module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o
local filesys, mtable                                   in MAD
local assertTrue, assertFalse, assertNil, assertNotNil, assertEquals,
      assertErrorMsgContains                            in MAD.utest
local is_sequence                                       in MAD.typeid
local drift, marker, sbend, quadrupole, sequence, bline in MAD.element

local srcdir = \s -> '../share/'    ..s
local refdir = \s -> 'sequence_ref/'..s
local rundir = \s -> 'sequence_run/'..s
local _msg   = {
  "invalid write access to readonly mtable",
  "nil reference value",
  "no reference column found",
}
-- helpers --------------------------------------------------------------------o

local function dumpseq (seq)
  local optfmt = MAD.option.format
  MAD.option.format = "%.5g"
  print()
  print('sequence:', seq.name, 'l=', seq.l)
  print('i', 'name', 'L', 'S (s)', 'S (e)')
  seq:foreach \e,i => print(i, e.name, e.l, seq:spos(i), seq:epos(i)) end
  MAD.option.format = optfmt
end

local function getIdxSeq()
  local seq = sequence {
    l = 5,
    marker "name1" { at = 1 },
    marker "name2" { at = 2 },
    marker "name1" { at = 3 },
    marker "name1" { at = 4 },
  }
  return seq
end

-- regression test suite ------------------------------------------------------o

TestSequence = {}

function TestSequence:testIsSequence()
  local seq1  = sequence "seq1"  { marker {} }
  local seq12 = seq1     "seq12" { }
  assertTrue (is_sequence(sequence))
  assertTrue (is_sequence(seq1))
  assertTrue (is_sequence(seq12))
  assertFalse(is_sequence({}))
  assertFalse(is_sequence(mtable {}))
end

function TestSequence:testIsOwner()
  local seq1  = sequence "seq1"  { marker {} }
  local seq12 = seq1     "seq12" { }
  assertTrue (sequence:is_owner())
  assertTrue (seq1    :is_owner())
  assertFalse(seq12   :is_owner())
end

function TestSequence:testIsView()
  local seq1  = sequence "seq1"  { marker {} }
  local seq12 = seq1     "seq12" { }
  assertFalse(sequence:is_view())
  assertFalse(seq1    :is_view())
  assertTrue (seq12   :is_view())
end

-------------------------------------------------------------------------------o


-- end ------------------------------------------------------------------------o