--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module regression tests - logrange
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the range module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertEquals, assertAlmostEquals, assertTrue, assertFalse,
      assertErrorMsgContains, assertNil, assertNaN, assertIsString
      in require 'luaunit'

local range   , nrange   , irange   , is_range,
      logrange, nlogrange, ilogrange, is_logrange,
      tiny, eps, huge, inf, nan in MAD
local is_function in MAD

-- regression test suite ------------------------------------------------------o

TestLogrange = {}

local values = {
  special = { huge, tiny, inf },
  num   = {0, 2^-64, 2^-63, 2^-53, eps, 2^-52, 2*eps, 2^-32, 2^-31, 1e-9,
          0.1-eps, 0.1, 0.1+eps, 0.5, 0.7-eps, 0.7, 0.7+eps, 1-eps, 1, 1+eps,
          1.1, 1.7, 2, 10, 1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53,
          2^63, 2^64 },

  lempty = {
           { 10^5, 1   , 10 },
           { 10^5,-1   , 10 },
           { 10^5, 1   ,-10 },
           { 10^5,-1   ,-10 },
           {-10^5, 1   , 10 },
           {-10^5,-1   , 10 },
           {-10^5, 1   ,-10 },
           {-10^5,-1   ,-10 },
           {-1   , 10^5, 10 },
           {-1   , 10^5,-10 },
           {-1   ,-10^5, 0.1},
           {-1   ,-10^5,-0.1},
           { 1   , 10^5, 0.1},
           { 1   , 10^5,-0.1},
           { 1   ,-10^5, 10 },
           { 1   ,-10^5,-10 },
           },
  lrng  = {
          { 10^5, 1   , 0.1},
          {-10^5,-1   , 0.1},
          { 10^5,-1   , 0.1},
          {-10^5, 1   , 0.1},
          { 10^5, 1   ,-0.1},
          {-10^5,-1   ,-0.1},
          { 10^5,-1   ,-0.1},
          {-10^5, 1   ,-0.1},
          { 1   , 10^5, 10 },
          {-1   ,-10^5, 10 },
          { 1   ,-10^5, 0.1},
          {-1   , 10^5, 0.1},
          { 1   , 10^5,-10 },
          {-1   ,-10^5,-10 },
          { 1   ,-10^5,-0.1},
          {-1   , 10^5,-0.1},
          { 0   , 0   , 0  },
          { 0   , 0   ,-0  },
          },
}


function TestLogrange:testConstructor()
    local a = 2
  local msg = {
    "invalid argument #1 (number expected)",
    "cannot convert 'string' to 'const double'",
  }
  assertErrorMsgContains( msg[1], logrange            )
  assertErrorMsgContains( msg[1], logrange, nil, 1    )
  assertErrorMsgContains( msg[1], logrange, 1..10..2  )
  assertErrorMsgContains( msg[1], logrange, ''        )
  assertErrorMsgContains( msg[2], logrange, 1, ''     )
  assertErrorMsgContains( msg[2], logrange, 1, 10, '' )

  assertTrue( is_logrange(logrange(1))           )
  assertTrue( is_logrange(logrange(1,10))        )

  assertTrue( is_logrange( logrange( a, a)   ) )
  assertTrue( is_logrange( logrange(-a,-a)   ) )
  assertTrue( is_logrange( logrange( a, a, a)) )
  assertTrue( is_logrange( logrange(-a,-a,-a)) )

  for _,v in ipairs(values.lrng) do
    assertTrue( is_logrange( logrange(v[1],v[2],v[3]) ) )
  end
  for _,v in ipairs(values.lempty) do
    assertTrue( is_logrange( logrange(v[1],v[2],v[3]) ) )
  end
  --for _,v in ipairs(values.num) do
  --  assertTrue( is_logrange(logrange( 1, 10, v)) )
  --  assertTrue( is_logrange(logrange( 1, 10,-v)) )
  --end
  for _,v in ipairs(values.special) do
    assertTrue( is_logrange(logrange( 1,  10, v)) )
    assertTrue( is_logrange(logrange( 10, 1 ,-v)) )
    assertTrue( is_logrange(logrange( 1 , v , v)) )
    assertTrue( is_logrange(logrange( 1 ,-v ,-v)) )
    assertTrue( is_logrange(logrange( v , v , v)) )
    assertTrue( is_logrange(logrange(-v ,-v ,-v)) )
  end

  assertTrue( is_logrange(logrange( 1  , 10 , nan)) )
  assertTrue( is_logrange(logrange( 10 , 1  ,-nan)) )
  assertTrue( is_logrange(logrange( 1  , nan, nan)) )
  assertTrue( is_logrange(logrange( 1  ,-nan,-nan)) )
  assertTrue( is_logrange(logrange( nan, nan, nan)) )
  assertTrue( is_logrange(logrange(-nan,-nan,-nan)) )
end

function TestLogrange:testGrpBld()
local lr

  print("non-empty")
  for _,v in ipairs(values.lrng) do
    lr = logrange(v[1],v[2],v[3])
    print( lr:is_empty(), lr:value(0), lr:get(0), lr:range() )
  end
  print("\n","non-empty")
  for _,v in ipairs(values.lempty) do
    lr = logrange(v[1],v[2],v[3])
    print( lr:is_empty(), lr:value(0), lr:get(0), lr:range() )
  end
end
--[[
function TestLogrange:testConcatCtor()
end

function TestLogrange:testFields()
end

function TestLogrange:testReadonly()
end

function TestLogrange:testIsLogrange()
end

function TestLogrange:testRange()
end

function TestLogrange:testIsEmpty()
end

function TestLogrange:testNConstructor()
end

function TestLogrange:testNCnstrFields()
end

function TestLogrange:testValue()
  end

function TestLogrange:testGet()
end

function TestLogrange:testIndex()
end

function TestLogrange:testSize()
end

function TestLogrange:testEqual()
end

function TestLogrange:testReverse()
end

function TestLogrange:testNsteplog()
end

function TestLogrange:testBounds()
end

function TestLogrange:testOverlap()
end

function TestLogrange:testIlogrange()
end

-- performance test suite -----------------------------------------------------o

Test_Logrange = {}
function Test_Logrange:testIrange()
end
-- end ------------------------------------------------------------------------o
]]
