--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

	Purpose:
	- Provide regression test suites for the range module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertEquals, assertAlmostEquals, assertTrue, assertFalse,
			assertErrorMsgContains, assertNil, assertIsString in require 'luaunit'

local range   , nrange   , irange   , is_range,
			logrange, nlogrange, ilogrange, is_logrange,
			tiny, eps, huge, inf, nan in MAD
local is_function in MAD

-- regression test suite ------------------------------------------------------o

TestRange = {}

function TestRange:testConstructor()
	local msg = {
		"invalid argument #1 (number expected)",
		"cannot convert 'string' to 'double'",
	}
	assertErrorMsgContains( msg[1], range            )
	assertErrorMsgContains( msg[1], range, nil, 1    )
	assertErrorMsgContains( msg[1], range, 1..10..2  )
	assertErrorMsgContains( msg[1], range, ''        )
	assertErrorMsgContains( msg[2], range, 1, ''     )
	assertErrorMsgContains( msg[2], range, 1, 10, '' )

	assertTrue( is_range(range(1))           )
	assertTrue( is_range(range(1,10))        )
	assertTrue( is_range(range(1,10,0.1))    )
  assertTrue( is_range(range(0,0,0))       )
  assertTrue( is_range(range(1,10,0))      )
  assertTrue( is_range(range(1,10,2))      )
  assertTrue( is_range(range(1,10,-2))     )
  assertTrue( is_range(range(-10,-1,-0.7)) )

	assertTrue( is_range(range(nan,nan,nan))    )
	assertTrue( is_range(range(-nan,-nan,-nan)) )
end

function TestRange:testConcatCtor()
	local a = 2
	assertTrue( is_range(0..9)           )
	assertTrue( is_range(0..9..2)        )
	assertTrue( is_range(0..9..0)        )
	assertTrue( is_range(0..0..0)        )
	assertTrue( is_range(9..0..0)        )
	assertTrue( is_range(9..0..2)        )
	assertTrue( is_range(9..0..-2)       )
	assertTrue( is_range(0..9..0.5)      )
	assertTrue( is_range(0..9.. .5)      )
	assertTrue( is_range(0..0.9..0.5)    )
	assertTrue( is_range(0.. .9.. .5)    )
	assertTrue( is_range(0.1..0.9..0.5)  )
	assertTrue( is_range( .1.. .9.. .5)  )
	assertTrue( is_range(0..9..-0.5)     )
	assertTrue( is_range(0..9..- .5)     )
	assertTrue( is_range(0..-0.9..0.5)   )
	assertTrue( is_range(0..- .9.. .5)   )
	assertTrue( is_range(-0.1..0.9..0.5) )
	assertTrue( is_range(- .1.. .9.. .5) )

  assertEquals( 1..10           , range(1,10)           )
	assertEquals( - .1.. .9.. .5  , range(-.1,.9,.5)      )
	assertEquals( 0..9..2         , range(0,9,2)          )
	assertEquals( 0.9..0..-0.1    , range(0.9,0,-0.1)     )

	assertEquals(  a..a           , range(a,a)            )
	assertEquals(  a..a..a        , range(a,a,a)          )
	assertEquals( -a..-a          , range(-a,-a)          )
	assertEquals( -a..-a..-a      , range(-a,-a,-a)       )
	assertEquals(  inf..inf..inf  , range( inf,inf,inf)   )
	assertEquals( -inf..-inf..-inf, range(-inf,-inf,-inf) )
	assertEquals(  1..inf..inf    , range( 1,inf,inf)     )

	assertTrue( is_range(a..a)           )
	assertTrue( is_range(a..a..a)        )
	assertTrue( is_range(-a..-a)         )
	assertTrue( is_range(-a..-a..-a)     )

	assertTrue( is_range( inf..inf..inf  ) )
	assertTrue( is_range(-inf..-inf..-inf) )
  assertTrue( is_range( nan..nan..nan  ) )
	assertTrue( is_range(-nan..-nan..-nan) )

	assertEquals( tostring((nan..nan..nan).start), 'nan' )
	assertEquals( tostring((nan..nan..nan).stop) , 'nan' )
	assertEquals( tostring((nan..nan..nan).step) , 'nan' )

	assertIsString( 1..''    )
	assertIsString( 1..10..'')
end

function TestRange:testFields()
	assertEquals( range(1,10,0.1).start, 1   )
	assertEquals( range(1,10,0.1).stop , 10  )
	assertEquals( range(1,10,0.1).step , 0.1 )

	assertEquals( {range(1)       :range()}, {1,1,1}       )
	assertEquals( {range(1,10)    :range()}, {1,10,1}      )
	assertEquals( {range(1,10,0.1):range()}, {1,10,0.1}    )
	assertEquals( {range(1,10,2)  :range()}, {1,10,2}      )
	assertEquals( {(2..10)        :range()}, {2,10,1}      )
	assertEquals( {(2..10..5)     :range()}, {2,10,5}      )
	assertEquals( {(10..2)        :range()}, {10,2,1}      )
	assertEquals( {(10..1)        :range()}, {10,1,1}      )
	assertEquals( {(1..10..0)     :range()}, {1,10,0}      )
	assertEquals( {(1..inf)       :range()}, {1,inf,1}     )
	assertEquals( {(inf..inf..inf):range()}, {inf,inf,inf} )

	assertEquals( tostring(range(nan,nan,nan).start), 'nan' )
	assertEquals( tostring(range(nan,nan,nan).stop) , 'nan' )
	assertEquals( tostring(range(nan,nan,nan).step) , 'nan' )
end

function TestRange:testReadonly()
	local msg = {
		"attempt to write to constant location",
	}
	local f1=\r,v => r.start = v end
	assertErrorMsgContains( msg[1], f1, 1..10..0.1     , 1 )
	assertErrorMsgContains( msg[1], f1, range(1,10,0.1), 1 )
	assertErrorMsgContains( msg[1], f1, nrange(1,10,10), 1 )
	local f2=\r,v => r.stop  = v end
	assertErrorMsgContains( msg[1], f2, 1..10..0.1     , 1 )
	assertErrorMsgContains( msg[1], f2, range(1,10,0.1), 1 )
	assertErrorMsgContains( msg[1], f2, nrange(1,10,10), 1 )
	local f3=\r,v => r.step  = v end
	assertErrorMsgContains( msg[1], f3, 1..10..0.1     , 1 )
	assertErrorMsgContains( msg[1], f3, range(1,10,0.1), 1 )
	assertErrorMsgContains( msg[1], f3, nrange(1,10,10), 1 )
end

function TestRange:testIsRange()
	assertTrue( is_range(range(1))   )
	assertTrue( is_range(1..10)      )
	assertTrue( is_range(1..10..0.1) )
	assertTrue( is_range(1..0)       )
	assertTrue( is_range(1..0..10)   )
	assertTrue( is_range(1..10..0)   )
	assertTrue( is_range(10..1)      )
	assertTrue( is_range(1..10)      )
	assertTrue( is_range(nrange(1,10,10)) )
	assertTrue( is_range(nrange(1,10,1))  )
	assertTrue( is_range(nrange(1,10,0))  )

	assertFalse( is_range('') )
	assertFalse( is_range(2)  )
	assertFalse( is_range(logrange(1,10^6,10)) )
	assertFalse( is_range(nlogrange(1,10,10))  )
end

function TestRange:testRange()
	assertEquals( {range(1)       :range()}, {1,1,1}     )
	assertEquals( {(1..10)        :range()}, {1,10,1}    )
	assertEquals( {(1..2.2..0.1)  :range()}, {1,2.2,0.1} )
	assertEquals( {(1..0)         :range()}, {1,0,1}     )
	assertEquals( {(1..10..0)     :range()}, {1,10,0}    )
	assertEquals( {(10..1)     		:range()}, {10,1,1}    )
	assertEquals( {nrange(1,10,10):range()}, {1,10,1}    )
  assertEquals( {nrange(0,9,10) :range()}, {0,9,1}     )
  assertEquals( {nrange(1,10,1) :range()}, {1,10,10}   )
end

function TestRange:testIsEmpty()
	assertTrue ( range(0,10,0)    :is_empty() )
	assertTrue ( range(0,-10,1)   :is_empty() )
	assertTrue ( range(0,10,-1)   :is_empty() )
	assertTrue ( nrange(1,10,-1)  :is_empty() )
	assertTrue ( nrange(1,10,-inf):is_empty() )
	assertTrue ( nrange(1,10,0)   :is_empty() )
  assertTrue ( nrange(1,10,inf) :is_empty() )
	assertTrue ( nrange(1,10,0.7) :is_empty() )

  assertFalse( range(1)         :is_empty() )
  assertFalse( range(1,10)      :is_empty() )
  assertFalse( range(1,10,0.1)  :is_empty() )
  assertFalse( range(0,-10,-1)  :is_empty() )
  assertFalse( nrange(0,9,10)   :is_empty() )
end

function TestRange:testNConstructor()
	local a = 2
	local msg = {
		"invalid argument #1 (number expected)",
		"invalid argument #1, #2 or #3 (number expected)",
	}
	assertErrorMsgContains( msg[1], nrange             )
	assertErrorMsgContains( msg[1], nrange,  nil, 1    )
	assertErrorMsgContains( msg[2], nrange,  nil, 1, 1 )
	assertErrorMsgContains( msg[1], nrange, ''         )
	assertErrorMsgContains( msg[1], nrange, '', ''     )
	assertErrorMsgContains( msg[2], nrange, '', 1 , 1  )
	assertErrorMsgContains( msg[2], nrange, '', '', 1  )
	assertErrorMsgContains( msg[2], nrange, 1 , 2 , '' )
	assertErrorMsgContains( msg[1], nrange,(1..10..1)  )

	assertTrue( is_range(nrange(1))              )
	assertTrue( is_range(nrange(1,10))           )
	assertTrue( is_range(nrange(1,10,0))         )
	assertTrue( is_range(nrange(1,10,1))         )
	assertTrue( is_range(nrange(1,10,-1))        )
	assertTrue( is_range(nrange(inf,inf,inf))    )
	assertTrue( is_range(nrange(-inf,-inf,-inf)) )
	assertTrue( is_range(nrange(nan,nan,nan))    )
	assertTrue( is_range(nrange(a,a,a))          )
	assertTrue( is_range(nrange(-a,-a,-a))       )

	assertEquals( {nrange(1)       :range()}, {1,1,1,}  )
	assertEquals( {nrange(1,10)    :range()}, {1,10,1}  )
  assertEquals( {nrange(1,10,0)  :range()}, {1,10,0}  )
  assertEquals( {nrange(1,10,10) :range()}, {1,10,1}  )
  assertEquals( {nrange(1,10,inf):range()}, {1,10,0}  )
  assertEquals( {nrange(2,10,1)  :range()}, {2,10,9}  )	
  assertEquals( {nrange(2,10,1.1):range()}, {2,10,8}  )	
	
	assertEquals( {nrange(-inf,-inf,-inf):range()}      , {-inf,-inf,0} )
	assertEquals(  nrange( inf, inf, inf).stop          , inf           )
	assertEquals(  nrange( inf, inf, inf).start         , inf           )
	assertEquals( tostring(nrange( inf, inf, inf).step) , 'nan'         )

	assertEquals( tostring(nrange(nan,nan,nan).start)   , 'nan' )
	assertEquals( tostring(nrange(nan,nan,nan).stop)    , 'nan' )
	assertEquals(          nrange(nan,nan,nan).step     , 0     )
	assertEquals( tostring(nrange(-nan,-nan,-nan).start), 'nan' )
	assertEquals( tostring(nrange(-nan,-nan,-nan).stop) , 'nan' )
	assertEquals(          nrange(-nan,-nan,-nan).step  , 0     )
end

function TestRange:testNCnstrSinglePoint() -- renaming; changing the position?
  assertFalse( nrange(1,10,1)   :is_empty() )
  assertFalse( nrange(1,-10,1)  :is_empty() )
  assertFalse( nrange(-1,10,1)  :is_empty() )
  assertFalse( nrange(-1,-10,1) :is_empty() )
	assertFalse( nrange(10,1,1)   :is_empty() )
  assertFalse( nrange(10,-1,1)  :is_empty() )
  assertFalse( nrange(-10,1,1)  :is_empty() )
  assertFalse( nrange(-10,-1,1) :is_empty() )

  assertEquals( nrange(1,10,1)  :size(), 1  )
  assertEquals( nrange(-10,-1,1):size(), 1  )
  assertEquals( nrange(-10,1,1) :size(), 1  )
  assertEquals( nrange(-1,10,1) :size(), 1  )
  assertEquals( nrange(1,-10,1) :size(), 1  )
  assertEquals( nrange(-1,-10,1):size(), 1  )
  assertEquals( nrange(10,-1,1) :size(), 1  )

	assertEquals( nrange(1,10,1)  :get(0), 1  )
	assertEquals( nrange(1,-10,1) :get(0), 1  )
	assertEquals( nrange(-1,10,1) :get(0),-1  )
	assertEquals( nrange(-1,-10,1):get(0),-1  )
	assertEquals( nrange(10,1,1)  :get(0), 10 )
	assertEquals( nrange(10,-1,1) :get(0), 10 )
	assertEquals( nrange(-10,1,1) :get(0),-10 )
	assertEquals( nrange(-10,-1,1):get(0),-10 )
	assertNil   ( nrange(1,10,1)  :get(1) )
	assertNil   ( nrange(1,-10,1) :get(1) )
	assertNil   ( nrange(-1,10,1) :get(1) )
	assertNil   ( nrange(-1,-10,1):get(1) )
	assertNil   ( nrange(10,1,1)  :get(1) )
	assertNil   ( nrange(10,-1,1) :get(1) )
	assertNil   ( nrange(-10,1,1) :get(1) )
	assertNil   ( nrange(-10,-1,1):get(1) )
end

function TestRange:testValue()
	assertEquals( range(1,10,0.1):value(-1)  , 0.9 )
	assertEquals( range(1,10,0.1):value(11)  , 2.1 )
	assertEquals( range(1,10,0)  :value(1)   , 1   )
	assertEquals( range(10,1,1)  :value(1)   , 11  )
  assertEquals( range(10,1,1)  :value(inf) , inf )
  assertEquals( range(10,1,1)  :value(-inf),-inf )
	assertEquals( nrange(1,10,1) :value(inf) , inf )
	assertEquals( nrange(1,10,1) :value(1)   , 11  )
  assertEquals( tostring(range(1,10,1) :value(nan)), 'nan' )
  assertEquals( tostring(nrange(1,10,1):value(nan)), 'nan' )
	
  assertEquals( (-2..2..0.1)       :value(0)  ,-2    )
	assertEquals( (1..20..0.1)       :value(1)  , 1.1  )
	assertEquals( (1..20..0.1)       :value(1.1), 1.11 )
	assertEquals( range(1,100,1)     :value(99) , 100  )
	assertEquals( nrange(1,100,100)  :value(99) , 100  )
	assertAlmostEquals( (2..-2..-0.1):value(22)- -0.2, 0, eps )

  assertEquals( (0..10):value(tiny) , tiny )
  assertEquals( (0..10):value(huge) , huge )
  assertEquals( (0..10):value(-tiny),-tiny )
	assertEquals( (0..10):value(-huge),-huge )
end

function TestRange:testGet()
	assertNil( range(1,10,0.1) :get(-1)   )
	assertNil( range(1,10,0.1) :get(101)  )
	assertNil( range(1,10,0)   :get(0)    )
	assertNil( nrange(1,10,0)  :get(0)    )
	assertNil( range(1,10,0.1) :get(inf)  )
	assertNil( range(1,10,0.1) :get(-inf) )
	assertNil( range(1,10,0.1) :get(nan)  )
  assertNil( range(1,10,0.1) :get(nan)  )
	assertNil( nrange(1,10,1)  :get(inf)  )
	assertNil( nrange(1,10,1)  :get(-inf) )
	
	assertNil   ( range( 1 ,-10, 2):get(0) )
	assertNil   ( range(-1 ,-10, 2):get(0) )
	assertNil   ( range( 10, 1 , 2):get(0) )
	assertNil   ( range( 10,-1 , 2):get(0) )
	assertEquals( range( 1 , 10, 2):get(0), 1   )
	assertEquals( range(-1 , 10, 2):get(0),-1   )
	assertEquals( range(-10, 1 , 2):get(0),-10  )
	assertEquals( range(-10,-1 , 2):get(0),-10  )

  assertEquals( (-2..2..0.1)       :get(0)  ,-2    )
	assertEquals( (1..20..0.1)       :get(1)  , 1.1  )
	assertEquals( (1..20..0.1)       :get(1.1), 1.11 )
	assertEquals( range(1,100,1)     :get(99) , 100  )
	assertEquals( nrange(1,100,100)  :get(99) , 100  )
	assertAlmostEquals( (2..-2..-0.1):get(22)- -0.2, 0, eps )

	local res = 1..5
	local ref = {1, 2, 3, 4, 5}
	for i=1,#res do assertEquals(res:get(i-1), ref[i]) end

	local res = 0.5..0..-0.1
	local ref = {0.5, 0.4, 0.3, 0.2, 0.1, 0}
	for i=1,#res do assertAlmostEquals(res:get(i-1) - ref[i], 0, eps) end

	local r =   range(1)
	--for i=1,#res do assertEquals(res:get(i-1), ref[i]) end

	local r =   range(1,10)
	--for i=1,#res do assertEquals(res:get(i-1), ref[i]) end
	
	local r =   range(1,10,2)
	local r =   range(10,-1,-0.7)


end

function TestRange:testIndex()
	assertNil( (10..1..-1)[11]       )
	assertNil( (10..1..-1)[0]        )
	assertNil( range(1,10,0.1)[101]  )
	assertNil( range(1,10,0.1)[0]    )
	assertNil( nrange(1,10,1)[10]    )
	assertNil( nrange(1,10,10)[inf]  )
	assertNil( range(1,10,0.1)[inf]  )
	assertNil( nrange(1,10,10)[-inf] )
	assertNil( range(1,10,0.1)[-inf] )
	assertNil( nrange(1,10,10)[nan]  )
	assertNil( range(1,10,0.1)[nan]  )
	assertNil( nrange(1,10,10)['']   )
	assertNil( range(1,10,0.1)['']   )
	assertNil( nrange(1,10,10)[nil]  )
	assertNil( range(1,10,0.1)[nil]  )

	assertEquals( range(1,10,1)[1] , 1   )
	assertEquals( range(1,10,1)[10], 10  )
	assertEquals( (10..1..-1)[1]   , 10  )
	assertEquals( (10..1..-1)[10]  , 1   )
	
	local res = 1..5
	local ref = {1, 2, 3, 4, 5}
	for i=1,#res do assertEquals(res[i], ref[i]) end

	local res = 0.5..0..-0.1
	local ref = {0.5, 0.4, 0.3, 0.2, 0.1, 0}
	for i=1,#res do assertAlmostEquals(res[i] - ref[i], 0, eps) end
end

function TestRange:testSize()
	assertTrue  ( range(1,20,1)  :size() == (2..40..2):size() )
	assertEquals( range(1)       :size(), 1  )
  assertEquals( range(2,10,nil):size(), 9  )
	assertEquals( (1..10)        :size(), 10 )
	assertEquals( (1..1.95..0.1) :size(), 10 )
	assertEquals( (2..1..-0.1)   :size(), 11 )
  assertEquals( (0..2.1..1)    :size(), 3  )
  assertEquals( (0..2.9..1)    :size(), 3  )
	assertEquals( (1..-20..-1)   :size(), 22 )
	assertEquals( (1..12..1.1)   :size(), 11 )
	assertEquals( (12..1..-1.1)  :size(), 11 )
	assertEquals( (1..20..1.9)   :size(), 11 )
	assertEquals( (1..22..2.1)   :size(), 11 )
	assertEquals( (22..1..-2.1)  :size(), 11 )
	assertEquals( (3..33..3)     :size(), 11 )
	assertEquals( (33..3..-3)    :size(), 11 )

	assertEquals( (0..9..0)      :size(), 0  )
	assertEquals( (0..9..-1)     :size(), 0  )
	assertEquals( (0..-9)        :size(), 0  )
	assertEquals( (0..-9..0)     :size(), 0  )
	assertEquals( (0..-9..0.1)   :size(), 0  )
	
  assertEquals( nrange(2,10,inf) :size(), 0  )
  assertEquals( nrange(2,10,nan) :size(), 0  )	
  assertEquals( nrange(2,10,0)   :size(), 0  )	
  assertEquals( nrange(2,10,-1)  :size(), 0  )	
  assertEquals( nrange(2,10,0.1) :size(), 0  )
  assertEquals( nrange(2,10,nil) :size(), 9  )

  assertEquals( nrange(2,10,1.1) :size(), 2  )	
	assertEquals( nrange(1,32,9)   :size(), 9  )
	assertEquals( nrange(1,32,10)  :size(), 10 )
	assertEquals( nrange(1,31,9)   :size(), 9  )
	assertEquals( nrange(1,31,10)  :size(), 10 )
  assertEquals( nrange(10,1,1)   :size(), 1  )
  --assertEquals( range(2,10,inf) :size(), 0 ) --step of inf -> return size == 0
  --assertEquals( range(2,10,-inf):size(), 0 ) 

  assertEquals( tostring(range(2,10,nan):size()), 'nan' )
  assertEquals( (0..24..4)    :size(), #(0..24..4)      )
  assertEquals( nrange(1,32,9):size(), #nrange(1,32,9)  )
end

function TestRange:testEqual()
	assertTrue( range(1,20)      == 1..20       )
	assertTrue( range(10,1)      == 10..1       )
	assertTrue( range(1,20,0)    == 1..20..0    )
	assertTrue( range(1,20,0.1)  == 1..20..0.1  )
	assertTrue( range(-1,-20,-1) ==-1..-20..-1  )
	assertTrue( range(1,20,0.1)  == 1..20..0.1  )
	assertTrue( nrange(1,20,20)  == 1..20       )
	assertTrue( nrange(1,20,0)   == 1..20..0    )
	assertTrue( nrange(1,1,1)    == 1..1        )
end

function TestRange:testReverse()
	assertEquals( range(1)        :reverse(), (1..1..-1)     )
	assertEquals( (1..10..0.1)    :reverse(), (10..1..-0.1)  )
	assertEquals( range(2,20,-1)  :reverse(), (20..2..1)     )
	assertEquals( range(-20,-2,2) :reverse(), (-2..-20..-2)  )
	assertEquals( range(1,2,inf)  :reverse(), (2..1..-inf)   )
	assertEquals( range(-1,2,-inf):reverse(), (2..-1..inf)   )
	assertEquals( nrange(0,9,10)  :reverse(), nrange(9,0,10) )
	assertEquals( nrange(0,9,0)   :reverse(), nrange(9,0,0)  )
	assertEquals( nrange(0,9,1)   :reverse(), nrange(9,0,1)  )
end

function TestRange:testBounds()
	assertEquals( {range(1,0)       :bounds()}, {1,0}       )
	assertEquals( {range(1,10,0.1)  :bounds()}, {1,10}      )
	assertEquals( {range(1,10,-0.1) :bounds()}, {10,1}      )
	assertEquals( {range(10,1,0.1)  :bounds()}, {10,1}      )
	assertEquals( {range(10,1,-1)   :bounds()}, {1,10}      )
	assertEquals( {nrange(1,20,1)   :bounds()}, {1,20}      )
	assertEquals( {nrange(20,1,10)  :bounds()}, {1,20}      )

	assertEquals( {range(1,10,nan)  :bounds()}, {nil,nil}   )
	assertEquals( {range(-inf,inf)  :bounds()}, {-inf,inf}  )
	assertEquals( {range(0,9,0)     :bounds()}, {nil,nil}   )
	assertEquals( {nrange(1,20,0)   :bounds()}, {nil,nil}   )
	assertEquals( {range(20,-2,-0.2):bounds()}, {-2,20,nil} )
end

function TestRange:testOverlap()
local msg = { 
		"attempt to compare nil with number",
 }
	--assertErrorMsgContains( msg[1], overlap, range(1,10,nan), 0..9 )
	--assertErrorMsgContains( msg[1], overlap, range(-inf,inf), 0..9 )
	--assertFalse( range(1,10,nan):overlap(0..9) )
	--assertFalse( range(-inf,inf):overlap(0..9) )
	--assertFalse( range(0,9,0)   :overlap(0..9) )
	--assertFalse( nrange(1,20,0) :overlap(0..9) )

	assertTrue( range(1)   :overlap(1..1)       )
	assertTrue( (1..9)     :overlap(1..1)       )
	assertTrue( (1..9..0.7):overlap(9..1..-0.7) )
    
	assertTrue ( range(1,10,0.1) :overlap(0..9)     )
	assertTrue ( range(10,1,-1)  :overlap(0..9)     )
	assertFalse( range(1,10,-0.1):overlap(0..9)     )
	assertFalse( range(10,1,0.1) :overlap(0..9)     )
  assertFalse( nrange(2,10,0)  :overlap(0..9)     )	
	assertFalse( (0..9)          :overlap(0..-9..0) )
	assertFalse( range(10,1,0.1) :overlap(0..9)     )
	assertFalse( range(10,1,0.1) :overlap(0..9)     )
end


function TestRange:testIrange()
	local msg = {
		"invalid argument #1 (number expected)",
		"cannot convert 'string' to 'double'",
	}
	assertErrorMsgContains( msg[1], irange             )
	assertErrorMsgContains( msg[1], irange, ''         )
	assertErrorMsgContains( msg[1], irange, nil, 1     )
	assertErrorMsgContains( msg[2 ], irange, 1, ''     )
	assertErrorMsgContains( msg[2 ], irange, 1, 10, '' )   
	local ir = {irange(1,10,1)}
	assertTrue( is_function(ir[1]) )
	assertTrue( is_range(ir[2])    )
	assertTrue( ir[3] == 0         )

	local r =   range(1)
	for i,v in irange(1)        do assertEquals(r[i], v) end
	local r =   range(1,10)
	for i,v in irange(1,10)     do assertEquals(r[i], v) end
	local r =   range(1,10,2)
	for i,v in irange(1,10,2)   do assertEquals(r[i], v) end
	local r =   range(10,-1,-1)
	for i,v in irange(10,-1,-1) do assertEquals(r[i], v) end

	local ir = {irange(1,10,0)}
	assertFalse( ir[1] or ir[2] or ir[3] )

	local ir = {irange(10,1)}  -- should return nil?
	--assertFalse( ir[1] or ir[2] or ir[3] )

	--for i,v in irange(10,1) do print(i,v) end
end

-- performance test suite -----------------------------------------------------o

Test_Range = {}

function Test_Range:testIrange()
	local s = 4e-8
	local r = 0..s..eps
	local t0 = os.clock()
	for i,v in irange(0,s,eps) do assert(r[i], v) end
	local dt = os.clock() - t0
	assertAlmostEquals( dt, 0.5, 1 )
end

--TODO

function Test_Range:testGet()
	local s = 4e-8
	local r = 0..s..eps
	local t0 = os.clock()
	--for i,v in irange(0,s,eps) do assert(r[i], v) end
	local dt = os.clock() - t0
	assertAlmostEquals( dt, 0.5, 1 )
end

function Test_Range:testIndex()
	local s = 4e-8
	local r = 0..s..eps
	local t0 = os.clock()
	--for i,v in irange(0,s,eps) do assert(r[i], v) end
  --for i=1,#res do assertEquals(res[i], ref[i]) end
	local dt = os.clock() - t0
	assertAlmostEquals( dt, 0.5, 1 )

end
-- end ------------------------------------------------------------------------o
