--[=[
 o-----------------------------------------------------------------------------o
 |
 | Range module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

	Purpose:
	- Provide regression test suites for the range module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertEquals, assertAlmostEquals, assertTrue, assertFalse,
			assertErrorMsgContains, assertNil, assertNaN, assertIsString
			in require 'luaunit'

local range   , nrange   , irange   , inrange   , is_range,
      logrange, nlogrange, ilogrange, inlogrange, is_logrange, log,
      tiny, eps, huge, inf, nan,
      is_function in MAD

-- regression test suite ------------------------------------------------------o

TestRange = {}

local values = {
  lim   = { tiny, eps, huge },
  num   = {0, tiny, 2^-64, 2^-63, 2^-53, eps, 2^-52, 2*eps, 2^-32, 2^-31, 1e-9,
          0.1-eps, 0.1, 0.1+eps, 0.5, 0.7-eps, 0.7, 0.7+eps, 1-eps, 1, 1+eps,
          1.1, 1.7, 2, 10, 1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53,
          2^63, 2^64, huge },
	rng   = {
			 	  { 1 , 10, 0.1}, { 1 ,-10,-0.1}, {-1 , 10, 0.1}, {-1 ,-10,-0.1},
			    { 10, 1 ,-0.1}, { 10,-1 ,-0.1}, {-10, 1 , 0.1}, {-10,-1 , 0.1},
			    { 10, 10, 0.1}, {-10,-10,-0.1},
			    },
  empty = {
				  { 1 , 10,-0.1}, { 1 ,-10, 0.1}, {-1 ,-10, 0.1}, {-1 , 10,-0.1},
				  { 10, 1 , 0.1}, { 10,-1 , 0.1}, {-10, 1 ,-0.1}, {-10,-1 ,-0.1},
				  },
  zeros = {
				  { 0 , 0 , 0  }, {-0 ,-0 ,-0  }, { 1 , 10, 0  }, { 1 , 10,-0  },
				  },
}

-- RawRange

function TestRange:testRawCtor()
	local a = 2
	assertTrue( is_range(0..9..0.5)      )
	assertTrue( is_range(0..9.. .5)      )
	assertTrue( is_range(0..0.9..0.5)    )
	assertTrue( is_range(0.. .9.. .5)    )
	assertTrue( is_range(0.1..0.9..0.5)  )
	assertTrue( is_range( .1.. .9.. .5)  )
	assertTrue( is_range(0..9..-0.5)     )
	assertTrue( is_range(0..9..- .5)     )
	assertTrue( is_range(0..-0.9..0.5)   )
	assertTrue( is_range(0..- .9.. .5)   )
	assertTrue( is_range(-0.1..0.9..0.5) )
	assertTrue( is_range(- .1.. .9.. .5) )

	assertIsString( 1..''    )
	assertIsString( 1..10..'')
	assertIsString( a..a..'' )
end

function TestRange:testFields()
  assertEquals( {( 10..1 )        :ranges()}, { 10, 1  , 1}   )
  assertEquals( {( 0 ..1  .. eps) :ranges()}, { 0 , 1  , eps} )
  assertEquals( {( 1 ..0  ..-eps) :ranges()}, { 1 , 0  ,-eps} )
  assertEquals( {( 0 ..0.5.. eps) :ranges()}, { 0 , 0.5, eps} )
  assertEquals( {( 1 ..0.5..-eps) :ranges()}, { 1 , 0.5,-eps} )

  for _,v in ipairs(values.rng)do
    assertEquals( {(v[1]..v[2]..v[3]):ranges()}, { v[1], v[2], v[3] } )
  end
  for _,v in ipairs(values.empty) do
    assertEquals( {(v[1]..v[2]..v[3]):ranges()}, { v[1], v[2], v[3] } )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( {(v[1]..v[2]..v[3]):ranges()}, { v[1], v[2], v[3] } )
  end
  for _,v in ipairs(values.num) do
    assertEquals( {( 1 .. 10.. v):ranges()}, { 1 , 10, v} )
    assertEquals( {( 10.. 1 ..-v):ranges()}, { 10, 1 ,-v} )
  end
  local r
  for _,v in ipairs(values.lim) do
    assertEquals( {( 1 .. 10.. v):ranges()}, { 1 , 10, v} )
    assertEquals( {( 10.. 1 ..-v):ranges()}, { 10, 1 ,-v} )
    assertEquals( {( 1 ..-v ..-v):ranges()}, { 1 ,-v ,-v} )
    assertEquals( {( v .. v .. v):ranges()}, { v , v , v} )
    assertEquals( {(-v ..-v ..-v):ranges()}, {-v ,-v ,-v} )
    r = { (1..v..v):ranges() }
    assertEquals( r[1], 1 )
    assertAlmostEquals( r[2], v, eps )
    assertAlmostEquals( r[3], v, eps )
  end
end

function TestRange:testRanges()
  local r
  r =  1..10..1 assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )

  for _,v in ipairs(values.rng) do
    r = v[1]..v[2]..v[3] assertEquals( {r:ranges()}, {r.start,r.stop,r.step} )
  end
  for _,v in ipairs(values.empty) do
    r = v[1]..v[2]..v[3] assertEquals( {r:ranges()}, {r.start,r.stop,r.step} )
  end
  for _,v in ipairs(values.zeros) do
    r = v[1]..v[2]..v[3] assertEquals( {r:ranges()}, {r.start,r.stop,r.step} )
  end
  for _,v in ipairs(values.num) do
    r = 1 ..10.. v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r = 10..1 ..-v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
  end
  for _,v in ipairs(values.lim) do
    r =  1 .. 10.. v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r =  10.. 1 ..-v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r =  1 .. v .. v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r =  1 ..-v ..-v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r =  v .. v .. v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
    r = -v ..-v ..-v  assertEquals( {r:ranges()}, {r.start, r.stop, r.step} )
  end
end

function TestRange:testReadonly()
  local f1, f2, f3
  local msg = {
    "attempt to write to constant location",
  }
  for _,v in ipairs(values.num) do
    f1=\r,v => r.start = v end
    assertErrorMsgContains( msg[1], f1,  1..10..0.1        , v )
    assertErrorMsgContains( msg[1], f1,  range( 1, 10, 0.1), v )
    assertErrorMsgContains( msg[1], f1, nrange( 1, 10, 10 ), v )
    f2=\r,v => r.stop  = v end
    assertErrorMsgContains( msg[1], f2,  1..10..0.1        , v )
    assertErrorMsgContains( msg[1], f2,  range( 1, 10, 0.1), v )
    assertErrorMsgContains( msg[1], f2, nrange( 1, 10, 10 ), v )
    f3=\r,v => r.step  = v end
    assertErrorMsgContains( msg[1], f3,  1..10..0.1        , v )
    assertErrorMsgContains( msg[1], f3,  range( 1, 10, 0.1), v )
    assertErrorMsgContains( msg[1], f3, nrange( 1, 10, 10 ), v )
  end
end

function TestRange:testNanAndInf()
  ---print( (1  .. 10 .. nan ):ranges() )
  ---print( (10 .. 1  ..-nan ):ranges() )
  ---print( (1  .. nan.. nan ):ranges() )
  ---print( (1  ..-nan..-nan ):ranges() )
  ---print( (nan.. nan.. nan ):ranges() )
  ---print( (nan..-nan..-nan ):ranges() )
  ---print( (1  .. 10 .. inf ):ranges() )
  ---print( (10 .. 1  ..-inf ):ranges() )
  ---print( (1  .. inf.. inf ):ranges() )
  ---print( (1  ..-inf..-inf ):ranges() )
  ---print( (inf.. inf.. inf ):ranges() )
  ---print( (inf..-inf..-inf ):ranges() )
end

-- Evaluation

function TestRange:testIsEmpty()
  for _,v in ipairs(values.empty) do
    assertTrue ( (v[1]..v[2]..v[3]):is_empty() )
  end
  for _,v in ipairs(values.zeros) do
    assertFalse( (v[1]..v[2]..v[3]):is_empty() )
  end
  for _,v in ipairs(values.rng) do
    assertFalse( (v[1]..v[2]..v[3]):is_empty() )
  end
  for _,v in ipairs(values.num) do
    if v~=0 then
      assertFalse( ( 1 .. 10..  v) :is_empty() )
      assertFalse( ( 10.. 1 .. -v) :is_empty() )
      assertTrue ( ( 1 .. 10.. -v) :is_empty() )
    end
  end
  for _,v in ipairs(values.lim) do
    assertFalse(  ( 1 .. 10.. v)  :is_empty() )
    assertFalse(  ( 10.. 1 ..-v)  :is_empty() )
    assertFalse(  ( 1 ..-v ..-v)  :is_empty() )
    assertFalse(  ( v .. v .. v)  :is_empty() )
    assertFalse(  (-v ..-v ..-v)  :is_empty() )
  end

  assertFalse( (1..huge..huge):is_empty() )
  assertTrue ( (1..tiny..tiny):is_empty() )
  assertFalse( (0.. 1  .. eps):is_empty() )
  assertFalse( (0..-1  ..-eps):is_empty() )
end


function TestRange:testValue()
  assertEquals( nrange( 1, 10, 1  ) :value( 1 ) , huge  )
  assertEquals( nrange( 1, 100, 100):value( 99) , 100   )
  assertEquals( nrange( 1 , 10, 1)  :value( inf) , inf  )
  assertEquals( nrange( 1, 10, 0)   :value( inf), -inf )
  assertNaN( nrange( 1, 10, 1):value( nan) )
  assertNaN(  range( 1, 10, 1):value( nan) )
  assertNaN(  range( 1, 10, 0):value( inf) )

  assertNaN( ( 1..10..1):value( nan) )
  assertNaN( ( 1..10..0):value( inf) )

  for _,v in ipairs(values.empty) do
    assertEquals( (v[1]..v[2]..v[3]):value(0), v[1] )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3]):value(0), v[1] )
    assertEquals( (v[1]..v[2]..v[3]):value(1), v[1] )
  end
  for _,v in ipairs(values.rng) do
    assertEquals( (v[1]..v[2]..v[3]):value(0), v[1] )
  end
  for _,v in ipairs(values.num) do
    assertAlmostEquals( (0.. 1.. v) :value(1)-  v, 0, eps )
    assertAlmostEquals( (0..-1..-v) :value(1)- -v, 0, eps )
  end

  assertEquals(  ( 1..10..0.1) :value(-1 ) , 0.9   )
  assertEquals(  ( 1..10..0.1) :value( 11) , 2.1   )
  assertEquals(  ( 1..10..0  ) :value( 1 ) , 1     )

  assertEquals(  (-2..2 .. 0.1)     :value( 0 ) ,-2     )
  assertEquals(  (-2..2 .. 0.1)     :value(-0 ) ,-2     )
  assertEquals(  ( 1..20.. 0.1)     :value( 1 ) , 1.1   )
  assertEquals(  ( 1..20.. 0.1)     :value( 1.1), 1.11  )
  assertEquals(  ( 1..10..-1  )     :value( 0 ) , 1     )
  assertEquals(  ( 1..10..-1  )     :value( 2 ) ,-1     )
  assertEquals(  ( 1..100..1  )     :value( 99) , 100   )
  assertEquals(  ( 0..1  ..eps)     :value( 1 ) ,   eps )
  assertEquals(  ( 0..0.5..eps)     :value( 2 ) , 2*eps )
  assertAlmostEquals( (2..-2..-0.1) :value( 22)- -0.2, 0, eps )

  assertEquals( ( 10..1..1)  :value( inf) , inf  )
  assertEquals( ( 10..1..1)  :value(-inf) ,-inf  )
  assertEquals( (0..10)             :value( tiny), tiny )
  assertEquals( (0..10)             :value(-tiny),-tiny )
  assertEquals( (0..10)             :value( huge), huge )
  assertEquals( (0..10)             :value(-huge),-huge )
  assertEquals( (1..0..-0.1)        :value(-eps) , 1    )
  assertAlmostEquals( (0..1..0.1)   :value( eps) - eps, 0, eps )
end

function TestRange:testGet()
  local r, res, ref
  assertNil( (10.. 1 ..-1  ):get(11)  )
  assertNil( (1 .. 10.. 0.1):get(-1)  )
  assertNil( (1 .. 10.. 0.1):get(101) )

  for _,v in ipairs(values.empty) do
    assertNil ( (v[1]..v[2]..v[3]):get(0) )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3]):get(0), v[1] )
    assertEquals( (v[1]..v[2]..v[3]):get(1), v[1] )
  end
  for _,v in ipairs(values.rng) do
    r = (v[1]..v[2]..v[3])
    assertEquals( r:get(0), v[1] )
    assertAlmostEquals( r:get(#r-1) - v[2], 0, eps )
  end
  assertEquals( (-2..2..0.1)        :get(0)  ,-2    )
  assertEquals( (1..20..0.1)        :get(1.1), 1.11 )
  assertAlmostEquals( (2..-2..-0.1) :get(22)- -0.2, 0, eps )
  assertAlmostEquals( (0..1..0.1)   :get(eps)- eps, 0, eps )

  res = 1..5
  ref = {1, 2, 3, 4, 5}
  for i=1,#res do assertEquals(res:get(i-1), ref[i]) end

  res = 1..10..2
  ref = {1, 3, 5, 7, 9}
  for i=1,#res do assertEquals(res:get(i-1), ref[i]) end

  res = 0.5..0..-0.1
  ref = {0.5, 0.4, 0.3, 0.2, 0.1, 0}
  for i=1,#res do assertAlmostEquals(res:get(i-1) - ref[i], 0, eps) end

  res = 10..-1..-0.7
  ref = {10 , 9.3, 8.6, 7.9, 7.2, 6.5, 5.8, 5.1,
         4.4, 3.7, 3  , 2.3, 1.6, 0.9, 0.2,-0.5 }
  for i=1,#res do
    assertAlmostEquals(res[i] - ref[i], 0, 6*eps) -- 6 eps @ 1.6
  end
end

function TestRange:testIndex()
  local r, res, ref
  assertNil( (1 .. 10.. 0.1)[ 0]   )
  assertNil( (10.. 1 ..-1  )[ 11]  )
  assertNil( (1 .. 10.. 0.1)[-1]   )
  assertNil( (1 .. 10.. 0.1)[ 100] )
  assertNil( (10.. 1 ..-1  )[ 11]  )
  assertNil( (1 .. 10.. 0.1)[ 0.1] )
  for _,v in ipairs(values.empty) do
    assertNil( (v[1]..v[2]..v[3])[1] )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3])[1], v[1] )
    assertEquals( (v[1]..v[2]..v[3])[2], v[1] )
  end
  for _,v in ipairs(values.rng) do
    r = v[1]..v[2]..v[3]
    assertEquals( r[1], v[1] )
    assertAlmostEquals( r[#r] - v[2], 0, eps )
  end
  assertEquals( (1..20..0.1)[2]  , 1.1  )
  assertEquals( (1..20..0.1)[2.1], 1.11 )
  assertAlmostEquals( (2..-2..-0.1)[23]- -0.2, 0, eps )

  res = 1..5
  ref = {1, 2, 3, 4, 5}
  for i=1,#res do assertEquals(res[i], ref[i]) end

  res = 1..10..2
  ref = {1, 3, 5, 7, 9}
  for i=1,#res do assertEquals(res[i], ref[i]) end

  res = 0.5..0..-0.1
  ref = {0.5, 0.4, 0.3, 0.2, 0.1, 0}
  for i=1,#res do assertAlmostEquals(res[i] - ref[i], 0, eps) end

  res = 10..-1..-0.7
  ref = {10 , 9.3, 8.6, 7.9, 7.2, 6.5, 5.8, 5.1,
         4.4, 3.7, 3  , 2.3, 1.6, 0.9, 0.2,-0.5 }
  for i=1,#res do
    assertAlmostEquals(res[i] - ref[i], 0, 6*eps) -- 6 eps @ 1.6
  end
end

function TestRange:testReverse()
  for _,v in ipairs(values.rng) do
    assertEquals( (v[1]..v[2]..v[3]):reverse(), v[2]..v[1]..-v[3] )
  end
  for _,v in ipairs(values.empty) do
    assertEquals( (v[1]..v[2]..v[3]):reverse(), v[2]..v[1]..-v[3] )
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( (v[1]..v[2]..v[3]):reverse(), v[2]..v[1]..-v[3] )
  end
  for _,v in ipairs(values.num) do
    assertEquals( ( 0.. 1.. v):reverse(),  1.. 0..-  v )
    assertEquals( ( 1.. 0..-v):reverse(),  0.. 1..- -v )
    assertEquals( ( 0.. v.. v):reverse(),  v.. 0..-  v )
    assertEquals( ( 0..-v..-v):reverse(), -v.. 0..- -v )
    assertEquals( ( v.. v.. v):reverse(),  v.. v..-  v )
    assertEquals( (-v..-v..-v):reverse(), -v..-v..- -v )
  end
  assertEquals( ( 2..20..-1  )      :reverse(), 20.. 2.. 1   )
  assertEquals( ( 1 .. 10.. 0  )    :reverse(), 10.. 1..-0   )
  assertEquals( ( 1 .. 10.. 0.1)    :reverse(), 10.. 1..-0.1 )
  assertEquals( (-20..-2 .. 2  )    :reverse(), -2..-20..-2  )
  assertEquals( ( 1 .. 10.. huge )  :reverse(), 10..1..-huge )

  --assertEquals( ( 1 .. 10.. 100 ):reverse(), 10..1..-huge )
end

-- Comparision/Rounding

-- for sure? how to change?
function TestRange:testEqual()
  local r
  r = 1.. 20.. 0   assertTrue( range(r:ranges()) == r )
  r = 1.. 20.. 0.1 assertTrue( range(r:ranges()) == r )

  for _,v in ipairs(values.num) do
    r = range( 1 , 10, v) assertTrue( range(r:ranges()) == r )
    r = range( 10, 1 ,-v) assertTrue( range(r:ranges()) == r )
    r = range( 1 , v , v) assertTrue( range(r:ranges()) == r )
    r = range( 1 ,-v ,-v) assertTrue( range(r:ranges()) == r )
    r = range( v , v , v) assertTrue( range(r:ranges()) == r )
    r = range(-v ,-v ,-v) assertTrue( range(r:ranges()) == r )
    r = range(-v ,-v ,-v) assertTrue( range(r:ranges()) == r )
  end

  for _,v in ipairs(values.empty) do
    r = range(v[1],v[2],v[3]) assertTrue( range(r:ranges()) == r )
  end
  for _,v in ipairs(values.zeros) do
    r = range(v[1],v[2],v[3]) assertTrue( range(r:ranges()) == r )
  end
  for _,v in ipairs(values.rng) do
    r = range(v[1],v[2],v[3]) assertTrue( range(r:ranges()) == r )
  end
end

function TestRange:testStepEq() -- too be merged with euqal
  local r, cr, r1, v
  v = { { 0.1+eps, 90 }, { 0.7-eps, 13 }, { 0.7, 13 }, { 0.7+eps, 13 },
        { 1  +eps, 9  }, { 1.1    , 9  }, { 1.7, 6  }, { 2      , 5  }, }
  for _,v in ipairs(v) do
    r  = range( 1, 10, v[1]      )
    r1 = range( 1, 10, v[1], v[2])
    assertEquals( r:size(), v[2] )
    assertFalse( r == r1 )
  	--print( v[1], r.step    , r1.step     )
  	--print( v[1], r:value(2), r1:value(2) )
  	--print( v[1], r.step / r1.step - 1    )
	end

  v = { { 0.5, 19 }, { 1 - eps, 10 }, { 1, 10 }, }
  for _,v in ipairs(v) do
    r1 = range( 1, 10, v[1], v[2] )
    r  = range( 1, 10, v[1]       )
    assertEquals( r:size() , v[2] )
    assertTrue( r == r1 )
    assertTrue( r.step / r1.step - 1 < 2*eps)
  end
end

function TestRange:testSize()
  assertEquals( range( 0 , 0 , 0 )  :size(), huge )
  assertEquals( range(-0 ,-0 ,-0 )  :size(), huge )
  assertEquals( range( 1 , 1 , 0 )  :size(), huge )
  assertEquals( range( 9 , 9 , 0 )  :size(), huge )
  assertEquals( range( 1 , 10, 0 )  :size(), huge )
  assertEquals( range( 1 )          :size(), 1    )
  assertEquals( range( 2 , 10, huge):size(), 1    )
  assertEquals( range( 10,  2,-huge):size(), 1    )

  assertEquals( ( 0 .. 0 .. 0 )  :size(), huge )
  assertEquals( (-0 ..-0 ..-0 )  :size(), huge )
  assertEquals( ( 1 .. 1 .. 0 )  :size(), huge )
  assertEquals( ( 9 .. 9 .. 0 )  :size(), huge )
  assertEquals( ( 1 .. 10.. 0 )  :size(), huge )
  assertEquals( ( 2 .. 10.. huge):size(), 1    )
  assertEquals( ( 10..  2..-huge):size(), 1    )

<<<<<<< HEAD
  for _,v in ipairs(values.empty) do
    assertEquals( (v[1]..v[2]..v[3]):size(), 0 )
  end

  assertAlmostEquals( ( eps..1  .. eps):size() - 1/eps      , 0, eps )
  assertAlmostEquals( ( 1  ..eps..-eps):size() - 1/eps      , 0, eps )
  assertAlmostEquals( ( eps..0.5.. eps):size() - 0.5/eps    , 0, eps )
  assertAlmostEquals( ( 0.5..eps..-eps):size() - 0.5/eps    , 0, eps )
  assertAlmostEquals( ( 0  ..1  .. eps):size() - 1/eps - 1  , 0, eps )
  assertAlmostEquals( ( 1  ..0  ..-eps):size() - 1/eps - 1  , 0, eps )
  assertAlmostEquals( ( 0  ..0.5.. eps):size() - 0.5/eps - 1, 0, eps )
  assertAlmostEquals( ( 0.5..0  ..-eps):size() - 0.5/eps - 1, 0, eps )

  assertEquals( ( 1 .. 10    )  :size(), 10   )
  assertEquals( (-1 ..-10..-1)  :size(), 10   )
  assertEquals( ( 10.. 1 ..-1)  :size(), 10   )
  assertEquals( (-10..-1     )  :size(), 10   )
  assertEquals( ( 1 ..-10..-1)  :size(), 12   )
  assertEquals( (-1 .. 10    )  :size(), 12   )
  assertEquals( ( 10..-1 ..-1)  :size(), 12   )
  assertEquals( (-10.. 1     )  :size(), 12   )

  assertEquals( ( 1 .. 10.. 0.1):size(), 91   )
  assertEquals( (-1 ..-10..-0.1):size(), 91   )
  assertEquals( ( 10.. 1 ..-0.1):size(), 91   )
  assertEquals( (-10..-1 .. 0.1):size(), 91   )
  assertEquals( ( 1 ..-10..-0.1):size(), 111  )
  assertEquals( (-1 .. 10.. 0.1):size(), 111  )
  assertEquals( ( 10..-1 ..-0.1):size(), 111  )
  assertEquals( (-10.. 1 .. 0.1):size(), 111  )
  assertEquals( ( 1 .. 10.. 0.5):size(), 19   )
  assertEquals( ( 1 ..-10..-0.5):size(), 23   )

  assertEquals( (0..2.1 ..1)       :size(), 3    )
  assertEquals( (0..2.9 ..1)       :size(), 3    )
  assertEquals( (1..10^3..1)       :size(), 10^3 )
  assertEquals( (1..10^3..2)       :size(), 500  )

  assertTrue( (1 .. 20.. 1.9):size() == (-1..-20..-1.9):size() )
  assertTrue( (1 .. 22.. 2.1):size() == (-1..-22..-2.1):size() )
  assertEquals( (0..24..4)        :size(), #(0..24..4)      )

  assertEquals( nrange(2, 10, nil) :size(), 100  )
  assertEquals( nrange(2, 10, 1.1) :size(), 2    )
  assertEquals( nrange(1, 32, 9  ) :size(), 9    )
  assertEquals( nrange(1, 32, 10 ) :size(), 10   )

  local r, nr, v
  v  = {
    { 1  , 100, 100},
    { 1  , 100, 10 },
    { 100, 1  , 10 },
    { 1  ,-100, 10 },
    { 100,-1  , 10 },
    {-1  , 100, 10 },
    {-100, 1  , 10 },
    {-1  ,-100, 10 },
    {-100,-1  , 10 },
    { 1  , 0  , 1/eps },
    { 0.5, 1  , 1/eps },
  }
  for _,v in ipairs(v) do
    nr = nrange(v[1],v[2],v[3])
    for i = 0,100 do
      nr = nrange(v[1],v[2],( nr:size()) )
      assertEquals( nr:size(), v[3] )
      i = i + 1
=======
  for _,v in ipairs(values.num) do
    if v == 0 then
      assertEquals( {nrange( 1 , 20, v):bounds()}, {nil, nil, nil} )
    elseif v <= 1 then
      assertEquals( {nrange( 1 , 20, v):bounds()}, { 1 , 1 , huge } )
      assertEquals( {nrange( 20, 1 , v):bounds()}, { 20, 20, huge } )
>>>>>>> upstream/master
    end
  end

end

-- Iterations/Ipairs

function TestRange:testIrange()
  local s, r, ir
  ir = { irange( 1, 10, 1) }
  assertTrue( is_function(ir[1]) )
  assertTrue( is_range(ir[2])    )
  assertTrue( ir[3] == 0         )

  r = 1  .. 5        for i,v in  irange(1  , 5 )      do  assertEquals(r[i], v) end
  r = 1  .. 10.. 2   for i,v in  irange(1  , 10, 2  ) do  assertEquals(r[i], v) end
  r = 0.5.. 0 ..-0.1 for i,v in  irange(0.5, 0 ,-0.1) do  assertEquals(r[i], v) end
  r = 10 ..-1 ..-0.7 for i,v in  irange(10 ,-1 ,-0.7) do  assertEquals(r[i], v) end

  for _,v in ipairs(values.rng) do
    r = v[1]..v[2]..v[3] for i,v in irange(v[1],v[2],v[3]) do assertEquals(r[i], v) end
  end
  for _,v in ipairs(values.empty) do
    r,s = v[1]..v[2]..v[3], 0 for i,v in irange(v[1],v[2],v[3]) do s=s+1; assertEquals(s, 0) end
  end
  r,s =  1..10.. huge ,0 for i,v in irange( 1, 10, huge)   do s=s+1 ; assertEquals(s, 1) end
  r,s =  1..10..-huge ,0 for i,v in irange( 1, 10,-huge)   do s=s+1 ; assertEquals(s, 0) end

<<<<<<< HEAD
  r = nrange( 1  , 10, 10 ) for i,v in inrange( 1 , 10, 10 ) do  assertEquals(r[i], v) end
  r = nrange( 10 , 1 , 10 ) for i,v in inrange( 10, 1 , 10 ) do  assertEquals(r[i], v) end
=======
  assertEquals( { range( 1 )          :bounds()}, { 1  , 1  , 1    } )
  assertEquals( { range( 1 , 0 )      :bounds()}, { nil, nil, nil  } )
  assertEquals( { range( 1 , 20, huge):bounds()}, { 1  , 1  , huge } )
  assertEquals( {nrange( 1 , 20, huge):bounds()}, { 1  , 20 , 19/huge } )
  assertEquals( {nrange( 1 , 20, tiny):bounds()}, { 1  , 1  , huge } )
>>>>>>> upstream/master
end

-- AdjustRange
function TestRange:testConstructor()
	local a = 2
	local msg = {
		"invalid argument #1 (finite number expected)",
		"invalid argument #2 (finite number expected)",
		"invalid argument #3 (finite number expected)",
	}
	assertErrorMsgContains( msg[1], range                )
	assertErrorMsgContains( msg[1], range, nil, 1        )
	assertErrorMsgContains( msg[1], range, 1..10..2      )
	assertErrorMsgContains( msg[1], range, ''            )
	assertErrorMsgContains( msg[2], range, 1  , ''       )
	assertErrorMsgContains( msg[3], range, 1  , 10 , ''  )
	assertErrorMsgContains( msg[3], range, 1  , 10 , nan )
	assertErrorMsgContains( msg[3], range, 10 , 1  ,-nan )
	assertErrorMsgContains( msg[2], range, 1  , nan, nan )
	assertErrorMsgContains( msg[2], range, 1  ,-nan,-nan )
	assertErrorMsgContains( msg[1], range, nan, nan, nan )
	assertErrorMsgContains( msg[1], range, nan,-nan,-nan )
	assertErrorMsgContains( msg[3], range, 1  , 10 , inf )
	assertErrorMsgContains( msg[3], range, 10 , 1  ,-inf )
	assertErrorMsgContains( msg[2], range, 1  , inf, inf )
	assertErrorMsgContains( msg[2], range, 1  ,-inf,-inf )
	assertErrorMsgContains( msg[1], range, inf, inf, inf )
	assertErrorMsgContains( msg[1], range, inf,-inf,-inf )

	assertTrue( is_range( range( a, a)   ) )
	assertTrue( is_range( range(-a,-a)   ) )
	assertTrue( is_range( range( a, a, a)) )
	assertTrue( is_range( range(-a,-a,-a)) )

	for _,v in ipairs(values.rng) do
		assertTrue( is_range( range(v[1],v[2],v[3]) ) )
	end
	for _,v in ipairs(values.empty) do
		assertTrue( is_range( range(v[1],v[2],v[3]) ) )
	end
	for _,v in ipairs(values.zeros) do
		assertTrue( is_range( range(v[1],v[2],v[3]) ) )
	end
	for _,v in ipairs(values.num) do
		assertTrue( is_range(range( 1, 10, v)) )
		assertTrue( is_range(range( 1, 10,-v)) )
	end
  for _,v in ipairs(values.lim) do
		assertTrue( is_range(range( 1,  10, v)) )
		assertTrue( is_range(range( 10, 1 ,-v)) )
		assertTrue( is_range(range( 1 , v , v)) )
		assertTrue( is_range(range( 1 ,-v ,-v)) )
		assertTrue( is_range(range( v , v , v)) )
		assertTrue( is_range(range(-v ,-v ,-v)) )
	end

  assertEquals( 1..10     , range(1,10)     )
	assertEquals(  a..a     , range( a, a)    )
	assertEquals( -a..-a    , range(-a,-a)    )
	assertEquals(  a..a..a  , range( a, a, a) )
	assertEquals( -a..-a..-a, range(-a,-a,-a) )

	for _,v in ipairs(values.rng) do
		assertEquals( range(v[1],v[2],v[3]), v[1]..v[2]..v[3]  )
	end
	for _,v in ipairs(values.empty) do
		assertEquals( range(v[1],v[2],v[3]), v[1]..v[2]..v[3]  )
	end
	for _,v in ipairs(values.zeros)do
		assertEquals( range(v[1],v[2],v[3]), v[1]..v[2]..v[3]  )
	end
	for _,v in ipairs(values.num) do
		assertEquals( range( 1, 10, v),  1..10.. v )
		assertEquals( range( 1, 10,-v),  1..10..-v )
	end
  for _,v in ipairs(values.lim) do
    assertEquals( range( 1 , 10, v ),  1.. 10.. v )
    assertEquals( range( 10, 1 ,-v ),  10..1 ..-v )
    assertEquals( range( 1 , v , v ),  1.. v .. v )
    assertEquals( range( 1 ,-v ,-v ),  1..-v ..-v )
    assertEquals( range( v , v , v ),  v.. v .. v )
    assertEquals( range(-v ,-v ,-v ), -v..-v ..-v )
	end
end

function TestRange:testNConstructor()
  local msg = {
    "invalid argument #3 (positive number expected)",
  }
  assertErrorMsgContains( msg[1], nrange, 1  , 10  , ''  )
  assertErrorMsgContains( msg[1], nrange, 1  , 10  ,-1   )
  assertErrorMsgContains( msg[1], nrange, 1  , 10  ,-inf )
  assertErrorMsgContains( msg[1], nrange, 1  , 10 , nan  )
  assertErrorMsgContains( msg[1], nrange, 10 , 1  ,-nan  )
  assertErrorMsgContains( msg[1], nrange, 1  , nan, nan  )
  assertErrorMsgContains( msg[1], nrange, 1  ,-nan,-nan  )
  assertErrorMsgContains( msg[1], nrange, nan, nan, nan  )
  assertErrorMsgContains( msg[1], nrange,-nan,-nan,-nan  )
  assertErrorMsgContains( msg[1], nrange, 1  , 10 ,-huge )
  assertErrorMsgContains( msg[1], nrange, 1  , 10 ,-tiny )

  assertTrue( is_range(nrange( 1, 10))      )
  assertTrue( is_range(nrange( 1, 10, 0  )) )
  assertTrue( is_range(nrange( 1, 10, 1  )) )
  assertTrue( is_range(nrange( 1, 10, inf)) )
  --print(nrange(1,10,inf):range())

  for _,v in ipairs(values.num) do
    if v > 0 then assertTrue( is_range(nrange( 1, 10, v)) ) end
  end
  for _,v in ipairs(values.lim) do
    assertTrue( is_range(nrange( 1 , 10, v)) )
    assertTrue( is_range(nrange( 1 , v , v)) )
    assertTrue( is_range(nrange( v , v , v)) )
  end
end

function TestRange:testNCnstrFields()
  assertEquals( {nrange( 1, 100 )     :ranges()}, { 1, 100, 1   } )
  assertEquals( {nrange( 1, 10 , 0.1 ):ranges()}, { 1, 10 , huge} )
  assertEquals( {nrange( 1, 10 , 1   ):ranges()}, { 1, 10 , huge} )
  assertEquals( {nrange( 1, 10 , 1.1 ):ranges()}, { 1, 10 , 9   } )
  assertEquals( {nrange( 1, 10 , 2   ):ranges()}, { 1, 10 , 9   } )
  assertEquals( {nrange( 1, 0  , huge):ranges()}, { 1 ,0  ,-0   } )
  assertEquals( {nrange( 1, 0  , tiny):ranges()}, { 1 ,0  ,-huge} )

  assertEquals( {nrange( 100, 1 )     :ranges()}, { 100, 1,- 1  } )
  assertEquals( {nrange( 10 , 1, 0.1 ):ranges()}, { 10 , 1,-huge} )
  assertEquals( {nrange( 10 , 1, 1   ):ranges()}, { 10 , 1,-huge} )
  assertEquals( {nrange( 10 , 1, 1.1 ):ranges()}, { 10 , 1,- 9  } )
  assertEquals( {nrange( 10 , 1, 2   ):ranges()}, { 10 , 1,- 9  } )
  assertEquals( {nrange( 10 , 1, 10  ):ranges()}, { 10 , 1,- 1  } )

  assertAlmostEquals( nrange( 0, 1  , 1/eps).step -  eps, 0, eps )
  assertAlmostEquals( nrange( 1, 0  , 1/eps).step - -eps, 0, eps )
  assertAlmostEquals( nrange( 0, 0.5, 1/eps).step -  eps, 0, eps )
  assertAlmostEquals( nrange( 1, 0.5, 1/eps).step - -eps, 0, eps )
  assertEquals(  nrange( 1 , 32, 9).step, 3.875 )
  assertEquals(  nrange( 32, 1 , 9).step,-3.875 )
end

function TestRange:testNCnstrSinglePoint()
  local ref = { 1 , 1 ,-1 ,-1 , 10, 10,-10,-10 }
  local nr  = {
    nrange( 1,  10, 1),
    nrange( 1 ,-10, 1),
    nrange(-1 , 10, 1),
    nrange(-1 ,-10, 1),
    nrange( 10, 1 , 1),
    nrange( 10,-1 , 1),
    nrange(-10, 1 , 1),
    nrange(-10,-1 , 1),
  }

  for i=1,#nr do assertEquals( nr[i]:size()    , 1      ) end
  for i=1,#nr do assertEquals( nr[i]:get(0)    , ref[i] ) end
  for i=1,#nr do assertFalse ( nr[i]:is_empty()         ) end
  for i=1,#nr do assertNil   ( nr[i]:get(1)             ) end
end

function TestRange:testAdjust() -- too be merged with ctor & nctor
  local r, cr, r1, v
  --      inp    size  adjust
  v = { { 0.1+eps, 90, 0.0011235955056177 },
        { 0.7-eps, 13, 0.05   },
        { 0.7    , 13, 0.05   },
        { 0.7+eps, 13, 0.05   },
        { 1  +eps, 9 , 0.125  },
        { 1.1    , 9 , 0.025  },
        { 1.7    , 6 , 0.1    },
        { 2      , 5 , 0.25   },
      }
  for _,v in ipairs(v) do
    r  = range( 1, 10, v[1])
    cr = 1..10..v[1]
    r1 = range( 1, 10, v[1], v[2])  -- forced change in step, so the boundry fits .stop value
    assertEquals( r.step  , cr.step )
    assertAlmostEquals( r.step - r1.step + v[3], 0, 2*eps )
  end

  v = { { 0.5, 19 }, { 1 - eps, 10 }, { 1, 10 },}
  for _,v in ipairs(v) do
    r  = range( 1, 10, v[1])
    cr = 1..10..v[1]
    r1 = range( 1, 10, v[1], v[2])
    assertEquals( r.step, cr.step )
    assertAlmostEquals( r.step - r1.step, 0, eps )
  end
  for _,v in ipairs(values.rng) do
    r  = range(v[1],v[2],v[3])
    cr = v[1]..v[2]..v[3]
    assertEquals( r.step , cr.step )
  end
  for _,v in ipairs(values.zeros) do
    r  = range(v[1],v[2],v[3])
    cr = v[1]..v[2]..v[3]
    assertEquals( r.step , cr.step )
  end
  for _,v in ipairs(values.empty) do
    r  = range(v[1],v[2],v[3])
    cr = v[1]..v[2]..v[3]
    assertAlmostEquals( r.step - cr.step, 0, eps )
  end
  for _,v in ipairs(values.lim)   do
    r  = range( 1, 10, v)
    r1 = range( 0, 10, v, r:size())
    cr = 1..10..v
    assertAlmostEquals( r.step - cr.step, 0, eps )
    assertAlmostEquals( r.step - r1.step, 0, eps )
    r  = range( 10, 1 ,-v)
    r  = range( 10, 1 ,-v, r:size())
    cr = 10..1..-v
    assertAlmostEquals( r.step - cr.step, 0, eps )
  end
end

function TestRange:testStep() -- too be merged with ctor & nctor
	local r, r1, cr, v
  assertEquals( nrange( 1 , 1 , 1    ).step, huge )
  assertEquals( nrange( 1 , 10, 0    ).step,-huge )
  assertEquals( nrange( 1 , 10, 0.1  ).step, huge )
  assertEquals( nrange( 1 , 10, 1    ).step, huge )
  assertEquals( nrange( 1 , 10, 2    ).step, 9    )
  assertEquals( nrange(-1 ,-10, 1    ).step,-huge )
  assertEquals( nrange( 1 , 10, tiny ).step, huge )
  assertEquals( nrange( 1 , 10, eps  ).step, huge )
  assertEquals( nrange( 1 , 10, inf  ).step, 0    )
  assertEquals( nrange( 10, 10, 2    ).step, 0    )
  assertEquals( nrange(-10,-10, 2    ).step, 0    )
  assertEquals( nrange( 1 , 10, 10   ).step, 1    )
  assertEquals( nrange( 1 , 10, 1+eps).step, 9    )
  assertEquals( nrange( 1 , 10, 1.1  ).step, 9    )
  assertEquals( nrange( 1 , 10, 1, 1 ).step, huge )

  assertAlmostEquals( nrange( 1, 10, 1e6).step, 9.000009000009e-06, eps )
  assertAlmostEquals( nrange( 1, 10, 1e9).step, 9.000000009e-09   , eps )
  --assertEquals( nrange( 1, 10, huge).step, 5.0064161816412e-308 )

  r  = range( 1, 10, tiny)
  r1 = range( 1, 10, tiny, r:size())
  cr = 1..10..tiny
  assertEquals( r.step / r1.step - 1, inf )
  assertFalse( r  == r1 )
  assertFalse( cr == r1 )
  assertTrue ( r  == cr )

  r  = range( 1, 10, eps)
  r1 = range( 1, 10, eps, r:size())
  cr = 1..10..eps
  assertEquals( r.step / r1.step - 1, 0 )
  assertTrue ( r  == r1 )
  assertTrue ( cr == r1 )
  assertTrue ( r  == cr )

  r  = range( 1, 10, huge)
  r1 = range( 1, 10, huge, r:size())
  cr = 1..10..huge
  assertEquals( r.step / r1.step - 1, 0 )
  assertTrue ( r  == r1 )
  assertTrue ( cr == r1 )
  assertTrue ( r  == cr )

  v = {1e2, 1e3, 1e6, 1e9, 2^31, 2^32, 2^52, 2^53, 2^63, 2^64, huge }
  for _,v in ipairs(v) do
    r  = range( 1, 10, v)
    cr = 1..10..v
    r1 = range( 1, 10, v, 1)
    assertEquals( r.step , cr.step )
    assertEquals( r1.step, huge    )
  end
end

-- Combination

function TestRange:testBounds()
  local b
  for _,v in ipairs(values.num) do
    --if v == 0 or v == tiny or v == huge or v > 20 then
    --  assertEquals( { range( 1 , 20, v):bounds()}, { 1 , 1 , huge} )

    --elseif v <= 0.1 then
    --  b = { range( 1 ,20, v):bounds() }
    --  b = { range( 20, 1,-v):bounds() }
    --  assertAlmostEquals( b[1] - 1 , 0,     eps )
    --  assertAlmostEquals( b[2] - 20, 0, 200*eps )
    --  assertAlmostEquals( b[1] - 1 , 0, 200*eps )
    --  assertAlmostEquals( b[2] - 20, 0, 200*eps )
    --end
  end
  assertEquals( { range( 1 , 20, huge):bounds()}, { 1 , 1 , huge} )
  assertEquals( { range( 1 , 20, tiny):bounds()}, { 1 , 1 , huge} )


  b = { range( 1 , 20, 0.1+eps):bounds() }
  assertAlmostEquals( b[2] - 19.9, 0, 208*eps )
  b = { range( 1 , 20, 0.7-eps):bounds() }
  assertAlmostEquals( b[2] - 19.9, 0,  32*eps )
  b = { range( 1 , 20, 0.7 )   :bounds() }
  assertAlmostEquals( b[2] - 19.9, 0,     eps )
  b = { range( 1 , 20, 0.7+eps):bounds() }
  assertAlmostEquals( b[2] - 19.9, 0,  32*eps )
  b = { range( 1 , 20, 1 - eps):bounds() }
  assertAlmostEquals( b[2] - 20  , 0,  16*eps )
  b = { range( 1 , 20, 1 + eps):bounds() }
  assertAlmostEquals( b[2] - 19  , 0,  16*eps )
  b = { range( 1 , 20, 1.1 )   :bounds() }
  assertAlmostEquals( b[2] - 19.7, 0,  16*eps )
  b = { range( 20, 1,-1.7)     :bounds() }
  assertAlmostEquals( b[1] - 1.3 , 0,   3*eps )

  assertEquals( { range( 1 , 20, 0.5):bounds()}, { 1, 20  ,  0.5 } )
  assertEquals( { range( 1 , 20, 1  ):bounds()}, { 1, 20  ,  1   } )
  assertEquals( { range( 1 , 20, 1.7):bounds()}, { 1, 19.7,  1.7 } )
  assertEquals( { range( 1 , 20, 2  ):bounds()}, { 1, 19  ,  2   } )
  assertEquals( { range( 1 , 20, 10 ):bounds()}, { 1, 11  ,  10  } )
  assertEquals( { range( 20, 1 ,-2  ):bounds()}, { 2, 20  ,  2   } )

  for _,v in ipairs(values.num) do
    if v == 0 then
      assertEquals( {nrange( 1 , 20, v):bounds()}, {nil, nil, nil} )
    elseif v <= 1 then
      assertEquals( {nrange( 1 , 20, v):bounds()}, { 1 , 1 , huge } )
      assertEquals( {nrange( 20, 1 , v):bounds()}, { 20, 20, huge } )
    else
    end
  end
  for _,v in ipairs(values.rng) do
    if v[3] < 0 then
      assertEquals( {range(v[1],v[2],v[3]):bounds()}, {v[2], v[1], -v[3]})
    else
      assertEquals( {range(v[1],v[2],v[3]):bounds()}, {v[1], v[2],  v[3]})
    end
  end
  for _,v in ipairs(values.empty) do
    assertEquals( {range(v[1],v[2],v[3])  :bounds()}, {nil, nil, nil})
  end
  for _,v in ipairs(values.zeros) do
    assertEquals( {range(v[1],v[2],v[3]):bounds()}, {v[1], v[1], huge})
  end

  assertEquals( { range( 1 )          :bounds()}, { 1  , 1  , 1    } )
  assertEquals( { range( 1 , 0 )      :bounds()}, { nil, nil, nil  } )
  assertEquals( { range( 1 , 20, huge):bounds()}, { 1  , 1  , huge } )
  assertEquals( {nrange( 1 , 20, huge):bounds()}, { 1  , 20 , 19/huge } )
  assertEquals( {nrange( 1 , 20, tiny):bounds()}, { 1  , 1  , huge } )
end

function TestRange:testOverlap()
  local r, nr
  assertFalse( range( 0,-10, 1) :overlap(0..9)        )
  assertFalse( range( 0, 10,-1) :overlap(0..9)        )
  assertFalse( range( 2, 10, 2) :overlap(12..20..2)   )
  assertTrue ( range(1)         :overlap(1..1)        )
  assertTrue ( (1..9)           :overlap(1..1)        )
  assertTrue ( (1..9..0.7)      :overlap(9..1..-0.7)  )
  assertTrue ( (1..10) :overlap( nrange(1 , 10, 10) ) )
  assertTrue ( (1..10) :overlap( nrange(10,-1 , 10) ) )
  assertTrue ( range( 1 , 20, 1 + eps):overlap(range( 1 , 20, 1.1 )) )

  for _,v in ipairs(values.rng) do
    assertTrue( range(v[1],v[2],v[3]):overlap(-10..10) )
  end
  for _,v in ipairs(values.empty) do
    assertFalse( range(v[1],v[2],v[3]):overlap(-10..10) )
  end
  for _,v in ipairs(values.zeros) do
    assertFalse( range(v[1],v[2],v[3]):overlap(2..10) )
    assertTrue ( range(v[1],v[2],v[3]):overlap(0..1)  )
  end
end
