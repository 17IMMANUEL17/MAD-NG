--[=[
 o-----------------------------------------------------------------------------o
 |
 | Local in table syntax extension regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for local 'in' table syntax extension.

 o-----------------------------------------------------------------------------o
]=]

! This is a comment for testing this syntax extension,
! it is an alternate syntax for single line comment like --,
! but it is shorter and nicer when used for multilines comments

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertEquals in require 'luaunit'

-- regression test suite ------------------------------------------------------o

TestInTable = {}

function TestInTable:testSimple()
  local mabs, mceil, mfloor, mmax, mmin =
        math.abs, math.ceil, math.floor, math.max, math.min
  local abs, ceil, floor, max, min in math

  local inp = { 0, 0.1, 2.2, -0, -0.1, -2.1, -7 }
  for i=1,#inp do
    assertEquals( mabs   (inp[i]), abs   (inp[i]) )
    assertEquals( mceil  (inp[i]), ceil  (inp[i]) )
    assertEquals( mfloor (inp[i]), floor (inp[i]) )
  end
  assertEquals( mmax(table.unpack(inp)), max(table.unpack(inp)) )
  assertEquals( mmin(table.unpack(inp)), min(table.unpack(inp)) )
end

function TestInTable:testFunc()
  local mabs, mceil, mfloor, mmax, mmin =
        math.abs, math.ceil, math.floor, math.max, math.min
  local fun = function () return math end
  local abs, ceil, floor, max, min in fun()

  local inp = { 0, 0.1, 2.2, -0, -0.1, -2.1, -7 }
  for i=1,#inp do
    assertEquals( mabs   (inp[i]), abs   (inp[i]) )
    assertEquals( mceil  (inp[i]), ceil  (inp[i]) )
    assertEquals( mfloor (inp[i]), floor (inp[i]) )
  end
  assertEquals( mmax(table.unpack(inp)), max(table.unpack(inp)) )
  assertEquals( mmin(table.unpack(inp)), min(table.unpack(inp)) )
end

function TestInTable:testTable()
  local mabs, mceil, mfloor, mmax, mmin =
        math.abs, math.ceil, math.floor, math.max, math.min
  local tbl = { string = string, math = math }
  local abs, ceil, floor, max, min, round in tbl.math

  local inp = { 0, 0.1, 2.2, -0, -0.1, -2.1, -7 }
  for i=1,#inp do
    assertEquals( mabs   (inp[i]), abs   (inp[i]) )
    assertEquals( mceil  (inp[i]), ceil  (inp[i]) )
    assertEquals( mfloor (inp[i]), floor (inp[i]) )
  end
  assertEquals( mmax(table.unpack(inp)), max(table.unpack(inp)) )
  assertEquals( mmin(table.unpack(inp)), min(table.unpack(inp)) )
end

function TestInTable:testExpr()
  local mabs, mceil, mfloor, mmax, mmin =
        math.abs, math.ceil, math.floor, math.max, math.min
  local abs, ceil, floor, max, min in assert(1 == 2 or math)

  local inp = { 0, 0.1, 2.2, -0, -0.1, -2.1, -7 }
  for i=1,#inp do
    assertEquals( mabs   (inp[i]), abs   (inp[i]) )
    assertEquals( mceil  (inp[i]), ceil  (inp[i]) )
    assertEquals( mfloor (inp[i]), floor (inp[i]) )
  end
  assertEquals( mmax(table.unpack(inp)), max(table.unpack(inp)) )
  assertEquals( mmin(table.unpack(inp)), min(table.unpack(inp)) )
end

function TestInTable:testTables ()
  local ta = { x=3, y=2, z="a" }
  local x, y, z, w in ta
  local tb = { x=x, y=y, z=z }

  assertEquals( ta.x, x )
  assertEquals( ta.y, y )
  assertEquals( ta.z, z )
  assertNil   ( w )
  do
    local x, y, z, w in tb
    assertEquals( tb.x, x )
    assertEquals( tb.y, y )
    assertEquals( tb.z, z )
    assertNil   ( w )
  end
  do
    local x, y, z, w in { x=x, y=y, z=z, w=w }
    assertEquals( ta.x, x )
    assertEquals( ta.y, y )
    assertEquals( ta.z, z )
    assertNil   ( w )
  end
end

function TestInTable:testFuncs()
  local f = function(x,y) return { x=x+y, y=x*y, z=3*y } end
  local t = f(2,5)
  local x, y, z, w in f(2,5)

  assertEquals( t.x, x )
  assertEquals( t.y, y )
  assertEquals( t.z, z )
  assertNil   ( w )
end

-- end ------------------------------------------------------------------------o
