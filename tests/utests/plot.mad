--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A. Bloch, aurelien.bloch at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the plot module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals                            in MAD.utest
local plot, gplot, mtable, vector                           in MAD
local observe                                               in MAD.element.flags

-- helpers --------------------------------------------------------------------o

local generate   = false
local refFolder  = "./PlotTests/"
local testFolder = "./PlotTestsGen/"
local lhc, bmtbl, lmtbl

local function loadLHC ()
  if lhc then return end
  assertNotNil(require 'lhc_as-built_gen')
  assertNotNil(require 'lhc_as-built_set')
  assertNotNil(require 'lhc_undefvar'    )
  assertNotNil(require 'opt_inj_gen'     )

  local lhcb1, lhcb2 in MADX
  assertEquals(#lhcb1, 6677)
  assertEquals(#lhcb2, 6676)

  lhcb1:select(observe)
  lhcb2:select(observe)

  MADX.option.warn = false

  lhc = { lhcb1, lhcb2 }
end

local function createTbl ()
  if bmtbl then return end
  bmtbl = mtable { {'name'}, 'x', 'y', 'z' }
  lmtbl = mtable { {'name'}, 'x1', 'x2', 'y1', 'y2', 'y3', 'y4' }
  for i=0, 25000 do
    bmtbl = bmtbl + {'A' .. i, i, i, 2*i+100 }
  end
  for i=0, 25 do
    lmtbl = lmtbl + {'A' .. i, i, i+10, i, i+10, i+20, i+30 }
  end
end

local function assertFiles (name)
  if generate then return end
  local ref  = assert(io.open(refFolder  .. name, "r"))
  local test = assert(io.open(testFolder .. name, "r"))
  local line = 1
  while true do
    local refline  = ref:read("*line")
    local testline = test:read("*line")
    if refline == nil or testline == nil then break end
    if refline ~= testline then
      error(
        "expected: '" .. refline ..
        "', actual: '" .. testline ..
        "' at line: " .. line
      )
    end
    line = line + 1
  end
  if not generate then os.remove(testFolder .. name) end
end

local function getEmptyPlot (name)
  return plot {
    title   = name,
    output  = false,
    scrdump = testFolder .. name,
    exec    = false,
  }
end

local function execTest (name, param)
  getEmptyPlot(name)(param)
  assertFiles(name)
end

-- regression test suite ------------------------------------------------------o

TestPlot = {}

function TestPlot:setUp ()
  loadLHC()
  createTbl()
  os.execute("mkdir -p " .. testFolder)         -- TODO Cleaner + cross platform
end

function TestPlot:tearDown ()
  if not generate then os.remove(testFolder) end
end

function TestPlot:testEmptyPlot ()
  local param = { }
  execTest("testEmptyPlot", param)
end

function TestPlot:testPrologEpilog ()
  local param = {
    prolog = "set multi",
    epilog = "unset multi \nunset out",
  }
  execTest("testPrologEpilog", param)
end

function TestPlot:testAxisName ()
  local param1 = {table = lmtbl, x1y1 = { x1 = {'y1', 'y2'}, x2 = {'y3', 'y4'}}}
  local param2 = {table = lmtbl, x1y1 = { x1 = {'y1', 'y2'}, x2 = 'y3'}        }
  local param3 = {table = lmtbl, x1y1 = { x1 = {'y1', 'y2'}},                  }
  local param4 = {table = lmtbl, x1y1 = { x1 = 'y1'},                          }
  local param5 = {table = lmtbl, x1y1 = {'y1', 'y2'},                          }
  local param6 = {table = lmtbl, x1y1 =  'y1',                                 }

  execTest("testAxisName1", param1)
  execTest("testAxisName2", param2)
  execTest("testAxisName3", param3)
  execTest("testAxisName4", param4)
  execTest("testAxisName5", param5)
  execTest("testAxisName6", param6)
end

function TestPlot:testAxisSelection ()
  local param1 = { table = lmtbl, x1y1 = { x1 = 'y1' }, x1y2 = { x1 = 'y2' } }
  local param2 = { table = lmtbl, x1y1 = { x1 = 'y1' }, x2y1 = { x2 = 'y2' } }
  local param3 = { table = lmtbl, x1y2 = { x1 = 'y1' }, x2y1 = { x2 = 'y2' } }
  local param4 = { table = lmtbl, x1y1 = { x1 = 'y1' }, x2y2 = { x2 = 'y2' } }
  local param5 = { table = lmtbl, x1y1 = { x1 = 'y1' }, x2y2 = { x2 = 'y2' },
                                  x1y2 = { x1 = 'y3' }, x2y1 = { x2 = 'y4' } }

  execTest("testAxisSelection1", param1)
  execTest("testAxisSelection2", param2)
  execTest("testAxisSelection3", param3)
  execTest("testAxisSelection4", param4)
  execTest("testAxisSelection5", param5)
end

function TestPlot:testTableOrData ()
  local x1, y2 = table.new(25,0), vector(25)
  for i=1,25 do
    x1[i] = 11 + i
    y2[i] = 22 + i
  end
  local param = {
    table = lmtbl,
    data  = { x1 = x1  , y2 = y2   },
    x1y1  = { x1 = 'y1', x2 = 'y2' },
  }

  execTest("testTableOrData", param)
end

function TestPlot:testTableRange ()
  local x1, y1 = table.new(11,0),table.new(11,0)
  for i=1,11 do
    x1[i] = 41 + i
    y1[i] = 41 + i
  end
  local param1 = {
    table      = lmtbl,
    data       = { x1 = x1   },
    x1y1       = { x1 = 'y1' },
    tablerange = { 13, 23    },
  }
  local param2 = {
    table      = lmtbl,
    data       = { y1 = y1   },
    x1y1       = { x1 = 'y1' },
    tablerange = { 13, 23    },
  }

  execTest("testTableRange1", param1)
  execTest("testTableRange2", param2)
end

function TestPlot:testLHC()
  local param = {
    sequence = lhc,
    table    = bmtbl,
    x1y1     = { x = 'y' },
    title    = "testLHC",
  }
  execTest("testLHC", param)
end

function TestPlot:testLHCInPlot ()
  local param = {
    sequence = lhc,
    laypos   = "in",
  }
  execTest("testLHCInPlot", param)
end
-- end ------------------------------------------------------------------------o
