--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module regression tests and demo
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the plot module.

 o-----------------------------------------------------------------------------o
]=]

local plot in MAD

-- locals ---------------------------------------------------------------------o

local pi in math
local track, beam, functor, option, survey, vector            in MAD
local assertNil, assertNotNil, assertTrue, assertEquals       in MAD.utest
local drift, marker, quadrupole, sequence, monitor, hkicker,
      vkicker, multipole,  sbend, sextupole, patch, collimator in MAD.element

-- plotting -------------------------------------------------------------------o

-- LHC
--[[
local function loadLHC()
  assertNotNil(require 'lhc_as-built_gen')
  assertNotNil(require 'lhc_as-built_set')
  assertNotNil(require 'lhc_undefvar'    )
  assertNotNil(require 'opt_inj_gen'     )

  local lhcb1, lhcb2 in MADX
  assertEquals(#lhcb1, 6675)
  assertEquals(#lhcb2, 6674)
  return lhcb1, lhcb2
end

local lhcb1, lhcb2 = loadLHC()
local beam = beam { particle='proton', energy=450 }
local tblLHC, map = track { sequence=lhcb1, beam=beam }

local plotLHC = plot {
  table    = tblLHC,
  --sequence = lhcb1,
  haxis = 's',
  vaxis = {'x','y'},
  --interpolate  = "w lines",
}

-- FODO
local lcell= 20
local lquad= 5
local ip   = marker     'ip'{}
local kqf  =  1.4631475E-02
local kqd  = -1.4643443E-02
local qf   = quadrupole 'qf'{ l=lquad, k1:= kqf, tilt = 4e-6 }
local qd   = quadrupole 'qd'{ l=lquad, k1:= kdf }
local seq = sequence 'fodo1'{l = lcell, refer = 'entry',
  ip 'IP1' { at = 0     },
  qf 'QF1' { at = 0},
  qd 'QD1' { at = 15},
  ip 'IP2' { at = lcell },
}
local tblFODO = survey { sequence=seq, X0={-1e-4, 2e-6, 0}, A0={1, 2, 3e-7}}

local plotFODO = plot {
  filecopy = true,
  table = tblFODO,
  sequence = seq,
  haxis = 's',
  vaxis = 'x',
  interpolate  = "w lines",
}
]]

--SPS line
local circum = 6912.0
local ncell  = 108
local lcell  = circum/ncell
local lsb    = 3.       -- arc length of dipole
local lquad  = 3.085
local lquad2 = lquad/2.
local lsex   = 1.0
local ip  = marker     'ip'{}
local dr = drift      'dr'{}
local asb = 2.0*pi/(8*108)
local sb  = multipole     'sb'{ knl = asb }
local kqf  =  1.4631475E-02
local kqd  = -1.4643443E-02
local qf  = quadrupole 'qf'{ l=lquad, k1:= kqf }
local qd  = quadrupole 'qd'{ l=lquad, k1:= kdf }
local ksf =  2.0284442E-02
local ksd = -3.8394267E-02
local sf  = sextupole 'sf' {l=lsex,  k2:=ksf}
local sd  = sextupole 'sd' {l=lsex,  k2:=ksd}
local bpm = collimator 'bpm'  {l=0.1}
local ch  = hkicker 'ch'   {l=0.1}
local cv  = vkicker 'vh'   {l=0.1}
local seq = sequence 'fodo1' {l = lcell, dir =1, refer = 'centre',
  ip  'IP1'  { at = 0        },
  qf  'QF1'  { at = lquad2},
  sf  'SF1'  { at = lquad2   +  2.5},
  ch  'CH1'  { at = lquad2   +  3.1},
  bpm 'BPM1' { at = lquad2   +  3.2},
  sb  'SB1'  { at = lquad2   +  3.5},
  sb  'SB2'  { at = lquad2   +  9.9},
  sb  'SB3'  { at = lquad2   +  22.1},
  sb  'SB4'  { at = lquad2   +  28.5},
  qd  'QD1'  { at = lquad2   +  32},
  sd  'SD1'  { at = lquad2   +  34.5},
  cv  'CV1'  { at = lquad2   +  35.1},
  bpm 'BPM2' { at = lquad2   +  35.2},
  sb  'SB1'  { at = lquad2   +  35.5},
  sb  'SB2'  { at = lquad2   +  41.9},
  sb  'SB3'  { at = lquad2   +  54.1},
  sb  'SB4'  { at = lquad2   +  60.5},
  ip  'IP2'  { at = lcell    },
}

local tblSPS = survey { sequence=seq, X0={-1e-4, 2e-6, 0}, A0={1, 2, 3e-7}}

--DEMO
-- table (with multiplot)
local plotSPS = plot {
  filecopy = true,
  table = tblSPS,
  haxis = 's',
  vaxis = 'y',
}

local plotSPS = plot {
  filecopy = true,
  table = tblSPS,
  haxis = 's',
  vaxis = 'z',
  color = {z="green"},
  continue = true,
}

local plotSPS = plot {
  filename = "testtbl.pdf",
  id = 1,
  data  = {x = vector(20):fill(1..20),
           y = vector(20):fill(1..20):map\x x*2,
           z = vector(20):fill(1..20):map\x x^2},
  haxis = 'x',
  vaxis = 'z',
  vaxis2  = {'y'},
  color = {z="green"},
  pointtype = {z=10},
  filecopy = true,
}
 local plotSPS1 = plot {
  filename = "testtbl.pdf",
  table = tblSPS,
  haxis = 's',
  vaxis = {'x','y','z'},
  interpolate = true,
  color = { x = 'green' },
  dashtype  = { x = "'-'" },
  vmargin = 0.2,
}
--[[

local plotSPS = plot {
  filecopy = true,
  id = 2,
  table = tblSPS,
  haxis = 's',
  vaxis = 'z',
  --datrange = {0 ,50},
  --datrange = {1,-1 },
  --datrange = 1..10,
}

-- table and data
local plotSPS2 = plot {
  filename = "testtbl.pdf",
  table = tblSPS,
  data  = {d = tblSPS.x:map\x x^2},
  haxis = 's',
  vaxis = {'x','y','d'},
  pointtype = { x = 10 },
  plotdata = "datatoplot.dat",
}

-- table and sequence
local plotSPS4 = plot {
  filename = "testseq.pdf",
  table    = tblSPS,
  sequence = seq,
  haxis    = 's',
  vaxis    = {'x','y'},
  --range = {1,10},
}

local plotSPS3 = plot {
  filename = "testseq.pdf",
  data  = {x = vector(20):fill(1..20),
           y = vector(20):fill(1..20):map\x x^2},
  haxis = 'x',
  vaxis = 'y',
  interpolate = true,
}

local plotSPS = plot {
  filename = "testseq.pdf",
  data  = {x = vector(20):fill(1..20),
           z = vector(20):fill(1..20):map\x x*2},
  haxis = 'x',
  vaxis = 'z',
  color = {z="green"},
  interpolate = true,
}

local plotSPS = plot {
  data  = {x = vector(20):fill(1..20),
           y = vector(20):fill(1..20):map\x x*2,
           z = vector(20):fill(1..20):map\x x^2},
  haxis = 'x',
  vaxis = 'z',
  vaxis2  = {'y'},
  color = {z="green"},
  pointtype = {z=10},
  filecopy = true,
}
]]

--[[

local plotSPS = plot {
  filename = "testrng.pdf",
  table = tblSPS,
  haxis = 's',
  vaxis = 'y',
  --datrange = {0 ,50},
  --datrange = {1,-1 },
  --datrange = 1..10,
}
-- data only
-- vertical multiaxes
local plotSPS = plot {
  filecopy = true,
  filename = "testmultiax.pdf",
  table   = tblSPS,
  haxis   = 's',
  vaxis   = {'x', 'z'},
  vaxis2  = {'y'},
  vlimit  = {-100,70},
  --vlimit2 = {-5 ,5 },
  interpolate = true,
  linetype = 2,
  --linestyle = 3,
}

]]
--[[
-- horizontal multiaxes
local plotSPS = plot {
  --preamble = "multiaxes plot",
  filename = "testmultiax.pdf",
  table   = tblSPS,
  haxis   = 's',
  haxis2  = 's',
  vaxis   = 'x',
  vaxis2  = 'z',
  --vlimit  = {-100,70},
  --vlimit2 = {-5 ,5 },
  interpolate = true,
}

-- change of title, no title option
local plotSPS = plot {
  filename = "testtitle.pdf",
  table   = tblSPS,
  haxis   = 's',
  vaxis   = 'y',
  notitle = true,
  --title   = "TITLE",
}
-- change of axis names and size
local plotSPS = plot {
  filename = "testaxis.pdf",
  table    = tblSPS,
  sequence = seq,
  haxis    = 's',
  vaxis    = {'x','y'},
  hlimit = {0, 50},
  vlimit = {0, 100},
  xlabel  = "x limited",
  ylabel  = "y limited",
}
-- interpolation
local plotSPS = plot {
  filename    = "testinter.pdf",
  interpolate = true,
  table   = tblSPS,
  haxis   = 's',
  vaxis   = 'y',
  grid = 'nogrid',
}

-- end ------------------------------------------------------------------------o
]]
