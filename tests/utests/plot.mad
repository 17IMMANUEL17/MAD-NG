--[=[
 o-----------------------------------------------------------------------------o
 |
 | Plot module regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 |          A. Bloch, aurelien.bloch at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the plot module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local plot in MAD

-- helpers --------------------------------------------------------------------o

local saveDump   = false
local lhc        = false
local refFolder  = "./PlotTests/"
local testFolder = "./PlotTestsGen/"

local function loadLHC()
  if lhc then
    assertNotNil(require 'lhc_as-built_gen')
    assertNotNil(require 'lhc_as-built_set')
    assertNotNil(require 'lhc_undefvar'    )
    assertNotNil(require 'opt_inj_gen'     )

    local lhcb1, lhcb2 in MADX
    assertEquals(#lhcb1, 6677)
    assertEquals(#lhcb2, 6676)

    lhcb1:select(observe)
    lhcb2:select(observe)

    lhc = true
  end
  return MADX.lhcb1, MADX.lhcb2
end

local function assertFiles(name)
  local ref  = io.open(refFolder  .. name)
  local test = io.open(testFolder .. name)
  local line = 1
  while true do
    local refline  = ref:read("*line")
    local testline = test:read("*line")
    if refline == nil or testline == nil then break end
    if refline ~= testline then
      error(
        "expected: '" .. refline ..
        "', actual: '" .. testline ..
        "' at line: " .. line
      )
    end
    line = line + 1
  end
  if not saveDump then os.remove(testFolder .. name) end
end

local function getMyPlot(name)
  return plot { output = false, scrdump = testFolder .. name, exec = false}
end

-- regression test suite ------------------------------------------------------o

TestPlot = {}

-- TODO Cleaner + cross platform
function TestPlot:setUp ()
  os.execute("mkdir -p " .. testFolder)
end

function TestPlot:tearDown ()
  if not saveDump then
    os.remove(testFolder)
  end
end

function TestPlot:testEmptyPlot()
  local name   = "testEmptyPlot"
  local myplot = getMyPlot(name)
  myplot { }
  assertFiles(name)
end



-- end ------------------------------------------------------------------------o
