--[=[
 o-----------------------------------------------------------------------------o
 |
 | Matrix multiplication - real matrices
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: A.Z. Teska, aleksandra.teska at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide speed measurements for matrix multiplication.

 o-----------------------------------------------------------------------------o

  Informations:
  - tested operation  M1 * M2 + M3 * M4
  - all the operations 10^8 times
]=]

local luaunit = require('luaunit')

local assertEquals, assertAlmostEquals in require 'luaunit'

local vector, matrix in MAD

-- performance test suite -----------------------------------------------------o

Test_MatrixMul = {}

function Test_MatrixMul:testMSize2()
  local M1 = matrix(2):fill(1)
  local M2 = matrix(2):fill(2)
  local M3 = matrix(2):fill(3)
  local M4 = matrix(2):fill(4)
  local t0 = os.clock()
  for i=1,1e8 do
    M1:mul(M2):add( M3:mul(M4) )  -- M1 * M2 + M3 * M4
  end
  local dt = os.clock() - t0
  print(dt)
  --assertAlmostEquals( dt, 0.5, 1 )
end

function Test_MatrixMul:testSize3()
  local M1 = matrix(3):fill(1)
  local M2 = matrix(3):fill(2)
  local M3 = matrix(3):fill(3)
  local M4 = matrix(3):fill(4)
  local t0 = os.clock()
  for i=1,1e8 do
    M1:mul(M2):add( M3:mul(M4) ) -- M1 * M2 + M3 * M4
  end
  local dt = os.clock() - t0
  print(dt)
  --assertAlmostEquals( dt, 0.5, 1 )
end

function Test_MatrixMul:testSize4()
  local M1 = matrix(4):fill(1)
  local M2 = matrix(4):fill(2)
  local M3 = matrix(4):fill(3)
  local M4 = matrix(4):fill(4)
  local t0 = os.clock()
  for i=1,1e8 do
    M1:mul(M2):add( M3:mul(M4) ) -- M1 * M2 + M3 * M4
  end
  local dt = os.clock() - t0
  print(dt)
  --assertAlmostEquals( dt, 0.5, 1 )
end

function Test_MatrixMul:testSize5()
  local M1 = matrix(5):fill(1)
  local M2 = matrix(5):fill(2)
  local M3 = matrix(5):fill(3)
  local M4 = matrix(5):fill(4)
  local t0 = os.clock()
  for i=1,1e8 do
    M1:mul(M2):add( M3:mul(M4) ) -- M1 * M2 + M3 * M4
  end
  local dt = os.clock() - t0
  print(dt)
  --assertAlmostEquals( dt, 0.5, 1 )
end

function Test_MatrixMul:testSize6()
  local M1 = matrix(6):fill(1)
  local M2 = matrix(6):fill(2)
  local M3 = matrix(6):fill(3)
  local M4 = matrix(6):fill(4)
  local t0 = os.clock()
  for i=1,1e8 do
    M1:mul(M2):add( M3:mul(M4) ) -- M1 * M2 + M3 * M4
  end
  local dt = os.clock() - t0
  print(dt)
  --assertAlmostEquals( dt, 0.5, 1 )
end

function Test_MatrixMul:testSize7()
  local M1 = matrix(7):fill(1)
  local M2 = matrix(7):fill(2)
  local M3 = matrix(7):fill(3)
  local M4 = matrix(7):fill(4)
  local t0 = os.clock()
  for i=1,1e8 do
    M1:mul(M2):add( M3:mul(M4) ) -- M1 * M2 + M3 * M4
  end
  local dt = os.clock() - t0
  print(dt)
  --assertAlmostEquals( dt, 0.5, 1 )
end

function Test_MatrixMul:testSize8()
  local M1 = matrix(8):fill(1)
  local M2 = matrix(8):fill(2)
  local M3 = matrix(8):fill(3)
  local M4 = matrix(8):fill(4)
  local t0 = os.clock()
  for i=1,1e8 do
    M1:mul(M2):add( M3:mul(M4) ) -- M1 * M2 + M3 * M4
  end
  local dt = os.clock() - t0
  print(dt)
  --assertAlmostEquals( dt, 0.5, 1 )
end

os.exit( luaunit.LuaUnit.run() )
