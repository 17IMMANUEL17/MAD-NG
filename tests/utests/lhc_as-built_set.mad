local assert in _G

MADX:open_env()

-- share lhcb1 with lhcb2
lhcb1:share(lhcb2)

-- proper settings of sequence direction
lhcb2.direction = -1

-- change angle
if option.rbarc == true then
  local toarc = \e => if e.kind == 'rbend' then rbarc(e) end end

  lhcb1:foreach(toarc)
  lhcb2:foreach(toarc)
end

-- change RBEND to SBEND for MAD-X compatibility
local eface = \s -> s.angle/2

mbrb :set_parent(sbend) :set{ e1=eface, e2=eface }
mbrc :set_parent(sbend) :set{ e1=eface, e2=eface }
mbrs :set_parent(sbend) :set{ e1=eface, e2=eface }
mbw  :set_parent(sbend) :set{ e1=eface, e2=eface }
mbx  :set_parent(sbend) :set{ e1=eface, e2=eface }
mbxw :set_parent(sbend) :set{ e1=eface, e2=eface }

lhcb1:foreach \e -> assert(e.kind ~= 'rbend', "unexpected rbend")
lhcb2:foreach \e -> assert(e.kind ~= 'rbend', "unexpected rbend")

MADX:close_env()

-- kickers compatibilty (to be reviewed)
local E = MAD.element

E. kicker.knl = \s -> ( s.hkick and { -s.hkick } )
E. kicker.ksl = \s -> ( s.vkick and {  s.vkick } )
E.hkicker.knl = \s -> ((s.hkick or s.kick) and { -(s.hkick or s.kick) })
E.vkicker.ksl = \s -> ((s.vkick or s.kick) and {   s.vkick or s.kick  })
