--[=[
 o-----------------------------------------------------------------------------o
 |
 | Twiss tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the twiss module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains                  in MAD.utest

local sequence, beam, track, cofind, twiss, plot, vector, matrix,
      option, filesys                                            in MAD
local sin, frac                                                  in MAD.gmath
local make_symp                                                  in MAD.gphys
local fnone, ftrue, ffalse                                       in MAD.gfunc
local marker, drift, quadrupole, multipole                       in MAD.element
local eps, pi                                                    in MAD.constant
local openfile, pause, atexit                                    in MAD.utility
local deferred                                                   in MAD.typeid

local refdir = \s -> 'twiss_ref/'..(s or '')
local rundir = \s -> 'twiss_run/'..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot != true

if doplot then atexit(pause, true) end

local function plottw (mtbl, x1y2_)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title, sequence=mtbl.sequ,
             x1y1 = { s={'beta11','beta22',} },
             x1y2 = { s= x1y2_ or {'mu1','mu2'} },
           }
end

local tbl_col  = {'name','s','l','slc','beta11','beta22'}
local tbl_hdr  = {'title','type','origin','date','time'}

local srvcol   = {'name','kind','s','l','x','y','z'}
local trkcol   = {'name','kind','s','l','x','px','y','py','t','pt'}
local twscol   = {'name','s','l','beta11','alfa11','mu1','beta22','alfa22','mu2','dx','dpx'}
local trkcolre = {'name','kind','s','l','x','px','y','py','t','pt',
                  're11','re12','re13','re14','re15','re16',
                  're21','re22','re23','re24','re25','re26',
                  're31','re32','re33','re34','re35','re36',
                  're41','re42','re43','re44','re45','re46',
                  're51','re52','re53','re54','re55','re56',
                  're61','re62','re63','re64','re65','re66' }
local twscolre = {'name','s','l','beta11','alfa11','mu1','beta22','alfa22','mu2','dx','dpx',
                  're11','re12','re13','re14','re15','re16',
                  're21','re22','re23','re24','re25','re26',
                  're31','re32','re33','re34','re35','re36',
                  're41','re42','re43','re44','re45','re46',
                  're51','re52','re53','re54','re55','re56',
                  're61','re62','re63','re64','re65','re66' }

local tw_col = {'name','s','l','slc','beta11','beta22'}
local sv_col = {'name', 'kind', 's', 'l', 'angle', 'x', 'y', 'z', 'theta', 'phi', 'psi', 'globaltilt', 'slc'}

-- Tests ----------------------------------------------------------------------o

TestTwiss = {}

function TestTwiss:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.numfmt
  self.nochrg = option.nocharge
  option.numfmt = "%-.10g"
  option.nocharge = true
end

function TestTwiss:tearDown ()
  option.numfmt   = self.optfmt
  option.nocharge = self.nochrg
end

--[[
k1f=0.3039540091;
fodo: sequence, l=10, refer=entry;
  mq1: quadrupole, at=0, l=1, k1:= k1f;
  mq2: quadrupole, at=5, l=1, k1:=-k1f;
endsequence;

beam;
use, sequence=fodo;
select, flag=twiss, clear;
select, flag=twiss, column={name,s,l,betx,alfx,dx,dpx,mux,bety,alfy,muy};
twiss, sequence=fodo, file="fodo.tfs", x=1e-3, px=-1e-4, y=-1e-3, py=1e-4;

ptc_create_universe;
ptc_create_layout, model=2, method=2, nst=1, time=true, exact=true;
ptc_setswitch, debuglevel=2, mapdump=2, exact_mis=true, time=true, totalpath=false;

select, flag=ptc_twiss, clear;
select, flag=ptc_twiss, column={name,s,l,beta11,alfa11,mu1,beta22,alfa22,mu2,disp1,disp3};
ptc_twiss, icase=5, file="fodo_ptc.tfs", closed_orbit=true, x=1e-3, px=-1e-4, y=-1e-3, py=1e-4;
ptc_end;
--]]

--[[
ptc_twiss, icase=5, closed_orbit=true, x=1e-3, px=-1e-4, y=-1e-3, py=1e-4;

PTC mapdump @ end
-0.2377189796615998E+01   0.1544102226044410E+02   0.0000000000000000E+00   0.0000000000000000E+00   0.0000000000000000E+00  -0.4151138893136709E-54
-0.4307377593480018E+00   0.2377189797192771E+01   0.0000000000000000E+00   0.0000000000000000E+00   0.0000000000000000E+00  -0.1814968230961197E-55
 0.0000000000000000E+00   0.0000000000000000E+00   0.6542387598007640E+00   0.3315308034777050E+01   0.0000000000000000E+00   0.0000000000000000E+00
 0.0000000000000000E+00   0.0000000000000000E+00  -0.4307377593480017E+00  -0.6542387592239911E+00   0.0000000000000000E+00   0.0000000000000000E+00
 0.1356599869589736E-54  -0.7065548537867606E-54  -0.0000000000000000E+00  -0.0000000000000000E+00   0.0000000000000000E+00   0.2611199911850548E-05
 0.0000000000000000E+00   0.0000000000000000E+00   0.0000000000000000E+00   0.0000000000000000E+00   0.0000000000000000E+00   0.1000000000000000E+01

mflw = twiss {sequence=seq, beam=beam, X0=X0, debug=4, cofind=true }

MAD-NG mapdump @ end
-2.3771897966159985e+00   1.5441022260444100e+01   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00
-4.3073775934800185e-01   2.3771897971927709e+00   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00
 0.0000000000000000e+00   0.0000000000000000e+00   6.5423875980076396e-01   3.3153080347770505e+00   0.0000000000000000e+00   0.0000000000000000e+00
 0.0000000000000000e+00   0.0000000000000000e+00  -4.3073775934800174e-01  -6.5423875922399111e-01   0.0000000000000000e+00   0.0000000000000000e+00
 0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00   2.6111999118505480e-06
 0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00

ptc_twiss, icase=5, closed_orbit=false, x=1e-3, px=-1e-4, y=-1e-3, py=1e-4;

PTC mapdump @ end
-0.3921293236625220E-02  -0.6684567920035463E-03  -0.3227075062268356E-03   0.3653139037266402E-03  -0.1684627759068746E-05   0.0000000000000000E+00
-0.2377191933863161E+01   0.1544103216468469E+02   0.6622150122196777E-06   0.1479906166732360E-05   0.0000000000000000E+00   0.7152719671462868E-02
-0.4307378640249474E+00   0.2377190134484997E+01   0.3143259966519868E-07   0.1102994803650391E-06   0.0000000000000000E+00   0.5411083590110875E-03
 0.4524356992877783E-06  -0.2422538547711366E-05   0.6542379766728763E+00   0.3315306759494827E+01   0.0000000000000000E+00  -0.1730647820695735E-02
 0.2390352793343144E-07  -0.6936354544443301E-07  -0.4307378088434825E+00  -0.6542389535464594E+00   0.0000000000000000E+00  -0.2404299006298308E-03
-0.1794628699457569E-02   0.8648102599261513E-02   0.9027536883844459E-03   0.1929356082063852E-02   0.0000000000000000E+00   0.7843515695585155E-05
 0.0000000000000000E+00   0.0000000000000000E+00   0.0000000000000000E+00   0.0000000000000000E+00   0.0000000000000000E+00   0.1000000000000000E+01

mflw = twiss {sequence=seq, beam=beam, X0=X0, debug=4, cofind=false }

MAD-NG mapdump @ end
-3.9212932366252205e-03  -6.6845679200354629e-04  -3.2270750622683561e-04   3.6531390372664016e-04  -1.6846277590687464e-06   0.0000000000000000e+00
-2.3771919338631613e+00   1.5441032164684687e+01   6.6221501221967770e-07   1.4799061667323605e-06   0.0000000000000000e+00   7.1527196714628663e-03
-4.3073786402494740e-01   2.3771901344849966e+00   3.1432599665198679e-08   1.1029948036503911e-07   0.0000000000000000e+00   5.4110835901108735e-04
 4.5243569928777845e-07  -2.4225385477113665e-06   6.5423797667287653e-01   3.3153067594948262e+00   0.0000000000000000e+00  -1.7306478206957350e-03
 2.3903527933431438e-08  -6.9363545444433028e-08  -4.3073780884348251e-01  -6.5423895354645945e-01   0.0000000000000000e+00  -2.4042990062983073e-04
-1.7946286994575686e-03   8.6481025992615132e-03   9.0275368838444565e-04   1.9293560820638515e-03   1.0000000000000000e+00   7.8435156944944850e-06
 0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   0.0000000000000000e+00   1.0000000000000000e+00
--]]

function TestTwiss:testTwissFODO ()
  local k1f = 0.3039540091
  local seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
    quadrupole 'mq1' { at=0, l=1, k1 :=  k1f },
    quadrupole 'mq2' { at=5, l=1, k1 := -k1f },
  }

  local X0  = { 1e-3, -1e-4, -1e-3, 1e-4, 0, 0 }
  local mtbl, mflw = twiss {sequence=seq, beam=beam, X0=X0, method=4, nslice=10,
                            implicit=true, save='atbody' }

  plottw(mtbl, {'mu1','mu2'})
  plottw(mtbl, {'dx' ,'dy' })

-- uncomment to dump twiss table
!  MAD.option.numfmt = "% .6g"
!  mtbl:write(rundir('fodotwiss'))

-- uncomment to dump X1 and A1
  MAD.option.numfmt = "% .16e"
  mflw[1]:get0():print("X1")
  mflw[1]:get1():print("A1")

  local X1 = vector {
    -9.9999657982062832e-04,
     1.0000057871174762e-04,
     1.0000003022472381e-03,
    -1.0000031113510857e-04,
    -2.7848350185877280e-06,
     0.0000000000000000e+00,
  }
  local A1 = matrix {
    {-4.9510434485811050e-06,  3.4921662548033066e+00, -1.7811676244067631e+00, -2.7062670643942777e-01, 0,-1.4948589145797341e-02},
    {-2.2616235996261558e-01,  5.3762899675205977e-01, -2.5668944610053618e-01, -1.5701673158605281e-01, 0,-2.0438533234358328e-03},
    {-8.2533227035099888e-01,  1.2539866371913133e-01, -4.3438832364461888e-08,  1.6181502672720260e+00, 0, 6.2932093856006414e-04},
    { 1.2504622347622257e-01, -2.7369186653440047e-01, -4.8808439036080747e-01, -3.1932397109538446e-01, 0, 1.1123163663657766e-03},
    { 2.0927200286528871e-03, -1.0005651821005303e-03, -1.0432955705851952e-04, -2.0252260529256142e-04, 1, 7.4184224329171267e-06},
    { 0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00, 0, 1.0000000000000000e+00},
  }

  assertEquals(mflw.__twdat.ofun[1].rank, 4)
  assertAllAlmostEquals((mflw[1]:get0()-X1):totable(true), 0, eps)
  assertAllAlmostEquals((mflw[1]:get1()-A1):totable(true), 0, eps)
end

function TestTwiss:testTwissFODOco ()
  local k1f = 0.3039540091
  local seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
    quadrupole 'mq1' { at=0, l=1, k1 :=  k1f },
    quadrupole 'mq2' { at=5, l=1, k1 := -k1f },
  }

  local X0  = { 1e-3, -1e-4, -1e-3, 1e-4, 0, 0 }
  local mtbl, mflw = twiss {sequence=seq, beam=beam, X0=X0, method=4, nslice=10,
                            implicit=true, cofind=true, save='atbody' }

  plottw(mtbl, {'mu1','mu2'})
  plottw(mtbl, {'dx' ,'dy' })

-- uncomment to dump twiss table
!  MAD.option.numfmt = "% .6g"
!  mtbl:write(rundir('fodotwissco'))

-- uncomment to dump A1
!  MAD.option.numfmt = "% .16e"
!  mflw[1]:get1():print("A1")

  local A1 = matrix {
    { 1.1332172977773780e-09,  3.9295066179412479e+00,  4.3967837813463541e-19,  1.2977116995115220e-18, 0, -1.2091132409717680e-08},
    {-2.5448487470377895e-01,  6.0495884810043310e-01,  3.6619805638785203e-20,  1.5748680056900116e-19, 0, -1.3844389377641491e-09},
    { 2.0373189608456716e-19, -2.2230051011111647e-19,  5.2509419035118299e-10,  1.8207987353842952e+00, 0,  1.2968211083918513e-09},
    { 1.4117114666499200e-19, -4.7419315589578724e-20, -5.4920952039084869e-01, -3.5931415510671927e-01, 0,  7.1503412578460245e-10},
    { 2.0969433528095026e-09, -1.5398429185712971e-09, -6.2393811742299099e-10, -1.2495417850613948e-09, 1,  2.6111999104627692e-06},
    { 0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00, 0,  1.0000000000000000e+00}
  }

  assertEquals(mflw.__twdat.ofun[1].rank, 4)
  assertAllAlmostEquals( mflw[1]:get0():totable(), 0, cofind.cotol)
  assertAllAlmostEquals((mflw[1]:get1()-A1):totable(true), 0, eps)
end

function TestTwiss:testTwissThinFODO ()
  local nsl = 10 -- 10 -- for madx row by row compatibility
  local nth = 10
  local dl  = 1/nth
  local X0  = { 1e-3, -1e-4, -1e-3, 1e-4, 0, 0 }
  local k1l = 0.3039540091
  local mk1 = marker    'mk1' {}
  local mk2 = marker    'mk2' {}
  local df1 = drift     'df1' { l=4, nslice=nsl }
  local df2 = drift     'df2' { l=4, nslice=nsl }
  local mq1 = multipole 'mq1' { knl := {0,  k1l/nth} }
  local mq2 = multipole 'mq2' { knl := {0, -k1l/nth} }
  local seq = sequence  'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2              },
      (nth/2-1)*mq1 {at=dl    , from='prev' },
                mk1 {at=0+dl/2, from='prev' },
                mq1 {at=0+dl/2, from='prev' },
      (nth/2-1)*mq1 {at=dl    , from='prev' },
                df1 {at=1}, -- for madx row by row compatibility

                mq2 {at=5+dl/2              },
      (nth/2-1)*mq2 {at=dl    , from='prev' },
                mk2 {at=0+dl/2, from='prev' },
                mq2 {at=0+dl/2, from='prev' },
      (nth/2-1)*mq2 {at=dl    , from='prev' },
                df2 {at=6}, -- for madx row by row compatibility
  }

  local mtbl, mflw = twiss{sequence=seq, beam=beam, X0=X0, save='atslice'}

  plottw(mtbl, {'mu1','mu2'})
  plottw(mtbl, {'dx' ,'dy' })

-- uncomment to dump twiss table
!  MAD.option.numfmt = "% .6g"
!  mtbl:write(rundir('thinfodotwiss'))

-- uncomment to dump X1 and A1
!  MAD.option.numfmt = "% .16e"
!  mflw[1]:get0():print("X1")
!  mflw[1]:get1():print("A1")

  local X1 = vector {
    -9.8812501118010205e-04,
     1.0202405625067733e-04,
     1.0009717143516790e-03,
    -1.0110643296986624e-04,
    -2.7930808386145145e-06,
     0.0000000000000000e+00,
  }
  local A1 = matrix {
    {-5.2874857884464277e-03,  3.4912214406843485e+00, -1.7814092661448826e+00, -2.7349046863533311e-01, 0, -1.4978484568091772e-02},
    {-2.2697565174240170e-01,  5.3741905341058571e-01, -2.5667812541695623e-01, -1.5752604356460886e-01, 0, -2.0467371192717286e-03},
    {-8.2542328228769901e-01,  1.2416685803031680e-01, -2.4465886304528284e-03,  1.6169276008079276e+00, 0,  6.3999566869055126e-04},
    { 1.2544173636665862e-01, -2.7379290704659026e-01, -4.8783751578131618e-01, -3.1992430499305630e-01, 0,  1.1141700918160555e-03},
    { 2.1031060355278398e-03, -1.0075826739498444e-03, -1.0445065325806405e-04, -2.0261337929446577e-04, 1,  7.4612955441241691e-06},
    { 0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00, 0,  1.0000000000000000e+00},
  }

  assertEquals(mflw.__twdat.ofun[1].rank, 4)
  assertAllAlmostEquals((mflw[1]:get0()-X1):totable(true), 0, eps)
  assertAllAlmostEquals((mflw[1]:get1()-A1):totable(true), 0, eps)
end

function TestTwiss:testTwissThinFODOco ()
  local nsl = 10 -- 10 -- for madx row by row compatibility
  local nth = 10
  local dl  = 1/nth
  local X0  = { 1e-3, -1e-4, -1e-3, 1e-4, 0, 0 }
  local k1l = 0.3039540091
  local mk1 = marker    'mk1' {}
  local mk2 = marker    'mk2' {}
  local df1 = drift     'df1' { l=4, nslice=nsl }
  local df2 = drift     'df2' { l=4, nslice=nsl }
  local mq1 = multipole 'mq1' { knl := {0,  k1l/nth} }
  local mq2 = multipole 'mq2' { knl := {0, -k1l/nth} }
  local seq = sequence  'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2              },
      (nth/2-1)*mq1 {at=dl    , from='prev' },
                mk1 {at=0+dl/2, from='prev' },
                mq1 {at=0+dl/2, from='prev' },
      (nth/2-1)*mq1 {at=dl    , from='prev' },
                df1 {at=1}, -- for madx row by row compatibility

                mq2 {at=5+dl/2              },
      (nth/2-1)*mq2 {at=dl    , from='prev' },
                mk2 {at=0+dl/2, from='prev' },
                mq2 {at=0+dl/2, from='prev' },
      (nth/2-1)*mq2 {at=dl    , from='prev' },
                df2 {at=6}, -- for madx row by row compatibility
  }

  local mtbl, mflw = twiss{sequence=seq, beam=beam, X0=X0, cofind=true,
                           save=doplot and 'atslice' or nil}

  plottw(mtbl, {'mu1','mu2'})
  plottw(mtbl, {'dx' ,'dy' })

-- uncomment to dump twiss table
!  MAD.option.numfmt = "% .6g"
!  mtbl:write(rundir('thinfodotwiss'))

-- uncomment to dump X1 and A1
!  MAD.option.numfmt = "% .16e"
!  mflw[1]:get0():print("X1")
!  mflw[1]:get1():print("A1")

  local X1 = vector {
     8.8924374800564819e-10,
     3.5435494720402060e-10,
     8.4636694124226197e-10,
    -1.9448192743094731e-10,
     0.0000000000000000e+00,
     0.0000000000000000e+00,
  }
  local A1 = matrix {
    {-5.9448586881190035e-03,  3.9289738978293132e+00,  4.4176544857294591e-19,  1.3066018192246125e-18, 0, -1.2117633814300314e-08},
    {-2.5543449815987246e-01,  6.0480426262341158e-01,  3.6659800257399500e-20,  1.5848406707776421e-19, 0, -1.3868753842839423e-09},
    { 2.0585504387600998e-19, -2.2454666587871626e-19, -2.7533073580884859e-03,  1.8196686094886210e+00, 0,  1.3055405759869156e-09},
    { 1.4216507232906996e-19, -4.7653288137372149e-20, -5.4900584576550149e-01, -3.6003827609428052e-01, 0,  7.1676832266926154e-10},
    { 2.1062192042359815e-09, -1.5451437491889178e-09, -6.2635539663231371e-10, -1.2552302896075157e-09, 1,  2.6111999104627692e-06},
    { 0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00,  0.0000000000000000e+00, 0,  1.0000000000000000e+00},
  }

  assertEquals(mflw.__twdat.ofun[1].rank, 4)
  assertAllAlmostEquals((mflw[1]:get0()-X1):totable(true), 0, eps)
  assertAllAlmostEquals((mflw[1]:get1()-A1):totable(true), 0, eps)
end

function TestTwiss:testTwissSimpleRing ()
  local beam, sequence, element, survey, twiss, vector in MAD
  local sbend, quadrupole in element

  local mb = sbend      { l=2, k0 =\s s.angle/s.l, kill_ent_fringe=true, kill_exi_fringe=true }
  local mq = quadrupole { l=1 }
  local k1f, k1d, ang = 0.296004765416, -0.302420662794, 2*pi/50
  local cell =\a -> sequence { l=10, refer='entry',
      mq 'mq1' { at=0, k1=k1f  },
      mb 'mb1' { at=2, angle=a },
      mq 'mq2' { at=5, k1=k1d  },
      mb 'mb2' { at=7, angle=a },
    }
  local seq1 = sequence 'seq1' { 25*cell(ang), beam=beam }
  assertEquals(seq1.l, 250)

  local sv1 = survey { sequence=seq1, savemap=true, nslice=5, implicit=true, save='atbody' }
  sv1:write(rundir('survey_seq1'))--, sv_col, tbl_hdr)

  local X0 = {-1e-3,1e-4,-1e-4,1e-3,0,0}
  local tw1,tw1m = twiss { sequence=seq1, beam=beam, X0=X0, nslice=5, implicit=true, save='atbody' } !, chrom=false, deltap=1e-6 }

  tw1:write(rundir('twiss_seq1'))--, tw_col, tbl_hdr)
!  tw1m:show()
!  print("b11=", type(tw1.beta11))

  if doplot then
    local round in MAD.gmath
    local bet11 = { x=vector(#sv1), z=vector(#sv1) }
    local v, scl = vector(3), round(tw1.beta11:max()/5)
    for i=1,#sv1 do
      v:fill {3+tw1.beta11[i]/scl, 0, 0}
      sv1.W[i]:mul(v, v)
      bet11.x[i], bet11.z[i] = v[1], v[3]
    end
    bet11.x = bet11.x+sv1.x
    bet11.z = bet11.z+sv1.z

    plot {
      sequence = seq1,
      laypos   = "in",
      layonly  = false,
      title    = "Layout in plot with \u{03b2}_x",
      data     = { x=bet11.x, z=bet11.z },
      x1y1     = { x = 'z' },
      styles   = 'lines',
    --  prolog   = 'set xrange [] reverse',
      xlabel   = "x [m]",
      ylabel   = "z [m]",
      legend   = { z = '\u{03b2}_x/'..scl },
      fontsize = 14,
    }
  end
end

-- from MAD-X course, src_4.1 and src_5.1
function TestTwiss:testTwissSingleRing ()
  !! import
  local beam, sequence, element, survey, twiss in MAD
  local drift, marker, sbend, quadrupole, sextupole, hkicker, vkicker,
        monitor, bline in element

  !! context (note: Setup sets option.nocharge=true)
  local beam = beam { particle='electron', energy=20 }

  !! constants
  local l , n  = deferred {}, deferred {}
  l.sequ = 240 ! length of the machine
  l.ssec = 20  ! length of the straight sections
  n.ssec = 2   ! number of straight sections
  n.bend = 4   ! number of bends per cell

  !! lengths
  ! lengths of bends, quads, sexts, kickers, monitors
  l.mb=3.3 ; l.mq=0.8 ; l.ms=0.4 ; l.mk=0.25 ; l.bp=0.25
  ! lengths of drifts between magnets and fo-do
  l.de = 0.3 ; l.df = 0.5
  ! length of cells (20m)
  l.cell =\ -> 2*(l.mb+l.bp+l.mk+l.mq+l.ms+l.mb +4*l.de +l.df)
  ! number of cells per arc
  n.cell =\ -> 1*(l.sequ/n.ssec - l.ssec)/l.cell
! print('l.cell=', l.cell, 'n.cell=', n.cell)

  !! classes
  local df = drift      'df' {}
  local mb = sbend      'mb' { l := l.mb } !, kill_ent_fringe=true,  kill_exi_fringe=true }
  local mq = quadrupole 'mq' { l := l.mq }
  local ms = sextupole  'ms' { l := l.ms }
  local hk = hkicker    'hk' { l := l.mk }
  local vk = vkicker    'vk' { l := l.mk }
  local bp = monitor    'bp' { l := l.bp }
  local mk = marker     'mk' {}

  !! families
  local k1, k2 = deferred {}, deferred {}
  local qf = mq 'qf' { k1 := k1.qf }
  local qd = mq 'qd' { k1 := k1.qd }
  local sf = ms 'sf' { k2 := k2.sf }
  local sd = ms 'sd' { k2 := k2.sd }
  local d0 = df 'd0' { l  := l.ssec/2 }
  local d1 = df 'd1' { l  := l.df/2 }
  local d2 = df 'd2' { l  := l.de }
  local mkf , mkd     = mk 'mkf' {}, mk 'mkd' {}
  local mkl , mkr, ip = mk 'mkl' {}, mk 'mkr' {}, mk 'ip' {}

  !! lattice
  local cellf = bline    'cellf' {mkf,d1,mb,d2,bp,hk,d2,qf,d2,sf,d2,mb,d1}
  local celld = bline    'celld' {mkd,d1,mb,d2,bp,vk,d2,qd,d2,sd,d2,mb,d1}
  local cell  = bline    'cell'  {cellf,celld}
  local ssec  = bline    'ssec'  {mkl,d0,ip,d0,mkr}
  local arc   = sequence 'arc'   {5*cell}
  local sequ  = sequence 'sequ'  {arc,ssec,arc,ssec}

  !! angle
  n.mb = n.ssec*n.cell*n.bend
  mb.angle =\ -> 2*pi/n.mb
! print('n.mb=', n.mb, 'mb.angle=', mb.angle)

  !! survey
  local srv = survey { sequence=sequ, nslice=5, implicit=true, save='atbody' }
  srv:write(rundir('sr_survey'), srvcol)

  !! plot survey
  if doplot then
    plot {
      sequence = sequ,
      laypos   = "in",
      layonly  = false,
      x1y1     = { x = 'z' },
      styles   = 'lines',
    --  prolog   = 'set xrange [] reverse',
      xlabel   = "x [m]",
      ylabel   = "z [m]",
      fontsize = 14,
    }
    pause()
  end

  !! thick_approx
  local u_cell = pi/2
  local f_cell = l.cell/(4*sin(u_cell/2))
  local k_cell = 1/(f_cell * l.mq)
  k1.qf, k1.qd, k2.sf, k2.sd = k_cell, -k_cell, 0, 0
! print('qf.k1=', qf.k1, 'qd.k1=', qd.k1)
! print('sf.k2=', sf.k2, 'sd.k2=', sd.k2)
! print('qf.k1_f=', qf.k1*beam.brho, 'mb.k0_f=', mb.angle*beam.brho/mb.l)

  !! twiss
  local tws, mfw = twiss { sequence=arc, beam=beam, savemap=true }
! print("#tws=", #tws)
  for i=1,6 do for j=1,6 do
    tws:addcol('re'..i..j, \r -> tws.__map[r][i]:get(j+1))
  end end
  tws:write(rundir('sr_track_arc.txt'), twscolre)

! print('q1=', tws.q1) -- =1.391381980, madx=1.279802923
! print('q2=', tws.q2) -- =1.207437789, madx=1.232679934

  local mux = 360*frac(tws.q1)/n.cell
  local muy = 360*frac(tws.q2)/n.cell
! print('mux=', mux, 'muy=', muy)

--  local tws = twiss { sequence=arc, beam=beam, implicit=true }
--  local mux = 360*frac(tws.q1[1])/n.cell
--  local muy = 360*frac(tws.q2[1])/n.cell
--  print('mux=', mux, 'muy=', muy)
end

-- end ------------------------------------------------------------------------o
