--[=[
 o-----------------------------------------------------------------------------o
 |
 | Twiss tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the twiss module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains                  in MAD.utest

local sequence, beam, track, twiss, plot, option, filesys        in MAD
local fnone, ftrue, ffalse                                       in MAD.gfunc
local marker, drift, quadrupole, multipole                       in MAD.element
local eps, pi                                                    in MAD.constant
local openfile                                                   in MAD.utility

local refdir = \s -> 'twiss_ref/'..(s or '')
local rundir = \s -> 'twiss_run/'..(s or '')

-- helpers --------------------------------------------------------------------o

local doplot -- = true

if doplot then
  local pause, atexit in MAD.utility
  atexit(pause, true)
end

local function plottw (mtbl, seq)
  if not doplot then return end
  MAD.plot { table=mtbl, title=mtbl.title, sequence=seq,
             x1y1 = { s={'beta11','beta22'} },
             x1y2 = { s={'mu1'   ,'mu2'   } } }
end

local tbl_col = {'name','s','l','slc','beta11','beta22'}
local tbl_hdr = {'title','type','origin','date','time'}

-- Tests ----------------------------------------------------------------------o

TestTwiss = {}

function TestTwiss:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.format
  option.format = "%-.10g"
end

function TestTwiss:tearDown ()
  option.format = self.optfmt
end

function TestTwiss:testTwissThinFODO ()
  local nsl = 10 -- 10 -- for madx row by row compatibility
  local nth = 10
  local dl  = 1/nth
  local X0  = { 0, 1e-6, 0, 5e-7, 0, 0 }
  local k1l = 0.3037241107
  local mk1 = marker    'mk1' {}
  local mk2 = marker    'mk2' {}
  local df1 = drift     'df1' { l=4, nslice=nsl }
  local df2 = drift     'df2' { l=4, nslice=nsl }
  local mq1 = multipole 'mq1' { knl := {0,  k1l/nth} }
  local mq2 = multipole 'mq2' { knl := {0, -k1l/nth} }
  local seq = sequence  'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2              },
      (nth/2-1)*mq1 {at=dl    , from='prev' },
                mk1 {at=0+dl/2, from='prev' },
                mq1 {at=0+dl/2, from='prev' },
      (nth/2-1)*mq1 {at=dl    , from='prev' },
                df1 {at=1}, -- for madx row by row compatibility

                mq2 {at=5+dl/2              },
      (nth/2-1)*mq2 {at=dl    , from='prev' },
                mk2 {at=0+dl/2, from='prev' },
                mq2 {at=0+dl/2, from='prev' },
      (nth/2-1)*mq2 {at=dl    , from='prev' },
                df2 {at=6}, -- for madx row by row compatibility
  }

  -- seq:dumpseq()

  local mtbl, mflw = MAD.twiss{sequence=seq, beam=beam, X0=X0,
                              -- atslice=ftrue} -- for madx row by row compatibility
                               atslice=ftrue, atexit=ffalse}

  plottw(mtbl, seq)
  mtbl:write(rundir('thinfodotwiss'), tbl_col, tbl_hdr)

  -- TODO: 6D case
  assertEquals(mflw.__twdat.ofun.rank, 6)
--  assertEquals(iter, 2)
--  assertEquals(type, "4D")
--  assertAllAlmostEquals(mflw.X[1]:totable(), 0, eps)
end

function TestTwiss:testTwissFODO ()
  local k1l = 0.3037241107 -- TODO: match the strength...
  local df  = drift      'df'  { l=4 }
  local mqf = quadrupole 'mqf' { l=1, k1 :=  k1l }
  local mqd = quadrupole 'mqd' { l=1, k1 := -k1l }
  local seq = sequence 'seq' {
    l=10, refer='entry', -- dir=-1,
    mqf 'mq1' {at=0}, df  'df1' {at=1},
    mqd 'mq2' {at=5}, df  'df2' {at=6},
  }

  -- seq:dumpseq()
  local X0  = { 0, 1e-6, 0, 5e-7, 0, 0 }

  local mtbl, mflw = twiss{sequence=seq, beam=beam, X0=X0, nslice=10, atslice=ftrue}

  plottw(mtbl, seq)
  mtbl:write(rundir('fodotwiss'), tbl_col, tbl_hdr)

  -- TODO: 6D case
  assertEquals(mflw.__twdat.ofun.rank, 6)
--  assertEquals(iter, 2)
--  assertEquals(type, "4D")
--  assertAllAlmostEquals(mflw.X[1]:totable(), 0, eps)
end

-- end ------------------------------------------------------------------------o
