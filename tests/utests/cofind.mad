--[=[
 o-----------------------------------------------------------------------------o
 |
 | Close orbit finder tests
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the cofind module.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNotNil, assertEquals, assertAlmostEquals, assertAllAlmostEquals,
      assertStrContains, assertErrorMsgContains                  in MAD.utest

local sequence, beam, cofind, plot, option, filesys               in MAD
local fnone, ftrue                                               in MAD.gfunc
local drift_element, thick_element, thin_element, drift, marker  in MAD.element
local eps, pi                                                    in MAD.constant
local openfile                                                   in MAD.utility

local refdir = \s -> 'cofind_ref/'..(s or '')
local rundir = \s -> 'cofind_run/'..(s or '')

-- Tests ----------------------------------------------------------------------o

TestCOFind = {}

function TestCOFind:setUp ()
  filesys.mkdir(rundir())
  self.optfmt = option.format
  option.format = "%-.10g"
end

function TestCOFind:tearDown ()
  option.format = self.optfmt
end

function TestCOFind:testCOThinFODO ()
  local nsl = 10
  local dl  = 1/nsl
  local X0  = { 0, 1e-6, 0, 1e-8, 0, 0 }
  local k1l = 0.3037241107
  local mq1 = thin_element 'mq1' { knl := {0,  k1l/nsl} }
  local mq2 = thin_element 'mq2' { knl := {0, -k1l/nsl} }
  local seq = sequence 'seq' { l=10, refer='entry', -- dir=-1,
                mq1 {at=0+dl/2}, (nsl-1)*mq1 {at=dl, from='prev'},
                mq2 {at=5+dl/2}, (nsl-1)*mq2 {at=dl, from='prev'},
              }

  local X, R, rank, type, iter = cofind {
    sequence=seq, beam=beam, X0=X0, mapdef=true
  }

  -- TODO: 6D case
  assertEquals(rank, 4)
  assertEquals(iter, 2)
  assertEquals(type, '4D')
  assertAllAlmostEquals(X:totable(), 0, eps)
end

-- end ------------------------------------------------------------------------o
