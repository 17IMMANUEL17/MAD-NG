--[=[
 o-----------------------------------------------------------------------------o
 |
 | GTPSA module unit tests - real tpsa
 |
 | Methodical Accelerator Design - Copyright CERN 2016+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for the tpsa module.

 o-----------------------------------------------------------------------------o
]=]

local vector, tpsa, ctpsa, gtpsad, tpsa_eqn                                in MAD
local eps, abs, pi                                               in MAD.constant
local abs                                                        in MAD.gmath
local ident                                                      in MAD.gfunc
local assertTrue, assertEquals, assertAlmostEquals, assrtIsFalse,
      assertErrorMsgContains, assertError, assertIsNil                                       in MAD.utest
local is_tpsa, is_ctpsa, is_gtpsad, is_x, is_y                            in MAD.typeid

-- locals ---------------------------------------------------------------------o

local dat = assert(loadfile('data/tpsa.dat'))()

local ord = {1,2,3,4,5,6,7,10,12,15}

-- regression test suites -----------------------------------------------------o


TestIs = {}
TestConstr = {}
TestLengOp = {}
TestProm = {}
TestLogicOper = {}
TestCloning = {}
TestUnaryMinus = {}
TestArithmetic = {}
TestSetGet  = {}


function TestConstr:testConstrDefault()

  local ord  = 15
  local dummy = 0
  local nv = 2
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local max_n_coef = ((ord+nv)*(ord+nv - 1))/2
  local d2 = gtpsad()
  local d3 = gtpsad(nil, nil, 2) -- if we have params then po is 1 by default otherwise 0

  assertEquals(t.mo,ord)
  assertEquals(ct.mo,ord)

  assertEquals(d2.nv,6)
  assertEquals(d2.mo,1)
  assertEquals(d2.np, 0)
  assertEquals(d2.po, 0)

  assertEquals(d3.nv,6)
  assertEquals(d3.mo,1)
  assertEquals(d3.np, 2)
  assertEquals(d3.po, 1)
  

  
  
  --check all order equal to zeros
  for o = 0, max_n_coef-1 do
    assertEquals(t.coef[o],0)
    assertEquals(ct.coef[o], 0 + 0i)
  end

  --same check for only one variable 
  local ord  = 15
  local nv = 1
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local max_ord = ord
  assertEquals(t.mo,ord)
  assertEquals(ct.mo,ord)

  --check all order equal to zeros
  for o = 0, max_ord-1 do
    assertEquals(t.coef[o],0)
    assertEquals(ct.coef[o], 0 + 0i)
  end
 
end


function TestLengOp:testLength()
  local ord  = 15
  local nv = 2
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)

  assertEquals(136, #t)
  assertEquals(136, #ct)

  local ord  = 50
  local nv = 2
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)

  assertEquals(1326, #t)
  assertEquals(1326, #ct)

  local ord  = 15
  local nv = 1
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)

  assertEquals(16, #t)
  assertEquals(16, #ct)
end


function TestConstr:testConstrParams()
  local mo  = 15
  local nv = 2
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d,1)
  local ct = ctpsa(d,1)
  
  assertEquals(d.mo, 15)
  assertEquals(d.nv, 2)
  assertEquals(d.np, 3)
  assertEquals(d.po, 2)
  assertEquals(t.mo, 1)
  assertEquals(ct.mo,1)

  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  assertEquals(t2.mo, 15)
  assertEquals(ct2.mo, 15)

   --check all order equal to zeros

  for o = 0, #t -1 do
    assertEquals(t.coef[o],0)
    assertEquals(ct.coef[o], 0 + 0i)
  end

  -- check with only one variable
  local mo  = 15
  local nv = 1
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d,1)
  local ct = ctpsa(d,1)

  assertEquals(d.mo, 15)
  assertEquals(d.nv, 1)
  assertEquals(d.np, 3)
  assertEquals(d.po, 2)
  assertEquals(t.mo, 1)
  assertEquals(ct.mo,1)

  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  assertEquals(t2.mo, 15)
  assertEquals(ct2.mo, 15)

   --check all order equal to zeros
  for o = 0, #t - 1 do
    assertEquals(t.coef[o],0)
    assertEquals(ct.coef[o], 0 + 0i)
  end



-- other stuff to be tested
end


function TestIs:testTandD()
  local ord  = 15
  local nv = 2
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)

  assertTrue(is_tpsa(t))
  assertTrue(is_ctpsa(ct))
  assertTrue(is_gtpsad(d))
  assertTrue(not is_tpsa(ct))
  assertTrue(not is_ctpsa(t))
  assertTrue(not is_tpsa(d))
  assertTrue(not is_ctpsa(d))
  assertTrue(not is_gtpsad(t))
  assertTrue(not is_gtpsad(ct))
  assertTrue(not is_tpsa(0))
  assertTrue(not is_ctpsa(0))
  assertTrue(not is_gtpsad(0))

  local ord  = 15
  local nv = 1
  local d = gtpsad(nv, ord)
  local t = tpsa(d)
  local ct = ctpsa(d)

  assertTrue(is_tpsa(t))
  assertTrue(is_ctpsa(ct))
  assertTrue(is_gtpsad(d))
  assertTrue(not is_tpsa(ct))
  assertTrue(not is_ctpsa(t))
  assertTrue(not is_tpsa(d))
  assertTrue(not is_ctpsa(d))
  assertTrue(not is_gtpsad(t))
  assertTrue(not is_gtpsad(ct))
  assertTrue(not is_tpsa(0))
  assertTrue(not is_ctpsa(0))
  assertTrue(not is_gtpsad(0))
  end


function TestSetGet:testSet()

end

function TestSetGet:testGet()
end



function TestLogicOper:testEqSingleVar()
  local x = 1
  local y = 1 + 1i

  local mo  = 15
  local nv = 1
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  local d2 = gtpsad(nv,mo+1)
  local t3 = tpsa(d2)
  local ct3 = ctpsa(d2)

  assertTrue(0 == t)
  assertTrue(t == 0)
  assertTrue(t == (0 + 0i))
  assertTrue((0 + 0i) == t)
  assertTrue(t == t)
  assertTrue(0 == ct)
  assertTrue(ct == 0)
  assertTrue(ct == (0 + 0i))
  assertTrue((0 + 0i) == ct)
  assertTrue(ct == ct)
  assertTrue(t == ct)
  assertTrue(ct == t)
  assertTrue(t == t2)
  assertTrue(ct == ct2)
  
  --apparently protected. forced to use the set method
  --t2.coef[0] = 1
  --ct2.coef[0] = 1 +1i

  t2:set0(1)
  ct2:set0(1 +1i)

  assertTrue(not (t == x))
  assertTrue(not (x == t))
  assertTrue(not (t == y))
  assertTrue(not (y == t))
  assertTrue(not (t2 == t))
  assertTrue(not (t == t2))
  assertTrue(not (ct == x))
  assertTrue(not (x == ct))
  assertTrue(not (ct == y))
  assertTrue(not (y == ct))
  assertTrue(not (ct2 == ct))
  assertTrue(not (ct == ct2))
  assertTrue(not(ct2 == t2))

  t2:set(2,1)
  ct2:set(2,1)
  t2:set0(0)
  ct2:set0(0)
  assertTrue(not(0 == t2))
  assertTrue(not(t2 == 0))
  assertTrue(not(t2 == (0 + 0i)))
  assertTrue(not((0 + 0i) == t2))
  assertTrue(t2 == t2)
  assertTrue(not(0 == ct2))
  assertTrue(not(ct2 == 0))
  assertTrue(not(ct2 == (0 + 0i)))
  assertTrue(not((0 + 0i) == ct2))
  assertTrue(ct2 == ct2)
  assertTrue(t2 == ct2)
  assertTrue(ct2 == t2)
  assertTrue(not(t2 == t))
  assertTrue(not(ct == ct2))

  assertError(t3.__eq ,t3, t)
  assertError(t.__eq ,t, t3)
  assertError(ct3.__eq ,ct3, ct)
  assertError(ct.__eq ,ct, ct3)
  assertError(ct3.__eq ,ct3, t)
  assertError(t.__eq ,t, ct3)
  assertError(t3.__eq ,t3, ct)
  assertError(ct.__eq ,ct, t3)
end


function TestLogicOper:testEqMultiVar()
  local x = 1
  local y = 1 + 1i

  local mo  = 15
  local nv = 2
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  local d2 = gtpsad(nv,mo+1)
  local t3 = tpsa(d2)
  local ct3 = ctpsa(d2)  

  assertTrue(0 == t)
  assertTrue(t == 0)
  assertTrue(t == (0 + 0i))
  assertTrue((0 + 0i) == t)
  assertTrue(t == t)
  assertTrue(0 == ct)
  assertTrue(ct == 0)
  assertTrue(ct == (0 + 0i))
  assertTrue((0 + 0i) == ct)
  assertTrue(ct == ct)
  assertTrue(t == ct)
  assertTrue(ct == t)
  assertTrue(t == t2)
  assertTrue(ct == ct2)
  
  --apparently protected. forced to use the set method
  --t2.coef[0] = 1
  --ct2.coef[0] = 1 +1i

  t2:set0(1)
  ct2:set0(1 +1i)

  assertTrue(not (t == x))
  assertTrue(not (x == t))
  assertTrue(not (t == y))
  assertTrue(not (y == t))
  assertTrue(not (t2 == t))
  assertTrue(not (t == t2))
  assertTrue(not (ct == x))
  assertTrue(not (x == ct))
  assertTrue(not (ct == y))
  assertTrue(not (y == ct))
  assertTrue(not (ct2 == ct))
  assertTrue(not (ct == ct2))
  assertTrue(not(ct2 == t2))

  t2:set(2,1)
  ct2:set(2,1)
  t2:set0(0)
  ct2:set0(0)
  assertTrue(not(0 == t2))
  assertTrue(not(t2 == 0))
  assertTrue(not(t2 == (0 + 0i)))
  assertTrue(not((0 + 0i) == t2))
  assertTrue(t2 == t2)
  assertTrue(not(0 == ct2))
  assertTrue(not(ct2 == 0))
  assertTrue(not(ct2 == (0 + 0i)))
  assertTrue(not((0 + 0i) == ct2))
  assertTrue(ct2 == ct2)
  assertTrue(t2 == ct2)
  assertTrue(ct2 == t2)
  assertTrue(not(t2 == t))
  assertTrue(not(ct == ct2))

  assertError(t3.__eq ,t3, t)
  assertError(t.__eq ,t, t3)
  assertError(ct3.__eq ,ct3, ct)
  assertError(ct.__eq ,ct, ct3)
  assertError(ct3.__eq ,ct3, t)
  assertError(t.__eq ,t, ct3)
  assertError(t3.__eq ,t3, ct)
  assertError(ct.__eq ,ct, t3)
end


function TestLogicOper:testDiffSingVar()

  
end


function TestLogicOper:testDiffMultiVar()
  local mo  = 15
  local nv = 2
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  --to be finished
end



function TestLogicOper:testLessSingVar()
  local x = 1
  local y = 1 + 1i

  local mo  = 15
  local nv = 1
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local t2 = tpsa(d)

  local d2 = gtpsad(nv,mo+1)
  local t3 = tpsa(d2)

  assertTrue(not(1<t))
  assertTrue(t<1)
  assertTrue(not(1<=t))
  assertTrue(t<=1)
  assertTrue(not(t<t2))
  assertTrue(t<=t2)

  t2:set(1,1)
  assertTrue(not(t2<t))
  assertTrue(t<t2)
  
  assertError(t3.__lt ,t3, t)
  assertError(t.__lt ,t, t3)
  assertError(t3.__le ,t3, t)
  assertError(t.__le ,t, t3)

end


function TestLogicOper:testLessMultiVar()

  local x = 1
  local y = 1 + 1i

  local mo  = 15
  local nv = 2
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local t2 = tpsa(d)

  local d2 = gtpsad(nv,mo+1)
  local t3 = tpsa(d2)

  assertTrue(not(1<t))
  assertTrue(t<1)
  assertTrue(not(1<=t))
  assertTrue(t<=1)
  assertTrue(not(t<t2))
  assertTrue(t<=t2)

  t2:set(1,1)
  assertTrue(not(t2<t))
  assertTrue(t<t2)
  
  
  assertError(t3.__lt ,t3, t)
  assertError(t.__lt ,t, t3)
  assertError(t3.__le ,t3, t)
  assertError(t.__le ,t, t3)

end


function TestCloning:testCopy()

  local mo  = 15
  local nv = 2
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local t2 = tpsa(d)
  local ct = ctpsa(d)
  local ct2 = ctpsa(d)

  t:set(1,1)
  t:set(3,1)
  t:set(5,1)

  ct:set(1,1)
  ct:set(3,1)
  ct:set(5,1)
  
 
  t:copy(t2)
  ct:copy(ct2)

  assertTrue(t==t2)
  assertTrue(ct==ct2)

  t:set(1,0)
  ct:set(1,0)
  
  t2 = t:copy()
  ct2 = ct:copy()
  assertTrue(t==t2)
  assertTrue(ct==ct2)

  --same check for 1 variable
  local mo  = 15
  local nv = 1
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local t2 = tpsa(d)
  local ct = ctpsa(d)
  local ct2 = ctpsa(d)

  t:set(1,1)
  t:set(3,1)
  t:set(5,1)

  ct:set(1,1)
  ct:set(3,1)
  ct:set(5,1)
  
 
  t:copy(t2)
  ct:copy(ct2)
  assertTrue(t==t2)
  assertTrue(ct==ct2)

  t:set(1,0)
  ct:set(1,0)
  
  t2 = t:copy()
  ct2 = ct:copy()
  assertTrue(t==t2)
  assertTrue(ct==ct2)

end

function TestCloning:testSame()

  local mo  = 15
  local nv = 2
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local t2, ct2, t3, ct3, t4, ct4, t5, ct5
  local ct = ctpsa(d)
  

  --print bug test parameter

  t2 = t:same(nil,10)
  ct2 = ct:same()

  assertTrue(is_tpsa(t2))
  assertTrue(is_ctpsa(ct2))
  assertEquals(t2.mo, 10)

  for o=1, #t - 1 do
  assertTrue(is_x(t2.coef[0]))
  assertTrue(is_y(ct2.coef[0]))
  end

  t3 = t:same(1)
  ct3 = ct:same(1)
  assertTrue(is_tpsa(t3))
  assertTrue(is_tpsa(ct3))
  for o=1, #t - 1 do
  assertTrue(is_x(t3.coef[0]))
  assertTrue(is_x(ct3.coef[0]))
  end

  t4 = t:same(1 + 1i)
  ct4 = ct:same(1 + 1i)
  assertTrue(is_ctpsa(t4))
  assertTrue(is_ctpsa(ct4))
  for o=1, #t - 1 do
  assertTrue(is_y(t4.coef[0]))
  assertTrue(is_y(ct4.coef[0]))
  end

  t5 = t:same(nil, 1)
  ct5 = ct:same(nil, 1)
  assertTrue(is_tpsa(t5))
  assertTrue(is_ctpsa(ct5))
  assertEquals(t5.mo,1)
  assertEquals(ct5.mo,1)
  

  --same check for 1 variable
  local mo  = 15
  local nv = 1
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2, ct2, t3, ct3, t4, ct4, t5, ct5

  t2 = t:same()
  ct2 = ct:same()
  assertTrue(is_tpsa(t2))
  assertTrue(is_ctpsa(ct2))

  for o=1, #t - 1 do
  assertTrue(is_x(t2.coef[0]))
  assertTrue(is_y(ct2.coef[0]))
  end

  t3 = t:same(1)
  ct3 = ct:same(1)
  assertTrue(is_tpsa(t3))
  assertTrue(is_tpsa(ct3))
  for o=1, #t - 1 do
  assertTrue(is_x(t3.coef[0]))
  assertTrue(is_x(ct3.coef[0]))
  end

  t4 = t:same(1 + 1i)
  ct4 = ct:same(1 + 1i)
  assertTrue(is_ctpsa(t4))
  assertTrue(is_ctpsa(ct4))
  for o=1, #t - 1 do
  assertTrue(is_y(t4.coef[0]))
  assertTrue(is_y(ct4.coef[0]))
  end

  t5 = t:same(nil, 1)
  ct5 = ct:same(nil, 1)
  assertTrue(is_tpsa(t5))
  assertTrue(is_ctpsa(ct5))
  assertEquals(t5.mo,1)
  assertEquals(ct5.mo,1)
  

end


function TestUnaryMinus:testminus()

  local mo  = 15
  local nv = 2
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local t2 = tpsa(d)
  local ct = ctpsa(d)
  local ct2 = ctpsa(d)


  t:set(1,1)
  t:set(3,1)
  t:set(5,1)

  t2:set(1,-1)
  t2:set(3,-1)
  t2:set(5,-1)

  
  ct:set(1,1 + 1i)
  ct:set(3,1 + 1i)
  ct:set(5,1 + 1i)

  ct2:set(1,-1 - 1i)
  ct2:set(3,-1 - 1i)
  ct2:set(5,-1 - 1i)
  
  --cannot do something like this (-t2):print() ('struct tpsa_' is not callable)

  assertTrue(t == -t2)
  assertTrue(ct2 == -ct)

  --same check for one variable
  local mo  = 15
  local nv = 1
  local d = gtpsad(nv, mo)
  local t = tpsa(d)
  local t2 = tpsa(d)
  local ct = ctpsa(d)
  local ct2 = ctpsa(d)


  t:set(1,1)
  t:set(3,1)
  t:set(5,1)

  t2:set(1,-1)
  t2:set(3,-1)
  t2:set(5,-1)

  
  ct:set(1,1 + 1i)
  ct:set(3,1 + 1i)
  ct:set(5,1 + 1i)

  ct2:set(1,-1 - 1i)
  ct2:set(3,-1 - 1i)
  ct2:set(5,-1 - 1i)


  assertTrue(t == -t2)
  assertTrue(ct2 == -ct)

end


function TestArithmetic:testaddition()

  local x = 1
  local y = 1 + 1i

  local mo  = 15
  local nv = 1
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)
  local temp1, temp2

  t.set(2,2)
  t2.set(-2,1)
  ct.set(2 + 2i,1)
  ct2.set(-2 + 2i,1)
  
  assertEquals((t + x).coef[0], 3)

  
end

function TestArithmetic:testsubtraction()

end

function TestArithmetic:testmultiplication()

end

function TestArithmetic:testdivision()

end

function TestArithmetic:testpow()

end


function TestProm:testPromotion()

  --to be changed and moved after the tests for the arithmetics
  local x = 1
  local y = 1 + 1i

  local mo  = 15
  local nv = 1
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  --ask why matrix in the documentation
  
  assertTrue(is_tpsa(x + t))
  assertTrue(is_tpsa(t + x))
  assertTrue(is_tpsa(t + t2))
  assertTrue(is_ctpsa(x + ct))
  assertTrue(is_ctpsa(y + t))
  assertTrue(is_ctpsa(y + ct))
  assertTrue(is_ctpsa(t + ct))
  assertTrue(is_ctpsa(ct + x))
  assertTrue(is_ctpsa(ct + y))
  assertTrue(is_ctpsa(ct + t))
  assertTrue(is_ctpsa(ct + ct2))

  assertTrue(is_tpsa(x - t))
  assertTrue(is_tpsa(t - x))
  assertTrue(is_tpsa(t - t2))
  assertTrue(is_ctpsa(x - ct))
  assertTrue(is_ctpsa(y - t))
  assertTrue(is_ctpsa(x - ct))
  assertTrue(is_ctpsa(t - ct))
  assertTrue(is_ctpsa(ct - x))
  assertTrue(is_ctpsa(ct - y))
  assertTrue(is_ctpsa(ct - t))
  assertTrue(is_ctpsa(ct - ct2))

  assertTrue(is_tpsa(x * t))
  assertTrue(is_tpsa(t * x))
  assertTrue(is_tpsa(t * t2))
  assertTrue(is_ctpsa(x * ct))
  assertTrue(is_ctpsa(y * t))
  assertTrue(is_ctpsa(x * ct))
  assertTrue(is_ctpsa(t * ct))
  assertTrue(is_ctpsa(ct * x))
  assertTrue(is_ctpsa(ct * y))
  assertTrue(is_ctpsa(ct * t))
  assertTrue(is_ctpsa(ct * ct2))

  t:set0(2)
  ct:set0(2 + 2i)
  t2:set0(2)
  ct2:set0(2 + 2i)
  
  assertTrue(is_tpsa(x / t))
  assertTrue(is_tpsa(t / x))
  assertTrue(is_tpsa(t / t2))
  assertTrue(is_ctpsa(x / ct))
  assertTrue(is_ctpsa(y / t))
  assertTrue(is_ctpsa(x / ct))
  assertTrue(is_ctpsa(t / ct))
  assertTrue(is_ctpsa(ct / x))
  assertTrue(is_ctpsa(ct / y))
  assertTrue(is_ctpsa(ct / t))
  assertTrue(is_ctpsa(ct / ct2))

  local x  = 3
  local y  = 3 + 3i

  assertTrue(is_tpsa(x ^ t))
  assertTrue(is_tpsa(t ^ x))
  assertTrue(is_tpsa(t ^ t2))
  assertTrue(is_ctpsa(x ^ ct))
  assertTrue(is_ctpsa(y ^ t))
  assertTrue(is_ctpsa(x ^ ct))
  assertTrue(is_ctpsa(t ^ ct))
  assertTrue(is_ctpsa(ct ^ x))
  assertTrue(is_ctpsa(ct ^ y))
  assertTrue(is_ctpsa(ct ^ t))
  assertTrue(is_ctpsa(ct ^ ct2))

  local x  = -3
  local y  = -3 - 3i

  assertTrue(is_tpsa(x ^ t))
  assertTrue(is_tpsa(t ^ x))
  assertTrue(is_ctpsa(x ^ ct))
  assertTrue(is_ctpsa(y ^ t))
  assertTrue(is_ctpsa(x ^ ct))
  assertTrue(is_ctpsa(ct ^ x))
  assertTrue(is_ctpsa(ct ^ y))

    local x = 1
  local y = 1 + 1i

  local mo  = 15
  local nv = 2
  local np = 3
  local po = 2
  local d = gtpsad(nv, mo, np, po)
  local t = tpsa(d)
  local ct = ctpsa(d)
  local t2 = tpsa(d)
  local ct2 = ctpsa(d)

  --ask why matrix in the documentation
  
  assertTrue(is_tpsa(x + t))
  assertTrue(is_tpsa(t + x))
  assertTrue(is_tpsa(t + t2))
  assertTrue(is_ctpsa(x + ct))
  assertTrue(is_ctpsa(y + t))
  assertTrue(is_ctpsa(y + ct))
  assertTrue(is_ctpsa(t + ct))
  assertTrue(is_ctpsa(ct + x))
  assertTrue(is_ctpsa(ct + y))
  assertTrue(is_ctpsa(ct + t))
  assertTrue(is_ctpsa(ct + ct2))

  assertTrue(is_tpsa(x - t))
  assertTrue(is_tpsa(t - x))
  assertTrue(is_tpsa(t - t2))
  assertTrue(is_ctpsa(x - ct))
  assertTrue(is_ctpsa(y - t))
  assertTrue(is_ctpsa(x - ct))
  assertTrue(is_ctpsa(t - ct))
  assertTrue(is_ctpsa(ct - x))
  assertTrue(is_ctpsa(ct - y))
  assertTrue(is_ctpsa(ct - t))
  assertTrue(is_ctpsa(ct - ct2))

  assertTrue(is_tpsa(x * t))
  assertTrue(is_tpsa(t * x))
  assertTrue(is_tpsa(t * t2))
  assertTrue(is_ctpsa(x * ct))
  assertTrue(is_ctpsa(y * t))
  assertTrue(is_ctpsa(x * ct))
  assertTrue(is_ctpsa(t * ct))
  assertTrue(is_ctpsa(ct * x))
  assertTrue(is_ctpsa(ct * y))
  assertTrue(is_ctpsa(ct * t))
  assertTrue(is_ctpsa(ct * ct2))

  t:set0(2)
  ct:set0(2 + 2i)
  t2:set0(2)
  ct2:set0(2 + 2i)
  
  assertTrue(is_tpsa(x / t))
  assertTrue(is_tpsa(t / x))
  assertTrue(is_tpsa(t / t2))
  assertTrue(is_ctpsa(x / ct))
  assertTrue(is_ctpsa(y / t))
  assertTrue(is_ctpsa(x / ct))
  assertTrue(is_ctpsa(t / ct))
  assertTrue(is_ctpsa(ct / x))
  assertTrue(is_ctpsa(ct / y))
  assertTrue(is_ctpsa(ct / t))
  assertTrue(is_ctpsa(ct / ct2))

  local x  = 3
  local y  = 3 + 3i

  assertTrue(is_tpsa(x ^ t))
  assertTrue(is_tpsa(t ^ x))
  assertTrue(is_tpsa(t ^ t2))
  assertTrue(is_ctpsa(x ^ ct))
  assertTrue(is_ctpsa(y ^ t))
  assertTrue(is_ctpsa(x ^ ct))
  assertTrue(is_ctpsa(t ^ ct))
  assertTrue(is_ctpsa(ct ^ x))
  assertTrue(is_ctpsa(ct ^ y))
  assertTrue(is_ctpsa(ct ^ t))
  assertTrue(is_ctpsa(ct ^ ct2))

  local x  = -3
  local y  = -3 - 3i

  assertTrue(is_tpsa(x ^ t))
  assertTrue(is_tpsa(t ^ x))
  assertTrue(is_ctpsa(x ^ ct))
  assertTrue(is_ctpsa(y ^ t))
  assertTrue(is_ctpsa(x ^ ct))
  assertTrue(is_ctpsa(ct ^ x))
  assertTrue(is_ctpsa(ct ^ y))

end