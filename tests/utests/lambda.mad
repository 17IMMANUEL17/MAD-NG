local lu = require 'luaunit'
local G   = require 'madl_gmath'
local eps, huge, I, inf, Inf, nan, NaN, pi, Pi, tiny, twopi in G

--local C  = require 'complex'

local isEqu    = lu.assertEquals
local isTrue   = lu.assertTrue
local isFalse  = lu.assertFalse
local isEquEps = lu.assertAlmostEquals
local isTable  = lu.assertIsTable
local isNil    = lu.assertIsNil
local isErrMsgEq = lu.assertErrorMsgEquals

TestLambda = {}

--function TestLambda:setUp()    end
--function TestLambda:tearDown() end

function TestLambda:testSyntax()
  local f =function (x) return x*x end
  local f1=\(x) (x*x)
  local f2=\(x)  x*x
  local f3=\x   (x*x)

  local f4=\x    x*x

  local f5=\(x) -> (x*x)
  local f6=\(x) ->  x*x
  local f7=\x   -> (x*x)
  local f8=\x   ->  x*x

  local f9=\x    => return x*x end
  local f10=\(x) => return x*x end

  isEqu( f(2)   , f1(2)     )
  isEqu( f(-2)  , f2(-2)    )
  isEqu( f(2.1) , f3(2.1)   )
  isEqu( f(-1.2), f4(-1.2)  )
  isEqu( f(-1)  , f5(-1)    )
  isEqu( f(7.2) , f6(7.2)   )
  isEqu( f(-1.7), f7(-1.7)  )
  isEqu( f(7.2) , f8(7.2)   )
  isEqu( f(0.1 ), f9(0.1)   )
  isEqu( f(-1.2), f10(-1.2) )
end

function TestLambda:testIdentity()
  local f =function (...) return ... end
  local f1=\(...) (...)                   
  local f2=\(...) -> (...)

  isTrue( f1(4)  == f1(4)  )
  isTrue( f1(4)  == 4      )
  isTrue( f1(-2) == f1(-2) )
  isTrue( f1(-2) ==-2      )
  isTrue( f2(7)  == f1(7)  )
  isTrue( f2(7)  == 7      )
  isTrue( f2(-1) == f1(-1) )
  isTrue( f2(-1) ==-1      )
end

function TestLambda:testPack()          
  local f =function (...) return {...} end
  local f1=\(...) {...}                 
  isTrue( f1( 4)[1] == f1( 4)[1] )
  isTrue( f1(-2)[1] == f1(-2)[1] )
  isTrue( f1( 4)[1] ==  4        )
  isTrue( f1(-2)[1] == -2        )
  isNil ( f1(-2)[2] )
  isNil ( f1( 4)[3] )

  local f1=\(...) {... , 1}             
  isTrue( f1(-2)[1] == -2 )
  isTrue( f1(-2)[2] ==  1 )
  isNil ( f1(-2)[3]       )
end

function TestLambda:testLambda() -- name?
  local f =function (x) return function (y) return x*y, -x*y end end
  local f1=\x\y (x*y,-x*y)
  local a,b = f1(-3)(-2)
  isTrue( f(3)(2) == f1(3)(2) )
  isEqu ( a,  6 )
  isEqu ( b, -6 )

  local f =function (x) return function (y) return function(z) return x+y+z, x^2*(-y)+z end end end
  local f1=\x\y\z (x+y+z, x^2*(-y)+z)
  local a,b = f1(-3)(-2)(-1)
  isTrue( f(3)(2)(3) == f1(3)(2)(3) )
  isEqu ( a, -6  )
  isEqu ( b,  17 )
end

function TestLambda:testArg()
  local f =function (x,y) return x+y,-x*y end 
  local f1=\x,y (x+y,-x*y)
  local a,b = f1(-3,-2)
  isEqu ( a, -5 )
  isEqu ( b, -6 )
  isTrue( f(3,2) == f1(3,2) )
  isTrue( f(-2.2,0.1) == f1(-2.2,0.1) )

  local f =function (x,y,z) return x+y*z,(x+y)*z end 
  local f1=\x,y,z (x+y*z,(x+y)*z)
  local a, b = f1(-3,-2,-1)
  isEqu ( a, -1 )
  isEqu ( b,  5 )
  isTrue( f(3,2,1) == f1(3,2,1) )
  isTrue( f(-2.2,0.1,-2) == f1(-2.2,0.1,-2) )
  
  local f =function (x,y,z) return x+y*z, (x+y)*z, x, y end 
  local f1=\x,y,z (x+y*z, (x+y)*z, x, y)
  local a, b, c, d = f1(-3,-2,-1)
  isEqu ( a, -1 )
  isEqu ( b,  5 )
  isEqu ( c, -3 )
  isEqu ( d, -2 )
  isTrue( f(3,2,1) == f1(3,2,1) )
  isTrue( f(-2.2,0.1,-2) == f1(-2.2,0.1,-2) )
end

--[[function TestLambda:testComplex()
  local f =function (x,y) return C(x,-y) end  
  local f1=\x,y C(x,-y)
  isTrue( f(3,2)    == f1(3,2)    )
  isTrue( f(1.2,-2) == f1(1.2,-2) )
  isTrue( f(-22,-1) == f1(-22,-1) )
  
  local f =function (x,y) return C(x,-y),C(-x,y) end  
  local f1=\x,y (C(x,-y),C(-x,y))
  isTrue( f(3,2)    == f1(3,2) )
  isTrue( f(1.2,-2) == f1(1.2,-2) )
  isTrue( f(-22,-1) == f1(-22,-1) )
end]]

function TestLambda:testTables()
  local f =function (x) return {x+1, x+2, x+3}  end  
  local f1=\x {x+1, x+2, x+3}
  
  for i=1, 3 do
    isEqu( f1(1)[i]  , f(1)[i]   )
    isEqu( f1(1.2)[i], f(1.2)[i] )
    isEqu( f1(-7)[i] , f(-7)[i]  )
  end

  local a  = { f=function (s,y) return s.x*y end, x=3 } 
  local a1 = { f=\s,y s.x*y, x=3 }
  isEqu( a:f(-2) , a1:f(-2)  )
  isEqu( a1:f(2) , 6         )
  a.x, a1.x = 5  , 5
  isEqu( a:f(2.2), a1:f(2.2) )
  isEqu( a1:f(-3), -15       )

  local a  = { f=function (x,y) return x+y end, 3 } 
  local a1 = { f=\x,y x+y, 3 }
  isEqu( a.f(-2,1.1), a1.f(-2,1.1) )
  isEqu( a1.f(2,3) , 5 )
  isEqu( a1[1] , 3 )
  
  local d = {}
  local t = {}
  for i=1, 10 do t[i]=i end
  for i = 1, #t do
    if i  < #t/2+1 then
      f=function (x) return x+1 end
      f1=\x x+1
    else 
      f=function (x) return x^2 end
      f1=\x x^2
    end
    d[i] = 
    f1(t[i])     
    t[i] = f(t[i])
    isEqu( d[i], t[i] ) 
  end  
end

function TestLambda:testInside()
  local g =\x,y x+y+3
  local h =\x,y x^2-y^2
  local f =\x,y g(x,y)-h(x,y)
  isEquEps( f(1.1,0) ,  2.89 , eps )  
  isEquEps( f(-2,3.2),  10.44, eps ) 
  isEqu( f(1,2)   ,  9 ) 
  isEqu( g(1,2)   ,  6 ) 
  isEqu( h(1,2)   , -3 ) 
end

function TestLambda:testFreeVar()
  local f =function () return -x end  
  local f1=\ -x  
  x=10                    
  isTrue( f1() == f() )
  x=-2.2
  isEqu ( f1(), 2.2 )
  local x = 2 
  isFalse( f1()== -2 )
  local f1=\ -x+y         
  y=1
  isEqu( f1(), -1 )

  local g=\ x -x
  local g1=\x -x
  isFalse( g(1) == g1(1) )
  isEqu  ( g(1), 0       )
end

function TestLambda:testEnd() 
  local f,v=\x,y (x+y,x-y), 3 
  local a,b,c = f(1,2)
  isEqu( a,  3 )
  isEqu( b, -1 )
  isEqu( v,  3 )
  isNil( c )

  local f,s=\x,y (x+y,x-y), "3"
  local a,b,c = f(1,2)
  isEqu( a,  3  )
  isEqu( b, -1  )
  isEqu( s, "3" )
  isNil( c )

  local f,v=\x,y (x+y,x-y), x
  local a,b,c = f(1,2)
  isEqu( a,  3 )
  isEqu( b, -1 )
  isEqu( v,  x )
  isNil( c )  

  local f,v=\x,y x+y, x
  local a,b = f(1,2)
  isEqu( a, 3 )
  isEqu( v, x )
  isNil( b ) 

  local f,v=\x,y x+y, 3
  local a,b = f(1,2)
  isEqu( a, 3 )
  isEqu( v, 3 )
  isNil( b )

  local f,s=\x,y x+y, "4"
  local a,b = f(1,2)
  isEqu( a,  3  )
  isEqu( s, "4" )
  isNil( b ) 

--  ErrorMesseges = " "
--  local f=\x,y (x+y) 4          
--  local f=\x,y x+y, x+2         --attempt to perform arithmetic on global 'x' (a nil value)
--  local f=\x,y (x+y,x-y), x+2
--  local f=\x,y (x+y,x-y) x
--  local f=\x,y (x+y,x-y) 3      --tests/lambda.lua:189: unexpected symbol near 'x'
--  local f=\x,y (x+y,x-y) "ss"
end

function TestLambda:testPeform()
  sm, gm = setmetatable, getmetatable
  id=\(...) (...)
  cat=\f,g \(...) f(g(...))
  _ = sm({id}, { __pow  = \f,g sm({cat(f,g[1])}, gm(g)),
                 __call = \g,... g[1](...) })
  local f=\x,y (x+y,x-y)
  local g=\x,y x*y
  local h=\x,y x^2-y^2
  local gf = g^f^_
  local p=\x,y gf(x,y) - h(x,y)
  for i=1,1e8 do p(i,i+1) end
end

--os.exit( lu.LuaUnit.run() )
 lu.LuaUnit.run() 