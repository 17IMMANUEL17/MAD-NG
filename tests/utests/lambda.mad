--[=[
 o-----------------------------------------------------------------------------o
 |
 | Lambda syntax extension regression tests
 |
 | Methodical Accelerator Design - Copyright CERN 2015+
 | Support: http://cern.ch/mad  - mad at cern.ch
 | Authors: L. Deniau, laurent.deniau at cern.ch
 | Contrib: -
 |
 o-----------------------------------------------------------------------------o
 | You can redistribute this file and/or modify it under the terms of the GNU
 | General Public License GPLv3 (or later), as published by the Free Software
 | Foundation. This file is distributed in the hope that it will be useful, but
 | WITHOUT ANY WARRANTY OF ANY KIND. See http://gnu.org/licenses for details.
 o-----------------------------------------------------------------------------o

  Purpose:
  - Provide regression test suites for lambda syntax extension, lambda direct
    call and deferred expressions in table constuctor.

 o-----------------------------------------------------------------------------o
]=]

-- locals ---------------------------------------------------------------------o

local assertNil, assertTrue, assertFalse, assertEquals, assertStrContains
      in require 'luaunit'

local max, min in math

-- regression test suite ------------------------------------------------------o

TestLambda = {}

-- no expression --

function TestLambda:testNoExpr()
  local f = function () return end
  do
    local f0 = \;
    local f1 = \ ()
    local f2 = \();
    local f3 = \()()
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
  end
  do
    local f0,f1 = \ (),\()()
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
  end
  do -- expected syntax error
    local res, err = load "local f0,f1 = \\, \\()"
    assertNil( res )
    assertStrContains( err, "unexpected symbol near ','")
  end
end

function TestLambda:testNoExprArrow()
  local f = function () return end
  do
    local f0 = \->;
    local f1 = \->()
    local f2 = \()->;
    local f3 = \()->()
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
  end
  do
    local f0,f1 = \->(),\()->()
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
  end
  do
    local f0,f1 = \ -> (),\() -> ()
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
  end
end

function TestLambda:testNoExprFatArrow()
  local f = function () return end
  do
    local f0 = \=>return end
    local f1 = \()=>return end
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
  end
  do
    local f0,f1 = \=>return end,\()=>return end
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
  end
  do
    local f0,f1 = \ => return end, \() => return end
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
  end
end

function TestLambda:testNoExprParent()
  local id = function () return end
  local f = function () return id() end
  do
    local f0 = \ (id())
    local f1 = \()(id())
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
  end
  do
    local f0,f1 = \ (id()),\()(id())
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
  end
  do -- expected syntax error
    local res, err = load "\\ (())"
    assertNil( res )
    assertStrContains( err, "unexpected symbol near '\\'")
  end
end

function TestLambda:testNoExprTable()
  local f = { function () return end, 3 }
  do
    local f0 = {\ (),3}
    local f1 = {\()(),3}
    assertEquals( f0[1](-3), f[1](-3) )
    assertEquals( f1[1](-3), f[1](-3) )
  end
end

function TestLambda:testNoExprCall()
  local id = function (a) return a end
  local f = id(function () return end, 3)
  do
    local f0 = id(\ (),3)
    local f1 = id(\()(),3)
    assertEquals( {f0(-3)}, {f(-3)} )
    assertEquals( {f1(-3)}, {f(-3)} )
  end
end

-- single expression --

function TestLambda:testExpr()
  local f = function (x) return x*x end
  local x = -3
  do
    local f0 = \ x*x
    local f1 = \ (x*x)
    local f2 = \x x*x
    local f3 = \x(x*x)
    local f4 = \()x*x
    local f5 = \()(x*x)
    local f6 = \(x)x*x
    local f7 = \(x)(x*x)
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
  do
    local f0,f1,f2,f3,f4,f5,f6,f7 =
      \ x*x,\ (x*x),\x x*x,\x(x*x),\()x*x,\()(x*x),\(x)x*x,\(x)(x*x)
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
  do
    local f0,f1,f2,f3,f4,f5,f6,f7 =
      \  x*x, \  (x*x), \x x*x, \x (x*x), \() x*x, \() (x*x), \(x) x*x,
      \(x) (x*x)
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
end

function TestLambda:testExprArrow()
  local f = function (x) return x*x end
  local x = -3
  do
    local f0 = \->x*x
    local f1 = \->(x*x)
    local f2 = \x->x*x
    local f3 = \x->(x*x)
    local f4 = \()->x*x
    local f5 = \()->(x*x)
    local f6 = \(x)->x*x
    local f7 = \(x)->(x*x)
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
  do
    local f0,f1,f2,f3,f4,f5,f6,f7 = \->x*x,\->(x*x),\x->x*x,\x->(x*x),\()->x*x,
                                    \()->(x*x),\(x)->x*x,\(x)->(x*x)
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
  do
    local f0,f1,f2,f3,f4,f5,f6,f7 = \ -> x*x, \ -> (x*x), \x -> x*x,
                                    \x -> (x*x), \() -> x*x, \() -> (x*x),
                                    \(x) -> x*x, \(x) -> (x*x)
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
end

function TestLambda:testExprFatArrow()
  local f = function (x) return x*x end
  local x = -3
  do
    local f0 = \=>return x*x end
    local f1 = \=>return(x*x)end
    local f2 = \x=>return x*x end
    local f3 = \x=>return(x*x)end
    local f4 = \()=>return x*x end
    local f5 = \()=>return(x*x)end
    local f6 = \(x)=>return x*x end
    local f7 = \(x)=>return(x*x)end
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
  do
    local f0,f1,f2,f3,f4,f5,f6,f7 =
      \=>return x*x end, \=>return(x*x)end, \x=>return x*x end,
      \x=>return(x*x)end, \()=>return x*x end, \()=>return(x*x)end,
      \(x)=>return x*x end, \(x)=>return(x*x)end
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
  do
    local f0,f1,f2,f3,f4,f5,f6,f7 =
      \ => return x*x end, \ => return (x*x) end, \x => return x*x end,
      \x => return (x*x) end, \() => return x*x end, \() => return (x*x) end,
      \(x) => return x*x end, \(x) => return (x*x) end
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
  end
end

function TestLambda:testExprParent()
  local f = function (x) return 2*(x+x) end
  local x = -3
  do
    local f0 = \ 2*(x+x)
    local f1 = \ (2*(x+x))
    local f2 = \ ((x+x)*2)
    local f3 = \x 2*(x+x)
    local f4 = \x(2*(x+x))
    local f5 = \x((x+x)*2)
    local f6 = \()2*(x+x)
    local f7 = \()(2*(x+x))
    local f8 = \()((x+x)*2)
    local f9 = \(x)2*(x+x)
    local fA = \(x)(2*(x+x))
    local fB = \(x)((x+x)*2)
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
    assertEquals( f8(-3), f(-3) )
    assertEquals( f9(-3), f(-3) )
    assertEquals( fA(-3), f(-3) )
    assertEquals( fB(-3), f(-3) )
  end
  do
    local f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fA, fB =
      \ 2*(x+x), \ (2*(x+x)), \ ((x+x)*2), \x 2*(x+x), \x(2*(x+x)), \x((x+x)*2),
      \()2*(x+x), \()(2*(x+x)), \()((x+x)*2), \(x)2*(x+x), \(x)(2*(x+x)),
      \(x)((x+x)*2)
    assertEquals( f0(-3), f(-3) )
    assertEquals( f1(-3), f(-3) )
    assertEquals( f2(-3), f(-3) )
    assertEquals( f3(-3), f(-3) )
    assertEquals( f4(-3), f(-3) )
    assertEquals( f5(-3), f(-3) )
    assertEquals( f6(-3), f(-3) )
    assertEquals( f7(-3), f(-3) )
    assertEquals( f8(-3), f(-3) )
    assertEquals( f9(-3), f(-3) )
    assertEquals( fA(-3), f(-3) )
    assertEquals( fB(-3), f(-3) )
  end
  do -- expected syntax error
    local res, err = load "\\ (x+x)*2"
    assertNil( res )
    assertStrContains( err, "unexpected symbol near '\\'")
  end
end

function TestLambda:testExprTable()
  local f = { function (x) return x*x end, 3 }
  local x = -3
  do
    local f0 = {\ x*x,3}
    local f1 = {\ (x*x),3}
    local f2 = {\x x*x,3}
    local f3 = {\x(x*x),3}
    local f4 = {\()x*x,3}
    local f5 = {\()(x*x),3}
    local f6 = {\(x)x*x,3}
    local f7 = {\(x)(x*x),3}
    assertEquals( {f0[1](-3)}, {f[1](-3)} )
    assertEquals( {f1[1](-3)}, {f[1](-3)} )
    assertEquals( {f2[1](-3)}, {f[1](-3)} )
    assertEquals( {f3[1](-3)}, {f[1](-3)} )
    assertEquals( {f4[1](-3)}, {f[1](-3)} )
    assertEquals( {f5[1](-3)}, {f[1](-3)} )
    assertEquals( {f6[1](-3)}, {f[1](-3)} )
    assertEquals( {f7[1](-3)}, {f[1](-3)} )
  end
end

function TestLambda:testExprCall()
  local id = function (a) return a end
  local f = id(function (x) return x*x end, 3)
  local x = -3
  do
    local f0 = id(\ x*x,3)
    local f1 = id(\ (x*x),3)
    local f2 = id(\x x*x,3)
    local f3 = id(\x(x*x),3)
    local f4 = id(\()x*x,3)
    local f5 = id(\()(x*x),3)
    local f6 = id(\(x)x*x,3)
    local f7 = id(\(x)(x*x),3)
    assertEquals( {f0(-3)}, {f(-3)} )
    assertEquals( {f1(-3)}, {f(-3)} )
    assertEquals( {f2(-3)}, {f(-3)} )
    assertEquals( {f3(-3)}, {f(-3)} )
    assertEquals( {f4(-3)}, {f(-3)} )
    assertEquals( {f5(-3)}, {f(-3)} )
    assertEquals( {f6(-3)}, {f(-3)} )
    assertEquals( {f7(-3)}, {f(-3)} )
  end
end

-- multiple expressions --

function TestLambda:testMultiExpr()
  local f = function (x,y) return x+x,x-y end
  local x, y = 2, -3
  do
    local f0 = \ (x+x,x-y)
    local f1 = \()(x+x,x-y)
    local f2 = \x,y(x+x,x-y)
    local f3 = \(x,y)(x+x,x-y)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1,f2,f3 = \ (x+x,x-y),\()(x+x,x-y),\x,y(x+x,x-y),\(x,y)(x+x,x-y)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1,f2 = \() (x+x,x-y), \x , y (x+x,x-y), \( x , y ) (x+x,x-y)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
  end
end

function TestLambda:testMultiExprArrow()
  local f = function (x,y) return x+x,x-y end
  local x, y = 2, -3
  do
    local f0 = \->(x+x,x-y)
    local f1 = \x,y->(x+x,x-y)
    local f2 = \(x,y)->(x+x,x-y)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1,f2 = \->(x+x,x-y),\x,y->(x+x,x-y),\(x,y)->(x+x,x-y)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1,f2 = \ -> (x+x,x-y), \x , y -> (x+x,x-y),
                     \( x , y ) -> (x+x,x-y)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
  end
end

function TestLambda:testMultiExprFatArrow()
  local f = function (x,y) return x+x,x-y end
  local x, y = 2, -3
  do
    local f0 = \=>return x+x,x-y end
    local f1 = \x,y=>return x+x,x-y end
    local f2 = \(x,y)=>return x+x,x-y end
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1,f2 = \=>return x+x,x-y end,\x,y=>return x+x,x-y end,
                     \(x,y)=>return x+x,x-y end
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1,f2 = \ => return x+x,x-y end, \x , y =>return x+x,x-y end,
                     \( x , y ) => return x+x,x-y end
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
  end
end

function TestLambda:testMultiExprParent()
  local f = function (x,y) return (x+x)*2,2*(x-y) end
  local x, y = 2, -3
  do
    local f0 = \ ((x+x)*2,2*(x-y))
    local f1 = \()((x+x)*2,2*(x-y))
    local f2 = \x,y((x+x)*2,2*(x-y))
    local f3 = \(x,y)((x+x)*2,2*(x-y))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1,f2,f3 = \ ((x+x)*2,2*(x-y)), \()((x+x)*2,2*(x-y)),
                        \x,y((x+x)*2,2*(x-y)), \(x,y)((x+x)*2,2*(x-y))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
  end
end

-- variadic --

function TestLambda:testVariadicIdent()
  local f = function (...) return  ...  end
  local g = function (...) return (...) end
  do
    local f0 = \......
    local f1 = \...(...)
    local f2 = \...((...))
    local f3 = \(...)...
    local f4 = \(...)(...)
    local f5 = \(...)((...))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {g(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
    assertEquals( {f4(2,-3)}, {f(2,-3)} )
    assertEquals( {f5(2,-3)}, {g(2,-3)} )
  end
  do
    local f0,f1,f2,f3,f4,f5 = \......,\...(...),\...((...)),\(...)...,
                              \(...)(...),\(...)((...))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {g(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
    assertEquals( {f4(2,-3)}, {f(2,-3)} )
    assertEquals( {f5(2,-3)}, {g(2,-3)} )
  end
  do
    local f0,f1,f2,f3,f4,f5 = \... ..., \... (...), \... ( (...) ), \(...) ...,
                              \(...) (...), \(...) ( (...) )
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {g(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
    assertEquals( {f4(2,-3)}, {f(2,-3)} )
    assertEquals( {f5(2,-3)}, {g(2,-3)} )
  end
end

function TestLambda:testVariadicIdentArrow()
  local f = function (...) return  ...  end
  local g = function (...) return (...) end
  do
    local f0 = \...->...
    local f1 = \...->(...)
    local f2 = \...->((...))
    local f3 = \(...)->...
    local f4 = \(...)->(...)
    local f5 = \(...)->((...))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {g(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
    assertEquals( {f4(2,-3)}, {f(2,-3)} )
    assertEquals( {f5(2,-3)}, {g(2,-3)} )
  end
  do
    local f0,f1,f2,f3,f4,f5 = \...->...,\...->(...),\...->((...)),\(...)->...,
                              \(...)->(...),\(...)->((...))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {g(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
    assertEquals( {f4(2,-3)}, {f(2,-3)} )
    assertEquals( {f5(2,-3)}, {g(2,-3)} )
  end
  do
    local f0,f1,f2,f3,f4,f5 = \... -> ..., \... -> (...), \... -> ( (...) ),
                              \(...) -> ..., \(...) -> (...),
                              \(...) -> ( (...) )
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
    assertEquals( {f2(2,-3)}, {g(2,-3)} )
    assertEquals( {f3(2,-3)}, {f(2,-3)} )
    assertEquals( {f4(2,-3)}, {f(2,-3)} )
    assertEquals( {f5(2,-3)}, {g(2,-3)} )
  end
end

function TestLambda:testVariadicIdentFatArrow()
  local f = function (...) return  ...  end
  local g = function (...) return (...) end
  do
    local f0 = \...=>return...end
    local f1 = \...=>return(...)end
    local f2 = \(...)=>return...end
    local f3 = \(...)=>return(...)end
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {g(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
    assertEquals( {f3(2,-3)}, {g(2,-3)} )
  end
  do
    local f0,f1,f2,f3 = \...=>return...end,\...=>return(...)end,
                        \(...)=>return...end,\(...)=>return(...)end
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {g(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
    assertEquals( {f3(2,-3)}, {g(2,-3)} )
  end
  do
    local f0,f1,f2,f3 = \... => return ... end, \... => return (...) end,
                        \(...) => return ... end, \(...) => return (...) end
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {g(2,-3)} )
    assertEquals( {f2(2,-3)}, {f(2,-3)} )
    assertEquals( {f3(2,-3)}, {g(2,-3)} )
  end
end

function TestLambda:testVariadicParent()
  local f = function (...) return max(...)*2,2*min(...) end
  do
    local f0 = \... (max(...)*2,2*min(...))
    local f1 = \(...) (max(...)*2,2*min(...))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1 = \...(max(...)*2,2*min(...)),\(...)(max(...)*2,2*min(...))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
  end
end

function TestLambda:testVariadicTable()
  local f = function (...) return {...} end
  do
    local f0 = \...{...}
    local f1 = \...({...})
    local f2 = \(...){...}
    local f3 = \(...)({...})
    assertEquals( f0(2,-3), f(2,-3) )
    assertEquals( f1(2,-3), f(2,-3) )
    assertEquals( f2(2,-3), f(2,-3) )
    assertEquals( f3(2,-3), f(2,-3) )
  end
  do
    local f0,f1,f2,f3 = \...{...},\...({...}),\(...){...},\(...)({...})
    assertEquals( f0(2,-3), f(2,-3) )
    assertEquals( f1(2,-3), f(2,-3) )
    assertEquals( f2(2,-3), f(2,-3) )
    assertEquals( f3(2,-3), f(2,-3) )
  end
  do
    local f0,f1,f2,f3 = \... {...}, \... ({...}), \(...) {...}, \(...) ({...})
    assertEquals( f0(2,-3), f(2,-3) )
    assertEquals( f1(2,-3), f(2,-3) )
    assertEquals( f2(2,-3), f(2,-3) )
    assertEquals( f3(2,-3), f(2,-3) )
  end
end

function TestLambda:testVariadicFunc()
  local f = function (...) return max(...) end
  do
    local f0 = \...max(...)
    local f1 = \...(max(...))
    local f2 = \(...)max(...)
    local f3 = \(...)(max(...))
    assertEquals( f0(2,-3), f(2,-3) )
    assertEquals( f1(2,-3), f(2,-3) )
    assertEquals( f2(2,-3), f(2,-3) )
    assertEquals( f3(2,-3), f(2,-3) )
  end
  do
    local f0,f1,f2,f3 = \...max(...),\...(max(...)),
                        \(...)max(...),\(...)(max(...))
    assertEquals( f0(2,-3), f(2,-3) )
    assertEquals( f1(2,-3), f(2,-3) )
    assertEquals( f2(2,-3), f(2,-3) )
    assertEquals( f3(2,-3), f(2,-3) )
  end
  do
    local f0,f1,f2,f3 = \... max(...), \... (max(...)),
                        \(...) max(...), \(...) (max(...))
    assertEquals( f0(2,-3), f(2,-3) )
    assertEquals( f1(2,-3), f(2,-3) )
    assertEquals( f2(2,-3), f(2,-3) )
    assertEquals( f3(2,-3), f(2,-3) )
  end
end

-- mixed variadic --

function TestLambda:testMixedVariadicIdent()
  local f = function (a,...) return  ...,a end
  do
    local f0 = \a,...(...,a)
    local f1 = \(a,...)(...,a)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1 = \a,...(...,a),\(a,...)(...,a)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
  end
  do
    local f0,f1 = \a,... (...,a), \(a,...) (...,a)
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
  end
end

function TestLambda:testMixedVariadicParent()
  local f = function (a,...) return max(a,...)*2,2*min(a,...) end
  do
    local f0 = \a,...(max(a,...)*2,2*min(a,...))
    local f1 = \(a,...)(max(a,...)*2,2*min(a,...))
    assertEquals( {f0(2,-3)}, {f(2,-3)} )
    assertEquals( {f1(2,-3)}, {f(2,-3)} )
  end
end

function TestLambda:testMixedVariadicTable()
  local f = function (a,...) return {...,a} end
  do
    local f0 = \a,... {...,a}
    local f1 = \a,... ({...,a})
    local f2 = \(a,...) {...,a}
    local f3 = \(a,...) ({...,a})
    assertEquals( f0(2,-3), f(2,-3) )
    assertEquals( f1(2,-3), f(2,-3) )
    assertEquals( f2(2,-3), f(2,-3) )
    assertEquals( f3(2,-3), f(2,-3) )
  end
end

function TestLambda:testMixedVariadicFunc()
  local f = function (a,...) return max(a,...) end
  do
    local f0 = \a,... max(a,...)
    local f1 = \a,... (max(a,...))
    local f2 = \(a,...) max(a,...)
    local f3 = \(a,...) (max(a,...))
    assertEquals( f0(2,-3), f(2,-3) )
    assertEquals( f1(2,-3), f(2,-3) )
    assertEquals( f2(2,-3), f(2,-3) )
    assertEquals( f3(2,-3), f(2,-3) )
  end
end

-- closure --

function TestLambda:testClosure()
  local f = function (x) return function(y) return function (z)
              return x+y,x+z,y+z end end end
  local x,y,z = -1,-2,-3
  do
    local f0 = \\\ (x+y,x+z,y+z)
    local f1 = \x\\ (x+y,x+z,y+z)
    local f2 = \\y\ (x+y,x+z,y+z)
    local f3 = \\\z(x+y,x+z,y+z)
    local f4 = \x\y\z(x+y,x+z,y+z)
    assertEquals( f0(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f1(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f2(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f3(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f4(-1)(-2)(-3), f(-1)(-2)(-3) )
  end
end

function TestLambda:testClosureArrow()
  local f = function (x) return function(y) return function (z)
              return x+y,x+z,y+z end end end
  local x,y,z = -1,-2,-3
  do
    local f0 = \->\->\->(x+y,x+z,y+z)
    local f1 = \x->\->\->(x+y,x+z,y+z)
    local f2 = \->\y->\->(x+y,x+z,y+z)
    local f3 = \->\->\z->(x+y,x+z,y+z)
    local f4 = \x->\y->\z->(x+y,x+z,y+z)
    assertEquals( f0(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f1(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f2(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f3(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f4(-1)(-2)(-3), f(-1)(-2)(-3) )
  end
end

function TestLambda:testClosureFatArrow()
  local f = function (x) return function(y) return function (z)
              return x+y,x+z,y+z end end end
  local x,y,z = -1,-2,-3
  do
    local f0 = \=>return\=>return\=>return x+y,x+z,y+z end end end
    local f1 = \x=>return\=>return\=>return x+y,x+z,y+z end end end
    local f2 = \=>return\y=>return\=>return x+y,x+z,y+z end end end
    local f3 = \=>return\=>return\z=>return x+y,x+z,y+z end end end
    local f4 = \x=>return\y=>return\z=>return x+y,x+z,y+z end end end
    assertEquals( f0(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f1(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f2(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f3(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f4(-1)(-2)(-3), f(-1)(-2)(-3) )
  end
end

function TestLambda:testClosureParent()
  local f = function (x) return function(y) return function (z)
              return (x+y)*2,x+z,2*(y+z) end end end
  local x,y,z = -1,-2,-3
  do
    local f0 = \()\()\()((x+y)*2,x+z,2*(y+z))
    local f1 = \(x)\()\()((x+y)*2,x+z,2*(y+z))
    local f2 = \()\(y)\()((x+y)*2,x+z,2*(y+z))
    local f3 = \()\()\(z)((x+y)*2,x+z,2*(y+z))
    local f4 = \(x)\(y)\(z)((x+y)*2,x+z,2*(y+z))
    assertEquals( f0(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f1(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f2(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f3(-1)(-2)(-3), f(-1)(-2)(-3) )
    assertEquals( f4(-1)(-2)(-3), f(-1)(-2)(-3) )
  end
end

-- direct call --

function TestLambda:testDirectCall()
  local f = function (x,y) return x+y,x-y end
  local x,y = 2,-3
  local _ = function (f) return f(x,y) end
  do
    assertEquals( _\ (x+y,x-y)  , _(f) )
    assertEquals( _\x,y(x+y,x-y), _(f) )
  end
end

-- deferred expression --

function TestLambda:testDeferredExpr()
  local x,y = 2,-3
  local a = { f0:={x+y,x-y}, f1=\ (x+y,x-y), f2=\x,y(x+y,x-y),
              f3:=2*(x+y), f4=\ 2*(x+y), f5=\x,y 2*(x+y),
              f6:=(x+y)*2, f7=\ ((x+y)*2), f8:=\x,y 2*(x+y) }
  local _ = function (f) return f(x,y) end
  do
    assertEquals( a.f0()     , _\ {x+y,x-y} )
    assertEquals( a.f1()     , _\ (x+y,x-y) )
    assertEquals( a.f2(x,y)  , _\ (x+y,x-y) )
    assertEquals( a.f3()     , _\ 2*(x+y)   )
    assertEquals( a.f4()     , _\ 2*(x+y)   )
    assertEquals( a.f5(x,y)  , _\ 2*(x+y)   )
    assertEquals( a.f6()     , _\ 2*(x+y)   )
    assertEquals( a.f7()     , _\ 2*(x+y)   )
    assertEquals( a.f8()(x,y), _\ 2*(x+y)   )
  end
end

-- end ------------------------------------------------------------------------o

