local lu = require 'luaunit'
local R  = require 'range'
local XR = require 'xrange'
local V  = require 'vector'

local isEqu    = lu.assertEquals
local isTrue   = lu.assertTrue
local isFalse  = lu.assertFalse
local isEquEps = lu.assertAlmostEquals
local isStr    = lu.assertIsString
local isTable  = lu.assertIsTable
local isNil    = lu.assertIsNil
local isErrMsgEq = lu.assertErrorMsgEquals

local pi  = math.pi
local nan = 0.0/0.0
local inf = 1.0/0.0
local eps = 1e-16

TestXrange = {}

--function TestXrange:setUp()    end
--function TestXrange:tearDown() end

function TestXrange:testCtor() 
  --local a = 1..20..0
  --local b = XR(1,20,0)
  
  local a = 20..1
  local b = XR(20,1)
  isFalse( a[0] )
  isFalse( b[0] )

  local a = {1..20   , 1..20   , 1..20     , 1..20..0.5  , 5..1..-0.5  , 1..20..0.01    }
  local b = {1..20..1, XR(1,20), XR(1,20,1), XR(1,20,0.5), XR(5,1,-0.5), XR(1,20,0.01)  } 
  for i=1, #a do 
    local l = a[i]:size()
    local res = a[i]
    local ref = b[i]
    for j=1, l do isEqu( res[j], ref[j] ) end
  end
end

function TestXrange:testRange()
  local start, stop, step = XR(1,10,1):range() 
  isEqu( start , 1  )
  isEqu( stop  , 10 )
  isEqu( step  , 1  )

  local start, stop, step = XR(20.1,1,-0.1):range() 
  isEqu( start , 20.1 )
  isEqu( stop  , 1    )
  isEqu( step  ,-0.1  )

  local start, stop, step = (-1..2.2..-0.1):range() 
  isEqu( start ,-1   )
  isEqu( stop  , 2.2 )
  isEqu( step  ,-0.1 )  

  local start, stop, step = XR(-1,-20,1):range() 
  isEqu( start ,-1  )
  isEqu( stop  ,-20 )
  isEqu( step  , 1  )
end

function TestXrange:testSize()
  isTrue ( XR(1,20,1)     :size() == (2..40..2):size() ) 
  isEqu  ( XR(1,10,2)     :size() , 5   ) 
  isEqu  ( XR(-1.1,10,0.1):size() , 112 )
  isEqu  ( (10..-1..-1)   :size() , 12  )
  isEqu  ( (2..1..0.1)    :size() , 0   )
end

function TestXrange:testIs_range()
  isTrue( is_range(XR(1,20))  )
  isTrue( is_range(1..20)     )
  isTrue( is_range(20..0..-2) )
  --isFalse(is_range(20..0)    )
  --isFalse(is_range(1..20..0) )
end


os.exit( lu.LuaUnit.run() )