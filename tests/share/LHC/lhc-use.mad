-- trick to check if a file exists
local exists = \name -> os.rename(name, name) and true or false

local load = true

-- convert only if needed
if not exists("lhc_as-built_gen.mad") then
  if arg[1] == "mem" then -- in memory
    print("loader: madx to memory")
    MADX:load("lhc_as-built.seq")
    MADX:load("lhc_uvar.madx"   )
    MADX:load("opt_inj.madx"    )
    load = false
  else                    -- to file (default)
    print("loader: madx to mad files")
    MADX:load("lhc_as-built.seq", "lhc_as-built_gen.mad")
    MADX:load("lhc_uvar.madx"   , "lhc_uvar_gen.mad"    )
    MADX:load("opt_inj.madx"    , "opt_inj_gen.mad"     )
  end
end

if load == true then
  print("loader: mad files to memory")
  require 'lhc_as-built_gen'
  require 'lhc_uvar_gen'
  require 'opt_inj_gen'
end

local lhcb1, lhcb2 in MADX

print('#lhcb1=', #lhcb1)
print('#lhcb2=', #lhcb2)

--[[
print("lhcb2['unknown'].idx="       , lhcb2:index_of 'unkown')
print("lhcb2['BPMWB.4L1.B2'].idx="  , lhcb2:index_of 'BPMWB.4L1.B2')
print("lhcb2['BPMWB.4L1.B2'].s_pos=", lhcb2:spos_of 'BPMWB.4L1.B2')
print("lhcb2['IP1.L1'].s_pos="      , lhcb2:spos_of 'IP1.L1')
print("lhcb2.l="                    , lhcb2.l)
print("lhcb2.l-IP1.L1="             , lhcb2.l-lhcb2:spos_of 'IP1.L1')

local s_pos = lhcb1.s_pos

local drift, quadrupole, sequence in MAD.element
local dr = drift      'dr' { l=2 }
local qf = quadrupole 'qf' { l=1, k1 =  0.5 }
local qd = quadrupole 'qd' { l=1, k1 := -qf.k1 }
local seq = sequence  'fodo' { qf{},dr{},qd{},dr{} }

print(seq.dr[1].l)
dr.l = 3
print(seq.dr[1].l)
print(seq.dr[2].l)
seq.dr[1].l = 4
print(seq.dr[1].l)
print(seq.dr[2].l)


print(#seq)
print(s_pos:norm())
local a = 0
for i,e in ipairs(lhcb1) do
  local s = s_pos[i]
  local l = e.l or 0
  a = a + i
  -- s is position of element e at index i in lhcb1 sequence
end
print(a, #lhcb1 * (#lhcb1+1)/2)
]]